
AT_Slave.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c0 l    d  .text	00000000 .text
08016a78 l    d  .rodata	00000000 .rodata
08018ba8 l    d  .ARM	00000000 .ARM
08018bb0 l    d  .init_array	00000000 .init_array
08018bb8 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000b14 l    d  .bss	00000000 .bss
20002354 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccS2BH77.o
08008b14 l       .text	00000000 LoopCopyDataInit
08008b0c l       .text	00000000 CopyDataInit
08008b28 l       .text	00000000 LoopFillZerobss
08008b22 l       .text	00000000 FillZerobss
08008b3a l       .text	00000000 LoopForever
08008b54 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08016a5c l     O .text	00000000 __EH_FRAME_BEGIN__
080000c0 l     F .text	00000000 deregister_tm_clones
080000e4 l     F .text	00000000 register_tm_clones
0800010c l     F .text	00000000 __do_global_dtors_aux
20000b14 l       .bss	00000001 completed.6557
08018bb8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000138 l     F .text	00000000 frame_dummy
20000b18 l       .bss	00000018 object.6562
08018bb4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 syscalls.c
08000370 l     F .text	00000038 findslot
20000b40 l     O .bss	000000a0 openfiles
080003a8 l     F .text	0000001c checkerror.part.0
08000898 l     F .text	00000034 initialise_semihosting_exts
20000434 l     O .data	00000004 supports_ext_exit_extended
20000438 l     O .data	00000004 supports_ext_stdout_stderr
20000b30 l     O .bss	00000004 heap_end.6240
20000b34 l     O .bss	00000004 monitor_stdin
20000b38 l     O .bss	00000004 monitor_stderr
20000b3c l     O .bss	00000004 monitor_stdout
00000000 l    df *ABS*	00000000 _thumb1_case_sqi.o
00000000 l    df *ABS*	00000000 _thumb1_case_uqi.o
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 _thumb1_case_uhi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
08000bb8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
08000ccc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 findfp.c
08003148 l     F .text	00000004 __fp_lock
0800315c l     F .text	000000e8 __sinit.part.0
08003244 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen-stub.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
08003c90 l     F .text	00000154 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08016ba0 l     O .rodata	0000000c p05.6072
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08016e2c l     O .rodata	00000010 blanks.7290
08016e3c l     O .rodata	00000010 zeroes.7291
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08016fb0 l     O .rodata	00000010 blanks.7270
08016fc0 l     O .rodata	00000010 zeroes.7271
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08008aec l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 main.c
08008b58 l     F .text	00000018 LORA_ConfirmClass
08008b70 l     F .text	00000010 LORA_HasJoined
08008b80 l     F .text	00000018 LORA_TxNeeded
08008b98 l     F .text	00000010 LoraRxData
20000c14 l     O .bss	00000001 AppDataBuff.8715
200009bc l     O .data	00000008 AppData.8716
200009c4 l     O .data	00000020 LoRaMainCallbacks
200009e4 l     O .data	00000003 LoRaParamInit
00000000 l    df *ABS*	00000000 mlm32l0xx_it.c
00000000 l    df *ABS*	00000000 system_stm32l0xx.c
00000000 l    df *ABS*	00000000 mlm32l0xx_hw.c
20000c15 l     O .bss	00000001 AdcInitialized
20000c16 l     O .bss	00000001 McuInitialized
20000c18 l     O .bss	00000060 hadc
00000000 l    df *ABS*	00000000 at.c
080090d0 l     F .text	0000002c print_8_02x
080090fc l     F .text	0000004c print_16_02x
08009148 l     F .text	00000010 print_d
08009158 l     F .text	00000050 sscanf_16_hhx
080091a8 l     F .text	0000001c translate_status
20000c78 l     O .bss	00000040 AppDataBuff
20000cb8 l     O .bss	000000ff ReceivedData
20000db7 l     O .bss	00000001 ReceivedDataPort
20000db8 l     O .bss	00000004 ReceivedDataSize
200009ec l     O .data	00000008 AppData
00000000 l    df *ABS*	00000000 command.c
0800a158 l     F .text	00000020 CMD_GetChar
20000dbc l     O .bss	00000001 IsCharReceived
20000dbd l     O .bss	00000080 command
20000e40 l     O .bss	00000004 i
08017358 l     O .rodata	00000420 ATCommand
08017778 l     O .rodata	00000020 ATError_description
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 hw_gpio.c
0800a2e4 l     F .text	0000003c HW_GPIO_GetBitPos
20000e44 l     O .bss	00000040 GpioIrq
00000000 l    df *ABS*	00000000 hw_rtc.c
0800a410 l     F .text	000000a8 HW_RTC_GetCalendarValue
20000e84 l     O .bss	00000001 HW_RTC_Initalized
20000e86 l     O .bss	00000002 McuWakeUpTimeCal
20000e88 l     O .bss	00000028 RTC_AlarmStructure
20000eb0 l     O .bss	00000024 RtcHandle
20000ed4 l     O .bss	0000001c RtcTimerContext
080182eb l     O .rodata	0000000c DaysInMonth
080182f7 l     O .rodata	0000000c DaysInMonthLeapYear
00000000 l    df *ABS*	00000000 hw_spi.c
20000ef0 l     O .bss	00000058 hspi
00000000 l    df *ABS*	00000000 vcom.c
20000f48 l     O .bss	00000004 RxCpltCallback
20000f4c l     O .bss	00000004 TxCpltCallback
20000f50 l     O .bss	00000070 UartHandle
20000fc0 l     O .bss	00000040 hdma_tx.7370
00000000 l    df *ABS*	00000000 lora.c
0800aaf8 l     F .text	00000002 McpsConfirm
0800aafa l     F .text	00000018 LORA_BeaconReq
0800ab12 l     F .text	00000028 LORA_PingSlotReq
0800ab3c l     F .text	00000034 MlmeIndication
0800ab70 l     F .text	00000070 McpsIndication
0800ac4c l     F .text	000000a0 MlmeConfirm
20001000 l     O .bss	00000004 DevAddr
20001004 l     O .bss	0000000c JoinParameters
20001010 l     O .bss	0000000c LoRaMacCallbacks
2000101c l     O .bss	00000010 LoRaMacPrimitives
2000102c l     O .bss	00000004 LoRaMainCallbacks
20001030 l     O .bss	00000004 LoRaParamInit
20001034 l     O .bss	00000014 TxcertifTimer
20001048 l     O .bss	00000018 mibReq
200009f8 l     O .data	000000a4 lora_config
00000000 l    df *ABS*	00000000 test_rf.c
20001060 l     O .bss	00000001 TestState
20000a9c l     O .data	0000001c loraParam
00000000 l    df *ABS*	00000000 tiny_sscanf.c
0800bba4 l     F .text	0000024c tiny_vfscanf
00000000 l    df *ABS*	00000000 eeprom.c
00000000 l    df *ABS*	00000000 mlm32l0xx_hal_msp.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_spi.c
0800bf14 l     F .text	00000094 SPI_WaitOnFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32l0xx_hal_uart.c
0800c31c l     F .text	00000020 UART_EndRxTransfer
0800c470 l     F .text	00000030 UART_DMATransmitCplt
0800c4a2 l     F .text	0000000a UART_DMATxHalfCplt
0800c52a l     F .text	0000005a UART_DMAError
0800c4ac l     F .text	0000007c UART_Receive_IT
0800c71c l     F .text	00000016 UART_DMAAbortOnError
080185a3 l     O .rodata	00000004 CSWTCH.55
080185a7 l     O .rodata	0000000d CSWTCH.56
00000000 l    df *ABS*	00000000 stm32l0xx_hal_uart_ex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_adc.c
0800cc54 l     F .text	0000002c ADC_DelayMicroSecond
0800cc80 l     F .text	00000070 ADC_Enable
00000000 l    df *ABS*	00000000 stm32l0xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_rcc.c
0800d100 l     F .text	00000074 RCC_SetFlashLatencyFromMSIRange
00000000 l    df *ABS*	00000000 stm32l0xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_dma.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_rtc.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_rtc_ex.c
00000000 l    df *ABS*	00000000 stm32l0xx_hal_flash.c
0800e878 l     F .text	000000a8 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32l0xx_hal_flash_ex.c
00000000 l    df *ABS*	00000000 lora-test.c
0800ea20 l     F .text	000000b0 certif_tx
0800ead0 l     F .text	00000008 OnCertifTxNextPacketTimerEvent
20001061 l     O .bss	00000001 AdrEnableInit
20001064 l     O .bss	00000014 CertifTxNextPacketTimer
20001078 l     O .bss	00000001 IsTxConfirmed
2000107a l     O .bss	0000004a certifParam
00000000 l    df *ABS*	00000000 LoRaMac.c
0800ecc0 l     F .text	00000010 OnRadioRxError
0800ecd0 l     F .text	0000001c CallNvmCtxCallback
0800ecec l     F .text	0000000a EventCryptoNvmCtxChanged
0800ecf6 l     F .text	0000000a EventSecureElementNvmCtxChanged
0800ed00 l     F .text	0000000a EventCommandsNvmCtxChanged
0800ed0a l     F .text	0000000a EventClassBNvmCtxChanged
0800ed14 l     F .text	0000000a EventConfirmQueueNvmCtxChanged
0800ed1e l     F .text	0000000a EventFCntHandlerNvmCtxChanged
0800ed28 l     F .text	00000034 GetMaxAppPayloadWithoutFOptsLength
0800ed5c l     F .text	00000044 OnAckTimeoutTimerEvent
0800eda0 l     F .text	0000003c PrepareRxDoneAbort
0800eddc l     F .text	000000a8 ResetMacParameters
0800ee84 l     F .text	00000034 OnRadioRxTimeout
0800eeb8 l     F .text	00000034 OnRadioTxTimeout
0800eeec l     F .text	00000050 OnRadioRxDone
0800ef3c l     F .text	00000058 OnRadioTxDone
0800ef94 l     F .text	000000a0 OnRxWindow1TimerEvent
0800f034 l     F .text	00000070 StopRetransmission
0800f0a4 l     F .text	000000a8 OnRxWindow2TimerEvent
0800f14c l     F .text	00000018 OpenContinuousRx2Window
0800f164 l     F .text	00000110 HandleRadioRxErrorTimeout
0800f274 l     F .text	000004ec ProcessMacCommands.isra.1.constprop.7
0800fa08 l     F .text	0000023c ScheduleTx
0800fc44 l     F .text	00000064 OnTxDelayedTimerEvent
200010c8 l     O .bss	00000464 MacCtx
2000152c l     O .bss	0000022c NvmMacCtx
080185b4 l     O .rodata	00000010 LoRaMacMaxEirpTable
00000000 l    df *ABS*	00000000 LoRaMacAdr.c
00000000 l    df *ABS*	00000000 LoRaMacClassB.c
00000000 l    df *ABS*	00000000 LoRaMacCrypto.c
08011a0c l     F .text	00000002 DummyCB
08011a10 l     F .text	0000005c DeriveLifeTimeSessionKey
08011a6c l     F .text	000000ca PayloadEncrypt
08011b36 l     F .text	000000ae FOptsEncrypt
08011be4 l     F .text	00000098 DeriveSessionKey11x
08011c7c l     F .text	00000080 DeriveSessionKey10x
08011cfc l     F .text	000000bc ComputeCmacB1.constprop.5
08011db8 l     F .text	000000ac VerifyCmacB0.constprop.6
08011e64 l     F .text	00000094 ComputeCmacB0.part.4.constprop.8
20001758 l     O .bss	00000010 CryptoCtx
20001768 l     O .bss	00000030 NvmCryptoCtx
20000ab8 l     O .data	00000014 KeyAddrList
00000000 l    df *ABS*	00000000 LoRaMacSerializer.c
00000000 l    df *ABS*	00000000 LoRaMacCommands.c
080125c4 l     F .text	00000014 NvmCtxCallback
20001798 l     O .bss	00000004 CommandsNvmCtxChanged
2000179c l     O .bss	000000fc NvmCtx
00000000 l    df *ABS*	00000000 LoRaMacConfirmQueue.c
20001898 l     O .bss	00000014 ConfirmQueueCtx
200018ac l     O .bss	00000016 ConfirmQueueNvmCtx
00000000 l    df *ABS*	00000000 LoRaMacFCntHandler.c
08012a90 l     F .text	00000014 NvmCtxChanged
200018c4 l     O .bss	00000020 FCntHandlerNvmCtx
200018e4 l     O .bss	00000004 FCntHandlerNvmCtxChanged
00000000 l    df *ABS*	00000000 LoRaMacParser.c
00000000 l    df *ABS*	00000000 Region.c
00000000 l    df *ABS*	00000000 RegionCommon.c
00000000 l    df *ABS*	00000000 RegionUS915.c
200018e8 l     O .bss	00000398 NvmCtx
0801860c l     O .rodata	00000040 BandwidthsUS915
0801864c l     O .rodata	00000014 DatarateOffsetsUS915
08018660 l     O .rodata	00000010 DataratesUS915
08018670 l     O .rodata	00000010 MaxPayloadOfDatarateRepeaterUS915
08018680 l     O .rodata	00000010 MaxPayloadOfDatarateUS915
00000000 l    df *ABS*	00000000 low_power_manager.c
20001c80 l     O .bss	00000004 OffModeDisable
20001c84 l     O .bss	00000004 StopModeDisable
00000000 l    df *ABS*	00000000 timeServer.c
08013ee8 l     F .text	0000002a TimerSetTimeout
08013f14 l     F .text	0000001c TimerInsertNewHeadTimer
20001c88 l     O .bss	00000004 TimerListHead
00000000 l    df *ABS*	00000000 utilities.c
20000acc l     O .data	00000004 next
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 systime.c
00000000 l    df *ABS*	00000000 trace.c
080145e8 l     F .text	0000004c Trace_TxCpltCallback
20001c8c l     O .bss	00000020 MsgTraceQueue
20001cac l     O .bss	00000100 MsgTraceQueueBuff
00000000 l    df *ABS*	00000000 aes.c
080146e0 l     F .text	00000082 xor_block
08014762 l     F .text	00000084 copy_and_key
080186c8 l     O .rodata	00000100 gfm2_sbox
080187c8 l     O .rodata	00000100 gfm3_sbox
080188c8 l     O .rodata	00000100 sbox
00000000 l    df *ABS*	00000000 cmac.c
00000000 l    df *ABS*	00000000 soft-se.c
08014db6 l     F .text	00000002 DummyCB
20001dac l     O .bss	00000384 SeNvmCtx
20002130 l     O .bss	00000004 SeNvmCtxChanged
00000000 l    df *ABS*	00000000 sx1276.c
080150d4 l     F .text	00000028 GetFskBandwidthRegValue
0801554c l     F .text	00000034 SX1276SetOpMode.part.2
20002134 l     O .bss	00000004 LoRaBoardCallbacks
20002138 l     O .bss	00000004 RadioEvents
2000213c l     O .bss	00000100 RxTxBuffer
080189c8 l     O .rodata	00000018 CSWTCH.43
00000000 l    df *ABS*	00000000 b-l072z-lrwan1.c
00000000 l    df *ABS*	00000000 mlm32l07x01.c
20000afc l     O .data	00000018 BoardCallbacks
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v6-m/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08018bbc l       .fini_array	00000000 __fini_array_end
08018bb8 l       .fini_array	00000000 __fini_array_start
08018bb8 l       .init_array	00000000 __init_array_end
08018bb0 l       .init_array	00000000 __preinit_array_end
08018bb0 l       .init_array	00000000 __init_array_start
08018bb0 l       .init_array	00000000 __preinit_array_start
0800ccf0  w    F .text	00000002 HAL_ADC_MspInit
08009dc0 g     F .text	00000014 at_ack_get
08017145 g     O .rodata	00000008 APBPrescTable
08005b84 g     F .text	00000034 _mprec_log10
080082d0 g     F .text	00000040 .hidden __aeabi_dcmpun
08005bf8 g     F .text	00000056 __any_on
08016bb0 g     O .rodata	00000028 __mprec_tinytens
08012acc g     F .text	000000b0 LoRaMacGetFCntDown
08000ee4 g     F .text	00000012 .hidden __aeabi_dcmple
0800a788 g     F .text	0000000c HW_RTC_GetTimerContext
080005f8  w    F .text	00000004 _getpid
0800bdf0 g     F .text	00000016 tiny_sscanf
080093d0 g     F .text	0000000e at_AppKey_get
08005224 g     F .text	00000028 _lseek_r
08008620 g     F .text	00000110 log
080119c0 g     F .text	00000002 LoRaMacClassBSetBeaconState
0800a950 g     F .text	00000014 HAL_UART_TxCpltCallback
08009e4c g     F .text	00000014 at_test_txlora
08012df8 g     F .text	00000016 RegionVerify
080021bc g     F .text	00000074 .hidden __eqdf2
0801417a g     F .text	00000212 CircularQueue_Add
0800a3ec g     F .text	00000018 HW_GPIO_IrqHandler
0800de58 g     F .text	0000012c HAL_DMA_Init
080118cc g     F .text	00000028 LoRaMacTestSetDutyCycleOn
0800b9b0 g     F .text	0000007c TST_get_lora_config
08012e2e g     F .text	00000016 RegionComputeRxWindowParameters
080092a8 g     F .text	00000070 at_JoinEUI_set
08016640 g     F .text	00000024 SX1276SetPublicNetwork
0800e838 g     F .text	0000000c HAL_RTCEx_BKUPRead
08012db2 g     F .text	00000018 RegionGetPhyParam
08012bf8 g     F .text	00000028 LoRaMacResetFCnts
08009adc g     F .text	00000058 at_NetworkID_set
0800a0f8 g     F .text	00000060 at_enter_bootload
08011a08 g     F .text	00000002 LoRaMacClassBStopRxSlots
08009a6c g     F .text	00000034 at_NetworkJoinMode_set
0800d844 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
0800dc48 g     F .text	00000060 HAL_NVIC_SetPriority
0800d864 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
08008b54  w    F .text	00000002 TSC_IRQHandler
0800b178 g     F .text	00000014 lora_config_joineui_set
0800fca8 g     F .text	00000144 Send
0800b18c g     F .text	0000000c lora_config_appkey_get
08003a88 g     F .text	0000002c __sseek
0800331c g     F .text	0000000e __sinit
08009e00 g     F .text	0000000e at_rssi_get
08008b54  w    F .text	00000002 HardFault_Handler
08016878 g     F .text	00000074 SX1276IoInit
080119b8 g     F .text	00000008 LoRaMacClassBGetNvmCtx
08003248 g     F .text	0000002e __sfmoreglue
08012ef8 g     F .text	0000001a RegionNextChannel
080008cc g     F .text	00000018 _has_ext_exit_extended
080039f8 g     F .text	00000002 __malloc_unlock
08008570 g     F .text	000000b0 round
08008b54  w    F .text	00000002 ADC1_COMP_IRQHandler
08012daa g     F .text	00000008 RegionIsActive
08012f12 g     F .text	0000000e RegionSetContinuousWave
00000400 g       *ABS*	00000000 _Min_Stack_Size
080119f6 g     F .text	00000002 LoRaMacClassBPingSlotInfoAns
08013e78 g     F .text	00000018 RegionUS915ApplyDrOffset
08008b54  w    F .text	00000002 SysTick_Handler
08012e5a g     F .text	00000018 RegionTxConfig
080140c4 g     F .text	0000002c rand1
0800de34 g     F .text	0000000c HAL_GPIO_WritePin
08008b54  w    F .text	00000002 PVD_IRQHandler
080008fc g     F .text	000000f4 initialise_monitor_handles
0800732c g     F .text	0000009c memmove
08012a18 g     F .text	00000058 LoRaMacConfirmQueueHandleCb
08018bbc g       *ABS*	00000000 _sidata
08013b8c g     F .text	00000006 RegionUS915TxParamSetupReq
08003304 g     F .text	00000018 _cleanup
08008b54  w    F .text	00000002 PendSV_Handler
0800e20c g     F .text	00000010 HAL_PWR_DisablePVD
08008b54  w    F .text	00000002 NMI_Handler
0800dca8 g     F .text	00000014 HAL_NVIC_EnableIRQ
080052cc g     F .text	00000050 _Balloc
080158c4 g     F .text	00000034 SX1276StartCad
08009bb2 g     F .text	00000016 at_NetworkJoinStatus
08018bb0 g       .ARM	00000000 __exidx_end
080132f6 g     F .text	00000058 RegionCommonCalcBackOff
0800d65c g     F .text	00000078 HAL_RCC_GetSysClockFreq
08008b54  w    F .text	00000002 I2C1_IRQHandler
08012aa4 g     F .text	0000001c LoRaMacFCntHandlerRestoreNvmCtx
080162d4 g     F .text	0000000e SX1276ReadFifo
08002230 g     F .text	000000c8 .hidden __gtdf2
0800313c g     F .text	0000000c __errno
0800a8d8 g     F .text	00000028 HW_SPI_InOut
0800e5f0 g     F .text	00000194 HAL_RTC_SetAlarm_IT
08009788 g     F .text	00000024 at_Rx2Frequency_get
080051f0 g     F .text	00000004 __localeconv_l
0800fe90 g     F .text	0000002c SetTxContinuousWave1
0800e9cc g     F .text	00000054 HAL_FLASHEx_DATAEEPROM_Program
0800de40 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
0800be54 g     F .text	00000034 HAL_MspInit
08008310 g     F .text	00000128 ceil
08000a68 g     F .text	00000012 _clock
08012fce g     F .text	00000014 RegionCommonValueInRange
0800a794 g     F .text	00000020 HW_RTC_GetCalendarTime
0800a93c g     F .text	00000014 vcom_Trace
20002350 g     O .bss	00000004 errno
080167d0 g     F .text	000000a8 SX1276SetRfTxPower
0800a4bc g     F .text	00000010 HW_RTC_ms2Tick
08008438 g     F .text	00000138 floor
08003a48 g     F .text	00000004 __seofread
08016a74 g       .text	00000000 _etext
0800b14c g     F .text	0000000c lora_config_deveui_get
20000b14 g       .bss	00000000 _sbss
08015124 g     F .text	0000000c SX1276GetStatus
08010a0c g     F .text	000003ec LoRaMacInitialization
08000eb4 g     F .text	00000010 .hidden __aeabi_cdcmple
0800ff38 g     F .text	00000098 RestoreCtxs
080131d8 g     F .text	00000034 RegionCommonComputeSymbolTimeLoRa
0800bee4 g     F .text	00000008 HAL_RTC_AlarmAEventCallback
08009460 g     F .text	0000006c at_NwkSKey_set
08013bf8 g     F .text	000001fc RegionUS915NextChannel
0800c584 g     F .text	00000198 HAL_UART_IRQHandler
0800df84 g     F .text	00000056 HAL_DMA_Start_IT
20000430 g     O .data	00000004 __heap_limit
0800bb08 g     F .text	0000009c TST_RX_LoraStart
0801391c g     F .text	000001e8 RegionUS915LinkAdrReq
080119c6 g     F .text	00000004 LoRaMacClassBIsAcquisitionInProgress
0800a178 g     F .text	00000018 CMD_Init
0800dcbc g     F .text	00000178 HAL_GPIO_Init
08012f20 g     F .text	00000018 RegionApplyDrOffset
080144d8 g     F .text	00000034 SysTimeAdd
080091fc g     F .text	0000001c at_reset
0800b6e0 g     F .text	0000000c lora_config_tx_datarate_set
08011a00 g     F .text	00000004 LoRaMacClassBBeaconFreqReq
08012e0e g     F .text	0000000e RegionApplyCFList
08012760 g     F .text	00000028 LoRaMacCommandsRemoveNoneStickyCmds
080114fc g     F .text	00000268 LoRaMacMlmeRequest
0800bef4 g     F .text	00000020 MSP_GetIRQn
0800396c g     F .text	00000086 memcpy
08000ea4 g     F .text	00000020 .hidden __aeabi_cdrcmple
0800cef4 g     F .text	000000bc HAL_ADC_PollForConversion
0801450c g     F .text	0000002c SysTimeSub
20000b14 g     O .data	00000000 .hidden __TMC_END__
0800a688 g     F .text	00000040 HW_RTC_IrqHandler
08008d1c g     F .text	000000b4 HW_GpioInit
080121f0 g     F .text	0000013c LoRaMacCryptoSecureMessage
0800a7f8 g     F .text	00000060 HW_SPI_IoInit
08012840 g     F .text	00000030 LoRaMacConfirmQueueInit
0800314c g     F .text	00000010 _cleanup_r
08005c78 g     F .text	00001608 _svfprintf_r
08012eea g     F .text	0000000e RegionCalcBackOff
080022f8 g     F .text	000000c4 .hidden __ltdf2
08012e90 g     F .text	00000012 RegionRxParamSetupReq
08008b54  w    F .text	00000002 RCC_CRS_IRQHandler
08009888 g     F .text	0000002c at_Rx1Delay_get
08000f20 g     F .text	0000003e .hidden __aeabi_uldivmod
08013068 g     F .text	0000000c RegionCommonSetBandTxDone
08012a70 g     F .text	0000000c LoRaMacConfirmQueueGetCnt
0800be40 g     F .text	0000000c HAL_Delay
200009e8 g     O .data	00000004 SystemCoreClock
08005b10 g     F .text	00000074 __ratio
0800ba78 g     F .text	00000090 TST_TX_LoraStart
08009f60 g     F .text	00000198 at_self_test
0800b6d0 g     F .text	00000010 lora_config_rssi_get
08000bb8 g     F .text	0000010a .hidden __udivsi3
08014de8 g     F .text	00000058 ComputeCmac
08000690  w    F .text	0000001a _fstat
0800f8fc g     F .text	0000010c SendFrameOnChannel
0800e230 g     F .text	00000014 HAL_PWREx_EnableUltraLowPower
08016c00 g     O .rodata	000000c8 __mprec_tens
0800c33c g     F .text	000000a8 HAL_UART_Receive_IT
08018acc g     O .rodata	00000074 Radio
0800e518 g     F .text	000000d8 HAL_RTC_SetDate
080129d8 g     F .text	0000000c LoRaMacConfirmQueueGetStatusCmn
20002258 g     O .bss	00000004 TxDoneParams
08003c24 g     F .text	00000020 vsnprintf
08012888 g     F .text	0000000c LoRaMacConfirmQueueGetNvmCtx
08000fb4 g     F .text	0000003c .hidden __fixunsdfsi
0800a6c8 g     F .text	00000026 HW_RTC_DelayMs
080119f8 g     F .text	00000004 LoRaMacClassBPingSlotChannelReq
20000be0 g     O .bss	00000004 __malloc_top_pad
08000644 g     F .text	0000004a _swistat
0800b6f8 g     F .text	00000010 lora_config_isack_get
08009566 g     F .text	00000026 at_ADR_get
08010e08 g     F .text	000000c4 LoRaMacQueryTxPossible
20000b14 g       .bss	00000000 __bss_start__
08002fd4 g     F .text	00000070 .hidden __aeabi_ui2d
08009694 g     F .text	00000040 at_DataRate_set
080051f4 g     F .text	00000018 _localeconv_r
080054e0 g     F .text	00000012 __i2b
20000000 g       .data	00000000 _sdata
08008b54  w    F .text	00000002 SPI1_IRQHandler
0800b6b8 g     F .text	0000000c lora_config_reqack_get
08000ff0 g     F .text	0000017e .hidden __udivmoddi4
080039fc g     F .text	00000024 _sbrk_r
0800cfb8 g     F .text	000000a8 HAL_ADC_ConfigChannel
0800a998 g     F .text	0000002c HAL_UART_RxCpltCallback
0800be08 g     F .text	00000024 writeEEPROMByte
0800a708 g     F .text	00000080 HW_RTC_Init
0800e41c g     F .text	000000fc HAL_RTC_SetTime
08012f60 g     F .text	0000006e RegionCommonChanVerifyDr
0801314a g     F .text	0000008e RegionCommonLinkAdrReqVerifyParams
0800e244 g     F .text	000000c0 HAL_RTC_DeactivateAlarm
08008b54  w    F .text	00000002 TIM6_DAC_IRQHandler
0800c734 g     F .text	00000260 UART_SetConfig
080129a0 g     F .text	00000038 LoRaMacConfirmQueueSetStatusCmn
08009e10 g     F .text	00000018 at_bat_get
08005c50 g     F .text	00000028 _read_r
0800b11c g     F .text	0000000c lora_config_otaa_get
08018609 g     O .rodata	00000003 CIDsStickyAnsCmds
08015074 g     F .text	00000060 SecureElementDeriveAndStoreKey
08000b7c g     F .text	00000012 .hidden __gnu_thumb1_case_uqi
08000ed0 g     F .text	00000012 .hidden __aeabi_dcmplt
08008dd0 g     F .text	00000094 SystemClock_Config
08004d30 g     F .text	00000094 _fclose_r
08015a00 g     F .text	00000048 SX1276IsChannelFree
08011f80 g     F .text	0000001c LoRaMacCryptoRestoreNvmCtx
08004f54 g     F .text	00000028 fflush
20000c0c g     O .bss	00000004 __malloc_max_sbrked_mem
08009e28 g     F .text	00000012 at_test_txTone
08015614 g     F .text	00000210 SX1276SetRx
08001b54 g     F .text	00000668 .hidden __aeabi_ddiv
0800eae4 g     F .text	00000010 certif_DownLinkIncrement
080162e4 g     F .text	00000258 SX1276OnDio0Irq
0801596c g     F .text	00000094 SX1276Init
08012c34 g     F .text	00000028 LoRaMacFCntHandlerSetMulticastReference
20002240 g     O .bss	00000018 pFlash
08011a04 g     F .text	00000004 LoRaMacClassBIsUplinkCollision
0800abe0 g     F .text	00000020 update_flag
0800ccf4 g     F .text	000001a8 HAL_ADC_Init
08005998 g     F .text	000000bc __b2d
08018ba8 g       .ARM	00000000 __exidx_start
080023bc g     F .text	00000500 .hidden __aeabi_dmul
08000a9c g     F .text	0000003e _isatty
200009b8 g     O .data	00000001 __fdlib_version
08012870 g     F .text	00000018 LoRaMacConfirmQueueRestoreNvmCtx
0801304c g     F .text	0000001c RegionCommonChanMaskCopy
08016a78 g     O .rodata	00000004 _global_impure_ptr
08000f60 g     F .text	00000054 .hidden __aeabi_lmul
080119d0 g     F .text	00000004 LoRaMacClassBRxBeacon
0800a4e0 g     F .text	00000018 HW_RTC_GetTimerElapsedTime
080161cc g     F .text	0000000e SX1276WriteFifo
080073c8 g     F .text	000003b0 _realloc_r
0800ad08 g     F .text	00000068 LORA_send
080001b8 g     F .text	00000048 __libc_init_array
0800a508 g     F .text	00000030 HW_RTC_StopAlarm
0800b6ec g     F .text	0000000c lora_config_tx_datarate_get
0800e338 g     F .text	00000038 RTC_EnterInitMode
08016178 g     F .text	00000054 SX1276OnDio3Irq
08010df8 g     F .text	00000010 LoRaMacStart
08016bd8 g     O .rodata	00000028 __mprec_bigtens
080053bc g     F .text	00000090 __s2b
080007c4 g     F .text	00000010 _open
0800943c g     F .text	00000024 at_NwkSKey_get
08008c44 g     F .text	00000010 EXTI2_3_IRQHandler
08015a48 g     F .text	0000003c SX1276Random
080128d0 g     F .text	00000028 LoRaMacConfirmQueueRemoveLast
0800a964 g     F .text	00000034 vcom_ReceiveInit
080005fc  w    F .text	00000048 _sbrk
080168ec g     F .text	00000050 SX1276IoDeInit
080057f4 g     F .text	00000034 __mcmp
080160b8 g     F .text	000000c0 SX1276OnDio2Irq
0800d060 g     F .text	000000a0 HAL_ADCEx_Calibration_Start
0800febc g     F .text	0000007c GetCtxs
0800333c g     F .text	00000018 __fp_lock_all
08009e8e g     F .text	00000008 at_test_stop
0800bfac g     F .text	00000080 HAL_SPI_Init
08016a5c g     F .text	00000000 _init
0800b8e0 g     F .text	000000d0 TST_SET_lora_config
08008b54  w    F .text	00000002 I2C2_IRQHandler
080007d4 g     F .text	000000c4 _get_semihosting_exts
08012678 g     F .text	00000070 LoRaMacCommandsAddCmd
08016664 g     F .text	000000cc SX1276OnTimeoutIrq
0800e304 g     F .text	00000034 HAL_RTC_WaitForSynchro
080137ec g     F .text	00000130 RegionUS915TxConfig
08009e3a g     F .text	00000012 at_test_rxTone
080158f8 g     F .text	00000074 SX1276SetModem
0801407c g     F .text	00000022 TimerSetValue
0800bfa8  w    F .text	00000002 HAL_SPI_MspInit
080189e0 g     O .rodata	000000b0 FskBandwidths
08011a0a g     F .text	00000002 LoRaMacClassBProcess
08001170 g     F .text	00000338 .hidden __aeabi_fsub
08009714 g     F .text	00000026 at_PublicNetwork_get
08000184 g     F .text	00000034 __libc_fini_array
08008c2c g     F .text	00000008 RTC_IRQHandler
08012924 g     F .text	0000003c LoRaMacConfirmQueueSetStatus
20002354 g       .bss	00000000 _ebss
08015580 g     F .text	00000028 SX1276SetSleep
080119b2 g     F .text	00000002 LoRaMacClassBInit
08000a7c g     F .text	00000020 _times
0800e844 g     F .text	00000032 HAL_RTCEx_EnableBypassShadow
080119fc g     F .text	00000002 LoRaMacClassBBeaconTimingAns
08015278 g     F .text	00000098 RxChainCalibration
08008b04  w    F .text	00000038 Reset_Handler
0801714d g     O .rodata	00000009 PLLMulTable
08014112 g     F .text	00000012 memcpy1
0800544c g     F .text	00000036 __hi0bits
080008e4 g     F .text	00000018 _has_ext_stdout_stderr
08014e40 g     F .text	000000e8 SecureElementInit
0800c528  w    F .text	00000002 HAL_UART_ErrorCallback
08015130 g     F .text	00000050 SX1276Reset
08009efc g     F .text	00000034 at_subband_set
0800cc28 g     F .text	0000002a HAL_UARTEx_EnableStopMode
080119e0 g     F .text	00000004 LoRaMacClassBIsBeaconModeActive
0800b708 g     F .text	00000030 lora_wan_certif
08012478 g     F .text	0000006a LoRaMacSerializerJoinRequest
0800a4f8 g     F .text	0000000e HW_RTC_GetTimerValue
0800dc28 g     F .text	00000020 HAL_Init
0800a320 g     F .text	00000098 HW_GPIO_Init
0800ca64 g     F .text	00000064 UART_WaitOnFlagUntilTimeout
080094cc g     F .text	00000024 at_AppSKey_get
0801202c g     F .text	000001c4 LoRaMacCryptoHandleJoinAccept
080125d8 g     F .text	00000018 isSlotFree
08013074 g     F .text	000000a0 RegionCommonUpdateBandTimeOff
0801660c g     F .text	00000034 SX1276SetMaxPayloadLength
08008cb8 g     F .text	00000008 DMA1_Channel4_5_6_7_IRQHandler
0800e21c g     F .text	00000014 HAL_PWREx_EnableFastWakeUp
08001534 g     F .text	00000620 .hidden __aeabi_dadd
08012788 g     F .text	0000002c LoRaMacCommandsRemoveStickyAnsCmds
080022f8 g     F .text	000000c4 .hidden __ledf2
08012cf4 g     F .text	000000b6 LoRaMacParserData
08012ed8 g     F .text	00000012 RegionAlternateDr
080006ac  w    F .text	0000003e _stat
08009318 g     F .text	0000007c at_DevAddr_set
0800b1ac g     F .text	00000374 get_params_from_memory
08009f30 g     F .text	00000030 at_reset_params
0800566c g     F .text	000000c0 __pow5mult
0800c994 g     F .text	000000d0 UART_AdvFeatureConfig
08015224 g     F .text	00000040 SX1276ReadBuffer
0800907c g     F .text	00000054 HW_GetBatteryLevel
08015dc4 g     F .text	00000274 SX1276SetTxConfig
0801300c g     F .text	00000040 RegionCommonCountChannels
08009928 g     F .text	00000048 at_Rx2Delay_set
0800b158 g     F .text	00000014 lora_config_deveui_set
0800beec g     F .text	00000008 HAL_GPIO_EXTI_Callback
0800a9e4 g     F .text	00000060 vcom_IoInit
0800ead8 g     F .text	0000000c certif_running
08000ccc g     F .text	00000000 .hidden __aeabi_idiv
20002358 g       ._user_heap_stack	00000000 end
080119ee g     F .text	00000004 LoRaMacClassBMibGetRequestConfirm
0800cb98 g     F .text	00000090 HAL_UARTEx_StopModeWakeUpSourceConfig
08011ef8 g     F .text	00000024 ResetFCnts
08011f1c g     F .text	00000058 LoRaMacCryptoInit
080118f4 g     F .text	000000be LoRaMacAdrCalcNext
08015508 g     F .text	00000044 SX1276ReadRssi
0800e994 g     F .text	00000024 HAL_FLASHEx_DATAEEPROM_Unlock
08010ecc g     F .text	000001ac LoRaMacMibGetRequestConfirm
080151d0 g     F .text	00000054 SX1276SetChannel
08014f28 g     F .text	0000001c SecureElementRestoreNvmCtx
0800e404 g     F .text	00000016 RTC_ByteToBcd2
08014db8 g     F .text	00000030 GetKeyByID
08000ef8 g     F .text	00000012 .hidden __aeabi_dcmpgt
2000225c g     O .bss	00000010 RxDoneParams
080030e8 g     F .text	0000003c .hidden __clzsi2
0800999c g     F .text	00000048 at_JoinAcceptDelay1_set
0800332c g     F .text	00000002 __sfp_lock_acquire
0800524c g     F .text	00000080 memchr
20002354 g       .bss	00000000 __bss_end__
080119cc g     F .text	00000002 LoRaMacClassBPingSlotTimerEvent
0801653c g     F .text	000000d0 SX1276OnDio1Irq
0800501c g     F .text	000001d4 _free_r
08008b54  w    F .text	00000002 TIM3_IRQHandler
08008c54 g     F .text	0000005c EXTI4_15_IRQHandler
0800ffd0 g     F .text	0000004c DetermineFrameType
08000b90 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
08000f0c g     F .text	00000012 .hidden __aeabi_dcmpge
08016038 g     F .text	00000080 SX1276SetTxContinuousWave
00000200 g       *ABS*	00000000 _Min_Heap_Size
08012dd8 g     F .text	0000000e RegionInitDefaults
08008b54  w    F .text	00000002 DMA1_Channel1_IRQHandler
0801262c g     F .text	00000024 LoRaMacCommandsInit
08008b54  w    F .text	00000002 USART4_5_IRQHandler
0801438c g     F .text	000000c0 CircularQueue_Remove
080028bc g     F .text	0000062c .hidden __aeabi_dsub
08008b54 g       .text	00000002 Default_Handler
080161dc g     F .text	000000f8 SX1276Send
0801320c g     F .text	000000c0 RegionCommonComputeRxWindowParameters
08014634 g     F .text	00000028 TraceInit
2000043c g     O .data	00000004 __malloc_sbrk_base
08017135 g     O .rodata	00000010 AHBPrescTable
080004d0 g     F .text	00000008 _lseek
080132cc g     F .text	0000002a RegionCommonComputeTxPower
0800572c g     F .text	000000c8 __lshift
080167c8 g     F .text	00000004 SX1276GetWakeTime
0800e920 g     F .text	00000074 FLASH_WaitForLastOperation
0800cac8 g     F .text	00000064 UART_CheckIdleState
08009d30 g     F .text	00000044 at_Receive
0800b140 g     F .text	0000000c lora_config_duty_cycle_get
08007778 g     F .text	00000118 __ssprint_r
08016730 g     F .text	00000014 SX1276GetWakeupTime
0800ce9c g     F .text	00000058 HAL_ADC_Start
08012744 g     F .text	0000001c LoRaMacCommandsGetCmd
0800029c g     F .text	000000d4 __register_exitproc
2000226c g     O .bss	00000040 Contexts
080119e8 g     F .text	00000002 LoRaMacClassBResumeBeaconing
08009e60 g     F .text	0000000a at_test_rxlora
08003b24 g     F .text	0000008c strncmp
0800a9c4 g     F .text	00000010 vcom_DMA_TX_IRQHandler
08012dca g     F .text	0000000e RegionSetBandTxDone
08013ebc g     F .text	00000028 LPM_GetMode
080129e4 g     F .text	00000034 LoRaMacConfirmQueueIsCmdActive
080054f4 g     F .text	00000178 __multiply
0800d6d4 g     F .text	00000170 HAL_RCC_ClockConfig
08013e90 g     F .text	0000002c LPM_SetStopMode
20000be4 g     O .bss	00000028 __malloc_current_mallinfo
080135c4 g     F .text	00000046 RegionUS915Verify
08005a54 g     F .text	000000bc __d2b
08013650 g     F .text	0000006c RegionUS915ChanMaskSet
0800cc52  w    F .text	00000002 HAL_UARTEx_WakeupCallback
08008ed8 g     F .text	0000005c HW_AdcInit
08012e72 g     F .text	0000001e RegionLinkAdrReq
080094f0 g     F .text	0000006c at_AppSKey_set
08012ea2 g     F .text	00000012 RegionNewChannelReq
080136bc g     F .text	00000078 RegionUS915ComputeRxWindowParameters
08012960 g     F .text	00000040 LoRaMacConfirmQueueGetStatus
08013114 g     F .text	00000036 RegionCommonParseLinkAdrReq
080127b4 g     F .text	00000018 LoRaMacCommandsGetSizeSerializedCmds
0800e794 g     F .text	00000054 HAL_RTC_GetTime
08009228 g     F .text	00000070 at_DevEUI_set
08008b54  w    F .text	00000002 TIM22_IRQHandler
08008b54  w    F .text	00000002 TIM7_IRQHandler
08003c6c g     F .text	00000024 _close_r
08002f50 g     F .text	00000084 .hidden __aeabi_i2d
08015118 g     F .text	0000000c SX1276BoardInit
08008f34 g     F .text	00000048 HW_Init
080119e6 g     F .text	00000002 LoRaMacClassBHaltBeaconing
0800a404 g     F .text	0000000a HW_GPIO_Write
0800b6ac g     F .text	0000000c lora_config_reqack_set
08008c34 g     F .text	00000010 EXTI0_1_IRQHandler
08008b54  w    F .text	00000002 USB_IRQHandler
08012a7c g     F .text	00000014 LoRaMacConfirmQueueIsFull
0800973c g     F .text	0000004c at_PublicNetwork_set
08000ea0  w    F .text	00000002 .hidden __aeabi_ldiv0
08011f9c g     F .text	0000000c LoRaMacCryptoGetNvmCtx
08014f44 g     F .text	00000010 SecureElementGetNvmCtx
080096d4 g     F .text	0000001e at_DutyCycle_set
08003278 g     F .text	0000008c __sfp
080151be g     F .text	00000012 SX1276Write
08013b98 g     F .text	00000028 RegionUS915AlternateDr
08005bb8 g     F .text	00000040 __copybits
08009b64 g     F .text	00000040 at_DeviceClass_set
08013b88 g     F .text	00000004 RegionUS915NewChannelReq
080150fc g     F .text	0000001c SX1276OnDio4Irq
20000444 g     O .data	00000408 __malloc_av_
08014f66 g     F .text	00000028 SecureElementVerifyAesCmac
080014a8 g     F .text	0000008c .hidden __aeabi_ui2f
08003338 g     F .text	00000002 __sinit_lock_release
08014f54 g     F .text	00000012 SecureElementComputeAesCmac
08003bb0 g     F .text	00000072 _vsnprintf_r
080155a8 g     F .text	00000044 SX1276SetOpMode
08003a20 g     F .text	00000028 __sread
0800a6f0 g     F .text	00000018 HW_RTC_SetTimerContext
08009bc8 g     F .text	000000a4 at_SendBinary
08014b98 g     F .text	0000000e AES_CMAC_SetKey
0800eb14 g     F .text	000001ac certif_rx
08008b54  w    F .text	00000002 I2C3_IRQHandler
0800be4c g     F .text	00000008 HAL_GetTick
0801266c g     F .text	0000000c LoRaMacCommandsGetNvmCtx
080039f4 g     F .text	00000002 __malloc_lock
0800a858 g     F .text	00000080 HW_SPI_Init
08009648 g     F .text	0000004a at_DataRate_get
08004f28 g     F .text	0000002a _fflush_r
080135b4 g     F .text	00000010 RegionUS915GetNvmCtx
0800be2c g     F .text	00000010 readEEPROMByte
0800c4a0  w    F .text	00000002 HAL_UART_TxHalfCpltCallback
08007280 g     F .text	00000058 _calloc_r
0800f760 g     F .text	0000019c PrepareFrame
08008b54  w    F .text	00000002 SPI2_IRQHandler
0800ae88 g     F .text	00000294 lora_config_otaa_set
20000ad0 g     O .data	00000001 TracePeripheralReady
08000200 g     F .text	0000009a memset
08008ba8 g     F .text	00000084 main
080009f0  w    F .text	00000010 _link
08012eb4 g     F .text	00000012 RegionTxParamSetupReq
080097ac g     F .text	00000058 at_Rx2Frequency_set
0800e82c g     F .text	0000000c HAL_RTCEx_BKUPWrite
08012e44 g     F .text	00000016 RegionRxConfig
0800a900 g     F .text	0000003c vcom_Init
20000c10 g     O .bss	00000004 __malloc_max_total_mem
08015824 g     F .text	000000a0 SX1276SetTx
0800acec g     F .text	0000001c LORA_JoinStatus
0801347c g     F .text	00000138 RegionUS915InitDefaults
0800a190 g     F .text	00000144 CMD_Process
08018a90 g     O .rodata	00000030 RadioRegsInit
0800c02c g     F .text	000002f0 HAL_SPI_TransmitReceive
080095d4 g     F .text	00000028 at_TransmitPower_get
08014b78 g     F .text	00000020 AES_CMAC_Init
080128f8 g     F .text	0000002c LoRaMacConfirmQueueRemoveFirst
08009aa0 g     F .text	0000003c at_NetworkID_get
0800e784 g     F .text	00000010 RTC_Bcd2ToByte
0801232c g     F .text	0000014c LoRaMacCryptoUnsecureMessage
0800eaf4 g     F .text	00000020 certif_linkCheck
08000bb8 g     F .text	00000000 .hidden __aeabi_uidiv
08008b54  w    F .text	00000002 SVC_Handler
08003ab4 g     F .text	0000000c __sclose
08008adc g     F .text	00000004 matherr
08004dc4 g     F .text	00000014 fclose
080098fc g     F .text	0000002c at_Rx2Delay_get
08009d74 g     F .text	00000010 at_version_get
08003de4 g     F .text	00000f4c _dtoa_r
080033fc g     F .text	00000570 _malloc_r
080082b4 g     F .text	0000001c __ascii_wctomb
0801360c g     F .text	00000044 RegionUS915ApplyCFList
080119b4 g     F .text	00000004 LoRaMacClassBRestoreNvmCtx
0800da3c g     F .text	000001ec HAL_RCCEx_GetPeriphCLKFreq
08011fbc g     F .text	00000070 LoRaMacCryptoPrepareJoinRequest
0800b16c g     F .text	0000000c lora_config_joineui_get
0800ae0c g     F .text	0000007c lora_set_sub_band
080155ec g     F .text	00000028 SX1276SetStby
08009218 g     F .text	0000000e at_DevEUI_get
08012618 g     F .text	00000014 freeMacCommandSlot
0800982c g     F .text	0000005c at_Rx2DataRate_set
0800336c g     F .text	00000044 _fwalk
080140fc g     F .text	00000016 randr
0800fe38 g     F .text	00000058 SetTxContinuousWave
08013ee4  w    F .text	00000002 LPM_EnterOffMode
0800a538 g     F .text	00000150 HW_RTC_SetAlarm
08008b54  w    F .text	00000002 TIM21_IRQHandler
080072d8 g     F .text	00000028 _mbtowc_r
08014124 g     F .text	00000018 memcpyr
080004d8 g     F .text	00000026 _swiwrite
08000b2c g     F .text	0000003a _rename
20000aec g     O .data	00000010 LED_PORT
08000ccc g     F .text	000001cc .hidden __divsi3
0800b82c g     F .text	000000b4 TST_RxTone
080119f2 g     F .text	00000004 LoRaMacMibClassBSetRequestConfirm
08004f7c g     F .text	000000a0 _malloc_trim_r
08012e1c g     F .text	00000012 RegionChanMaskSet
08009d84 g     F .text	0000003c at_ack_set
0800e370 g     F .text	00000094 HAL_RTC_Init
08014024 g     F .text	00000058 TimerStop
200009f4 g     O .data	00000004 FLAG_CODE
080091f8 g     F .text	00000004 at_return_error
08008cc0 g     F .text	0000005c SystemInit
0800955c g     F .text	0000000a at_Certif
080021bc g     F .text	00000074 .hidden __nedf2
08015a84 g     F .text	00000340 SX1276SetRxConfig
08016a68 g     F .text	00000000 _fini
08012be4 g     F .text	00000014 LoRaMacSetFCntUp
08009018 g     F .text	00000064 HW_GetTemperatureLevel
08009804 g     F .text	00000026 at_Rx2DataRate_get
0800b128 g     F .text	00000018 lora_config_duty_cycle_set
0800aa44 g     F .text	000000b4 HAL_UART_MspInit
08015264 g     F .text	00000012 SX1276Read
08013734 g     F .text	000000b8 RegionUS915RxConfig
08011764 g     F .text	00000168 LoRaMacMcpsRequest
0800043c g     F .text	00000094 _swilseek
08013b04 g     F .text	00000084 RegionUS915RxParamSetupReq
0800a9d4 g     F .text	00000010 vcom_IRQHandler
08000174 g     F .text	00000010 atexit
08003c44 g     F .text	00000028 _write_r
080167cc g     F .text	00000004 SX1276CheckRfFrequency
08014ffc g     F .text	00000078 SecureElementSetKey
200022ac g     O .bss	00000014 TxTimeoutTimer
08013fb0 g     F .text	00000074 TimerIrqHandler
08009b34 g     F .text	00000030 at_DeviceClass_get
0800be3c g     F .text	00000004 HAL_InitTick
08012de6 g     F .text	00000012 RegionGetNvmCtx
08014f90 g     F .text	0000006c SecureElementAesEncrypt
08018ac0 g     O .rodata	00000008 LED_PIN
20000000 g     O .data	00000004 _impure_ptr
08013f40 g     F .text	00000070 TimerStart
08000570 g     F .text	00000022 _swiclose
08004dd8 g     F .text	00000150 __sflush_r
0800ad70 g     F .text	0000001c OnCertifTimer
08009e98 g     F .text	00000064 at_subband_get
08009de8 g     F .text	00000018 at_snr_get
0800e07c g     F .text	00000190 HAL_DMA_IRQHandler
08008730 g     F .text	000003ac __ieee754_log
080119fe g     F .text	00000002 LoRaMacClassBDeviceTimeAns
08007890 g     F .text	00000a04 _svfiprintf_r
0800b520 g     F .text	0000018c LORA_Init
080127cc g     F .text	00000048 LoRaMacCommandsSerializeCmds
08008e64 g     F .text	00000020 HW_GetRandomSeed
08008b54  w    F .text	00000002 WWDG_IRQHandler
08008f7c g     F .text	0000009c HW_AdcReadChannel
08014c60 g     F .text	00000156 AES_CMAC_Final
08007300 g     F .text	0000002c __ascii_mbtowc
080006ec g     F .text	000000d8 _swiopen
08014574 g     F .text	00000054 SysTimeGet
0800594c g     F .text	0000004c __ulp
08003354 g     F .text	00000018 __fp_unlock_all
08012b7c g     F .text	00000050 LoRaMacSetFCntDown
08000a00 g     F .text	0000003a _unlink
08008b54  w    F .text	00000002 TIM2_IRQHandler
08012bcc g     F .text	00000018 LoRaMacGetFCntUp
08008e84 g     F .text	00000054 HW_GetUniqueId
080119d4 g     F .text	00000004 LoRaMacClassBIsBeaconExpected
080119ca g     F .text	00000002 LoRaMacClassBBeaconTimerEvent
08009c6c g     F .text	0000007c at_Send
08000fb4 g     F .text	0000003c .hidden __aeabi_d2uiz
080145c8 g     F .text	0000001e SysTimeGetMcuTime
08008b54  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08008ae0 g     F .text	0000000c nan
08009e6a g     F .text	00000012 at_test_get_lora_config
0800ba2c g     F .text	0000004c TST_stop
08012894 g     F .text	0000003c LoRaMacConfirmQueueAdd
0800520c g     F .text	00000018 localeconv
0800a7b4 g     F .text	00000020 HW_RTC_BKUPWrite
08009394 g     F .text	0000003c at_DevAddr_get
20005000 g       *ABS*	00000000 _estack
080119d8 g     F .text	00000004 LoRaMacClassBIsPingExpected
0800a4b8 g     F .text	00000004 HW_RTC_GetMinimumTimeout
08012c20 g     F .text	00000014 LoRaMacFCntHandlerInit
08009e7c g     F .text	00000012 at_test_set_lora_config
08000cc4 g     F .text	00000008 .hidden __aeabi_uidivmod
08000ec4 g     F .text	0000000c .hidden __aeabi_dcmpeq
080169f0 g     F .text	00000040 SX1276SetAntSw
080119e4 g     F .text	00000002 LoRaMacClassBSetPingSlotInfo
080119c2 g     F .text	00000002 LoRaMacClassBSetPingSlotState
200010c4 g     O .bss	00000004 LoRaMacRadioEvents
08000500  w    F .text	00000070 _write
0800a4cc g     F .text	00000014 HW_RTC_Tick2ms
08000b68 g     F .text	00000012 .hidden __gnu_thumb1_case_sqi
20000b14 g       .data	00000000 _edata
080091c4 g     F .text	00000034 set_at_receive
0801413c g     F .text	00000018 memset1
08009970 g     F .text	0000002c at_JoinAcceptDelay1_get
200022c0 g     O .bss	00000014 RxTimeoutSyncWord
0800c3e4 g     F .text	0000008c HAL_UART_Transmit_DMA
08013b92 g     F .text	00000004 RegionUS915DlChannelReq
08011f74 g     F .text	0000000c LoRaMacCryptoSetLrWanVersion
08014538 g     F .text	0000003a SysTimeSet
08009dd4 g     F .text	00000014 at_isack_get
08012814 g     F .text	0000002c LoRaMacCommandsStickyCmdsPending
0800a7d4 g     F .text	00000024 HW_RTC_BKUPRead
080093e0 g     F .text	0000005c at_AppKey_set
08008b54  w    F .text	00000002 USART2_IRQHandler
08003a4c g     F .text	0000003c __swrite
0800d174 g     F .text	000004e8 HAL_RCC_OscConfig
20000440 g     O .data	00000004 __malloc_trim_threshold
08009298 g     F .text	0000000e at_JoinEUI_get
080124e2 g     F .text	000000e0 LoRaMacSerializerData
0800e7e8 g     F .text	00000044 HAL_RTC_GetDate
08012650 g     F .text	0000001c LoRaMacCommandsRestoreNvmCtx
08000000 g     O .isr_vector	00000000 g_pfnVectors
080126e8 g     F .text	0000005c LoRaMacCommandsRemoveCmd
0800a3b8 g     F .text	00000034 HW_GPIO_SetIrq
080033b0 g     F .text	0000004c _fwalk_reent
08005828 g     F .text	00000122 __mdiff
08002ee8 g     F .text	00000068 .hidden __aeabi_d2iz
0800b738 g     F .text	000000f4 TST_TxTone
0801693c g     F .text	00000070 SX1276SetAntSwLowPower
0800d884 g     F .text	000001b8 HAL_RCCEx_PeriphCLKConfig
08012ec6 g     F .text	00000012 RegionDlChannelReq
08014154 g     F .text	00000026 CircularQueue_Init
080119ce g     F .text	00000002 LoRaMacClassBMulticastSlotTimerEvent
08003330 g     F .text	00000002 __sfp_lock_release
08013350 g     F .text	00000108 RegionUS915GetPhyParam
08016744 g     F .text	00000084 BSP_LED_Init
08009ba4 g     F .text	0000000e at_Join
2000223c g     O .bss	00000001 charRx
080140aa g     F .text	00000018 TimerGetElapsedTime
08000a3c g     F .text	0000002c _gettimeofday
080098b4 g     F .text	00000048 at_Rx1Delay_set
08016fd0 g     O .rodata	00000101 _ctype_
0801444c g     F .text	0000008c CircularQueue_Sense
0800b198 g     F .text	00000014 lora_config_appkey_set
080003ec  w    F .text	0000004e _read
08000ea0  w    F .text	00000002 .hidden __aeabi_idiv0
080099e4 g     F .text	0000002c at_JoinAcceptDelay2_get
080125f0 g     F .text	00000028 mallocNewMacCommandSlot
08008b54  w    F .text	00000002 FLASH_IRQHandler
080095fc g     F .text	0000004c at_TransmitPower_set
080140f0 g     F .text	0000000c srand1
080147e8 g     F .text	0000010c aes_set_key
08016a30 g     F .text	0000002c SX1276SetXO
08012ac0 g     F .text	0000000c LoRaMacFCntHandlerGetNvmCtx
08000f60 g     F .text	00000054 .hidden __muldi3
08008b54  w    F .text	00000002 USART1_IRQHandler
08011078 g     F .text	00000484 LoRaMacMibSetRequestConfirm
0800ac00 g     F .text	0000004c LORA_Join
080096f4 g     F .text	00000020 at_DutyCycle_get
080119dc g     F .text	00000004 LoRaMacClassBIsMulticastExpected
0800958c g     F .text	00000048 at_ADR_set
08009a10 g     F .text	00000048 at_JoinAcceptDelay2_set
08008cb0 g     F .text	00000008 RNG_LPUART1_IRQHandler
080119c4 g     F .text	00000002 LoRaMacClassBSetMulticastSlotState
08003ac0 g     F .text	00000064 strlen
08000eb4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08002230 g     F .text	000000c8 .hidden __gedf2
08014ba6 g     F .text	000000ba AES_CMAC_Update
08013ee6  w    F .text	00000002 LPM_ExitOffMode
0800cb2c g     F .text	0000006c HAL_UART_Init
08012c5c g     F .text	00000098 LoRaMacParserJoinAccept
0800fdec g     F .text	0000004c SendReJoinReq
080169ac g     F .text	00000044 SX1276IoIrqInit
0801409e g     F .text	0000000c TimerGetCurrentTime
0801001c g     F .text	000009f0 LoRaMacProcess
08009ce8 g     F .text	00000048 at_ReceiveBinary
08003044 g     F .text	000000a4 .hidden __aeabi_f2d
08015310 g     F .text	000001f8 SX1276GetTimeOnAir
08012fe2 g     F .text	0000002a RegionCommonChanDisable
08008b54  w    F .text	00000002 LPTIM1_IRQHandler
08008294 g     F .text	00000020 _wctomb_r
08003124 g     F .text	00000016 .hidden __clzdi2
200022d4 g     O .bss	00000068 SX1276
08012f38 g     F .text	00000028 RegionCommonGetJoinDc
0800e9b8 g     F .text	00000014 HAL_FLASHEx_DATAEEPROM_Lock
08000ba4 g     F .text	00000014 .hidden __gnu_thumb1_case_uhi
08005484 g     F .text	0000005a __lo0bits
0801465c g     F .text	00000084 TraceSend
08011fa8 g     F .text	00000014 LoRaMacCryptoSetKey
08000e98 g     F .text	00000008 .hidden __aeabi_idivmod
08013458 g     F .text	00000024 RegionUS915SetBandTxDone
0800ad8c g     F .text	00000080 LORA_RequestClass
08013f30 g     F .text	0000000e TimerInit
20000ad4 g     O .data	00000018 DioIrq
08013bc0 g     F .text	00000038 RegionUS915CalcBackOff
08013df4 g     F .text	00000084 RegionUS915SetContinuousWave
08009a58 g     F .text	00000014 at_NetworkJoinMode_get
08015180 g     F .text	0000003e SX1276WriteBuffer
2000084c g     O .data	0000016c __global_locale
08000adc g     F .text	0000004e _system
0800dfdc g     F .text	000000a0 HAL_DMA_Abort_IT
080119ea g     F .text	00000004 LoRaMacClassBSwitchClass
0800b6c4 g     F .text	0000000c lora_config_snr_get
080003c4 g     F .text	00000026 _swiread
08000594 g     F .text	00000064 _close
08003334 g     F .text	00000002 __sinit_lock_acquire
08005330 g     F .text	0000008a __multadd
0800531c g     F .text	00000014 _Bfree
0800cfb0 g     F .text	00000006 HAL_ADC_GetValue
0800a2d4 g     F .text	00000010 Error_Handler
2000233c g     O .bss	00000014 RxTimeoutTimer
080148f4 g     F .text	00000284 aes_encrypt
0800be88 g     F .text	0000005c HAL_RTC_MspInit



Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c2:	4806      	ldr	r0, [pc, #24]	; (80000dc <deregister_tm_clones+0x1c>)
 80000c4:	3303      	adds	r3, #3
 80000c6:	b510      	push	{r4, lr}
 80000c8:	1a1b      	subs	r3, r3, r0
 80000ca:	2b06      	cmp	r3, #6
 80000cc:	d903      	bls.n	80000d6 <deregister_tm_clones+0x16>
 80000ce:	4b04      	ldr	r3, [pc, #16]	; (80000e0 <deregister_tm_clones+0x20>)
 80000d0:	2b00      	cmp	r3, #0
 80000d2:	d000      	beq.n	80000d6 <deregister_tm_clones+0x16>
 80000d4:	4798      	blx	r3
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000b14 	.word	0x20000b14
 80000dc:	20000b14 	.word	0x20000b14
 80000e0:	00000000 	.word	0x00000000

080000e4 <register_tm_clones>:
 80000e4:	4806      	ldr	r0, [pc, #24]	; (8000100 <register_tm_clones+0x1c>)
 80000e6:	4907      	ldr	r1, [pc, #28]	; (8000104 <register_tm_clones+0x20>)
 80000e8:	b510      	push	{r4, lr}
 80000ea:	1a09      	subs	r1, r1, r0
 80000ec:	1089      	asrs	r1, r1, #2
 80000ee:	0fcb      	lsrs	r3, r1, #31
 80000f0:	1859      	adds	r1, r3, r1
 80000f2:	1049      	asrs	r1, r1, #1
 80000f4:	d003      	beq.n	80000fe <register_tm_clones+0x1a>
 80000f6:	4b04      	ldr	r3, [pc, #16]	; (8000108 <register_tm_clones+0x24>)
 80000f8:	2b00      	cmp	r3, #0
 80000fa:	d000      	beq.n	80000fe <register_tm_clones+0x1a>
 80000fc:	4798      	blx	r3
 80000fe:	bd10      	pop	{r4, pc}
 8000100:	20000b14 	.word	0x20000b14
 8000104:	20000b14 	.word	0x20000b14
 8000108:	00000000 	.word	0x00000000

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c07      	ldr	r4, [pc, #28]	; (800012c <__do_global_dtors_aux+0x20>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	2b00      	cmp	r3, #0
 8000114:	d109      	bne.n	800012a <__do_global_dtors_aux+0x1e>
 8000116:	f7ff ffd3 	bl	80000c0 <deregister_tm_clones>
 800011a:	4b05      	ldr	r3, [pc, #20]	; (8000130 <__do_global_dtors_aux+0x24>)
 800011c:	2b00      	cmp	r3, #0
 800011e:	d002      	beq.n	8000126 <__do_global_dtors_aux+0x1a>
 8000120:	4804      	ldr	r0, [pc, #16]	; (8000134 <__do_global_dtors_aux+0x28>)
 8000122:	e000      	b.n	8000126 <__do_global_dtors_aux+0x1a>
 8000124:	bf00      	nop
 8000126:	2301      	movs	r3, #1
 8000128:	7023      	strb	r3, [r4, #0]
 800012a:	bd10      	pop	{r4, pc}
 800012c:	20000b14 	.word	0x20000b14
 8000130:	00000000 	.word	0x00000000
 8000134:	08016a5c 	.word	0x08016a5c

08000138 <frame_dummy>:
 8000138:	4b09      	ldr	r3, [pc, #36]	; (8000160 <frame_dummy+0x28>)
 800013a:	b510      	push	{r4, lr}
 800013c:	2b00      	cmp	r3, #0
 800013e:	d003      	beq.n	8000148 <frame_dummy+0x10>
 8000140:	4908      	ldr	r1, [pc, #32]	; (8000164 <frame_dummy+0x2c>)
 8000142:	4809      	ldr	r0, [pc, #36]	; (8000168 <frame_dummy+0x30>)
 8000144:	e000      	b.n	8000148 <frame_dummy+0x10>
 8000146:	bf00      	nop
 8000148:	4808      	ldr	r0, [pc, #32]	; (800016c <frame_dummy+0x34>)
 800014a:	6803      	ldr	r3, [r0, #0]
 800014c:	2b00      	cmp	r3, #0
 800014e:	d102      	bne.n	8000156 <frame_dummy+0x1e>
 8000150:	f7ff ffc8 	bl	80000e4 <register_tm_clones>
 8000154:	bd10      	pop	{r4, pc}
 8000156:	4b06      	ldr	r3, [pc, #24]	; (8000170 <frame_dummy+0x38>)
 8000158:	2b00      	cmp	r3, #0
 800015a:	d0f9      	beq.n	8000150 <frame_dummy+0x18>
 800015c:	4798      	blx	r3
 800015e:	e7f7      	b.n	8000150 <frame_dummy+0x18>
 8000160:	00000000 	.word	0x00000000
 8000164:	20000b18 	.word	0x20000b18
 8000168:	08016a5c 	.word	0x08016a5c
 800016c:	20000b14 	.word	0x20000b14
 8000170:	00000000 	.word	0x00000000

08000174 <atexit>:
 8000174:	b510      	push	{r4, lr}
 8000176:	0001      	movs	r1, r0
 8000178:	2300      	movs	r3, #0
 800017a:	2200      	movs	r2, #0
 800017c:	2000      	movs	r0, #0
 800017e:	f000 f88d 	bl	800029c <__register_exitproc>
 8000182:	bd10      	pop	{r4, pc}

08000184 <__libc_fini_array>:
 8000184:	b570      	push	{r4, r5, r6, lr}
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <__libc_fini_array+0x28>)
 8000188:	4c09      	ldr	r4, [pc, #36]	; (80001b0 <__libc_fini_array+0x2c>)
 800018a:	1ae4      	subs	r4, r4, r3
 800018c:	10a4      	asrs	r4, r4, #2
 800018e:	d009      	beq.n	80001a4 <__libc_fini_array+0x20>
 8000190:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <__libc_fini_array+0x30>)
 8000192:	18a5      	adds	r5, r4, r2
 8000194:	00ad      	lsls	r5, r5, #2
 8000196:	18ed      	adds	r5, r5, r3
 8000198:	682b      	ldr	r3, [r5, #0]
 800019a:	3c01      	subs	r4, #1
 800019c:	4798      	blx	r3
 800019e:	3d04      	subs	r5, #4
 80001a0:	2c00      	cmp	r4, #0
 80001a2:	d1f9      	bne.n	8000198 <__libc_fini_array+0x14>
 80001a4:	f016 fc60 	bl	8016a68 <_fini>
 80001a8:	bd70      	pop	{r4, r5, r6, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	08018bb8 	.word	0x08018bb8
 80001b0:	08018bbc 	.word	0x08018bbc
 80001b4:	3fffffff 	.word	0x3fffffff

080001b8 <__libc_init_array>:
 80001b8:	b570      	push	{r4, r5, r6, lr}
 80001ba:	4e0d      	ldr	r6, [pc, #52]	; (80001f0 <__libc_init_array+0x38>)
 80001bc:	4d0d      	ldr	r5, [pc, #52]	; (80001f4 <__libc_init_array+0x3c>)
 80001be:	1bad      	subs	r5, r5, r6
 80001c0:	10ad      	asrs	r5, r5, #2
 80001c2:	d006      	beq.n	80001d2 <__libc_init_array+0x1a>
 80001c4:	2400      	movs	r4, #0
 80001c6:	00a3      	lsls	r3, r4, #2
 80001c8:	58f3      	ldr	r3, [r6, r3]
 80001ca:	3401      	adds	r4, #1
 80001cc:	4798      	blx	r3
 80001ce:	42a5      	cmp	r5, r4
 80001d0:	d1f9      	bne.n	80001c6 <__libc_init_array+0xe>
 80001d2:	f016 fc43 	bl	8016a5c <_init>
 80001d6:	4e08      	ldr	r6, [pc, #32]	; (80001f8 <__libc_init_array+0x40>)
 80001d8:	4d08      	ldr	r5, [pc, #32]	; (80001fc <__libc_init_array+0x44>)
 80001da:	1bad      	subs	r5, r5, r6
 80001dc:	10ad      	asrs	r5, r5, #2
 80001de:	d006      	beq.n	80001ee <__libc_init_array+0x36>
 80001e0:	2400      	movs	r4, #0
 80001e2:	00a3      	lsls	r3, r4, #2
 80001e4:	58f3      	ldr	r3, [r6, r3]
 80001e6:	3401      	adds	r4, #1
 80001e8:	4798      	blx	r3
 80001ea:	42a5      	cmp	r5, r4
 80001ec:	d1f9      	bne.n	80001e2 <__libc_init_array+0x2a>
 80001ee:	bd70      	pop	{r4, r5, r6, pc}
 80001f0:	08018bb0 	.word	0x08018bb0
 80001f4:	08018bb0 	.word	0x08018bb0
 80001f8:	08018bb0 	.word	0x08018bb0
 80001fc:	08018bb8 	.word	0x08018bb8

08000200 <memset>:
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000202:	0783      	lsls	r3, r0, #30
 8000204:	d046      	beq.n	8000294 <memset+0x94>
 8000206:	1e54      	subs	r4, r2, #1
 8000208:	2a00      	cmp	r2, #0
 800020a:	d042      	beq.n	8000292 <memset+0x92>
 800020c:	b2ce      	uxtb	r6, r1
 800020e:	0002      	movs	r2, r0
 8000210:	2503      	movs	r5, #3
 8000212:	e002      	b.n	800021a <memset+0x1a>
 8000214:	001a      	movs	r2, r3
 8000216:	3c01      	subs	r4, #1
 8000218:	d33b      	bcc.n	8000292 <memset+0x92>
 800021a:	1c53      	adds	r3, r2, #1
 800021c:	7016      	strb	r6, [r2, #0]
 800021e:	422b      	tst	r3, r5
 8000220:	d1f8      	bne.n	8000214 <memset+0x14>
 8000222:	2c03      	cmp	r4, #3
 8000224:	d92d      	bls.n	8000282 <memset+0x82>
 8000226:	22ff      	movs	r2, #255	; 0xff
 8000228:	400a      	ands	r2, r1
 800022a:	0215      	lsls	r5, r2, #8
 800022c:	4315      	orrs	r5, r2
 800022e:	042a      	lsls	r2, r5, #16
 8000230:	4315      	orrs	r5, r2
 8000232:	2c0f      	cmp	r4, #15
 8000234:	d916      	bls.n	8000264 <memset+0x64>
 8000236:	0027      	movs	r7, r4
 8000238:	3f10      	subs	r7, #16
 800023a:	093f      	lsrs	r7, r7, #4
 800023c:	013e      	lsls	r6, r7, #4
 800023e:	46b4      	mov	ip, r6
 8000240:	001e      	movs	r6, r3
 8000242:	001a      	movs	r2, r3
 8000244:	3610      	adds	r6, #16
 8000246:	4466      	add	r6, ip
 8000248:	6015      	str	r5, [r2, #0]
 800024a:	6055      	str	r5, [r2, #4]
 800024c:	6095      	str	r5, [r2, #8]
 800024e:	60d5      	str	r5, [r2, #12]
 8000250:	3210      	adds	r2, #16
 8000252:	42b2      	cmp	r2, r6
 8000254:	d1f8      	bne.n	8000248 <memset+0x48>
 8000256:	220f      	movs	r2, #15
 8000258:	3701      	adds	r7, #1
 800025a:	013f      	lsls	r7, r7, #4
 800025c:	19db      	adds	r3, r3, r7
 800025e:	4014      	ands	r4, r2
 8000260:	2c03      	cmp	r4, #3
 8000262:	d90e      	bls.n	8000282 <memset+0x82>
 8000264:	1f26      	subs	r6, r4, #4
 8000266:	08b6      	lsrs	r6, r6, #2
 8000268:	00b7      	lsls	r7, r6, #2
 800026a:	46bc      	mov	ip, r7
 800026c:	001a      	movs	r2, r3
 800026e:	1d1f      	adds	r7, r3, #4
 8000270:	4467      	add	r7, ip
 8000272:	c220      	stmia	r2!, {r5}
 8000274:	42ba      	cmp	r2, r7
 8000276:	d1fc      	bne.n	8000272 <memset+0x72>
 8000278:	2203      	movs	r2, #3
 800027a:	3601      	adds	r6, #1
 800027c:	00b6      	lsls	r6, r6, #2
 800027e:	199b      	adds	r3, r3, r6
 8000280:	4014      	ands	r4, r2
 8000282:	2c00      	cmp	r4, #0
 8000284:	d005      	beq.n	8000292 <memset+0x92>
 8000286:	b2c9      	uxtb	r1, r1
 8000288:	191c      	adds	r4, r3, r4
 800028a:	7019      	strb	r1, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	429c      	cmp	r4, r3
 8000290:	d1fb      	bne.n	800028a <memset+0x8a>
 8000292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000294:	0014      	movs	r4, r2
 8000296:	0003      	movs	r3, r0
 8000298:	e7c3      	b.n	8000222 <memset+0x22>
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__register_exitproc>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	46de      	mov	lr, fp
 80002a0:	469b      	mov	fp, r3
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <__register_exitproc+0xcc>)
 80002a4:	4645      	mov	r5, r8
 80002a6:	681c      	ldr	r4, [r3, #0]
 80002a8:	23a4      	movs	r3, #164	; 0xa4
 80002aa:	464e      	mov	r6, r9
 80002ac:	4657      	mov	r7, sl
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	b5e0      	push	{r5, r6, r7, lr}
 80002b2:	0005      	movs	r5, r0
 80002b4:	58e0      	ldr	r0, [r4, r3]
 80002b6:	000e      	movs	r6, r1
 80002b8:	4690      	mov	r8, r2
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d04b      	beq.n	8000356 <__register_exitproc+0xba>
 80002be:	6843      	ldr	r3, [r0, #4]
 80002c0:	2b1f      	cmp	r3, #31
 80002c2:	dc0d      	bgt.n	80002e0 <__register_exitproc+0x44>
 80002c4:	1c5c      	adds	r4, r3, #1
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d121      	bne.n	800030e <__register_exitproc+0x72>
 80002ca:	3302      	adds	r3, #2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	6044      	str	r4, [r0, #4]
 80002d0:	501e      	str	r6, [r3, r0]
 80002d2:	2000      	movs	r0, #0
 80002d4:	bc3c      	pop	{r2, r3, r4, r5}
 80002d6:	4690      	mov	r8, r2
 80002d8:	4699      	mov	r9, r3
 80002da:	46a2      	mov	sl, r4
 80002dc:	46ab      	mov	fp, r5
 80002de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <__register_exitproc+0xd0>)
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03c      	beq.n	8000360 <__register_exitproc+0xc4>
 80002e6:	20c8      	movs	r0, #200	; 0xc8
 80002e8:	0040      	lsls	r0, r0, #1
 80002ea:	e000      	b.n	80002ee <__register_exitproc+0x52>
 80002ec:	bf00      	nop
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d036      	beq.n	8000360 <__register_exitproc+0xc4>
 80002f2:	22a4      	movs	r2, #164	; 0xa4
 80002f4:	2300      	movs	r3, #0
 80002f6:	0052      	lsls	r2, r2, #1
 80002f8:	58a1      	ldr	r1, [r4, r2]
 80002fa:	6043      	str	r3, [r0, #4]
 80002fc:	6001      	str	r1, [r0, #0]
 80002fe:	50a0      	str	r0, [r4, r2]
 8000300:	3240      	adds	r2, #64	; 0x40
 8000302:	5083      	str	r3, [r0, r2]
 8000304:	3204      	adds	r2, #4
 8000306:	5083      	str	r3, [r0, r2]
 8000308:	2401      	movs	r4, #1
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0dd      	beq.n	80002ca <__register_exitproc+0x2e>
 800030e:	009a      	lsls	r2, r3, #2
 8000310:	4691      	mov	r9, r2
 8000312:	4481      	add	r9, r0
 8000314:	4642      	mov	r2, r8
 8000316:	2188      	movs	r1, #136	; 0x88
 8000318:	464f      	mov	r7, r9
 800031a:	507a      	str	r2, [r7, r1]
 800031c:	22c4      	movs	r2, #196	; 0xc4
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	4690      	mov	r8, r2
 8000322:	4480      	add	r8, r0
 8000324:	4642      	mov	r2, r8
 8000326:	3987      	subs	r1, #135	; 0x87
 8000328:	4099      	lsls	r1, r3
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	468a      	mov	sl, r1
 800032e:	430a      	orrs	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	4642      	mov	r2, r8
 8000334:	4661      	mov	r1, ip
 8000336:	6011      	str	r1, [r2, #0]
 8000338:	2284      	movs	r2, #132	; 0x84
 800033a:	4649      	mov	r1, r9
 800033c:	465f      	mov	r7, fp
 800033e:	0052      	lsls	r2, r2, #1
 8000340:	508f      	str	r7, [r1, r2]
 8000342:	2d02      	cmp	r5, #2
 8000344:	d1c1      	bne.n	80002ca <__register_exitproc+0x2e>
 8000346:	0002      	movs	r2, r0
 8000348:	4655      	mov	r5, sl
 800034a:	328d      	adds	r2, #141	; 0x8d
 800034c:	32ff      	adds	r2, #255	; 0xff
 800034e:	6811      	ldr	r1, [r2, #0]
 8000350:	430d      	orrs	r5, r1
 8000352:	6015      	str	r5, [r2, #0]
 8000354:	e7b9      	b.n	80002ca <__register_exitproc+0x2e>
 8000356:	0020      	movs	r0, r4
 8000358:	304d      	adds	r0, #77	; 0x4d
 800035a:	30ff      	adds	r0, #255	; 0xff
 800035c:	50e0      	str	r0, [r4, r3]
 800035e:	e7ae      	b.n	80002be <__register_exitproc+0x22>
 8000360:	2001      	movs	r0, #1
 8000362:	4240      	negs	r0, r0
 8000364:	e7b6      	b.n	80002d4 <__register_exitproc+0x38>
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	08016a78 	.word	0x08016a78
 800036c:	00000000 	.word	0x00000000

08000370 <findslot>:
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <findslot+0x30>)
 8000372:	b510      	push	{r4, lr}
 8000374:	0004      	movs	r4, r0
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	2800      	cmp	r0, #0
 800037a:	d002      	beq.n	8000382 <findslot+0x12>
 800037c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800037e:	2b00      	cmp	r3, #0
 8000380:	d008      	beq.n	8000394 <findslot+0x24>
 8000382:	2c13      	cmp	r4, #19
 8000384:	d809      	bhi.n	800039a <findslot+0x2a>
 8000386:	4807      	ldr	r0, [pc, #28]	; (80003a4 <findslot+0x34>)
 8000388:	00e4      	lsls	r4, r4, #3
 800038a:	5823      	ldr	r3, [r4, r0]
 800038c:	3301      	adds	r3, #1
 800038e:	d004      	beq.n	800039a <findslot+0x2a>
 8000390:	1820      	adds	r0, r4, r0
 8000392:	bd10      	pop	{r4, pc}
 8000394:	f002 ffc2 	bl	800331c <__sinit>
 8000398:	e7f3      	b.n	8000382 <findslot+0x12>
 800039a:	2000      	movs	r0, #0
 800039c:	e7f9      	b.n	8000392 <findslot+0x22>
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000b40 	.word	0x20000b40

080003a8 <checkerror.part.0>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	f002 fec7 	bl	800313c <__errno>
 80003ae:	2413      	movs	r4, #19
 80003b0:	0005      	movs	r5, r0
 80003b2:	2600      	movs	r6, #0
 80003b4:	1c20      	adds	r0, r4, #0
 80003b6:	1c31      	adds	r1, r6, #0
 80003b8:	beab      	bkpt	0x00ab
 80003ba:	1c04      	adds	r4, r0, #0
 80003bc:	2001      	movs	r0, #1
 80003be:	602c      	str	r4, [r5, #0]
 80003c0:	4240      	negs	r0, r0
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <_swiread>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	ad01      	add	r5, sp, #4
 80003ca:	9001      	str	r0, [sp, #4]
 80003cc:	9102      	str	r1, [sp, #8]
 80003ce:	9203      	str	r2, [sp, #12]
 80003d0:	2406      	movs	r4, #6
 80003d2:	1c20      	adds	r0, r4, #0
 80003d4:	1c29      	adds	r1, r5, #0
 80003d6:	beab      	bkpt	0x00ab
 80003d8:	1c04      	adds	r4, r0, #0
 80003da:	0020      	movs	r0, r4
 80003dc:	1c63      	adds	r3, r4, #1
 80003de:	d001      	beq.n	80003e4 <_swiread+0x20>
 80003e0:	b005      	add	sp, #20
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	f7ff ffe0 	bl	80003a8 <checkerror.part.0>
 80003e8:	e7fa      	b.n	80003e0 <_swiread+0x1c>
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <_read>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	b085      	sub	sp, #20
 80003f0:	000c      	movs	r4, r1
 80003f2:	0017      	movs	r7, r2
 80003f4:	f7ff ffbc 	bl	8000370 <findslot>
 80003f8:	1e05      	subs	r5, r0, #0
 80003fa:	d017      	beq.n	800042c <_read+0x40>
 80003fc:	6803      	ldr	r3, [r0, #0]
 80003fe:	ae01      	add	r6, sp, #4
 8000400:	9402      	str	r4, [sp, #8]
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	9703      	str	r7, [sp, #12]
 8000406:	2406      	movs	r4, #6
 8000408:	1c20      	adds	r0, r4, #0
 800040a:	1c31      	adds	r1, r6, #0
 800040c:	beab      	bkpt	0x00ab
 800040e:	1c04      	adds	r4, r0, #0
 8000410:	0020      	movs	r0, r4
 8000412:	1c63      	adds	r3, r4, #1
 8000414:	d005      	beq.n	8000422 <_read+0x36>
 8000416:	686b      	ldr	r3, [r5, #4]
 8000418:	1a38      	subs	r0, r7, r0
 800041a:	181b      	adds	r3, r3, r0
 800041c:	606b      	str	r3, [r5, #4]
 800041e:	b005      	add	sp, #20
 8000420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000422:	f7ff ffc1 	bl	80003a8 <checkerror.part.0>
 8000426:	1c43      	adds	r3, r0, #1
 8000428:	d0f9      	beq.n	800041e <_read+0x32>
 800042a:	e7f4      	b.n	8000416 <_read+0x2a>
 800042c:	f002 fe86 	bl	800313c <__errno>
 8000430:	2309      	movs	r3, #9
 8000432:	6003      	str	r3, [r0, #0]
 8000434:	2001      	movs	r0, #1
 8000436:	4240      	negs	r0, r0
 8000438:	e7f1      	b.n	800041e <_read+0x32>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <_swilseek>:
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	b083      	sub	sp, #12
 8000440:	000d      	movs	r5, r1
 8000442:	0014      	movs	r4, r2
 8000444:	f7ff ff94 	bl	8000370 <findslot>
 8000448:	1e06      	subs	r6, r0, #0
 800044a:	d03a      	beq.n	80004c2 <_swilseek+0x86>
 800044c:	2c02      	cmp	r4, #2
 800044e:	d831      	bhi.n	80004b4 <_swilseek+0x78>
 8000450:	2c01      	cmp	r4, #1
 8000452:	d01d      	beq.n	8000490 <_swilseek+0x54>
 8000454:	6803      	ldr	r3, [r0, #0]
 8000456:	466f      	mov	r7, sp
 8000458:	2c02      	cmp	r4, #2
 800045a:	d00e      	beq.n	800047a <_swilseek+0x3e>
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	607d      	str	r5, [r7, #4]
 8000460:	240a      	movs	r4, #10
 8000462:	1c20      	adds	r0, r4, #0
 8000464:	1c39      	adds	r1, r7, #0
 8000466:	beab      	bkpt	0x00ab
 8000468:	1c04      	adds	r4, r0, #0
 800046a:	1c63      	adds	r3, r4, #1
 800046c:	d016      	beq.n	800049c <_swilseek+0x60>
 800046e:	2c00      	cmp	r4, #0
 8000470:	db1d      	blt.n	80004ae <_swilseek+0x72>
 8000472:	6075      	str	r5, [r6, #4]
 8000474:	0028      	movs	r0, r5
 8000476:	b003      	add	sp, #12
 8000478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	340a      	adds	r4, #10
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	1c39      	adds	r1, r7, #0
 8000482:	beab      	bkpt	0x00ab
 8000484:	1c04      	adds	r4, r0, #0
 8000486:	1c63      	adds	r3, r4, #1
 8000488:	d00c      	beq.n	80004a4 <_swilseek+0x68>
 800048a:	192d      	adds	r5, r5, r4
 800048c:	6833      	ldr	r3, [r6, #0]
 800048e:	e7e5      	b.n	800045c <_swilseek+0x20>
 8000490:	6843      	ldr	r3, [r0, #4]
 8000492:	18ed      	adds	r5, r5, r3
 8000494:	d40e      	bmi.n	80004b4 <_swilseek+0x78>
 8000496:	6803      	ldr	r3, [r0, #0]
 8000498:	466f      	mov	r7, sp
 800049a:	e7df      	b.n	800045c <_swilseek+0x20>
 800049c:	f7ff ff84 	bl	80003a8 <checkerror.part.0>
 80004a0:	0004      	movs	r4, r0
 80004a2:	e7e4      	b.n	800046e <_swilseek+0x32>
 80004a4:	f7ff ff80 	bl	80003a8 <checkerror.part.0>
 80004a8:	0004      	movs	r4, r0
 80004aa:	1c43      	adds	r3, r0, #1
 80004ac:	d1ed      	bne.n	800048a <_swilseek+0x4e>
 80004ae:	2501      	movs	r5, #1
 80004b0:	426d      	negs	r5, r5
 80004b2:	e7df      	b.n	8000474 <_swilseek+0x38>
 80004b4:	f002 fe42 	bl	800313c <__errno>
 80004b8:	2501      	movs	r5, #1
 80004ba:	2316      	movs	r3, #22
 80004bc:	426d      	negs	r5, r5
 80004be:	6003      	str	r3, [r0, #0]
 80004c0:	e7d8      	b.n	8000474 <_swilseek+0x38>
 80004c2:	f002 fe3b 	bl	800313c <__errno>
 80004c6:	2501      	movs	r5, #1
 80004c8:	2309      	movs	r3, #9
 80004ca:	426d      	negs	r5, r5
 80004cc:	6003      	str	r3, [r0, #0]
 80004ce:	e7d1      	b.n	8000474 <_swilseek+0x38>

080004d0 <_lseek>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f7ff ffb3 	bl	800043c <_swilseek>
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <_swiwrite>:
 80004d8:	b530      	push	{r4, r5, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	ad01      	add	r5, sp, #4
 80004de:	9001      	str	r0, [sp, #4]
 80004e0:	9102      	str	r1, [sp, #8]
 80004e2:	9203      	str	r2, [sp, #12]
 80004e4:	2405      	movs	r4, #5
 80004e6:	1c20      	adds	r0, r4, #0
 80004e8:	1c29      	adds	r1, r5, #0
 80004ea:	beab      	bkpt	0x00ab
 80004ec:	1c04      	adds	r4, r0, #0
 80004ee:	0020      	movs	r0, r4
 80004f0:	1c63      	adds	r3, r4, #1
 80004f2:	d001      	beq.n	80004f8 <_swiwrite+0x20>
 80004f4:	b005      	add	sp, #20
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	f7ff ff56 	bl	80003a8 <checkerror.part.0>
 80004fc:	e7fa      	b.n	80004f4 <_swiwrite+0x1c>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <_write>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	000c      	movs	r4, r1
 8000506:	0017      	movs	r7, r2
 8000508:	f7ff ff32 	bl	8000370 <findslot>
 800050c:	1e05      	subs	r5, r0, #0
 800050e:	d028      	beq.n	8000562 <_write+0x62>
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	ae01      	add	r6, sp, #4
 8000514:	9402      	str	r4, [sp, #8]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9703      	str	r7, [sp, #12]
 800051a:	2405      	movs	r4, #5
 800051c:	1c20      	adds	r0, r4, #0
 800051e:	1c31      	adds	r1, r6, #0
 8000520:	beab      	bkpt	0x00ab
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	1c63      	adds	r3, r4, #1
 8000526:	d009      	beq.n	800053c <_write+0x3c>
 8000528:	2c00      	cmp	r4, #0
 800052a:	db17      	blt.n	800055c <_write+0x5c>
 800052c:	686b      	ldr	r3, [r5, #4]
 800052e:	1b38      	subs	r0, r7, r4
 8000530:	181a      	adds	r2, r3, r0
 8000532:	606a      	str	r2, [r5, #4]
 8000534:	42bc      	cmp	r4, r7
 8000536:	d005      	beq.n	8000544 <_write+0x44>
 8000538:	b005      	add	sp, #20
 800053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053c:	f7ff ff34 	bl	80003a8 <checkerror.part.0>
 8000540:	0004      	movs	r4, r0
 8000542:	e7f1      	b.n	8000528 <_write+0x28>
 8000544:	f002 fdfa 	bl	800313c <__errno>
 8000548:	2413      	movs	r4, #19
 800054a:	0005      	movs	r5, r0
 800054c:	2600      	movs	r6, #0
 800054e:	1c20      	adds	r0, r4, #0
 8000550:	1c31      	adds	r1, r6, #0
 8000552:	beab      	bkpt	0x00ab
 8000554:	1c04      	adds	r4, r0, #0
 8000556:	2000      	movs	r0, #0
 8000558:	602c      	str	r4, [r5, #0]
 800055a:	e7ed      	b.n	8000538 <_write+0x38>
 800055c:	2001      	movs	r0, #1
 800055e:	4240      	negs	r0, r0
 8000560:	e7ea      	b.n	8000538 <_write+0x38>
 8000562:	f002 fdeb 	bl	800313c <__errno>
 8000566:	2309      	movs	r3, #9
 8000568:	6003      	str	r3, [r0, #0]
 800056a:	2001      	movs	r0, #1
 800056c:	4240      	negs	r0, r0
 800056e:	e7e3      	b.n	8000538 <_write+0x38>

08000570 <_swiclose>:
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b083      	sub	sp, #12
 8000574:	9001      	str	r0, [sp, #4]
 8000576:	2402      	movs	r4, #2
 8000578:	ad01      	add	r5, sp, #4
 800057a:	1c20      	adds	r0, r4, #0
 800057c:	1c29      	adds	r1, r5, #0
 800057e:	beab      	bkpt	0x00ab
 8000580:	1c04      	adds	r4, r0, #0
 8000582:	0020      	movs	r0, r4
 8000584:	1c63      	adds	r3, r4, #1
 8000586:	d001      	beq.n	800058c <_swiclose+0x1c>
 8000588:	b003      	add	sp, #12
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f7ff ff0c 	bl	80003a8 <checkerror.part.0>
 8000590:	e7fa      	b.n	8000588 <_swiclose+0x18>
 8000592:	46c0      	nop			; (mov r8, r8)

08000594 <_close>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	0004      	movs	r4, r0
 800059a:	f7ff fee9 	bl	8000370 <findslot>
 800059e:	1e05      	subs	r5, r0, #0
 80005a0:	d021      	beq.n	80005e6 <_close+0x52>
 80005a2:	3c01      	subs	r4, #1
 80005a4:	2c01      	cmp	r4, #1
 80005a6:	d911      	bls.n	80005cc <_close+0x38>
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	2402      	movs	r4, #2
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	ae01      	add	r6, sp, #4
 80005b0:	1c20      	adds	r0, r4, #0
 80005b2:	1c31      	adds	r1, r6, #0
 80005b4:	beab      	bkpt	0x00ab
 80005b6:	1c04      	adds	r4, r0, #0
 80005b8:	0020      	movs	r0, r4
 80005ba:	1c63      	adds	r3, r4, #1
 80005bc:	d010      	beq.n	80005e0 <_close+0x4c>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d102      	bne.n	80005c8 <_close+0x34>
 80005c2:	2301      	movs	r3, #1
 80005c4:	425b      	negs	r3, r3
 80005c6:	602b      	str	r3, [r5, #0]
 80005c8:	b002      	add	sp, #8
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <_close+0x60>)
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d1e8      	bne.n	80005a8 <_close+0x14>
 80005d6:	2301      	movs	r3, #1
 80005d8:	425b      	negs	r3, r3
 80005da:	6003      	str	r3, [r0, #0]
 80005dc:	2000      	movs	r0, #0
 80005de:	e7f3      	b.n	80005c8 <_close+0x34>
 80005e0:	f7ff fee2 	bl	80003a8 <checkerror.part.0>
 80005e4:	e7eb      	b.n	80005be <_close+0x2a>
 80005e6:	f002 fda9 	bl	800313c <__errno>
 80005ea:	2309      	movs	r3, #9
 80005ec:	6003      	str	r3, [r0, #0]
 80005ee:	2001      	movs	r0, #1
 80005f0:	4240      	negs	r0, r0
 80005f2:	e7e9      	b.n	80005c8 <_close+0x34>
 80005f4:	20000b40 	.word	0x20000b40

080005f8 <_getpid>:
 80005f8:	2001      	movs	r0, #1
 80005fa:	4770      	bx	lr

080005fc <_sbrk>:
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <_sbrk+0x38>)
 80005fe:	b510      	push	{r4, lr}
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d013      	beq.n	800062e <_sbrk+0x32>
 8000606:	4669      	mov	r1, sp
 8000608:	1818      	adds	r0, r3, r0
 800060a:	4288      	cmp	r0, r1
 800060c:	d808      	bhi.n	8000620 <_sbrk+0x24>
 800060e:	490a      	ldr	r1, [pc, #40]	; (8000638 <_sbrk+0x3c>)
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <_sbrk+0x40>)
 8000612:	6809      	ldr	r1, [r1, #0]
 8000614:	42a1      	cmp	r1, r4
 8000616:	d001      	beq.n	800061c <_sbrk+0x20>
 8000618:	4288      	cmp	r0, r1
 800061a:	d801      	bhi.n	8000620 <_sbrk+0x24>
 800061c:	6010      	str	r0, [r2, #0]
 800061e:	e004      	b.n	800062a <_sbrk+0x2e>
 8000620:	f002 fd8c 	bl	800313c <__errno>
 8000624:	230c      	movs	r3, #12
 8000626:	6003      	str	r3, [r0, #0]
 8000628:	3b0d      	subs	r3, #13
 800062a:	0018      	movs	r0, r3
 800062c:	bd10      	pop	{r4, pc}
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <_sbrk+0x44>)
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e7e8      	b.n	8000606 <_sbrk+0xa>
 8000634:	20000b30 	.word	0x20000b30
 8000638:	20000430 	.word	0x20000430
 800063c:	cafedead 	.word	0xcafedead
 8000640:	20002358 	.word	0x20002358

08000644 <_swistat>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	000d      	movs	r5, r1
 8000648:	f7ff fe92 	bl	8000370 <findslot>
 800064c:	1e06      	subs	r6, r0, #0
 800064e:	d017      	beq.n	8000680 <_swistat+0x3c>
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	686a      	ldr	r2, [r5, #4]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	4313      	orrs	r3, r2
 8000658:	606b      	str	r3, [r5, #4]
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	646b      	str	r3, [r5, #68]	; 0x44
 8000660:	240c      	movs	r4, #12
 8000662:	1c20      	adds	r0, r4, #0
 8000664:	1c31      	adds	r1, r6, #0
 8000666:	beab      	bkpt	0x00ab
 8000668:	1c04      	adds	r4, r0, #0
 800066a:	0020      	movs	r0, r4
 800066c:	1c63      	adds	r3, r4, #1
 800066e:	d002      	beq.n	8000676 <_swistat+0x32>
 8000670:	6128      	str	r0, [r5, #16]
 8000672:	2000      	movs	r0, #0
 8000674:	bd70      	pop	{r4, r5, r6, pc}
 8000676:	f7ff fe97 	bl	80003a8 <checkerror.part.0>
 800067a:	1c43      	adds	r3, r0, #1
 800067c:	d1f8      	bne.n	8000670 <_swistat+0x2c>
 800067e:	e7f9      	b.n	8000674 <_swistat+0x30>
 8000680:	f002 fd5c 	bl	800313c <__errno>
 8000684:	2309      	movs	r3, #9
 8000686:	6003      	str	r3, [r0, #0]
 8000688:	2001      	movs	r0, #1
 800068a:	4240      	negs	r0, r0
 800068c:	e7f2      	b.n	8000674 <_swistat+0x30>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <_fstat>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	000c      	movs	r4, r1
 8000694:	0005      	movs	r5, r0
 8000696:	2258      	movs	r2, #88	; 0x58
 8000698:	2100      	movs	r1, #0
 800069a:	0020      	movs	r0, r4
 800069c:	f7ff fdb0 	bl	8000200 <memset>
 80006a0:	0028      	movs	r0, r5
 80006a2:	0021      	movs	r1, r4
 80006a4:	f7ff ffce 	bl	8000644 <_swistat>
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)

080006ac <_stat>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	000c      	movs	r4, r1
 80006b0:	0005      	movs	r5, r0
 80006b2:	2258      	movs	r2, #88	; 0x58
 80006b4:	2100      	movs	r1, #0
 80006b6:	0020      	movs	r0, r4
 80006b8:	f7ff fda2 	bl	8000200 <memset>
 80006bc:	0028      	movs	r0, r5
 80006be:	2100      	movs	r1, #0
 80006c0:	f000 f814 	bl	80006ec <_swiopen>
 80006c4:	0005      	movs	r5, r0
 80006c6:	1c43      	adds	r3, r0, #1
 80006c8:	d00d      	beq.n	80006e6 <_stat+0x3a>
 80006ca:	2381      	movs	r3, #129	; 0x81
 80006cc:	6862      	ldr	r2, [r4, #4]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	4313      	orrs	r3, r2
 80006d2:	6063      	str	r3, [r4, #4]
 80006d4:	0021      	movs	r1, r4
 80006d6:	f7ff ffb5 	bl	8000644 <_swistat>
 80006da:	0004      	movs	r4, r0
 80006dc:	0028      	movs	r0, r5
 80006de:	f7ff ff59 	bl	8000594 <_close>
 80006e2:	0020      	movs	r0, r4
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	0004      	movs	r4, r0
 80006e8:	e7fb      	b.n	80006e2 <_stat+0x36>
 80006ea:	46c0      	nop			; (mov r8, r8)

080006ec <_swiopen>:
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	46d6      	mov	lr, sl
 80006f0:	464f      	mov	r7, r9
 80006f2:	4646      	mov	r6, r8
 80006f4:	b5c0      	push	{r6, r7, lr}
 80006f6:	4682      	mov	sl, r0
 80006f8:	b096      	sub	sp, #88	; 0x58
 80006fa:	4688      	mov	r8, r1
 80006fc:	2400      	movs	r4, #0
 80006fe:	4f2f      	ldr	r7, [pc, #188]	; (80007bc <_swiopen+0xd0>)
 8000700:	e002      	b.n	8000708 <_swiopen+0x1c>
 8000702:	3401      	adds	r4, #1
 8000704:	2c14      	cmp	r4, #20
 8000706:	d03a      	beq.n	800077e <_swiopen+0x92>
 8000708:	00e5      	lsls	r5, r4, #3
 800070a:	597e      	ldr	r6, [r7, r5]
 800070c:	1c73      	adds	r3, r6, #1
 800070e:	d1f8      	bne.n	8000702 <_swiopen+0x16>
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	4642      	mov	r2, r8
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	401a      	ands	r2, r3
 8000718:	46e9      	mov	r9, sp
 800071a:	429a      	cmp	r2, r3
 800071c:	d042      	beq.n	80007a4 <_swiopen+0xb8>
 800071e:	4643      	mov	r3, r8
 8000720:	4642      	mov	r2, r8
 8000722:	03de      	lsls	r6, r3, #15
 8000724:	2302      	movs	r3, #2
 8000726:	0ff6      	lsrs	r6, r6, #31
 8000728:	4213      	tst	r3, r2
 800072a:	d000      	beq.n	800072e <_swiopen+0x42>
 800072c:	431e      	orrs	r6, r3
 800072e:	4642      	mov	r2, r8
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <_swiopen+0xd4>)
 8000732:	421a      	tst	r2, r3
 8000734:	d001      	beq.n	800073a <_swiopen+0x4e>
 8000736:	2304      	movs	r3, #4
 8000738:	431e      	orrs	r6, r3
 800073a:	2308      	movs	r3, #8
 800073c:	4642      	mov	r2, r8
 800073e:	4213      	tst	r3, r2
 8000740:	d119      	bne.n	8000776 <_swiopen+0x8a>
 8000742:	4653      	mov	r3, sl
 8000744:	4650      	mov	r0, sl
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	f003 f9ba 	bl	8003ac0 <strlen>
 800074c:	464b      	mov	r3, r9
 800074e:	605e      	str	r6, [r3, #4]
 8000750:	6098      	str	r0, [r3, #8]
 8000752:	2601      	movs	r6, #1
 8000754:	1c30      	adds	r0, r6, #0
 8000756:	4649      	mov	r1, r9
 8000758:	beab      	bkpt	0x00ab
 800075a:	1c06      	adds	r6, r0, #0
 800075c:	2e00      	cmp	r6, #0
 800075e:	db15      	blt.n	800078c <_swiopen+0xa0>
 8000760:	2300      	movs	r3, #0
 8000762:	517e      	str	r6, [r7, r5]
 8000764:	197d      	adds	r5, r7, r5
 8000766:	606b      	str	r3, [r5, #4]
 8000768:	0020      	movs	r0, r4
 800076a:	b016      	add	sp, #88	; 0x58
 800076c:	bc1c      	pop	{r2, r3, r4}
 800076e:	4690      	mov	r8, r2
 8000770:	4699      	mov	r9, r3
 8000772:	46a2      	mov	sl, r4
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	2204      	movs	r2, #4
 8000778:	4396      	bics	r6, r2
 800077a:	431e      	orrs	r6, r3
 800077c:	e7e1      	b.n	8000742 <_swiopen+0x56>
 800077e:	f002 fcdd 	bl	800313c <__errno>
 8000782:	2401      	movs	r4, #1
 8000784:	2318      	movs	r3, #24
 8000786:	4264      	negs	r4, r4
 8000788:	6003      	str	r3, [r0, #0]
 800078a:	e7ed      	b.n	8000768 <_swiopen+0x7c>
 800078c:	f002 fcd6 	bl	800313c <__errno>
 8000790:	2413      	movs	r4, #19
 8000792:	0005      	movs	r5, r0
 8000794:	2700      	movs	r7, #0
 8000796:	1c20      	adds	r0, r4, #0
 8000798:	1c39      	adds	r1, r7, #0
 800079a:	beab      	bkpt	0x00ab
 800079c:	1c04      	adds	r4, r0, #0
 800079e:	602c      	str	r4, [r5, #0]
 80007a0:	0034      	movs	r4, r6
 80007a2:	e7e1      	b.n	8000768 <_swiopen+0x7c>
 80007a4:	4649      	mov	r1, r9
 80007a6:	4650      	mov	r0, sl
 80007a8:	f7ff ff80 	bl	80006ac <_stat>
 80007ac:	1c43      	adds	r3, r0, #1
 80007ae:	d0b6      	beq.n	800071e <_swiopen+0x32>
 80007b0:	f002 fcc4 	bl	800313c <__errno>
 80007b4:	2311      	movs	r3, #17
 80007b6:	0034      	movs	r4, r6
 80007b8:	6003      	str	r3, [r0, #0]
 80007ba:	e7d5      	b.n	8000768 <_swiopen+0x7c>
 80007bc:	20000b40 	.word	0x20000b40
 80007c0:	00000601 	.word	0x00000601

080007c4 <_open>:
 80007c4:	b40e      	push	{r1, r2, r3}
 80007c6:	b500      	push	{lr}
 80007c8:	9901      	ldr	r1, [sp, #4]
 80007ca:	f7ff ff8f 	bl	80006ec <_swiopen>
 80007ce:	bc08      	pop	{r3}
 80007d0:	b003      	add	sp, #12
 80007d2:	4718      	bx	r3

080007d4 <_get_semihosting_exts>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	4647      	mov	r7, r8
 80007d8:	46ce      	mov	lr, r9
 80007da:	b580      	push	{r7, lr}
 80007dc:	4688      	mov	r8, r1
 80007de:	b083      	sub	sp, #12
 80007e0:	0007      	movs	r7, r0
 80007e2:	2100      	movs	r1, #0
 80007e4:	482b      	ldr	r0, [pc, #172]	; (8000894 <_get_semihosting_exts+0xc0>)
 80007e6:	0016      	movs	r6, r2
 80007e8:	f7ff ff80 	bl	80006ec <_swiopen>
 80007ec:	0005      	movs	r5, r0
 80007ee:	0032      	movs	r2, r6
 80007f0:	2100      	movs	r1, #0
 80007f2:	0038      	movs	r0, r7
 80007f4:	f7ff fd04 	bl	8000200 <memset>
 80007f8:	1c6b      	adds	r3, r5, #1
 80007fa:	d049      	beq.n	8000890 <_get_semihosting_exts+0xbc>
 80007fc:	0028      	movs	r0, r5
 80007fe:	f7ff fdb7 	bl	8000370 <findslot>
 8000802:	240c      	movs	r4, #12
 8000804:	4681      	mov	r9, r0
 8000806:	1c20      	adds	r0, r4, #0
 8000808:	4649      	mov	r1, r9
 800080a:	beab      	bkpt	0x00ab
 800080c:	1c04      	adds	r4, r0, #0
 800080e:	0020      	movs	r0, r4
 8000810:	1c63      	adds	r3, r4, #1
 8000812:	d036      	beq.n	8000882 <_get_semihosting_exts+0xae>
 8000814:	2803      	cmp	r0, #3
 8000816:	dd2e      	ble.n	8000876 <_get_semihosting_exts+0xa2>
 8000818:	3803      	subs	r0, #3
 800081a:	42b0      	cmp	r0, r6
 800081c:	dd2b      	ble.n	8000876 <_get_semihosting_exts+0xa2>
 800081e:	ac01      	add	r4, sp, #4
 8000820:	2204      	movs	r2, #4
 8000822:	0021      	movs	r1, r4
 8000824:	0028      	movs	r0, r5
 8000826:	f7ff fde1 	bl	80003ec <_read>
 800082a:	2803      	cmp	r0, #3
 800082c:	dd23      	ble.n	8000876 <_get_semihosting_exts+0xa2>
 800082e:	7823      	ldrb	r3, [r4, #0]
 8000830:	2b53      	cmp	r3, #83	; 0x53
 8000832:	d120      	bne.n	8000876 <_get_semihosting_exts+0xa2>
 8000834:	7863      	ldrb	r3, [r4, #1]
 8000836:	2b48      	cmp	r3, #72	; 0x48
 8000838:	d11d      	bne.n	8000876 <_get_semihosting_exts+0xa2>
 800083a:	78a3      	ldrb	r3, [r4, #2]
 800083c:	2b46      	cmp	r3, #70	; 0x46
 800083e:	d11a      	bne.n	8000876 <_get_semihosting_exts+0xa2>
 8000840:	78e3      	ldrb	r3, [r4, #3]
 8000842:	2b42      	cmp	r3, #66	; 0x42
 8000844:	d117      	bne.n	8000876 <_get_semihosting_exts+0xa2>
 8000846:	2201      	movs	r2, #1
 8000848:	4641      	mov	r1, r8
 800084a:	0028      	movs	r0, r5
 800084c:	f7ff fdf6 	bl	800043c <_swilseek>
 8000850:	2800      	cmp	r0, #0
 8000852:	db10      	blt.n	8000876 <_get_semihosting_exts+0xa2>
 8000854:	0032      	movs	r2, r6
 8000856:	0039      	movs	r1, r7
 8000858:	0028      	movs	r0, r5
 800085a:	f7ff fdc7 	bl	80003ec <_read>
 800085e:	0004      	movs	r4, r0
 8000860:	0028      	movs	r0, r5
 8000862:	f7ff fe97 	bl	8000594 <_close>
 8000866:	1c63      	adds	r3, r4, #1
 8000868:	d00e      	beq.n	8000888 <_get_semihosting_exts+0xb4>
 800086a:	0020      	movs	r0, r4
 800086c:	b003      	add	sp, #12
 800086e:	bc0c      	pop	{r2, r3}
 8000870:	4690      	mov	r8, r2
 8000872:	4699      	mov	r9, r3
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	2401      	movs	r4, #1
 8000878:	0028      	movs	r0, r5
 800087a:	f7ff fe8b 	bl	8000594 <_close>
 800087e:	4264      	negs	r4, r4
 8000880:	e7f3      	b.n	800086a <_get_semihosting_exts+0x96>
 8000882:	f7ff fd91 	bl	80003a8 <checkerror.part.0>
 8000886:	e7c5      	b.n	8000814 <_get_semihosting_exts+0x40>
 8000888:	f7ff fd8e 	bl	80003a8 <checkerror.part.0>
 800088c:	0004      	movs	r4, r0
 800088e:	e7ec      	b.n	800086a <_get_semihosting_exts+0x96>
 8000890:	002c      	movs	r4, r5
 8000892:	e7ea      	b.n	800086a <_get_semihosting_exts+0x96>
 8000894:	080170d4 	.word	0x080170d4

08000898 <initialise_semihosting_exts>:
 8000898:	b530      	push	{r4, r5, lr}
 800089a:	2300      	movs	r3, #0
 800089c:	2501      	movs	r5, #1
 800089e:	b083      	sub	sp, #12
 80008a0:	4c09      	ldr	r4, [pc, #36]	; (80008c8 <initialise_semihosting_exts+0x30>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	2100      	movs	r1, #0
 80008a6:	a801      	add	r0, sp, #4
 80008a8:	6063      	str	r3, [r4, #4]
 80008aa:	60a5      	str	r5, [r4, #8]
 80008ac:	f7ff ff92 	bl	80007d4 <_get_semihosting_exts>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	dd06      	ble.n	80008c2 <initialise_semihosting_exts+0x2a>
 80008b4:	466b      	mov	r3, sp
 80008b6:	791a      	ldrb	r2, [r3, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	4015      	ands	r5, r2
 80008bc:	4013      	ands	r3, r2
 80008be:	6065      	str	r5, [r4, #4]
 80008c0:	60a3      	str	r3, [r4, #8]
 80008c2:	b003      	add	sp, #12
 80008c4:	bd30      	pop	{r4, r5, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000430 	.word	0x20000430

080008cc <_has_ext_exit_extended>:
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4c04      	ldr	r4, [pc, #16]	; (80008e0 <_has_ext_exit_extended+0x14>)
 80008d0:	6860      	ldr	r0, [r4, #4]
 80008d2:	2800      	cmp	r0, #0
 80008d4:	db00      	blt.n	80008d8 <_has_ext_exit_extended+0xc>
 80008d6:	bd10      	pop	{r4, pc}
 80008d8:	f7ff ffde 	bl	8000898 <initialise_semihosting_exts>
 80008dc:	6860      	ldr	r0, [r4, #4]
 80008de:	e7fa      	b.n	80008d6 <_has_ext_exit_extended+0xa>
 80008e0:	20000430 	.word	0x20000430

080008e4 <_has_ext_stdout_stderr>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	4c04      	ldr	r4, [pc, #16]	; (80008f8 <_has_ext_stdout_stderr+0x14>)
 80008e8:	68a0      	ldr	r0, [r4, #8]
 80008ea:	2800      	cmp	r0, #0
 80008ec:	db00      	blt.n	80008f0 <_has_ext_stdout_stderr+0xc>
 80008ee:	bd10      	pop	{r4, pc}
 80008f0:	f7ff ffd2 	bl	8000898 <initialise_semihosting_exts>
 80008f4:	68a0      	ldr	r0, [r4, #8]
 80008f6:	e7fa      	b.n	80008ee <_has_ext_stdout_stderr+0xa>
 80008f8:	20000430 	.word	0x20000430

080008fc <initialise_monitor_handles>:
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	4645      	mov	r5, r8
 8000900:	4657      	mov	r7, sl
 8000902:	46de      	mov	lr, fp
 8000904:	464e      	mov	r6, r9
 8000906:	2303      	movs	r3, #3
 8000908:	b5e0      	push	{r5, r6, r7, lr}
 800090a:	4f35      	ldr	r7, [pc, #212]	; (80009e0 <initialise_monitor_handles+0xe4>)
 800090c:	b085      	sub	sp, #20
 800090e:	ad01      	add	r5, sp, #4
 8000910:	9701      	str	r7, [sp, #4]
 8000912:	60ab      	str	r3, [r5, #8]
 8000914:	2300      	movs	r3, #0
 8000916:	2401      	movs	r4, #1
 8000918:	606b      	str	r3, [r5, #4]
 800091a:	1c20      	adds	r0, r4, #0
 800091c:	1c29      	adds	r1, r5, #0
 800091e:	beab      	bkpt	0x00ab
 8000920:	1c04      	adds	r4, r0, #0
 8000922:	4e30      	ldr	r6, [pc, #192]	; (80009e4 <initialise_monitor_handles+0xe8>)
 8000924:	2201      	movs	r2, #1
 8000926:	6074      	str	r4, [r6, #4]
 8000928:	4c2f      	ldr	r4, [pc, #188]	; (80009e8 <initialise_monitor_handles+0xec>)
 800092a:	4252      	negs	r2, r2
 800092c:	0021      	movs	r1, r4
 800092e:	0023      	movs	r3, r4
 8000930:	31a0      	adds	r1, #160	; 0xa0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	3308      	adds	r3, #8
 8000936:	428b      	cmp	r3, r1
 8000938:	d1fb      	bne.n	8000932 <initialise_monitor_handles+0x36>
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <initialise_monitor_handles+0xf0>)
 800093c:	4699      	mov	r9, r3
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db47      	blt.n	80009d4 <initialise_monitor_handles+0xd8>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d105      	bne.n	8000954 <initialise_monitor_handles+0x58>
 8000948:	68b2      	ldr	r2, [r6, #8]
 800094a:	3201      	adds	r2, #1
 800094c:	d039      	beq.n	80009c2 <initialise_monitor_handles+0xc6>
 800094e:	6872      	ldr	r2, [r6, #4]
 8000950:	c40c      	stmia	r4!, {r2, r3}
 8000952:	e02a      	b.n	80009aa <initialise_monitor_handles+0xae>
 8000954:	2303      	movs	r3, #3
 8000956:	9701      	str	r7, [sp, #4]
 8000958:	469a      	mov	sl, r3
 800095a:	60ab      	str	r3, [r5, #8]
 800095c:	3301      	adds	r3, #1
 800095e:	606b      	str	r3, [r5, #4]
 8000960:	3b03      	subs	r3, #3
 8000962:	4698      	mov	r8, r3
 8000964:	4640      	mov	r0, r8
 8000966:	1c29      	adds	r1, r5, #0
 8000968:	beab      	bkpt	0x00ab
 800096a:	4683      	mov	fp, r0
 800096c:	465b      	mov	r3, fp
 800096e:	60f3      	str	r3, [r6, #12]
 8000970:	4653      	mov	r3, sl
 8000972:	9701      	str	r7, [sp, #4]
 8000974:	60ab      	str	r3, [r5, #8]
 8000976:	3305      	adds	r3, #5
 8000978:	606b      	str	r3, [r5, #4]
 800097a:	4640      	mov	r0, r8
 800097c:	1c29      	adds	r1, r5, #0
 800097e:	beab      	bkpt	0x00ab
 8000980:	1c05      	adds	r5, r0, #0
 8000982:	464b      	mov	r3, r9
 8000984:	60b5      	str	r5, [r6, #8]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	1c6a      	adds	r2, r5, #1
 800098a:	d01a      	beq.n	80009c2 <initialise_monitor_handles+0xc6>
 800098c:	6872      	ldr	r2, [r6, #4]
 800098e:	6022      	str	r2, [r4, #0]
 8000990:	2200      	movs	r2, #0
 8000992:	6062      	str	r2, [r4, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0f      	blt.n	80009b8 <initialise_monitor_handles+0xbc>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <initialise_monitor_handles+0xae>
 800099c:	68f3      	ldr	r3, [r6, #12]
 800099e:	68b2      	ldr	r2, [r6, #8]
 80009a0:	60a3      	str	r3, [r4, #8]
 80009a2:	2300      	movs	r3, #0
 80009a4:	6122      	str	r2, [r4, #16]
 80009a6:	60e3      	str	r3, [r4, #12]
 80009a8:	6163      	str	r3, [r4, #20]
 80009aa:	b005      	add	sp, #20
 80009ac:	bc3c      	pop	{r2, r3, r4, r5}
 80009ae:	4690      	mov	r8, r2
 80009b0:	4699      	mov	r9, r3
 80009b2:	46a2      	mov	sl, r4
 80009b4:	46ab      	mov	fp, r5
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b8:	f7ff ff6e 	bl	8000898 <initialise_semihosting_exts>
 80009bc:	464b      	mov	r3, r9
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	e7ea      	b.n	8000998 <initialise_monitor_handles+0x9c>
 80009c2:	68f2      	ldr	r2, [r6, #12]
 80009c4:	60b2      	str	r2, [r6, #8]
 80009c6:	6872      	ldr	r2, [r6, #4]
 80009c8:	6022      	str	r2, [r4, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	6062      	str	r2, [r4, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dae2      	bge.n	8000998 <initialise_monitor_handles+0x9c>
 80009d2:	e7f1      	b.n	80009b8 <initialise_monitor_handles+0xbc>
 80009d4:	f7ff ff60 	bl	8000898 <initialise_semihosting_exts>
 80009d8:	464b      	mov	r3, r9
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	e7b2      	b.n	8000944 <initialise_monitor_handles+0x48>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	080170ec 	.word	0x080170ec
 80009e4:	20000b30 	.word	0x20000b30
 80009e8:	20000b40 	.word	0x20000b40
 80009ec:	20000430 	.word	0x20000430

080009f0 <_link>:
 80009f0:	b510      	push	{r4, lr}
 80009f2:	f002 fba3 	bl	800313c <__errno>
 80009f6:	2358      	movs	r3, #88	; 0x58
 80009f8:	6003      	str	r3, [r0, #0]
 80009fa:	2001      	movs	r0, #1
 80009fc:	4240      	negs	r0, r0
 80009fe:	bd10      	pop	{r4, pc}

08000a00 <_unlink>:
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	466d      	mov	r5, sp
 8000a06:	9000      	str	r0, [sp, #0]
 8000a08:	f003 f85a 	bl	8003ac0 <strlen>
 8000a0c:	240e      	movs	r4, #14
 8000a0e:	6068      	str	r0, [r5, #4]
 8000a10:	1c20      	adds	r0, r4, #0
 8000a12:	1c29      	adds	r1, r5, #0
 8000a14:	beab      	bkpt	0x00ab
 8000a16:	1c04      	adds	r4, r0, #0
 8000a18:	1c63      	adds	r3, r4, #1
 8000a1a:	d003      	beq.n	8000a24 <_unlink+0x24>
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	0020      	movs	r0, r4
 8000a20:	b003      	add	sp, #12
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a24:	f002 fb8a 	bl	800313c <__errno>
 8000a28:	2513      	movs	r5, #19
 8000a2a:	0006      	movs	r6, r0
 8000a2c:	2700      	movs	r7, #0
 8000a2e:	1c28      	adds	r0, r5, #0
 8000a30:	1c39      	adds	r1, r7, #0
 8000a32:	beab      	bkpt	0x00ab
 8000a34:	1c05      	adds	r5, r0, #0
 8000a36:	6035      	str	r5, [r6, #0]
 8000a38:	e7f1      	b.n	8000a1e <_unlink+0x1e>
 8000a3a:	46c0      	nop			; (mov r8, r8)

08000a3c <_gettimeofday>:
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000e      	movs	r6, r1
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d009      	beq.n	8000a5a <_gettimeofday+0x1e>
 8000a46:	2700      	movs	r7, #0
 8000a48:	2411      	movs	r4, #17
 8000a4a:	1c20      	adds	r0, r4, #0
 8000a4c:	1c39      	adds	r1, r7, #0
 8000a4e:	beab      	bkpt	0x00ab
 8000a50:	1c04      	adds	r4, r0, #0
 8000a52:	602c      	str	r4, [r5, #0]
 8000a54:	17e4      	asrs	r4, r4, #31
 8000a56:	606c      	str	r4, [r5, #4]
 8000a58:	60af      	str	r7, [r5, #8]
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d002      	beq.n	8000a64 <_gettimeofday+0x28>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6033      	str	r3, [r6, #0]
 8000a62:	6073      	str	r3, [r6, #4]
 8000a64:	2000      	movs	r0, #0
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a68 <_clock>:
 8000a68:	b530      	push	{r4, r5, lr}
 8000a6a:	2410      	movs	r4, #16
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	1c20      	adds	r0, r4, #0
 8000a70:	1c29      	adds	r1, r5, #0
 8000a72:	beab      	bkpt	0x00ab
 8000a74:	1c04      	adds	r4, r0, #0
 8000a76:	0020      	movs	r0, r4
 8000a78:	bd30      	pop	{r4, r5, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)

08000a7c <_times>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	0004      	movs	r4, r0
 8000a80:	2600      	movs	r6, #0
 8000a82:	2510      	movs	r5, #16
 8000a84:	1c28      	adds	r0, r5, #0
 8000a86:	1c31      	adds	r1, r6, #0
 8000a88:	beab      	bkpt	0x00ab
 8000a8a:	1c05      	adds	r5, r0, #0
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d003      	beq.n	8000a98 <_times+0x1c>
 8000a90:	6025      	str	r5, [r4, #0]
 8000a92:	6066      	str	r6, [r4, #4]
 8000a94:	60a6      	str	r6, [r4, #8]
 8000a96:	60e6      	str	r6, [r4, #12]
 8000a98:	0028      	movs	r0, r5
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}

08000a9c <_isatty>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	f7ff fc67 	bl	8000370 <findslot>
 8000aa2:	1e05      	subs	r5, r0, #0
 8000aa4:	d013      	beq.n	8000ace <_isatty+0x32>
 8000aa6:	2409      	movs	r4, #9
 8000aa8:	1c20      	adds	r0, r4, #0
 8000aaa:	1c29      	adds	r1, r5, #0
 8000aac:	beab      	bkpt	0x00ab
 8000aae:	1c04      	adds	r4, r0, #0
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	2c01      	cmp	r4, #1
 8000ab4:	d00a      	beq.n	8000acc <_isatty+0x30>
 8000ab6:	f002 fb41 	bl	800313c <__errno>
 8000aba:	2413      	movs	r4, #19
 8000abc:	0005      	movs	r5, r0
 8000abe:	2600      	movs	r6, #0
 8000ac0:	1c20      	adds	r0, r4, #0
 8000ac2:	1c31      	adds	r1, r6, #0
 8000ac4:	beab      	bkpt	0x00ab
 8000ac6:	1c04      	adds	r4, r0, #0
 8000ac8:	2000      	movs	r0, #0
 8000aca:	602c      	str	r4, [r5, #0]
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	f002 fb35 	bl	800313c <__errno>
 8000ad2:	2309      	movs	r3, #9
 8000ad4:	6003      	str	r3, [r0, #0]
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	e7f8      	b.n	8000acc <_isatty+0x30>
 8000ada:	46c0      	nop			; (mov r8, r8)

08000adc <_system>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d01b      	beq.n	8000b1c <_system+0x40>
 8000ae4:	466d      	mov	r5, sp
 8000ae6:	9000      	str	r0, [sp, #0]
 8000ae8:	f002 ffea 	bl	8003ac0 <strlen>
 8000aec:	2412      	movs	r4, #18
 8000aee:	6068      	str	r0, [r5, #4]
 8000af0:	1c20      	adds	r0, r4, #0
 8000af2:	1c29      	adds	r1, r5, #0
 8000af4:	beab      	bkpt	0x00ab
 8000af6:	1c04      	adds	r4, r0, #0
 8000af8:	0020      	movs	r0, r4
 8000afa:	1c63      	adds	r3, r4, #1
 8000afc:	d010      	beq.n	8000b20 <_system+0x44>
 8000afe:	28ff      	cmp	r0, #255	; 0xff
 8000b00:	d80a      	bhi.n	8000b18 <_system+0x3c>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d008      	beq.n	8000b18 <_system+0x3c>
 8000b06:	0003      	movs	r3, r0
 8000b08:	21ff      	movs	r1, #255	; 0xff
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	d00b      	beq.n	8000b26 <_system+0x4a>
 8000b0e:	121a      	asrs	r2, r3, #8
 8000b10:	400a      	ands	r2, r1
 8000b12:	4282      	cmp	r2, r0
 8000b14:	d1f9      	bne.n	8000b0a <_system+0x2e>
 8000b16:	0018      	movs	r0, r3
 8000b18:	b003      	add	sp, #12
 8000b1a:	bd30      	pop	{r4, r5, pc}
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	e7fb      	b.n	8000b18 <_system+0x3c>
 8000b20:	f7ff fc42 	bl	80003a8 <checkerror.part.0>
 8000b24:	e7eb      	b.n	8000afe <_system+0x22>
 8000b26:	2000      	movs	r0, #0
 8000b28:	e7f6      	b.n	8000b18 <_system+0x3c>
 8000b2a:	46c0      	nop			; (mov r8, r8)

08000b2c <_rename>:
 8000b2c:	b530      	push	{r4, r5, lr}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	000c      	movs	r4, r1
 8000b32:	466d      	mov	r5, sp
 8000b34:	9000      	str	r0, [sp, #0]
 8000b36:	f002 ffc3 	bl	8003ac0 <strlen>
 8000b3a:	6068      	str	r0, [r5, #4]
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	60ac      	str	r4, [r5, #8]
 8000b40:	f002 ffbe 	bl	8003ac0 <strlen>
 8000b44:	240f      	movs	r4, #15
 8000b46:	60e8      	str	r0, [r5, #12]
 8000b48:	1c20      	adds	r0, r4, #0
 8000b4a:	1c29      	adds	r1, r5, #0
 8000b4c:	beab      	bkpt	0x00ab
 8000b4e:	1c04      	adds	r4, r0, #0
 8000b50:	0020      	movs	r0, r4
 8000b52:	1c63      	adds	r3, r4, #1
 8000b54:	d004      	beq.n	8000b60 <_rename+0x34>
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	b005      	add	sp, #20
 8000b5e:	bd30      	pop	{r4, r5, pc}
 8000b60:	f7ff fc22 	bl	80003a8 <checkerror.part.0>
 8000b64:	e7f7      	b.n	8000b56 <_rename+0x2a>
 8000b66:	46c0      	nop			; (mov r8, r8)

08000b68 <__gnu_thumb1_case_sqi>:
 8000b68:	b402      	push	{r1}
 8000b6a:	4671      	mov	r1, lr
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	5609      	ldrsb	r1, [r1, r0]
 8000b72:	0049      	lsls	r1, r1, #1
 8000b74:	448e      	add	lr, r1
 8000b76:	bc02      	pop	{r1}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__gnu_thumb1_case_uqi>:
 8000b7c:	b402      	push	{r1}
 8000b7e:	4671      	mov	r1, lr
 8000b80:	0849      	lsrs	r1, r1, #1
 8000b82:	0049      	lsls	r1, r1, #1
 8000b84:	5c09      	ldrb	r1, [r1, r0]
 8000b86:	0049      	lsls	r1, r1, #1
 8000b88:	448e      	add	lr, r1
 8000b8a:	bc02      	pop	{r1}
 8000b8c:	4770      	bx	lr
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__gnu_thumb1_case_shi>:
 8000b90:	b403      	push	{r0, r1}
 8000b92:	4671      	mov	r1, lr
 8000b94:	0849      	lsrs	r1, r1, #1
 8000b96:	0040      	lsls	r0, r0, #1
 8000b98:	0049      	lsls	r1, r1, #1
 8000b9a:	5e09      	ldrsh	r1, [r1, r0]
 8000b9c:	0049      	lsls	r1, r1, #1
 8000b9e:	448e      	add	lr, r1
 8000ba0:	bc03      	pop	{r0, r1}
 8000ba2:	4770      	bx	lr

08000ba4 <__gnu_thumb1_case_uhi>:
 8000ba4:	b403      	push	{r0, r1}
 8000ba6:	4671      	mov	r1, lr
 8000ba8:	0849      	lsrs	r1, r1, #1
 8000baa:	0040      	lsls	r0, r0, #1
 8000bac:	0049      	lsls	r1, r1, #1
 8000bae:	5a09      	ldrh	r1, [r1, r0]
 8000bb0:	0049      	lsls	r1, r1, #1
 8000bb2:	448e      	add	lr, r1
 8000bb4:	bc03      	pop	{r0, r1}
 8000bb6:	4770      	bx	lr

08000bb8 <__udivsi3>:
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0843      	lsrs	r3, r0, #1
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d374      	bcc.n	8000caa <__udivsi3+0xf2>
 8000bc0:	0903      	lsrs	r3, r0, #4
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d35f      	bcc.n	8000c86 <__udivsi3+0xce>
 8000bc6:	0a03      	lsrs	r3, r0, #8
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	d344      	bcc.n	8000c56 <__udivsi3+0x9e>
 8000bcc:	0b03      	lsrs	r3, r0, #12
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d328      	bcc.n	8000c24 <__udivsi3+0x6c>
 8000bd2:	0c03      	lsrs	r3, r0, #16
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d30d      	bcc.n	8000bf4 <__udivsi3+0x3c>
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	0209      	lsls	r1, r1, #8
 8000bdc:	ba12      	rev	r2, r2
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d302      	bcc.n	8000bea <__udivsi3+0x32>
 8000be4:	1212      	asrs	r2, r2, #8
 8000be6:	0209      	lsls	r1, r1, #8
 8000be8:	d065      	beq.n	8000cb6 <__udivsi3+0xfe>
 8000bea:	0b03      	lsrs	r3, r0, #12
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d319      	bcc.n	8000c24 <__udivsi3+0x6c>
 8000bf0:	e000      	b.n	8000bf4 <__udivsi3+0x3c>
 8000bf2:	0a09      	lsrs	r1, r1, #8
 8000bf4:	0bc3      	lsrs	r3, r0, #15
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d301      	bcc.n	8000bfe <__udivsi3+0x46>
 8000bfa:	03cb      	lsls	r3, r1, #15
 8000bfc:	1ac0      	subs	r0, r0, r3
 8000bfe:	4152      	adcs	r2, r2
 8000c00:	0b83      	lsrs	r3, r0, #14
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d301      	bcc.n	8000c0a <__udivsi3+0x52>
 8000c06:	038b      	lsls	r3, r1, #14
 8000c08:	1ac0      	subs	r0, r0, r3
 8000c0a:	4152      	adcs	r2, r2
 8000c0c:	0b43      	lsrs	r3, r0, #13
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d301      	bcc.n	8000c16 <__udivsi3+0x5e>
 8000c12:	034b      	lsls	r3, r1, #13
 8000c14:	1ac0      	subs	r0, r0, r3
 8000c16:	4152      	adcs	r2, r2
 8000c18:	0b03      	lsrs	r3, r0, #12
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d301      	bcc.n	8000c22 <__udivsi3+0x6a>
 8000c1e:	030b      	lsls	r3, r1, #12
 8000c20:	1ac0      	subs	r0, r0, r3
 8000c22:	4152      	adcs	r2, r2
 8000c24:	0ac3      	lsrs	r3, r0, #11
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d301      	bcc.n	8000c2e <__udivsi3+0x76>
 8000c2a:	02cb      	lsls	r3, r1, #11
 8000c2c:	1ac0      	subs	r0, r0, r3
 8000c2e:	4152      	adcs	r2, r2
 8000c30:	0a83      	lsrs	r3, r0, #10
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d301      	bcc.n	8000c3a <__udivsi3+0x82>
 8000c36:	028b      	lsls	r3, r1, #10
 8000c38:	1ac0      	subs	r0, r0, r3
 8000c3a:	4152      	adcs	r2, r2
 8000c3c:	0a43      	lsrs	r3, r0, #9
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d301      	bcc.n	8000c46 <__udivsi3+0x8e>
 8000c42:	024b      	lsls	r3, r1, #9
 8000c44:	1ac0      	subs	r0, r0, r3
 8000c46:	4152      	adcs	r2, r2
 8000c48:	0a03      	lsrs	r3, r0, #8
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d301      	bcc.n	8000c52 <__udivsi3+0x9a>
 8000c4e:	020b      	lsls	r3, r1, #8
 8000c50:	1ac0      	subs	r0, r0, r3
 8000c52:	4152      	adcs	r2, r2
 8000c54:	d2cd      	bcs.n	8000bf2 <__udivsi3+0x3a>
 8000c56:	09c3      	lsrs	r3, r0, #7
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d301      	bcc.n	8000c60 <__udivsi3+0xa8>
 8000c5c:	01cb      	lsls	r3, r1, #7
 8000c5e:	1ac0      	subs	r0, r0, r3
 8000c60:	4152      	adcs	r2, r2
 8000c62:	0983      	lsrs	r3, r0, #6
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d301      	bcc.n	8000c6c <__udivsi3+0xb4>
 8000c68:	018b      	lsls	r3, r1, #6
 8000c6a:	1ac0      	subs	r0, r0, r3
 8000c6c:	4152      	adcs	r2, r2
 8000c6e:	0943      	lsrs	r3, r0, #5
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d301      	bcc.n	8000c78 <__udivsi3+0xc0>
 8000c74:	014b      	lsls	r3, r1, #5
 8000c76:	1ac0      	subs	r0, r0, r3
 8000c78:	4152      	adcs	r2, r2
 8000c7a:	0903      	lsrs	r3, r0, #4
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d301      	bcc.n	8000c84 <__udivsi3+0xcc>
 8000c80:	010b      	lsls	r3, r1, #4
 8000c82:	1ac0      	subs	r0, r0, r3
 8000c84:	4152      	adcs	r2, r2
 8000c86:	08c3      	lsrs	r3, r0, #3
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d301      	bcc.n	8000c90 <__udivsi3+0xd8>
 8000c8c:	00cb      	lsls	r3, r1, #3
 8000c8e:	1ac0      	subs	r0, r0, r3
 8000c90:	4152      	adcs	r2, r2
 8000c92:	0883      	lsrs	r3, r0, #2
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d301      	bcc.n	8000c9c <__udivsi3+0xe4>
 8000c98:	008b      	lsls	r3, r1, #2
 8000c9a:	1ac0      	subs	r0, r0, r3
 8000c9c:	4152      	adcs	r2, r2
 8000c9e:	0843      	lsrs	r3, r0, #1
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d301      	bcc.n	8000ca8 <__udivsi3+0xf0>
 8000ca4:	004b      	lsls	r3, r1, #1
 8000ca6:	1ac0      	subs	r0, r0, r3
 8000ca8:	4152      	adcs	r2, r2
 8000caa:	1a41      	subs	r1, r0, r1
 8000cac:	d200      	bcs.n	8000cb0 <__udivsi3+0xf8>
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4152      	adcs	r2, r2
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4770      	bx	lr
 8000cb6:	e7ff      	b.n	8000cb8 <__udivsi3+0x100>
 8000cb8:	b501      	push	{r0, lr}
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f8f0 	bl	8000ea0 <__aeabi_idiv0>
 8000cc0:	bd02      	pop	{r1, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)

08000cc4 <__aeabi_uidivmod>:
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d0f7      	beq.n	8000cb8 <__udivsi3+0x100>
 8000cc8:	e776      	b.n	8000bb8 <__udivsi3>
 8000cca:	4770      	bx	lr

08000ccc <__divsi3>:
 8000ccc:	4603      	mov	r3, r0
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	d47f      	bmi.n	8000dd2 <__divsi3+0x106>
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	0843      	lsrs	r3, r0, #1
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d374      	bcc.n	8000dc4 <__divsi3+0xf8>
 8000cda:	0903      	lsrs	r3, r0, #4
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d35f      	bcc.n	8000da0 <__divsi3+0xd4>
 8000ce0:	0a03      	lsrs	r3, r0, #8
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d344      	bcc.n	8000d70 <__divsi3+0xa4>
 8000ce6:	0b03      	lsrs	r3, r0, #12
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d328      	bcc.n	8000d3e <__divsi3+0x72>
 8000cec:	0c03      	lsrs	r3, r0, #16
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d30d      	bcc.n	8000d0e <__divsi3+0x42>
 8000cf2:	22ff      	movs	r2, #255	; 0xff
 8000cf4:	0209      	lsls	r1, r1, #8
 8000cf6:	ba12      	rev	r2, r2
 8000cf8:	0c03      	lsrs	r3, r0, #16
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__divsi3+0x38>
 8000cfe:	1212      	asrs	r2, r2, #8
 8000d00:	0209      	lsls	r1, r1, #8
 8000d02:	d065      	beq.n	8000dd0 <__divsi3+0x104>
 8000d04:	0b03      	lsrs	r3, r0, #12
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d319      	bcc.n	8000d3e <__divsi3+0x72>
 8000d0a:	e000      	b.n	8000d0e <__divsi3+0x42>
 8000d0c:	0a09      	lsrs	r1, r1, #8
 8000d0e:	0bc3      	lsrs	r3, r0, #15
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d301      	bcc.n	8000d18 <__divsi3+0x4c>
 8000d14:	03cb      	lsls	r3, r1, #15
 8000d16:	1ac0      	subs	r0, r0, r3
 8000d18:	4152      	adcs	r2, r2
 8000d1a:	0b83      	lsrs	r3, r0, #14
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d301      	bcc.n	8000d24 <__divsi3+0x58>
 8000d20:	038b      	lsls	r3, r1, #14
 8000d22:	1ac0      	subs	r0, r0, r3
 8000d24:	4152      	adcs	r2, r2
 8000d26:	0b43      	lsrs	r3, r0, #13
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d301      	bcc.n	8000d30 <__divsi3+0x64>
 8000d2c:	034b      	lsls	r3, r1, #13
 8000d2e:	1ac0      	subs	r0, r0, r3
 8000d30:	4152      	adcs	r2, r2
 8000d32:	0b03      	lsrs	r3, r0, #12
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d301      	bcc.n	8000d3c <__divsi3+0x70>
 8000d38:	030b      	lsls	r3, r1, #12
 8000d3a:	1ac0      	subs	r0, r0, r3
 8000d3c:	4152      	adcs	r2, r2
 8000d3e:	0ac3      	lsrs	r3, r0, #11
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d301      	bcc.n	8000d48 <__divsi3+0x7c>
 8000d44:	02cb      	lsls	r3, r1, #11
 8000d46:	1ac0      	subs	r0, r0, r3
 8000d48:	4152      	adcs	r2, r2
 8000d4a:	0a83      	lsrs	r3, r0, #10
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d301      	bcc.n	8000d54 <__divsi3+0x88>
 8000d50:	028b      	lsls	r3, r1, #10
 8000d52:	1ac0      	subs	r0, r0, r3
 8000d54:	4152      	adcs	r2, r2
 8000d56:	0a43      	lsrs	r3, r0, #9
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d301      	bcc.n	8000d60 <__divsi3+0x94>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	1ac0      	subs	r0, r0, r3
 8000d60:	4152      	adcs	r2, r2
 8000d62:	0a03      	lsrs	r3, r0, #8
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d301      	bcc.n	8000d6c <__divsi3+0xa0>
 8000d68:	020b      	lsls	r3, r1, #8
 8000d6a:	1ac0      	subs	r0, r0, r3
 8000d6c:	4152      	adcs	r2, r2
 8000d6e:	d2cd      	bcs.n	8000d0c <__divsi3+0x40>
 8000d70:	09c3      	lsrs	r3, r0, #7
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d301      	bcc.n	8000d7a <__divsi3+0xae>
 8000d76:	01cb      	lsls	r3, r1, #7
 8000d78:	1ac0      	subs	r0, r0, r3
 8000d7a:	4152      	adcs	r2, r2
 8000d7c:	0983      	lsrs	r3, r0, #6
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d301      	bcc.n	8000d86 <__divsi3+0xba>
 8000d82:	018b      	lsls	r3, r1, #6
 8000d84:	1ac0      	subs	r0, r0, r3
 8000d86:	4152      	adcs	r2, r2
 8000d88:	0943      	lsrs	r3, r0, #5
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d301      	bcc.n	8000d92 <__divsi3+0xc6>
 8000d8e:	014b      	lsls	r3, r1, #5
 8000d90:	1ac0      	subs	r0, r0, r3
 8000d92:	4152      	adcs	r2, r2
 8000d94:	0903      	lsrs	r3, r0, #4
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d301      	bcc.n	8000d9e <__divsi3+0xd2>
 8000d9a:	010b      	lsls	r3, r1, #4
 8000d9c:	1ac0      	subs	r0, r0, r3
 8000d9e:	4152      	adcs	r2, r2
 8000da0:	08c3      	lsrs	r3, r0, #3
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d301      	bcc.n	8000daa <__divsi3+0xde>
 8000da6:	00cb      	lsls	r3, r1, #3
 8000da8:	1ac0      	subs	r0, r0, r3
 8000daa:	4152      	adcs	r2, r2
 8000dac:	0883      	lsrs	r3, r0, #2
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d301      	bcc.n	8000db6 <__divsi3+0xea>
 8000db2:	008b      	lsls	r3, r1, #2
 8000db4:	1ac0      	subs	r0, r0, r3
 8000db6:	4152      	adcs	r2, r2
 8000db8:	0843      	lsrs	r3, r0, #1
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d301      	bcc.n	8000dc2 <__divsi3+0xf6>
 8000dbe:	004b      	lsls	r3, r1, #1
 8000dc0:	1ac0      	subs	r0, r0, r3
 8000dc2:	4152      	adcs	r2, r2
 8000dc4:	1a41      	subs	r1, r0, r1
 8000dc6:	d200      	bcs.n	8000dca <__divsi3+0xfe>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	4152      	adcs	r2, r2
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4770      	bx	lr
 8000dd0:	e05d      	b.n	8000e8e <__divsi3+0x1c2>
 8000dd2:	0fca      	lsrs	r2, r1, #31
 8000dd4:	d000      	beq.n	8000dd8 <__divsi3+0x10c>
 8000dd6:	4249      	negs	r1, r1
 8000dd8:	1003      	asrs	r3, r0, #32
 8000dda:	d300      	bcc.n	8000dde <__divsi3+0x112>
 8000ddc:	4240      	negs	r0, r0
 8000dde:	4053      	eors	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	469c      	mov	ip, r3
 8000de4:	0903      	lsrs	r3, r0, #4
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d32d      	bcc.n	8000e46 <__divsi3+0x17a>
 8000dea:	0a03      	lsrs	r3, r0, #8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d312      	bcc.n	8000e16 <__divsi3+0x14a>
 8000df0:	22fc      	movs	r2, #252	; 0xfc
 8000df2:	0189      	lsls	r1, r1, #6
 8000df4:	ba12      	rev	r2, r2
 8000df6:	0a03      	lsrs	r3, r0, #8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d30c      	bcc.n	8000e16 <__divsi3+0x14a>
 8000dfc:	0189      	lsls	r1, r1, #6
 8000dfe:	1192      	asrs	r2, r2, #6
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d308      	bcc.n	8000e16 <__divsi3+0x14a>
 8000e04:	0189      	lsls	r1, r1, #6
 8000e06:	1192      	asrs	r2, r2, #6
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d304      	bcc.n	8000e16 <__divsi3+0x14a>
 8000e0c:	0189      	lsls	r1, r1, #6
 8000e0e:	d03a      	beq.n	8000e86 <__divsi3+0x1ba>
 8000e10:	1192      	asrs	r2, r2, #6
 8000e12:	e000      	b.n	8000e16 <__divsi3+0x14a>
 8000e14:	0989      	lsrs	r1, r1, #6
 8000e16:	09c3      	lsrs	r3, r0, #7
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d301      	bcc.n	8000e20 <__divsi3+0x154>
 8000e1c:	01cb      	lsls	r3, r1, #7
 8000e1e:	1ac0      	subs	r0, r0, r3
 8000e20:	4152      	adcs	r2, r2
 8000e22:	0983      	lsrs	r3, r0, #6
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d301      	bcc.n	8000e2c <__divsi3+0x160>
 8000e28:	018b      	lsls	r3, r1, #6
 8000e2a:	1ac0      	subs	r0, r0, r3
 8000e2c:	4152      	adcs	r2, r2
 8000e2e:	0943      	lsrs	r3, r0, #5
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d301      	bcc.n	8000e38 <__divsi3+0x16c>
 8000e34:	014b      	lsls	r3, r1, #5
 8000e36:	1ac0      	subs	r0, r0, r3
 8000e38:	4152      	adcs	r2, r2
 8000e3a:	0903      	lsrs	r3, r0, #4
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d301      	bcc.n	8000e44 <__divsi3+0x178>
 8000e40:	010b      	lsls	r3, r1, #4
 8000e42:	1ac0      	subs	r0, r0, r3
 8000e44:	4152      	adcs	r2, r2
 8000e46:	08c3      	lsrs	r3, r0, #3
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d301      	bcc.n	8000e50 <__divsi3+0x184>
 8000e4c:	00cb      	lsls	r3, r1, #3
 8000e4e:	1ac0      	subs	r0, r0, r3
 8000e50:	4152      	adcs	r2, r2
 8000e52:	0883      	lsrs	r3, r0, #2
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d301      	bcc.n	8000e5c <__divsi3+0x190>
 8000e58:	008b      	lsls	r3, r1, #2
 8000e5a:	1ac0      	subs	r0, r0, r3
 8000e5c:	4152      	adcs	r2, r2
 8000e5e:	d2d9      	bcs.n	8000e14 <__divsi3+0x148>
 8000e60:	0843      	lsrs	r3, r0, #1
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d301      	bcc.n	8000e6a <__divsi3+0x19e>
 8000e66:	004b      	lsls	r3, r1, #1
 8000e68:	1ac0      	subs	r0, r0, r3
 8000e6a:	4152      	adcs	r2, r2
 8000e6c:	1a41      	subs	r1, r0, r1
 8000e6e:	d200      	bcs.n	8000e72 <__divsi3+0x1a6>
 8000e70:	4601      	mov	r1, r0
 8000e72:	4663      	mov	r3, ip
 8000e74:	4152      	adcs	r2, r2
 8000e76:	105b      	asrs	r3, r3, #1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	d301      	bcc.n	8000e80 <__divsi3+0x1b4>
 8000e7c:	4240      	negs	r0, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d500      	bpl.n	8000e84 <__divsi3+0x1b8>
 8000e82:	4249      	negs	r1, r1
 8000e84:	4770      	bx	lr
 8000e86:	4663      	mov	r3, ip
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	d300      	bcc.n	8000e8e <__divsi3+0x1c2>
 8000e8c:	4240      	negs	r0, r0
 8000e8e:	b501      	push	{r0, lr}
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f805 	bl	8000ea0 <__aeabi_idiv0>
 8000e96:	bd02      	pop	{r1, pc}

08000e98 <__aeabi_idivmod>:
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	d0f8      	beq.n	8000e8e <__divsi3+0x1c2>
 8000e9c:	e716      	b.n	8000ccc <__divsi3>
 8000e9e:	4770      	bx	lr

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			; (mov r8, r8)

08000ea4 <__aeabi_cdrcmple>:
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	1c10      	adds	r0, r2, #0
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	468c      	mov	ip, r1
 8000eac:	1c19      	adds	r1, r3, #0
 8000eae:	4663      	mov	r3, ip
 8000eb0:	e000      	b.n	8000eb4 <__aeabi_cdcmpeq>
 8000eb2:	46c0      	nop			; (mov r8, r8)

08000eb4 <__aeabi_cdcmpeq>:
 8000eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000eb6:	f001 fa1f 	bl	80022f8 <__ledf2>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d401      	bmi.n	8000ec2 <__aeabi_cdcmpeq+0xe>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	42c8      	cmn	r0, r1
 8000ec2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ec4 <__aeabi_dcmpeq>:
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	f001 f979 	bl	80021bc <__eqdf2>
 8000eca:	4240      	negs	r0, r0
 8000ecc:	3001      	adds	r0, #1
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <__aeabi_dcmplt>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f001 fa11 	bl	80022f8 <__ledf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	db01      	blt.n	8000ede <__aeabi_dcmplt+0xe>
 8000eda:	2000      	movs	r0, #0
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	2001      	movs	r0, #1
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__aeabi_dcmple>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	f001 fa07 	bl	80022f8 <__ledf2>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	dd01      	ble.n	8000ef2 <__aeabi_dcmple+0xe>
 8000eee:	2000      	movs	r0, #0
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	bd10      	pop	{r4, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)

08000ef8 <__aeabi_dcmpgt>:
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	f001 f999 	bl	8002230 <__gedf2>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	dc01      	bgt.n	8000f06 <__aeabi_dcmpgt+0xe>
 8000f02:	2000      	movs	r0, #0
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	2001      	movs	r0, #1
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)

08000f0c <__aeabi_dcmpge>:
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	f001 f98f 	bl	8002230 <__gedf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	da01      	bge.n	8000f1a <__aeabi_dcmpge+0xe>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)

08000f20 <__aeabi_uldivmod>:
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <__aeabi_uldivmod+0x28>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d10f      	bne.n	8000f48 <__aeabi_uldivmod+0x28>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_uldivmod+0xe>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d002      	beq.n	8000f36 <__aeabi_uldivmod+0x16>
 8000f30:	2100      	movs	r1, #0
 8000f32:	43c9      	mvns	r1, r1
 8000f34:	1c08      	adds	r0, r1, #0
 8000f36:	b407      	push	{r0, r1, r2}
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <__aeabi_uldivmod+0x24>)
 8000f3a:	a102      	add	r1, pc, #8	; (adr r1, 8000f44 <__aeabi_uldivmod+0x24>)
 8000f3c:	1840      	adds	r0, r0, r1
 8000f3e:	9002      	str	r0, [sp, #8]
 8000f40:	bd03      	pop	{r0, r1, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	ffffff5d 	.word	0xffffff5d
 8000f48:	b403      	push	{r0, r1}
 8000f4a:	4668      	mov	r0, sp
 8000f4c:	b501      	push	{r0, lr}
 8000f4e:	9802      	ldr	r0, [sp, #8]
 8000f50:	f000 f84e 	bl	8000ff0 <__udivmoddi4>
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	469e      	mov	lr, r3
 8000f58:	b002      	add	sp, #8
 8000f5a:	bc0c      	pop	{r2, r3}
 8000f5c:	4770      	bx	lr
 8000f5e:	46c0      	nop			; (mov r8, r8)

08000f60 <__aeabi_lmul>:
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	46ce      	mov	lr, r9
 8000f64:	4647      	mov	r7, r8
 8000f66:	0415      	lsls	r5, r2, #16
 8000f68:	0c2d      	lsrs	r5, r5, #16
 8000f6a:	002e      	movs	r6, r5
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	0407      	lsls	r7, r0, #16
 8000f70:	0c14      	lsrs	r4, r2, #16
 8000f72:	0c3f      	lsrs	r7, r7, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0c03      	lsrs	r3, r0, #16
 8000f78:	437e      	muls	r6, r7
 8000f7a:	435d      	muls	r5, r3
 8000f7c:	4367      	muls	r7, r4
 8000f7e:	4363      	muls	r3, r4
 8000f80:	197f      	adds	r7, r7, r5
 8000f82:	0c34      	lsrs	r4, r6, #16
 8000f84:	19e4      	adds	r4, r4, r7
 8000f86:	469c      	mov	ip, r3
 8000f88:	42a5      	cmp	r5, r4
 8000f8a:	d903      	bls.n	8000f94 <__aeabi_lmul+0x34>
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	4698      	mov	r8, r3
 8000f92:	44c4      	add	ip, r8
 8000f94:	464b      	mov	r3, r9
 8000f96:	4351      	muls	r1, r2
 8000f98:	4343      	muls	r3, r0
 8000f9a:	0436      	lsls	r6, r6, #16
 8000f9c:	0c36      	lsrs	r6, r6, #16
 8000f9e:	0c25      	lsrs	r5, r4, #16
 8000fa0:	0424      	lsls	r4, r4, #16
 8000fa2:	4465      	add	r5, ip
 8000fa4:	19a4      	adds	r4, r4, r6
 8000fa6:	1859      	adds	r1, r3, r1
 8000fa8:	1949      	adds	r1, r1, r5
 8000faa:	0020      	movs	r0, r4
 8000fac:	bc0c      	pop	{r2, r3}
 8000fae:	4690      	mov	r8, r2
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__aeabi_d2uiz+0x38>)
 8000fba:	0004      	movs	r4, r0
 8000fbc:	000d      	movs	r5, r1
 8000fbe:	f7ff ffa5 	bl	8000f0c <__aeabi_dcmpge>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d104      	bne.n	8000fd0 <__aeabi_d2uiz+0x1c>
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	0029      	movs	r1, r5
 8000fca:	f001 ff8d 	bl	8002ee8 <__aeabi_d2iz>
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <__aeabi_d2uiz+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	0029      	movs	r1, r5
 8000fd8:	f001 fc70 	bl	80028bc <__aeabi_dsub>
 8000fdc:	f001 ff84 	bl	8002ee8 <__aeabi_d2iz>
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	061b      	lsls	r3, r3, #24
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	4460      	add	r0, ip
 8000fe8:	e7f1      	b.n	8000fce <__aeabi_d2uiz+0x1a>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	41e00000 	.word	0x41e00000

08000ff0 <__udivmoddi4>:
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	4657      	mov	r7, sl
 8000ff4:	464e      	mov	r6, r9
 8000ff6:	4645      	mov	r5, r8
 8000ff8:	46de      	mov	lr, fp
 8000ffa:	b5e0      	push	{r5, r6, r7, lr}
 8000ffc:	0004      	movs	r4, r0
 8000ffe:	b083      	sub	sp, #12
 8001000:	000d      	movs	r5, r1
 8001002:	4692      	mov	sl, r2
 8001004:	4699      	mov	r9, r3
 8001006:	428b      	cmp	r3, r1
 8001008:	d82f      	bhi.n	800106a <__udivmoddi4+0x7a>
 800100a:	d02c      	beq.n	8001066 <__udivmoddi4+0x76>
 800100c:	4649      	mov	r1, r9
 800100e:	4650      	mov	r0, sl
 8001010:	f002 f888 	bl	8003124 <__clzdi2>
 8001014:	0029      	movs	r1, r5
 8001016:	0006      	movs	r6, r0
 8001018:	0020      	movs	r0, r4
 800101a:	f002 f883 	bl	8003124 <__clzdi2>
 800101e:	1a33      	subs	r3, r6, r0
 8001020:	4698      	mov	r8, r3
 8001022:	3b20      	subs	r3, #32
 8001024:	469b      	mov	fp, r3
 8001026:	d500      	bpl.n	800102a <__udivmoddi4+0x3a>
 8001028:	e074      	b.n	8001114 <__udivmoddi4+0x124>
 800102a:	4653      	mov	r3, sl
 800102c:	465a      	mov	r2, fp
 800102e:	4093      	lsls	r3, r2
 8001030:	001f      	movs	r7, r3
 8001032:	4653      	mov	r3, sl
 8001034:	4642      	mov	r2, r8
 8001036:	4093      	lsls	r3, r2
 8001038:	001e      	movs	r6, r3
 800103a:	42af      	cmp	r7, r5
 800103c:	d829      	bhi.n	8001092 <__udivmoddi4+0xa2>
 800103e:	d026      	beq.n	800108e <__udivmoddi4+0x9e>
 8001040:	465b      	mov	r3, fp
 8001042:	1ba4      	subs	r4, r4, r6
 8001044:	41bd      	sbcs	r5, r7
 8001046:	2b00      	cmp	r3, #0
 8001048:	da00      	bge.n	800104c <__udivmoddi4+0x5c>
 800104a:	e079      	b.n	8001140 <__udivmoddi4+0x150>
 800104c:	2200      	movs	r2, #0
 800104e:	2300      	movs	r3, #0
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	2301      	movs	r3, #1
 8001056:	465a      	mov	r2, fp
 8001058:	4093      	lsls	r3, r2
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	4642      	mov	r2, r8
 8001060:	4093      	lsls	r3, r2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	e019      	b.n	800109a <__udivmoddi4+0xaa>
 8001066:	4282      	cmp	r2, r0
 8001068:	d9d0      	bls.n	800100c <__udivmoddi4+0x1c>
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <__udivmoddi4+0x8c>
 8001078:	601c      	str	r4, [r3, #0]
 800107a:	605d      	str	r5, [r3, #4]
 800107c:	9800      	ldr	r0, [sp, #0]
 800107e:	9901      	ldr	r1, [sp, #4]
 8001080:	b003      	add	sp, #12
 8001082:	bc3c      	pop	{r2, r3, r4, r5}
 8001084:	4690      	mov	r8, r2
 8001086:	4699      	mov	r9, r3
 8001088:	46a2      	mov	sl, r4
 800108a:	46ab      	mov	fp, r5
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	42a3      	cmp	r3, r4
 8001090:	d9d6      	bls.n	8001040 <__udivmoddi4+0x50>
 8001092:	2200      	movs	r2, #0
 8001094:	2300      	movs	r3, #0
 8001096:	9200      	str	r2, [sp, #0]
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0e8      	beq.n	8001072 <__udivmoddi4+0x82>
 80010a0:	07fb      	lsls	r3, r7, #31
 80010a2:	0872      	lsrs	r2, r6, #1
 80010a4:	431a      	orrs	r2, r3
 80010a6:	4646      	mov	r6, r8
 80010a8:	087b      	lsrs	r3, r7, #1
 80010aa:	e00e      	b.n	80010ca <__udivmoddi4+0xda>
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	d101      	bne.n	80010b4 <__udivmoddi4+0xc4>
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d80c      	bhi.n	80010ce <__udivmoddi4+0xde>
 80010b4:	1aa4      	subs	r4, r4, r2
 80010b6:	419d      	sbcs	r5, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	1924      	adds	r4, r4, r4
 80010bc:	416d      	adcs	r5, r5
 80010be:	2100      	movs	r1, #0
 80010c0:	3e01      	subs	r6, #1
 80010c2:	1824      	adds	r4, r4, r0
 80010c4:	414d      	adcs	r5, r1
 80010c6:	2e00      	cmp	r6, #0
 80010c8:	d006      	beq.n	80010d8 <__udivmoddi4+0xe8>
 80010ca:	42ab      	cmp	r3, r5
 80010cc:	d9ee      	bls.n	80010ac <__udivmoddi4+0xbc>
 80010ce:	3e01      	subs	r6, #1
 80010d0:	1924      	adds	r4, r4, r4
 80010d2:	416d      	adcs	r5, r5
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d1f8      	bne.n	80010ca <__udivmoddi4+0xda>
 80010d8:	465b      	mov	r3, fp
 80010da:	9800      	ldr	r0, [sp, #0]
 80010dc:	9901      	ldr	r1, [sp, #4]
 80010de:	1900      	adds	r0, r0, r4
 80010e0:	4169      	adcs	r1, r5
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db22      	blt.n	800112c <__udivmoddi4+0x13c>
 80010e6:	002b      	movs	r3, r5
 80010e8:	465a      	mov	r2, fp
 80010ea:	40d3      	lsrs	r3, r2
 80010ec:	002a      	movs	r2, r5
 80010ee:	4644      	mov	r4, r8
 80010f0:	40e2      	lsrs	r2, r4
 80010f2:	001c      	movs	r4, r3
 80010f4:	465b      	mov	r3, fp
 80010f6:	0015      	movs	r5, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db2c      	blt.n	8001156 <__udivmoddi4+0x166>
 80010fc:	0026      	movs	r6, r4
 80010fe:	409e      	lsls	r6, r3
 8001100:	0033      	movs	r3, r6
 8001102:	0026      	movs	r6, r4
 8001104:	4647      	mov	r7, r8
 8001106:	40be      	lsls	r6, r7
 8001108:	0032      	movs	r2, r6
 800110a:	1a80      	subs	r0, r0, r2
 800110c:	4199      	sbcs	r1, r3
 800110e:	9000      	str	r0, [sp, #0]
 8001110:	9101      	str	r1, [sp, #4]
 8001112:	e7ae      	b.n	8001072 <__udivmoddi4+0x82>
 8001114:	4642      	mov	r2, r8
 8001116:	2320      	movs	r3, #32
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	4652      	mov	r2, sl
 800111c:	40da      	lsrs	r2, r3
 800111e:	4641      	mov	r1, r8
 8001120:	0013      	movs	r3, r2
 8001122:	464a      	mov	r2, r9
 8001124:	408a      	lsls	r2, r1
 8001126:	0017      	movs	r7, r2
 8001128:	431f      	orrs	r7, r3
 800112a:	e782      	b.n	8001032 <__udivmoddi4+0x42>
 800112c:	4642      	mov	r2, r8
 800112e:	2320      	movs	r3, #32
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	002a      	movs	r2, r5
 8001134:	4646      	mov	r6, r8
 8001136:	409a      	lsls	r2, r3
 8001138:	0023      	movs	r3, r4
 800113a:	40f3      	lsrs	r3, r6
 800113c:	4313      	orrs	r3, r2
 800113e:	e7d5      	b.n	80010ec <__udivmoddi4+0xfc>
 8001140:	4642      	mov	r2, r8
 8001142:	2320      	movs	r3, #32
 8001144:	2100      	movs	r1, #0
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	9100      	str	r1, [sp, #0]
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	40da      	lsrs	r2, r3
 8001152:	9201      	str	r2, [sp, #4]
 8001154:	e782      	b.n	800105c <__udivmoddi4+0x6c>
 8001156:	4642      	mov	r2, r8
 8001158:	2320      	movs	r3, #32
 800115a:	0026      	movs	r6, r4
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	40de      	lsrs	r6, r3
 8001160:	002f      	movs	r7, r5
 8001162:	46b4      	mov	ip, r6
 8001164:	4097      	lsls	r7, r2
 8001166:	4666      	mov	r6, ip
 8001168:	003b      	movs	r3, r7
 800116a:	4333      	orrs	r3, r6
 800116c:	e7c9      	b.n	8001102 <__udivmoddi4+0x112>
 800116e:	46c0      	nop			; (mov r8, r8)

08001170 <__aeabi_fsub>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	464f      	mov	r7, r9
 8001174:	46d6      	mov	lr, sl
 8001176:	4646      	mov	r6, r8
 8001178:	0044      	lsls	r4, r0, #1
 800117a:	b5c0      	push	{r6, r7, lr}
 800117c:	0fc2      	lsrs	r2, r0, #31
 800117e:	0247      	lsls	r7, r0, #9
 8001180:	0248      	lsls	r0, r1, #9
 8001182:	0a40      	lsrs	r0, r0, #9
 8001184:	4684      	mov	ip, r0
 8001186:	4666      	mov	r6, ip
 8001188:	0a7b      	lsrs	r3, r7, #9
 800118a:	0048      	lsls	r0, r1, #1
 800118c:	0fc9      	lsrs	r1, r1, #31
 800118e:	469a      	mov	sl, r3
 8001190:	0e24      	lsrs	r4, r4, #24
 8001192:	0015      	movs	r5, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	0e00      	lsrs	r0, r0, #24
 8001198:	4689      	mov	r9, r1
 800119a:	00f6      	lsls	r6, r6, #3
 800119c:	28ff      	cmp	r0, #255	; 0xff
 800119e:	d100      	bne.n	80011a2 <__aeabi_fsub+0x32>
 80011a0:	e08f      	b.n	80012c2 <__aeabi_fsub+0x152>
 80011a2:	2101      	movs	r1, #1
 80011a4:	464f      	mov	r7, r9
 80011a6:	404f      	eors	r7, r1
 80011a8:	0039      	movs	r1, r7
 80011aa:	4291      	cmp	r1, r2
 80011ac:	d066      	beq.n	800127c <__aeabi_fsub+0x10c>
 80011ae:	1a22      	subs	r2, r4, r0
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_fsub+0x46>
 80011b4:	e09d      	b.n	80012f2 <__aeabi_fsub+0x182>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d13d      	bne.n	8001236 <__aeabi_fsub+0xc6>
 80011ba:	2e00      	cmp	r6, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fsub+0x50>
 80011be:	e08b      	b.n	80012d8 <__aeabi_fsub+0x168>
 80011c0:	1e51      	subs	r1, r2, #1
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_fsub+0x58>
 80011c6:	e0b5      	b.n	8001334 <__aeabi_fsub+0x1c4>
 80011c8:	2401      	movs	r4, #1
 80011ca:	1b9b      	subs	r3, r3, r6
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	d544      	bpl.n	800125a <__aeabi_fsub+0xea>
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	099f      	lsrs	r7, r3, #6
 80011d4:	0038      	movs	r0, r7
 80011d6:	f001 ff87 	bl	80030e8 <__clzsi2>
 80011da:	3805      	subs	r0, #5
 80011dc:	4087      	lsls	r7, r0
 80011de:	4284      	cmp	r4, r0
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_fsub+0x74>
 80011e2:	e096      	b.n	8001312 <__aeabi_fsub+0x1a2>
 80011e4:	1b04      	subs	r4, r0, r4
 80011e6:	003a      	movs	r2, r7
 80011e8:	2020      	movs	r0, #32
 80011ea:	3401      	adds	r4, #1
 80011ec:	40e2      	lsrs	r2, r4
 80011ee:	1b04      	subs	r4, r0, r4
 80011f0:	40a7      	lsls	r7, r4
 80011f2:	003b      	movs	r3, r7
 80011f4:	1e5f      	subs	r7, r3, #1
 80011f6:	41bb      	sbcs	r3, r7
 80011f8:	2400      	movs	r4, #0
 80011fa:	4313      	orrs	r3, r2
 80011fc:	075a      	lsls	r2, r3, #29
 80011fe:	d004      	beq.n	800120a <__aeabi_fsub+0x9a>
 8001200:	220f      	movs	r2, #15
 8001202:	401a      	ands	r2, r3
 8001204:	2a04      	cmp	r2, #4
 8001206:	d000      	beq.n	800120a <__aeabi_fsub+0x9a>
 8001208:	3304      	adds	r3, #4
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	d527      	bpl.n	800125e <__aeabi_fsub+0xee>
 800120e:	3401      	adds	r4, #1
 8001210:	2cff      	cmp	r4, #255	; 0xff
 8001212:	d100      	bne.n	8001216 <__aeabi_fsub+0xa6>
 8001214:	e079      	b.n	800130a <__aeabi_fsub+0x19a>
 8001216:	2201      	movs	r2, #1
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	0a5b      	lsrs	r3, r3, #9
 800121c:	b2e4      	uxtb	r4, r4
 800121e:	402a      	ands	r2, r5
 8001220:	025b      	lsls	r3, r3, #9
 8001222:	05e4      	lsls	r4, r4, #23
 8001224:	0a58      	lsrs	r0, r3, #9
 8001226:	07d2      	lsls	r2, r2, #31
 8001228:	4320      	orrs	r0, r4
 800122a:	4310      	orrs	r0, r2
 800122c:	bc1c      	pop	{r2, r3, r4}
 800122e:	4690      	mov	r8, r2
 8001230:	4699      	mov	r9, r3
 8001232:	46a2      	mov	sl, r4
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001236:	2cff      	cmp	r4, #255	; 0xff
 8001238:	d0e0      	beq.n	80011fc <__aeabi_fsub+0x8c>
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	04c9      	lsls	r1, r1, #19
 800123e:	430e      	orrs	r6, r1
 8001240:	2a1b      	cmp	r2, #27
 8001242:	dc7b      	bgt.n	800133c <__aeabi_fsub+0x1cc>
 8001244:	0031      	movs	r1, r6
 8001246:	2020      	movs	r0, #32
 8001248:	40d1      	lsrs	r1, r2
 800124a:	1a82      	subs	r2, r0, r2
 800124c:	4096      	lsls	r6, r2
 800124e:	1e72      	subs	r2, r6, #1
 8001250:	4196      	sbcs	r6, r2
 8001252:	430e      	orrs	r6, r1
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	015a      	lsls	r2, r3, #5
 8001258:	d4ba      	bmi.n	80011d0 <__aeabi_fsub+0x60>
 800125a:	075a      	lsls	r2, r3, #29
 800125c:	d1d0      	bne.n	8001200 <__aeabi_fsub+0x90>
 800125e:	2201      	movs	r2, #1
 8001260:	08df      	lsrs	r7, r3, #3
 8001262:	402a      	ands	r2, r5
 8001264:	2cff      	cmp	r4, #255	; 0xff
 8001266:	d133      	bne.n	80012d0 <__aeabi_fsub+0x160>
 8001268:	2f00      	cmp	r7, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0xfe>
 800126c:	e0a8      	b.n	80013c0 <__aeabi_fsub+0x250>
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	03db      	lsls	r3, r3, #15
 8001272:	433b      	orrs	r3, r7
 8001274:	025b      	lsls	r3, r3, #9
 8001276:	0a5b      	lsrs	r3, r3, #9
 8001278:	24ff      	movs	r4, #255	; 0xff
 800127a:	e7d1      	b.n	8001220 <__aeabi_fsub+0xb0>
 800127c:	1a21      	subs	r1, r4, r0
 800127e:	2900      	cmp	r1, #0
 8001280:	dd4c      	ble.n	800131c <__aeabi_fsub+0x1ac>
 8001282:	2800      	cmp	r0, #0
 8001284:	d02a      	beq.n	80012dc <__aeabi_fsub+0x16c>
 8001286:	2cff      	cmp	r4, #255	; 0xff
 8001288:	d0b8      	beq.n	80011fc <__aeabi_fsub+0x8c>
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	04c0      	lsls	r0, r0, #19
 800128e:	4306      	orrs	r6, r0
 8001290:	291b      	cmp	r1, #27
 8001292:	dd00      	ble.n	8001296 <__aeabi_fsub+0x126>
 8001294:	e0af      	b.n	80013f6 <__aeabi_fsub+0x286>
 8001296:	0030      	movs	r0, r6
 8001298:	2720      	movs	r7, #32
 800129a:	40c8      	lsrs	r0, r1
 800129c:	1a79      	subs	r1, r7, r1
 800129e:	408e      	lsls	r6, r1
 80012a0:	1e71      	subs	r1, r6, #1
 80012a2:	418e      	sbcs	r6, r1
 80012a4:	4306      	orrs	r6, r0
 80012a6:	199b      	adds	r3, r3, r6
 80012a8:	0159      	lsls	r1, r3, #5
 80012aa:	d5d6      	bpl.n	800125a <__aeabi_fsub+0xea>
 80012ac:	3401      	adds	r4, #1
 80012ae:	2cff      	cmp	r4, #255	; 0xff
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x144>
 80012b2:	e085      	b.n	80013c0 <__aeabi_fsub+0x250>
 80012b4:	2201      	movs	r2, #1
 80012b6:	497a      	ldr	r1, [pc, #488]	; (80014a0 <__aeabi_fsub+0x330>)
 80012b8:	401a      	ands	r2, r3
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	400b      	ands	r3, r1
 80012be:	4313      	orrs	r3, r2
 80012c0:	e79c      	b.n	80011fc <__aeabi_fsub+0x8c>
 80012c2:	2e00      	cmp	r6, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x158>
 80012c6:	e770      	b.n	80011aa <__aeabi_fsub+0x3a>
 80012c8:	e76b      	b.n	80011a2 <__aeabi_fsub+0x32>
 80012ca:	1e3b      	subs	r3, r7, #0
 80012cc:	d1c5      	bne.n	800125a <__aeabi_fsub+0xea>
 80012ce:	2200      	movs	r2, #0
 80012d0:	027b      	lsls	r3, r7, #9
 80012d2:	0a5b      	lsrs	r3, r3, #9
 80012d4:	b2e4      	uxtb	r4, r4
 80012d6:	e7a3      	b.n	8001220 <__aeabi_fsub+0xb0>
 80012d8:	0014      	movs	r4, r2
 80012da:	e78f      	b.n	80011fc <__aeabi_fsub+0x8c>
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d04d      	beq.n	800137c <__aeabi_fsub+0x20c>
 80012e0:	1e48      	subs	r0, r1, #1
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d157      	bne.n	8001396 <__aeabi_fsub+0x226>
 80012e6:	199b      	adds	r3, r3, r6
 80012e8:	2401      	movs	r4, #1
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	d5b5      	bpl.n	800125a <__aeabi_fsub+0xea>
 80012ee:	2402      	movs	r4, #2
 80012f0:	e7e0      	b.n	80012b4 <__aeabi_fsub+0x144>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d125      	bne.n	8001342 <__aeabi_fsub+0x1d2>
 80012f6:	1c62      	adds	r2, r4, #1
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	dd72      	ble.n	80013e4 <__aeabi_fsub+0x274>
 80012fe:	1b9f      	subs	r7, r3, r6
 8001300:	017a      	lsls	r2, r7, #5
 8001302:	d535      	bpl.n	8001370 <__aeabi_fsub+0x200>
 8001304:	1af7      	subs	r7, r6, r3
 8001306:	000d      	movs	r5, r1
 8001308:	e764      	b.n	80011d4 <__aeabi_fsub+0x64>
 800130a:	2201      	movs	r2, #1
 800130c:	2300      	movs	r3, #0
 800130e:	402a      	ands	r2, r5
 8001310:	e786      	b.n	8001220 <__aeabi_fsub+0xb0>
 8001312:	003b      	movs	r3, r7
 8001314:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <__aeabi_fsub+0x334>)
 8001316:	1a24      	subs	r4, r4, r0
 8001318:	4013      	ands	r3, r2
 800131a:	e76f      	b.n	80011fc <__aeabi_fsub+0x8c>
 800131c:	2900      	cmp	r1, #0
 800131e:	d16c      	bne.n	80013fa <__aeabi_fsub+0x28a>
 8001320:	1c61      	adds	r1, r4, #1
 8001322:	b2c8      	uxtb	r0, r1
 8001324:	2801      	cmp	r0, #1
 8001326:	dd4e      	ble.n	80013c6 <__aeabi_fsub+0x256>
 8001328:	29ff      	cmp	r1, #255	; 0xff
 800132a:	d049      	beq.n	80013c0 <__aeabi_fsub+0x250>
 800132c:	199b      	adds	r3, r3, r6
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	000c      	movs	r4, r1
 8001332:	e763      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001334:	2aff      	cmp	r2, #255	; 0xff
 8001336:	d041      	beq.n	80013bc <__aeabi_fsub+0x24c>
 8001338:	000a      	movs	r2, r1
 800133a:	e781      	b.n	8001240 <__aeabi_fsub+0xd0>
 800133c:	2601      	movs	r6, #1
 800133e:	1b9b      	subs	r3, r3, r6
 8001340:	e789      	b.n	8001256 <__aeabi_fsub+0xe6>
 8001342:	2c00      	cmp	r4, #0
 8001344:	d01c      	beq.n	8001380 <__aeabi_fsub+0x210>
 8001346:	28ff      	cmp	r0, #255	; 0xff
 8001348:	d021      	beq.n	800138e <__aeabi_fsub+0x21e>
 800134a:	2480      	movs	r4, #128	; 0x80
 800134c:	04e4      	lsls	r4, r4, #19
 800134e:	4252      	negs	r2, r2
 8001350:	4323      	orrs	r3, r4
 8001352:	2a1b      	cmp	r2, #27
 8001354:	dd00      	ble.n	8001358 <__aeabi_fsub+0x1e8>
 8001356:	e096      	b.n	8001486 <__aeabi_fsub+0x316>
 8001358:	001c      	movs	r4, r3
 800135a:	2520      	movs	r5, #32
 800135c:	40d4      	lsrs	r4, r2
 800135e:	1aaa      	subs	r2, r5, r2
 8001360:	4093      	lsls	r3, r2
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	4193      	sbcs	r3, r2
 8001366:	4323      	orrs	r3, r4
 8001368:	1af3      	subs	r3, r6, r3
 800136a:	0004      	movs	r4, r0
 800136c:	000d      	movs	r5, r1
 800136e:	e72d      	b.n	80011cc <__aeabi_fsub+0x5c>
 8001370:	2f00      	cmp	r7, #0
 8001372:	d000      	beq.n	8001376 <__aeabi_fsub+0x206>
 8001374:	e72e      	b.n	80011d4 <__aeabi_fsub+0x64>
 8001376:	2200      	movs	r2, #0
 8001378:	2400      	movs	r4, #0
 800137a:	e7a9      	b.n	80012d0 <__aeabi_fsub+0x160>
 800137c:	000c      	movs	r4, r1
 800137e:	e73d      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001380:	2b00      	cmp	r3, #0
 8001382:	d058      	beq.n	8001436 <__aeabi_fsub+0x2c6>
 8001384:	43d2      	mvns	r2, r2
 8001386:	2a00      	cmp	r2, #0
 8001388:	d0ee      	beq.n	8001368 <__aeabi_fsub+0x1f8>
 800138a:	28ff      	cmp	r0, #255	; 0xff
 800138c:	d1e1      	bne.n	8001352 <__aeabi_fsub+0x1e2>
 800138e:	0033      	movs	r3, r6
 8001390:	24ff      	movs	r4, #255	; 0xff
 8001392:	000d      	movs	r5, r1
 8001394:	e732      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001396:	29ff      	cmp	r1, #255	; 0xff
 8001398:	d010      	beq.n	80013bc <__aeabi_fsub+0x24c>
 800139a:	0001      	movs	r1, r0
 800139c:	e778      	b.n	8001290 <__aeabi_fsub+0x120>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06e      	beq.n	8001480 <__aeabi_fsub+0x310>
 80013a2:	24ff      	movs	r4, #255	; 0xff
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x23a>
 80013a8:	e728      	b.n	80011fc <__aeabi_fsub+0x8c>
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	4651      	mov	r1, sl
 80013ae:	03d2      	lsls	r2, r2, #15
 80013b0:	4211      	tst	r1, r2
 80013b2:	d003      	beq.n	80013bc <__aeabi_fsub+0x24c>
 80013b4:	4661      	mov	r1, ip
 80013b6:	4211      	tst	r1, r2
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0x24c>
 80013ba:	0033      	movs	r3, r6
 80013bc:	24ff      	movs	r4, #255	; 0xff
 80013be:	e71d      	b.n	80011fc <__aeabi_fsub+0x8c>
 80013c0:	24ff      	movs	r4, #255	; 0xff
 80013c2:	2300      	movs	r3, #0
 80013c4:	e72c      	b.n	8001220 <__aeabi_fsub+0xb0>
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d1e9      	bne.n	800139e <__aeabi_fsub+0x22e>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <__aeabi_fsub+0x326>
 80013ce:	2e00      	cmp	r6, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_fsub+0x264>
 80013d2:	e713      	b.n	80011fc <__aeabi_fsub+0x8c>
 80013d4:	199b      	adds	r3, r3, r6
 80013d6:	015a      	lsls	r2, r3, #5
 80013d8:	d400      	bmi.n	80013dc <__aeabi_fsub+0x26c>
 80013da:	e73e      	b.n	800125a <__aeabi_fsub+0xea>
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <__aeabi_fsub+0x334>)
 80013de:	000c      	movs	r4, r1
 80013e0:	4013      	ands	r3, r2
 80013e2:	e70b      	b.n	80011fc <__aeabi_fsub+0x8c>
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d11e      	bne.n	8001426 <__aeabi_fsub+0x2b6>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d12f      	bne.n	800144c <__aeabi_fsub+0x2dc>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d04f      	beq.n	8001490 <__aeabi_fsub+0x320>
 80013f0:	0033      	movs	r3, r6
 80013f2:	000d      	movs	r5, r1
 80013f4:	e702      	b.n	80011fc <__aeabi_fsub+0x8c>
 80013f6:	2601      	movs	r6, #1
 80013f8:	e755      	b.n	80012a6 <__aeabi_fsub+0x136>
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d11f      	bne.n	800143e <__aeabi_fsub+0x2ce>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d043      	beq.n	800148a <__aeabi_fsub+0x31a>
 8001402:	43c9      	mvns	r1, r1
 8001404:	2900      	cmp	r1, #0
 8001406:	d00b      	beq.n	8001420 <__aeabi_fsub+0x2b0>
 8001408:	28ff      	cmp	r0, #255	; 0xff
 800140a:	d039      	beq.n	8001480 <__aeabi_fsub+0x310>
 800140c:	291b      	cmp	r1, #27
 800140e:	dc44      	bgt.n	800149a <__aeabi_fsub+0x32a>
 8001410:	001c      	movs	r4, r3
 8001412:	2720      	movs	r7, #32
 8001414:	40cc      	lsrs	r4, r1
 8001416:	1a79      	subs	r1, r7, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	4323      	orrs	r3, r4
 8001420:	199b      	adds	r3, r3, r6
 8001422:	0004      	movs	r4, r0
 8001424:	e740      	b.n	80012a8 <__aeabi_fsub+0x138>
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11a      	bne.n	8001460 <__aeabi_fsub+0x2f0>
 800142a:	2e00      	cmp	r6, #0
 800142c:	d124      	bne.n	8001478 <__aeabi_fsub+0x308>
 800142e:	2780      	movs	r7, #128	; 0x80
 8001430:	2200      	movs	r2, #0
 8001432:	03ff      	lsls	r7, r7, #15
 8001434:	e71b      	b.n	800126e <__aeabi_fsub+0xfe>
 8001436:	0033      	movs	r3, r6
 8001438:	0004      	movs	r4, r0
 800143a:	000d      	movs	r5, r1
 800143c:	e6de      	b.n	80011fc <__aeabi_fsub+0x8c>
 800143e:	28ff      	cmp	r0, #255	; 0xff
 8001440:	d01e      	beq.n	8001480 <__aeabi_fsub+0x310>
 8001442:	2480      	movs	r4, #128	; 0x80
 8001444:	04e4      	lsls	r4, r4, #19
 8001446:	4249      	negs	r1, r1
 8001448:	4323      	orrs	r3, r4
 800144a:	e7df      	b.n	800140c <__aeabi_fsub+0x29c>
 800144c:	2e00      	cmp	r6, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_fsub+0x2e2>
 8001450:	e6d4      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001452:	1b9f      	subs	r7, r3, r6
 8001454:	017a      	lsls	r2, r7, #5
 8001456:	d400      	bmi.n	800145a <__aeabi_fsub+0x2ea>
 8001458:	e737      	b.n	80012ca <__aeabi_fsub+0x15a>
 800145a:	1af3      	subs	r3, r6, r3
 800145c:	000d      	movs	r5, r1
 800145e:	e6cd      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001460:	24ff      	movs	r4, #255	; 0xff
 8001462:	2e00      	cmp	r6, #0
 8001464:	d100      	bne.n	8001468 <__aeabi_fsub+0x2f8>
 8001466:	e6c9      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	4650      	mov	r0, sl
 800146c:	03d2      	lsls	r2, r2, #15
 800146e:	4210      	tst	r0, r2
 8001470:	d0a4      	beq.n	80013bc <__aeabi_fsub+0x24c>
 8001472:	4660      	mov	r0, ip
 8001474:	4210      	tst	r0, r2
 8001476:	d1a1      	bne.n	80013bc <__aeabi_fsub+0x24c>
 8001478:	0033      	movs	r3, r6
 800147a:	000d      	movs	r5, r1
 800147c:	24ff      	movs	r4, #255	; 0xff
 800147e:	e6bd      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001480:	0033      	movs	r3, r6
 8001482:	24ff      	movs	r4, #255	; 0xff
 8001484:	e6ba      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001486:	2301      	movs	r3, #1
 8001488:	e76e      	b.n	8001368 <__aeabi_fsub+0x1f8>
 800148a:	0033      	movs	r3, r6
 800148c:	0004      	movs	r4, r0
 800148e:	e6b5      	b.n	80011fc <__aeabi_fsub+0x8c>
 8001490:	2700      	movs	r7, #0
 8001492:	2200      	movs	r2, #0
 8001494:	e71c      	b.n	80012d0 <__aeabi_fsub+0x160>
 8001496:	0033      	movs	r3, r6
 8001498:	e6b0      	b.n	80011fc <__aeabi_fsub+0x8c>
 800149a:	2301      	movs	r3, #1
 800149c:	e7c0      	b.n	8001420 <__aeabi_fsub+0x2b0>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	7dffffff 	.word	0x7dffffff
 80014a4:	fbffffff 	.word	0xfbffffff

080014a8 <__aeabi_ui2f>:
 80014a8:	b510      	push	{r4, lr}
 80014aa:	1e04      	subs	r4, r0, #0
 80014ac:	d027      	beq.n	80014fe <__aeabi_ui2f+0x56>
 80014ae:	f001 fe1b 	bl	80030e8 <__clzsi2>
 80014b2:	239e      	movs	r3, #158	; 0x9e
 80014b4:	1a1b      	subs	r3, r3, r0
 80014b6:	2b96      	cmp	r3, #150	; 0x96
 80014b8:	dc0a      	bgt.n	80014d0 <__aeabi_ui2f+0x28>
 80014ba:	2296      	movs	r2, #150	; 0x96
 80014bc:	1ad2      	subs	r2, r2, r3
 80014be:	4094      	lsls	r4, r2
 80014c0:	0264      	lsls	r4, r4, #9
 80014c2:	0a64      	lsrs	r4, r4, #9
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	0264      	lsls	r4, r4, #9
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	0a60      	lsrs	r0, r4, #9
 80014cc:	4318      	orrs	r0, r3
 80014ce:	bd10      	pop	{r4, pc}
 80014d0:	2b99      	cmp	r3, #153	; 0x99
 80014d2:	dc17      	bgt.n	8001504 <__aeabi_ui2f+0x5c>
 80014d4:	2299      	movs	r2, #153	; 0x99
 80014d6:	1ad2      	subs	r2, r2, r3
 80014d8:	2a00      	cmp	r2, #0
 80014da:	dd27      	ble.n	800152c <__aeabi_ui2f+0x84>
 80014dc:	4094      	lsls	r4, r2
 80014de:	0022      	movs	r2, r4
 80014e0:	4c13      	ldr	r4, [pc, #76]	; (8001530 <__aeabi_ui2f+0x88>)
 80014e2:	4014      	ands	r4, r2
 80014e4:	0751      	lsls	r1, r2, #29
 80014e6:	d004      	beq.n	80014f2 <__aeabi_ui2f+0x4a>
 80014e8:	210f      	movs	r1, #15
 80014ea:	400a      	ands	r2, r1
 80014ec:	2a04      	cmp	r2, #4
 80014ee:	d000      	beq.n	80014f2 <__aeabi_ui2f+0x4a>
 80014f0:	3404      	adds	r4, #4
 80014f2:	0162      	lsls	r2, r4, #5
 80014f4:	d412      	bmi.n	800151c <__aeabi_ui2f+0x74>
 80014f6:	01a4      	lsls	r4, r4, #6
 80014f8:	0a64      	lsrs	r4, r4, #9
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	e7e3      	b.n	80014c6 <__aeabi_ui2f+0x1e>
 80014fe:	2300      	movs	r3, #0
 8001500:	2400      	movs	r4, #0
 8001502:	e7e0      	b.n	80014c6 <__aeabi_ui2f+0x1e>
 8001504:	22b9      	movs	r2, #185	; 0xb9
 8001506:	0021      	movs	r1, r4
 8001508:	1ad2      	subs	r2, r2, r3
 800150a:	4091      	lsls	r1, r2
 800150c:	000a      	movs	r2, r1
 800150e:	1e51      	subs	r1, r2, #1
 8001510:	418a      	sbcs	r2, r1
 8001512:	2105      	movs	r1, #5
 8001514:	1a09      	subs	r1, r1, r0
 8001516:	40cc      	lsrs	r4, r1
 8001518:	4314      	orrs	r4, r2
 800151a:	e7db      	b.n	80014d4 <__aeabi_ui2f+0x2c>
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__aeabi_ui2f+0x88>)
 800151e:	401c      	ands	r4, r3
 8001520:	239f      	movs	r3, #159	; 0x9f
 8001522:	01a4      	lsls	r4, r4, #6
 8001524:	1a1b      	subs	r3, r3, r0
 8001526:	0a64      	lsrs	r4, r4, #9
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e7cc      	b.n	80014c6 <__aeabi_ui2f+0x1e>
 800152c:	0022      	movs	r2, r4
 800152e:	e7d7      	b.n	80014e0 <__aeabi_ui2f+0x38>
 8001530:	fbffffff 	.word	0xfbffffff

08001534 <__aeabi_dadd>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	4645      	mov	r5, r8
 8001538:	46de      	mov	lr, fp
 800153a:	4657      	mov	r7, sl
 800153c:	464e      	mov	r6, r9
 800153e:	030c      	lsls	r4, r1, #12
 8001540:	b5e0      	push	{r5, r6, r7, lr}
 8001542:	004e      	lsls	r6, r1, #1
 8001544:	0fc9      	lsrs	r1, r1, #31
 8001546:	4688      	mov	r8, r1
 8001548:	000d      	movs	r5, r1
 800154a:	0a61      	lsrs	r1, r4, #9
 800154c:	0f44      	lsrs	r4, r0, #29
 800154e:	430c      	orrs	r4, r1
 8001550:	00c7      	lsls	r7, r0, #3
 8001552:	0319      	lsls	r1, r3, #12
 8001554:	0058      	lsls	r0, r3, #1
 8001556:	0fdb      	lsrs	r3, r3, #31
 8001558:	469b      	mov	fp, r3
 800155a:	0a4b      	lsrs	r3, r1, #9
 800155c:	0f51      	lsrs	r1, r2, #29
 800155e:	430b      	orrs	r3, r1
 8001560:	0d76      	lsrs	r6, r6, #21
 8001562:	0d40      	lsrs	r0, r0, #21
 8001564:	0019      	movs	r1, r3
 8001566:	00d2      	lsls	r2, r2, #3
 8001568:	45d8      	cmp	r8, fp
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x3a>
 800156c:	e0ae      	b.n	80016cc <__aeabi_dadd+0x198>
 800156e:	1a35      	subs	r5, r6, r0
 8001570:	2d00      	cmp	r5, #0
 8001572:	dc00      	bgt.n	8001576 <__aeabi_dadd+0x42>
 8001574:	e0f6      	b.n	8001764 <__aeabi_dadd+0x230>
 8001576:	2800      	cmp	r0, #0
 8001578:	d10f      	bne.n	800159a <__aeabi_dadd+0x66>
 800157a:	4313      	orrs	r3, r2
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x4c>
 800157e:	e0db      	b.n	8001738 <__aeabi_dadd+0x204>
 8001580:	1e6b      	subs	r3, r5, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d000      	beq.n	8001588 <__aeabi_dadd+0x54>
 8001586:	e137      	b.n	80017f8 <__aeabi_dadd+0x2c4>
 8001588:	1aba      	subs	r2, r7, r2
 800158a:	4297      	cmp	r7, r2
 800158c:	41bf      	sbcs	r7, r7
 800158e:	1a64      	subs	r4, r4, r1
 8001590:	427f      	negs	r7, r7
 8001592:	1be4      	subs	r4, r4, r7
 8001594:	2601      	movs	r6, #1
 8001596:	0017      	movs	r7, r2
 8001598:	e024      	b.n	80015e4 <__aeabi_dadd+0xb0>
 800159a:	4bc6      	ldr	r3, [pc, #792]	; (80018b4 <__aeabi_dadd+0x380>)
 800159c:	429e      	cmp	r6, r3
 800159e:	d04d      	beq.n	800163c <__aeabi_dadd+0x108>
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	4319      	orrs	r1, r3
 80015a6:	2d38      	cmp	r5, #56	; 0x38
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dadd+0x78>
 80015aa:	e107      	b.n	80017bc <__aeabi_dadd+0x288>
 80015ac:	2d1f      	cmp	r5, #31
 80015ae:	dd00      	ble.n	80015b2 <__aeabi_dadd+0x7e>
 80015b0:	e138      	b.n	8001824 <__aeabi_dadd+0x2f0>
 80015b2:	2020      	movs	r0, #32
 80015b4:	1b43      	subs	r3, r0, r5
 80015b6:	469a      	mov	sl, r3
 80015b8:	000b      	movs	r3, r1
 80015ba:	4650      	mov	r0, sl
 80015bc:	4083      	lsls	r3, r0
 80015be:	4699      	mov	r9, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	4648      	mov	r0, r9
 80015c4:	40eb      	lsrs	r3, r5
 80015c6:	4318      	orrs	r0, r3
 80015c8:	0003      	movs	r3, r0
 80015ca:	4650      	mov	r0, sl
 80015cc:	4082      	lsls	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	40e9      	lsrs	r1, r5
 80015d4:	431a      	orrs	r2, r3
 80015d6:	1aba      	subs	r2, r7, r2
 80015d8:	1a61      	subs	r1, r4, r1
 80015da:	4297      	cmp	r7, r2
 80015dc:	41a4      	sbcs	r4, r4
 80015de:	0017      	movs	r7, r2
 80015e0:	4264      	negs	r4, r4
 80015e2:	1b0c      	subs	r4, r1, r4
 80015e4:	0223      	lsls	r3, r4, #8
 80015e6:	d562      	bpl.n	80016ae <__aeabi_dadd+0x17a>
 80015e8:	0264      	lsls	r4, r4, #9
 80015ea:	0a65      	lsrs	r5, r4, #9
 80015ec:	2d00      	cmp	r5, #0
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0xbe>
 80015f0:	e0df      	b.n	80017b2 <__aeabi_dadd+0x27e>
 80015f2:	0028      	movs	r0, r5
 80015f4:	f001 fd78 	bl	80030e8 <__clzsi2>
 80015f8:	0003      	movs	r3, r0
 80015fa:	3b08      	subs	r3, #8
 80015fc:	2b1f      	cmp	r3, #31
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dadd+0xce>
 8001600:	e0d2      	b.n	80017a8 <__aeabi_dadd+0x274>
 8001602:	2220      	movs	r2, #32
 8001604:	003c      	movs	r4, r7
 8001606:	1ad2      	subs	r2, r2, r3
 8001608:	409d      	lsls	r5, r3
 800160a:	40d4      	lsrs	r4, r2
 800160c:	409f      	lsls	r7, r3
 800160e:	4325      	orrs	r5, r4
 8001610:	429e      	cmp	r6, r3
 8001612:	dd00      	ble.n	8001616 <__aeabi_dadd+0xe2>
 8001614:	e0c4      	b.n	80017a0 <__aeabi_dadd+0x26c>
 8001616:	1b9e      	subs	r6, r3, r6
 8001618:	1c73      	adds	r3, r6, #1
 800161a:	2b1f      	cmp	r3, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0xec>
 800161e:	e0f1      	b.n	8001804 <__aeabi_dadd+0x2d0>
 8001620:	2220      	movs	r2, #32
 8001622:	0038      	movs	r0, r7
 8001624:	0029      	movs	r1, r5
 8001626:	1ad2      	subs	r2, r2, r3
 8001628:	40d8      	lsrs	r0, r3
 800162a:	4091      	lsls	r1, r2
 800162c:	4097      	lsls	r7, r2
 800162e:	002c      	movs	r4, r5
 8001630:	4301      	orrs	r1, r0
 8001632:	1e78      	subs	r0, r7, #1
 8001634:	4187      	sbcs	r7, r0
 8001636:	40dc      	lsrs	r4, r3
 8001638:	2600      	movs	r6, #0
 800163a:	430f      	orrs	r7, r1
 800163c:	077b      	lsls	r3, r7, #29
 800163e:	d009      	beq.n	8001654 <__aeabi_dadd+0x120>
 8001640:	230f      	movs	r3, #15
 8001642:	403b      	ands	r3, r7
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <__aeabi_dadd+0x120>
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	42bb      	cmp	r3, r7
 800164c:	41bf      	sbcs	r7, r7
 800164e:	427f      	negs	r7, r7
 8001650:	19e4      	adds	r4, r4, r7
 8001652:	001f      	movs	r7, r3
 8001654:	0223      	lsls	r3, r4, #8
 8001656:	d52c      	bpl.n	80016b2 <__aeabi_dadd+0x17e>
 8001658:	4b96      	ldr	r3, [pc, #600]	; (80018b4 <__aeabi_dadd+0x380>)
 800165a:	3601      	adds	r6, #1
 800165c:	429e      	cmp	r6, r3
 800165e:	d100      	bne.n	8001662 <__aeabi_dadd+0x12e>
 8001660:	e09a      	b.n	8001798 <__aeabi_dadd+0x264>
 8001662:	4645      	mov	r5, r8
 8001664:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <__aeabi_dadd+0x384>)
 8001666:	08ff      	lsrs	r7, r7, #3
 8001668:	401c      	ands	r4, r3
 800166a:	0760      	lsls	r0, r4, #29
 800166c:	0576      	lsls	r6, r6, #21
 800166e:	0264      	lsls	r4, r4, #9
 8001670:	4307      	orrs	r7, r0
 8001672:	0b24      	lsrs	r4, r4, #12
 8001674:	0d76      	lsrs	r6, r6, #21
 8001676:	2100      	movs	r1, #0
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	0b23      	lsrs	r3, r4, #12
 800167c:	0d0c      	lsrs	r4, r1, #20
 800167e:	4a8f      	ldr	r2, [pc, #572]	; (80018bc <__aeabi_dadd+0x388>)
 8001680:	0524      	lsls	r4, r4, #20
 8001682:	431c      	orrs	r4, r3
 8001684:	4014      	ands	r4, r2
 8001686:	0533      	lsls	r3, r6, #20
 8001688:	4323      	orrs	r3, r4
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	07ed      	lsls	r5, r5, #31
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	432b      	orrs	r3, r5
 8001692:	0038      	movs	r0, r7
 8001694:	0019      	movs	r1, r3
 8001696:	bc3c      	pop	{r2, r3, r4, r5}
 8001698:	4690      	mov	r8, r2
 800169a:	4699      	mov	r9, r3
 800169c:	46a2      	mov	sl, r4
 800169e:	46ab      	mov	fp, r5
 80016a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a2:	4664      	mov	r4, ip
 80016a4:	4304      	orrs	r4, r0
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x176>
 80016a8:	e211      	b.n	8001ace <__aeabi_dadd+0x59a>
 80016aa:	0004      	movs	r4, r0
 80016ac:	4667      	mov	r7, ip
 80016ae:	077b      	lsls	r3, r7, #29
 80016b0:	d1c6      	bne.n	8001640 <__aeabi_dadd+0x10c>
 80016b2:	4645      	mov	r5, r8
 80016b4:	0760      	lsls	r0, r4, #29
 80016b6:	08ff      	lsrs	r7, r7, #3
 80016b8:	4307      	orrs	r7, r0
 80016ba:	08e4      	lsrs	r4, r4, #3
 80016bc:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <__aeabi_dadd+0x380>)
 80016be:	429e      	cmp	r6, r3
 80016c0:	d030      	beq.n	8001724 <__aeabi_dadd+0x1f0>
 80016c2:	0324      	lsls	r4, r4, #12
 80016c4:	0576      	lsls	r6, r6, #21
 80016c6:	0b24      	lsrs	r4, r4, #12
 80016c8:	0d76      	lsrs	r6, r6, #21
 80016ca:	e7d4      	b.n	8001676 <__aeabi_dadd+0x142>
 80016cc:	1a33      	subs	r3, r6, r0
 80016ce:	469a      	mov	sl, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dd78      	ble.n	80017c6 <__aeabi_dadd+0x292>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d031      	beq.n	800173c <__aeabi_dadd+0x208>
 80016d8:	4876      	ldr	r0, [pc, #472]	; (80018b4 <__aeabi_dadd+0x380>)
 80016da:	4286      	cmp	r6, r0
 80016dc:	d0ae      	beq.n	800163c <__aeabi_dadd+0x108>
 80016de:	2080      	movs	r0, #128	; 0x80
 80016e0:	0400      	lsls	r0, r0, #16
 80016e2:	4301      	orrs	r1, r0
 80016e4:	4653      	mov	r3, sl
 80016e6:	2b38      	cmp	r3, #56	; 0x38
 80016e8:	dc00      	bgt.n	80016ec <__aeabi_dadd+0x1b8>
 80016ea:	e0e9      	b.n	80018c0 <__aeabi_dadd+0x38c>
 80016ec:	430a      	orrs	r2, r1
 80016ee:	1e51      	subs	r1, r2, #1
 80016f0:	418a      	sbcs	r2, r1
 80016f2:	2100      	movs	r1, #0
 80016f4:	19d2      	adds	r2, r2, r7
 80016f6:	42ba      	cmp	r2, r7
 80016f8:	41bf      	sbcs	r7, r7
 80016fa:	1909      	adds	r1, r1, r4
 80016fc:	427c      	negs	r4, r7
 80016fe:	0017      	movs	r7, r2
 8001700:	190c      	adds	r4, r1, r4
 8001702:	0223      	lsls	r3, r4, #8
 8001704:	d5d3      	bpl.n	80016ae <__aeabi_dadd+0x17a>
 8001706:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <__aeabi_dadd+0x380>)
 8001708:	3601      	adds	r6, #1
 800170a:	429e      	cmp	r6, r3
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x1dc>
 800170e:	e13a      	b.n	8001986 <__aeabi_dadd+0x452>
 8001710:	2001      	movs	r0, #1
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <__aeabi_dadd+0x384>)
 8001714:	401c      	ands	r4, r3
 8001716:	087b      	lsrs	r3, r7, #1
 8001718:	4007      	ands	r7, r0
 800171a:	431f      	orrs	r7, r3
 800171c:	07e0      	lsls	r0, r4, #31
 800171e:	4307      	orrs	r7, r0
 8001720:	0864      	lsrs	r4, r4, #1
 8001722:	e78b      	b.n	800163c <__aeabi_dadd+0x108>
 8001724:	0023      	movs	r3, r4
 8001726:	433b      	orrs	r3, r7
 8001728:	d100      	bne.n	800172c <__aeabi_dadd+0x1f8>
 800172a:	e1cb      	b.n	8001ac4 <__aeabi_dadd+0x590>
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	0312      	lsls	r2, r2, #12
 8001730:	4314      	orrs	r4, r2
 8001732:	0324      	lsls	r4, r4, #12
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e79e      	b.n	8001676 <__aeabi_dadd+0x142>
 8001738:	002e      	movs	r6, r5
 800173a:	e77f      	b.n	800163c <__aeabi_dadd+0x108>
 800173c:	0008      	movs	r0, r1
 800173e:	4310      	orrs	r0, r2
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x210>
 8001742:	e0b4      	b.n	80018ae <__aeabi_dadd+0x37a>
 8001744:	1e58      	subs	r0, r3, #1
 8001746:	2800      	cmp	r0, #0
 8001748:	d000      	beq.n	800174c <__aeabi_dadd+0x218>
 800174a:	e0de      	b.n	800190a <__aeabi_dadd+0x3d6>
 800174c:	18ba      	adds	r2, r7, r2
 800174e:	42ba      	cmp	r2, r7
 8001750:	419b      	sbcs	r3, r3
 8001752:	1864      	adds	r4, r4, r1
 8001754:	425b      	negs	r3, r3
 8001756:	18e4      	adds	r4, r4, r3
 8001758:	0017      	movs	r7, r2
 800175a:	2601      	movs	r6, #1
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	d5a6      	bpl.n	80016ae <__aeabi_dadd+0x17a>
 8001760:	2602      	movs	r6, #2
 8001762:	e7d5      	b.n	8001710 <__aeabi_dadd+0x1dc>
 8001764:	2d00      	cmp	r5, #0
 8001766:	d16e      	bne.n	8001846 <__aeabi_dadd+0x312>
 8001768:	1c70      	adds	r0, r6, #1
 800176a:	0540      	lsls	r0, r0, #21
 800176c:	0d40      	lsrs	r0, r0, #21
 800176e:	2801      	cmp	r0, #1
 8001770:	dc00      	bgt.n	8001774 <__aeabi_dadd+0x240>
 8001772:	e0f9      	b.n	8001968 <__aeabi_dadd+0x434>
 8001774:	1ab8      	subs	r0, r7, r2
 8001776:	4684      	mov	ip, r0
 8001778:	4287      	cmp	r7, r0
 800177a:	4180      	sbcs	r0, r0
 800177c:	1ae5      	subs	r5, r4, r3
 800177e:	4240      	negs	r0, r0
 8001780:	1a2d      	subs	r5, r5, r0
 8001782:	0228      	lsls	r0, r5, #8
 8001784:	d400      	bmi.n	8001788 <__aeabi_dadd+0x254>
 8001786:	e089      	b.n	800189c <__aeabi_dadd+0x368>
 8001788:	1bd7      	subs	r7, r2, r7
 800178a:	42ba      	cmp	r2, r7
 800178c:	4192      	sbcs	r2, r2
 800178e:	1b1c      	subs	r4, r3, r4
 8001790:	4252      	negs	r2, r2
 8001792:	1aa5      	subs	r5, r4, r2
 8001794:	46d8      	mov	r8, fp
 8001796:	e729      	b.n	80015ec <__aeabi_dadd+0xb8>
 8001798:	4645      	mov	r5, r8
 800179a:	2400      	movs	r4, #0
 800179c:	2700      	movs	r7, #0
 800179e:	e76a      	b.n	8001676 <__aeabi_dadd+0x142>
 80017a0:	4c45      	ldr	r4, [pc, #276]	; (80018b8 <__aeabi_dadd+0x384>)
 80017a2:	1af6      	subs	r6, r6, r3
 80017a4:	402c      	ands	r4, r5
 80017a6:	e749      	b.n	800163c <__aeabi_dadd+0x108>
 80017a8:	003d      	movs	r5, r7
 80017aa:	3828      	subs	r0, #40	; 0x28
 80017ac:	4085      	lsls	r5, r0
 80017ae:	2700      	movs	r7, #0
 80017b0:	e72e      	b.n	8001610 <__aeabi_dadd+0xdc>
 80017b2:	0038      	movs	r0, r7
 80017b4:	f001 fc98 	bl	80030e8 <__clzsi2>
 80017b8:	3020      	adds	r0, #32
 80017ba:	e71d      	b.n	80015f8 <__aeabi_dadd+0xc4>
 80017bc:	430a      	orrs	r2, r1
 80017be:	1e51      	subs	r1, r2, #1
 80017c0:	418a      	sbcs	r2, r1
 80017c2:	2100      	movs	r1, #0
 80017c4:	e707      	b.n	80015d6 <__aeabi_dadd+0xa2>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d000      	beq.n	80017cc <__aeabi_dadd+0x298>
 80017ca:	e0f3      	b.n	80019b4 <__aeabi_dadd+0x480>
 80017cc:	1c70      	adds	r0, r6, #1
 80017ce:	0543      	lsls	r3, r0, #21
 80017d0:	0d5b      	lsrs	r3, r3, #21
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	dc00      	bgt.n	80017d8 <__aeabi_dadd+0x2a4>
 80017d6:	e0ad      	b.n	8001934 <__aeabi_dadd+0x400>
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <__aeabi_dadd+0x380>)
 80017da:	4298      	cmp	r0, r3
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x2ac>
 80017de:	e0d1      	b.n	8001984 <__aeabi_dadd+0x450>
 80017e0:	18ba      	adds	r2, r7, r2
 80017e2:	42ba      	cmp	r2, r7
 80017e4:	41bf      	sbcs	r7, r7
 80017e6:	1864      	adds	r4, r4, r1
 80017e8:	427f      	negs	r7, r7
 80017ea:	19e4      	adds	r4, r4, r7
 80017ec:	07e7      	lsls	r7, r4, #31
 80017ee:	0852      	lsrs	r2, r2, #1
 80017f0:	4317      	orrs	r7, r2
 80017f2:	0864      	lsrs	r4, r4, #1
 80017f4:	0006      	movs	r6, r0
 80017f6:	e721      	b.n	800163c <__aeabi_dadd+0x108>
 80017f8:	482e      	ldr	r0, [pc, #184]	; (80018b4 <__aeabi_dadd+0x380>)
 80017fa:	4285      	cmp	r5, r0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dadd+0x2cc>
 80017fe:	e093      	b.n	8001928 <__aeabi_dadd+0x3f4>
 8001800:	001d      	movs	r5, r3
 8001802:	e6d0      	b.n	80015a6 <__aeabi_dadd+0x72>
 8001804:	0029      	movs	r1, r5
 8001806:	3e1f      	subs	r6, #31
 8001808:	40f1      	lsrs	r1, r6
 800180a:	2b20      	cmp	r3, #32
 800180c:	d100      	bne.n	8001810 <__aeabi_dadd+0x2dc>
 800180e:	e08d      	b.n	800192c <__aeabi_dadd+0x3f8>
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	409d      	lsls	r5, r3
 8001816:	432f      	orrs	r7, r5
 8001818:	1e7d      	subs	r5, r7, #1
 800181a:	41af      	sbcs	r7, r5
 800181c:	2400      	movs	r4, #0
 800181e:	430f      	orrs	r7, r1
 8001820:	2600      	movs	r6, #0
 8001822:	e744      	b.n	80016ae <__aeabi_dadd+0x17a>
 8001824:	002b      	movs	r3, r5
 8001826:	0008      	movs	r0, r1
 8001828:	3b20      	subs	r3, #32
 800182a:	40d8      	lsrs	r0, r3
 800182c:	0003      	movs	r3, r0
 800182e:	2d20      	cmp	r5, #32
 8001830:	d100      	bne.n	8001834 <__aeabi_dadd+0x300>
 8001832:	e07d      	b.n	8001930 <__aeabi_dadd+0x3fc>
 8001834:	2040      	movs	r0, #64	; 0x40
 8001836:	1b45      	subs	r5, r0, r5
 8001838:	40a9      	lsls	r1, r5
 800183a:	430a      	orrs	r2, r1
 800183c:	1e51      	subs	r1, r2, #1
 800183e:	418a      	sbcs	r2, r1
 8001840:	2100      	movs	r1, #0
 8001842:	431a      	orrs	r2, r3
 8001844:	e6c7      	b.n	80015d6 <__aeabi_dadd+0xa2>
 8001846:	2e00      	cmp	r6, #0
 8001848:	d050      	beq.n	80018ec <__aeabi_dadd+0x3b8>
 800184a:	4e1a      	ldr	r6, [pc, #104]	; (80018b4 <__aeabi_dadd+0x380>)
 800184c:	42b0      	cmp	r0, r6
 800184e:	d057      	beq.n	8001900 <__aeabi_dadd+0x3cc>
 8001850:	2680      	movs	r6, #128	; 0x80
 8001852:	426b      	negs	r3, r5
 8001854:	4699      	mov	r9, r3
 8001856:	0436      	lsls	r6, r6, #16
 8001858:	4334      	orrs	r4, r6
 800185a:	464b      	mov	r3, r9
 800185c:	2b38      	cmp	r3, #56	; 0x38
 800185e:	dd00      	ble.n	8001862 <__aeabi_dadd+0x32e>
 8001860:	e0d6      	b.n	8001a10 <__aeabi_dadd+0x4dc>
 8001862:	2b1f      	cmp	r3, #31
 8001864:	dd00      	ble.n	8001868 <__aeabi_dadd+0x334>
 8001866:	e135      	b.n	8001ad4 <__aeabi_dadd+0x5a0>
 8001868:	2620      	movs	r6, #32
 800186a:	1af5      	subs	r5, r6, r3
 800186c:	0026      	movs	r6, r4
 800186e:	40ae      	lsls	r6, r5
 8001870:	46b2      	mov	sl, r6
 8001872:	003e      	movs	r6, r7
 8001874:	40de      	lsrs	r6, r3
 8001876:	46ac      	mov	ip, r5
 8001878:	0035      	movs	r5, r6
 800187a:	4656      	mov	r6, sl
 800187c:	432e      	orrs	r6, r5
 800187e:	4665      	mov	r5, ip
 8001880:	40af      	lsls	r7, r5
 8001882:	1e7d      	subs	r5, r7, #1
 8001884:	41af      	sbcs	r7, r5
 8001886:	40dc      	lsrs	r4, r3
 8001888:	4337      	orrs	r7, r6
 800188a:	1bd7      	subs	r7, r2, r7
 800188c:	42ba      	cmp	r2, r7
 800188e:	4192      	sbcs	r2, r2
 8001890:	1b0c      	subs	r4, r1, r4
 8001892:	4252      	negs	r2, r2
 8001894:	1aa4      	subs	r4, r4, r2
 8001896:	0006      	movs	r6, r0
 8001898:	46d8      	mov	r8, fp
 800189a:	e6a3      	b.n	80015e4 <__aeabi_dadd+0xb0>
 800189c:	4664      	mov	r4, ip
 800189e:	4667      	mov	r7, ip
 80018a0:	432c      	orrs	r4, r5
 80018a2:	d000      	beq.n	80018a6 <__aeabi_dadd+0x372>
 80018a4:	e6a2      	b.n	80015ec <__aeabi_dadd+0xb8>
 80018a6:	2500      	movs	r5, #0
 80018a8:	2600      	movs	r6, #0
 80018aa:	2700      	movs	r7, #0
 80018ac:	e706      	b.n	80016bc <__aeabi_dadd+0x188>
 80018ae:	001e      	movs	r6, r3
 80018b0:	e6c4      	b.n	800163c <__aeabi_dadd+0x108>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	000007ff 	.word	0x000007ff
 80018b8:	ff7fffff 	.word	0xff7fffff
 80018bc:	800fffff 	.word	0x800fffff
 80018c0:	2b1f      	cmp	r3, #31
 80018c2:	dc63      	bgt.n	800198c <__aeabi_dadd+0x458>
 80018c4:	2020      	movs	r0, #32
 80018c6:	1ac3      	subs	r3, r0, r3
 80018c8:	0008      	movs	r0, r1
 80018ca:	4098      	lsls	r0, r3
 80018cc:	469c      	mov	ip, r3
 80018ce:	4683      	mov	fp, r0
 80018d0:	4653      	mov	r3, sl
 80018d2:	0010      	movs	r0, r2
 80018d4:	40d8      	lsrs	r0, r3
 80018d6:	0003      	movs	r3, r0
 80018d8:	4658      	mov	r0, fp
 80018da:	4318      	orrs	r0, r3
 80018dc:	4663      	mov	r3, ip
 80018de:	409a      	lsls	r2, r3
 80018e0:	1e53      	subs	r3, r2, #1
 80018e2:	419a      	sbcs	r2, r3
 80018e4:	4653      	mov	r3, sl
 80018e6:	4302      	orrs	r2, r0
 80018e8:	40d9      	lsrs	r1, r3
 80018ea:	e703      	b.n	80016f4 <__aeabi_dadd+0x1c0>
 80018ec:	0026      	movs	r6, r4
 80018ee:	433e      	orrs	r6, r7
 80018f0:	d006      	beq.n	8001900 <__aeabi_dadd+0x3cc>
 80018f2:	43eb      	mvns	r3, r5
 80018f4:	4699      	mov	r9, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0c7      	beq.n	800188a <__aeabi_dadd+0x356>
 80018fa:	4e94      	ldr	r6, [pc, #592]	; (8001b4c <__aeabi_dadd+0x618>)
 80018fc:	42b0      	cmp	r0, r6
 80018fe:	d1ac      	bne.n	800185a <__aeabi_dadd+0x326>
 8001900:	000c      	movs	r4, r1
 8001902:	0017      	movs	r7, r2
 8001904:	0006      	movs	r6, r0
 8001906:	46d8      	mov	r8, fp
 8001908:	e698      	b.n	800163c <__aeabi_dadd+0x108>
 800190a:	4b90      	ldr	r3, [pc, #576]	; (8001b4c <__aeabi_dadd+0x618>)
 800190c:	459a      	cmp	sl, r3
 800190e:	d00b      	beq.n	8001928 <__aeabi_dadd+0x3f4>
 8001910:	4682      	mov	sl, r0
 8001912:	e6e7      	b.n	80016e4 <__aeabi_dadd+0x1b0>
 8001914:	2800      	cmp	r0, #0
 8001916:	d000      	beq.n	800191a <__aeabi_dadd+0x3e6>
 8001918:	e09e      	b.n	8001a58 <__aeabi_dadd+0x524>
 800191a:	0018      	movs	r0, r3
 800191c:	4310      	orrs	r0, r2
 800191e:	d100      	bne.n	8001922 <__aeabi_dadd+0x3ee>
 8001920:	e0e9      	b.n	8001af6 <__aeabi_dadd+0x5c2>
 8001922:	001c      	movs	r4, r3
 8001924:	0017      	movs	r7, r2
 8001926:	46d8      	mov	r8, fp
 8001928:	4e88      	ldr	r6, [pc, #544]	; (8001b4c <__aeabi_dadd+0x618>)
 800192a:	e687      	b.n	800163c <__aeabi_dadd+0x108>
 800192c:	2500      	movs	r5, #0
 800192e:	e772      	b.n	8001816 <__aeabi_dadd+0x2e2>
 8001930:	2100      	movs	r1, #0
 8001932:	e782      	b.n	800183a <__aeabi_dadd+0x306>
 8001934:	0023      	movs	r3, r4
 8001936:	433b      	orrs	r3, r7
 8001938:	2e00      	cmp	r6, #0
 800193a:	d000      	beq.n	800193e <__aeabi_dadd+0x40a>
 800193c:	e0ab      	b.n	8001a96 <__aeabi_dadd+0x562>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d100      	bne.n	8001944 <__aeabi_dadd+0x410>
 8001942:	e0e7      	b.n	8001b14 <__aeabi_dadd+0x5e0>
 8001944:	000b      	movs	r3, r1
 8001946:	4313      	orrs	r3, r2
 8001948:	d100      	bne.n	800194c <__aeabi_dadd+0x418>
 800194a:	e677      	b.n	800163c <__aeabi_dadd+0x108>
 800194c:	18ba      	adds	r2, r7, r2
 800194e:	42ba      	cmp	r2, r7
 8001950:	41bf      	sbcs	r7, r7
 8001952:	1864      	adds	r4, r4, r1
 8001954:	427f      	negs	r7, r7
 8001956:	19e4      	adds	r4, r4, r7
 8001958:	0223      	lsls	r3, r4, #8
 800195a:	d400      	bmi.n	800195e <__aeabi_dadd+0x42a>
 800195c:	e0f2      	b.n	8001b44 <__aeabi_dadd+0x610>
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <__aeabi_dadd+0x61c>)
 8001960:	0017      	movs	r7, r2
 8001962:	401c      	ands	r4, r3
 8001964:	0006      	movs	r6, r0
 8001966:	e669      	b.n	800163c <__aeabi_dadd+0x108>
 8001968:	0020      	movs	r0, r4
 800196a:	4338      	orrs	r0, r7
 800196c:	2e00      	cmp	r6, #0
 800196e:	d1d1      	bne.n	8001914 <__aeabi_dadd+0x3e0>
 8001970:	2800      	cmp	r0, #0
 8001972:	d15b      	bne.n	8001a2c <__aeabi_dadd+0x4f8>
 8001974:	001c      	movs	r4, r3
 8001976:	4314      	orrs	r4, r2
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x448>
 800197a:	e0a8      	b.n	8001ace <__aeabi_dadd+0x59a>
 800197c:	001c      	movs	r4, r3
 800197e:	0017      	movs	r7, r2
 8001980:	46d8      	mov	r8, fp
 8001982:	e65b      	b.n	800163c <__aeabi_dadd+0x108>
 8001984:	0006      	movs	r6, r0
 8001986:	2400      	movs	r4, #0
 8001988:	2700      	movs	r7, #0
 800198a:	e697      	b.n	80016bc <__aeabi_dadd+0x188>
 800198c:	4650      	mov	r0, sl
 800198e:	000b      	movs	r3, r1
 8001990:	3820      	subs	r0, #32
 8001992:	40c3      	lsrs	r3, r0
 8001994:	4699      	mov	r9, r3
 8001996:	4653      	mov	r3, sl
 8001998:	2b20      	cmp	r3, #32
 800199a:	d100      	bne.n	800199e <__aeabi_dadd+0x46a>
 800199c:	e095      	b.n	8001aca <__aeabi_dadd+0x596>
 800199e:	2340      	movs	r3, #64	; 0x40
 80019a0:	4650      	mov	r0, sl
 80019a2:	1a1b      	subs	r3, r3, r0
 80019a4:	4099      	lsls	r1, r3
 80019a6:	430a      	orrs	r2, r1
 80019a8:	1e51      	subs	r1, r2, #1
 80019aa:	418a      	sbcs	r2, r1
 80019ac:	464b      	mov	r3, r9
 80019ae:	2100      	movs	r1, #0
 80019b0:	431a      	orrs	r2, r3
 80019b2:	e69f      	b.n	80016f4 <__aeabi_dadd+0x1c0>
 80019b4:	2e00      	cmp	r6, #0
 80019b6:	d130      	bne.n	8001a1a <__aeabi_dadd+0x4e6>
 80019b8:	0026      	movs	r6, r4
 80019ba:	433e      	orrs	r6, r7
 80019bc:	d067      	beq.n	8001a8e <__aeabi_dadd+0x55a>
 80019be:	43db      	mvns	r3, r3
 80019c0:	469a      	mov	sl, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01c      	beq.n	8001a00 <__aeabi_dadd+0x4cc>
 80019c6:	4e61      	ldr	r6, [pc, #388]	; (8001b4c <__aeabi_dadd+0x618>)
 80019c8:	42b0      	cmp	r0, r6
 80019ca:	d060      	beq.n	8001a8e <__aeabi_dadd+0x55a>
 80019cc:	4653      	mov	r3, sl
 80019ce:	2b38      	cmp	r3, #56	; 0x38
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dadd+0x4a0>
 80019d2:	e096      	b.n	8001b02 <__aeabi_dadd+0x5ce>
 80019d4:	2b1f      	cmp	r3, #31
 80019d6:	dd00      	ble.n	80019da <__aeabi_dadd+0x4a6>
 80019d8:	e09f      	b.n	8001b1a <__aeabi_dadd+0x5e6>
 80019da:	2620      	movs	r6, #32
 80019dc:	1af3      	subs	r3, r6, r3
 80019de:	0026      	movs	r6, r4
 80019e0:	409e      	lsls	r6, r3
 80019e2:	469c      	mov	ip, r3
 80019e4:	46b3      	mov	fp, r6
 80019e6:	4653      	mov	r3, sl
 80019e8:	003e      	movs	r6, r7
 80019ea:	40de      	lsrs	r6, r3
 80019ec:	0033      	movs	r3, r6
 80019ee:	465e      	mov	r6, fp
 80019f0:	431e      	orrs	r6, r3
 80019f2:	4663      	mov	r3, ip
 80019f4:	409f      	lsls	r7, r3
 80019f6:	1e7b      	subs	r3, r7, #1
 80019f8:	419f      	sbcs	r7, r3
 80019fa:	4653      	mov	r3, sl
 80019fc:	40dc      	lsrs	r4, r3
 80019fe:	4337      	orrs	r7, r6
 8001a00:	18bf      	adds	r7, r7, r2
 8001a02:	4297      	cmp	r7, r2
 8001a04:	4192      	sbcs	r2, r2
 8001a06:	1864      	adds	r4, r4, r1
 8001a08:	4252      	negs	r2, r2
 8001a0a:	18a4      	adds	r4, r4, r2
 8001a0c:	0006      	movs	r6, r0
 8001a0e:	e678      	b.n	8001702 <__aeabi_dadd+0x1ce>
 8001a10:	4327      	orrs	r7, r4
 8001a12:	1e7c      	subs	r4, r7, #1
 8001a14:	41a7      	sbcs	r7, r4
 8001a16:	2400      	movs	r4, #0
 8001a18:	e737      	b.n	800188a <__aeabi_dadd+0x356>
 8001a1a:	4e4c      	ldr	r6, [pc, #304]	; (8001b4c <__aeabi_dadd+0x618>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d036      	beq.n	8001a8e <__aeabi_dadd+0x55a>
 8001a20:	2680      	movs	r6, #128	; 0x80
 8001a22:	425b      	negs	r3, r3
 8001a24:	0436      	lsls	r6, r6, #16
 8001a26:	469a      	mov	sl, r3
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	e7cf      	b.n	80019cc <__aeabi_dadd+0x498>
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	4310      	orrs	r0, r2
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dadd+0x500>
 8001a32:	e603      	b.n	800163c <__aeabi_dadd+0x108>
 8001a34:	1ab8      	subs	r0, r7, r2
 8001a36:	4684      	mov	ip, r0
 8001a38:	4567      	cmp	r7, ip
 8001a3a:	41ad      	sbcs	r5, r5
 8001a3c:	1ae0      	subs	r0, r4, r3
 8001a3e:	426d      	negs	r5, r5
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	0205      	lsls	r5, r0, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_dadd+0x514>
 8001a46:	e62c      	b.n	80016a2 <__aeabi_dadd+0x16e>
 8001a48:	1bd7      	subs	r7, r2, r7
 8001a4a:	42ba      	cmp	r2, r7
 8001a4c:	4192      	sbcs	r2, r2
 8001a4e:	1b1c      	subs	r4, r3, r4
 8001a50:	4252      	negs	r2, r2
 8001a52:	1aa4      	subs	r4, r4, r2
 8001a54:	46d8      	mov	r8, fp
 8001a56:	e5f1      	b.n	800163c <__aeabi_dadd+0x108>
 8001a58:	0018      	movs	r0, r3
 8001a5a:	4310      	orrs	r0, r2
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dadd+0x52c>
 8001a5e:	e763      	b.n	8001928 <__aeabi_dadd+0x3f4>
 8001a60:	08f8      	lsrs	r0, r7, #3
 8001a62:	0767      	lsls	r7, r4, #29
 8001a64:	4307      	orrs	r7, r0
 8001a66:	2080      	movs	r0, #128	; 0x80
 8001a68:	08e4      	lsrs	r4, r4, #3
 8001a6a:	0300      	lsls	r0, r0, #12
 8001a6c:	4204      	tst	r4, r0
 8001a6e:	d008      	beq.n	8001a82 <__aeabi_dadd+0x54e>
 8001a70:	08dd      	lsrs	r5, r3, #3
 8001a72:	4205      	tst	r5, r0
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dadd+0x54e>
 8001a76:	08d2      	lsrs	r2, r2, #3
 8001a78:	0759      	lsls	r1, r3, #29
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	000f      	movs	r7, r1
 8001a7e:	002c      	movs	r4, r5
 8001a80:	46d8      	mov	r8, fp
 8001a82:	0f7b      	lsrs	r3, r7, #29
 8001a84:	00e4      	lsls	r4, r4, #3
 8001a86:	431c      	orrs	r4, r3
 8001a88:	00ff      	lsls	r7, r7, #3
 8001a8a:	4e30      	ldr	r6, [pc, #192]	; (8001b4c <__aeabi_dadd+0x618>)
 8001a8c:	e5d6      	b.n	800163c <__aeabi_dadd+0x108>
 8001a8e:	000c      	movs	r4, r1
 8001a90:	0017      	movs	r7, r2
 8001a92:	0006      	movs	r6, r0
 8001a94:	e5d2      	b.n	800163c <__aeabi_dadd+0x108>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d038      	beq.n	8001b0c <__aeabi_dadd+0x5d8>
 8001a9a:	000b      	movs	r3, r1
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dadd+0x56e>
 8001aa0:	e742      	b.n	8001928 <__aeabi_dadd+0x3f4>
 8001aa2:	08f8      	lsrs	r0, r7, #3
 8001aa4:	0767      	lsls	r7, r4, #29
 8001aa6:	4307      	orrs	r7, r0
 8001aa8:	2080      	movs	r0, #128	; 0x80
 8001aaa:	08e4      	lsrs	r4, r4, #3
 8001aac:	0300      	lsls	r0, r0, #12
 8001aae:	4204      	tst	r4, r0
 8001ab0:	d0e7      	beq.n	8001a82 <__aeabi_dadd+0x54e>
 8001ab2:	08cb      	lsrs	r3, r1, #3
 8001ab4:	4203      	tst	r3, r0
 8001ab6:	d1e4      	bne.n	8001a82 <__aeabi_dadd+0x54e>
 8001ab8:	08d2      	lsrs	r2, r2, #3
 8001aba:	0749      	lsls	r1, r1, #29
 8001abc:	4311      	orrs	r1, r2
 8001abe:	000f      	movs	r7, r1
 8001ac0:	001c      	movs	r4, r3
 8001ac2:	e7de      	b.n	8001a82 <__aeabi_dadd+0x54e>
 8001ac4:	2700      	movs	r7, #0
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	e5d5      	b.n	8001676 <__aeabi_dadd+0x142>
 8001aca:	2100      	movs	r1, #0
 8001acc:	e76b      	b.n	80019a6 <__aeabi_dadd+0x472>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	2700      	movs	r7, #0
 8001ad2:	e5f3      	b.n	80016bc <__aeabi_dadd+0x188>
 8001ad4:	464e      	mov	r6, r9
 8001ad6:	0025      	movs	r5, r4
 8001ad8:	3e20      	subs	r6, #32
 8001ada:	40f5      	lsrs	r5, r6
 8001adc:	464b      	mov	r3, r9
 8001ade:	002e      	movs	r6, r5
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d02d      	beq.n	8001b40 <__aeabi_dadd+0x60c>
 8001ae4:	2540      	movs	r5, #64	; 0x40
 8001ae6:	1aed      	subs	r5, r5, r3
 8001ae8:	40ac      	lsls	r4, r5
 8001aea:	4327      	orrs	r7, r4
 8001aec:	1e7c      	subs	r4, r7, #1
 8001aee:	41a7      	sbcs	r7, r4
 8001af0:	2400      	movs	r4, #0
 8001af2:	4337      	orrs	r7, r6
 8001af4:	e6c9      	b.n	800188a <__aeabi_dadd+0x356>
 8001af6:	2480      	movs	r4, #128	; 0x80
 8001af8:	2500      	movs	r5, #0
 8001afa:	0324      	lsls	r4, r4, #12
 8001afc:	4e13      	ldr	r6, [pc, #76]	; (8001b4c <__aeabi_dadd+0x618>)
 8001afe:	2700      	movs	r7, #0
 8001b00:	e5dc      	b.n	80016bc <__aeabi_dadd+0x188>
 8001b02:	4327      	orrs	r7, r4
 8001b04:	1e7c      	subs	r4, r7, #1
 8001b06:	41a7      	sbcs	r7, r4
 8001b08:	2400      	movs	r4, #0
 8001b0a:	e779      	b.n	8001a00 <__aeabi_dadd+0x4cc>
 8001b0c:	000c      	movs	r4, r1
 8001b0e:	0017      	movs	r7, r2
 8001b10:	4e0e      	ldr	r6, [pc, #56]	; (8001b4c <__aeabi_dadd+0x618>)
 8001b12:	e593      	b.n	800163c <__aeabi_dadd+0x108>
 8001b14:	000c      	movs	r4, r1
 8001b16:	0017      	movs	r7, r2
 8001b18:	e590      	b.n	800163c <__aeabi_dadd+0x108>
 8001b1a:	4656      	mov	r6, sl
 8001b1c:	0023      	movs	r3, r4
 8001b1e:	3e20      	subs	r6, #32
 8001b20:	40f3      	lsrs	r3, r6
 8001b22:	4699      	mov	r9, r3
 8001b24:	4653      	mov	r3, sl
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d00e      	beq.n	8001b48 <__aeabi_dadd+0x614>
 8001b2a:	2340      	movs	r3, #64	; 0x40
 8001b2c:	4656      	mov	r6, sl
 8001b2e:	1b9b      	subs	r3, r3, r6
 8001b30:	409c      	lsls	r4, r3
 8001b32:	4327      	orrs	r7, r4
 8001b34:	1e7c      	subs	r4, r7, #1
 8001b36:	41a7      	sbcs	r7, r4
 8001b38:	464b      	mov	r3, r9
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	431f      	orrs	r7, r3
 8001b3e:	e75f      	b.n	8001a00 <__aeabi_dadd+0x4cc>
 8001b40:	2400      	movs	r4, #0
 8001b42:	e7d2      	b.n	8001aea <__aeabi_dadd+0x5b6>
 8001b44:	0017      	movs	r7, r2
 8001b46:	e5b2      	b.n	80016ae <__aeabi_dadd+0x17a>
 8001b48:	2400      	movs	r4, #0
 8001b4a:	e7f2      	b.n	8001b32 <__aeabi_dadd+0x5fe>
 8001b4c:	000007ff 	.word	0x000007ff
 8001b50:	ff7fffff 	.word	0xff7fffff

08001b54 <__aeabi_ddiv>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	4657      	mov	r7, sl
 8001b58:	4645      	mov	r5, r8
 8001b5a:	46de      	mov	lr, fp
 8001b5c:	464e      	mov	r6, r9
 8001b5e:	b5e0      	push	{r5, r6, r7, lr}
 8001b60:	004c      	lsls	r4, r1, #1
 8001b62:	030e      	lsls	r6, r1, #12
 8001b64:	b087      	sub	sp, #28
 8001b66:	4683      	mov	fp, r0
 8001b68:	4692      	mov	sl, r2
 8001b6a:	001d      	movs	r5, r3
 8001b6c:	4680      	mov	r8, r0
 8001b6e:	0b36      	lsrs	r6, r6, #12
 8001b70:	0d64      	lsrs	r4, r4, #21
 8001b72:	0fcf      	lsrs	r7, r1, #31
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	d04f      	beq.n	8001c18 <__aeabi_ddiv+0xc4>
 8001b78:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <__aeabi_ddiv+0x1e4>)
 8001b7a:	429c      	cmp	r4, r3
 8001b7c:	d035      	beq.n	8001bea <__aeabi_ddiv+0x96>
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	0f42      	lsrs	r2, r0, #29
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	00f6      	lsls	r6, r6, #3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	4333      	orrs	r3, r6
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	00c3      	lsls	r3, r0, #3
 8001b8e:	4698      	mov	r8, r3
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <__aeabi_ddiv+0x1e8>)
 8001b92:	2600      	movs	r6, #0
 8001b94:	469c      	mov	ip, r3
 8001b96:	2300      	movs	r3, #0
 8001b98:	4464      	add	r4, ip
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	032b      	lsls	r3, r5, #12
 8001b9e:	0b1b      	lsrs	r3, r3, #12
 8001ba0:	469b      	mov	fp, r3
 8001ba2:	006b      	lsls	r3, r5, #1
 8001ba4:	0fed      	lsrs	r5, r5, #31
 8001ba6:	4650      	mov	r0, sl
 8001ba8:	0d5b      	lsrs	r3, r3, #21
 8001baa:	9501      	str	r5, [sp, #4]
 8001bac:	d05e      	beq.n	8001c6c <__aeabi_ddiv+0x118>
 8001bae:	4a62      	ldr	r2, [pc, #392]	; (8001d38 <__aeabi_ddiv+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d053      	beq.n	8001c5c <__aeabi_ddiv+0x108>
 8001bb4:	465a      	mov	r2, fp
 8001bb6:	00d1      	lsls	r1, r2, #3
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0f40      	lsrs	r0, r0, #29
 8001bbc:	0412      	lsls	r2, r2, #16
 8001bbe:	4302      	orrs	r2, r0
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4693      	mov	fp, r2
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	00d1      	lsls	r1, r2, #3
 8001bc8:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <__aeabi_ddiv+0x1e8>)
 8001bca:	4694      	mov	ip, r2
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4463      	add	r3, ip
 8001bd0:	0038      	movs	r0, r7
 8001bd2:	4068      	eors	r0, r5
 8001bd4:	4684      	mov	ip, r0
 8001bd6:	9002      	str	r0, [sp, #8]
 8001bd8:	1ae4      	subs	r4, r4, r3
 8001bda:	4316      	orrs	r6, r2
 8001bdc:	2e0f      	cmp	r6, #15
 8001bde:	d900      	bls.n	8001be2 <__aeabi_ddiv+0x8e>
 8001be0:	e0b4      	b.n	8001d4c <__aeabi_ddiv+0x1f8>
 8001be2:	4b57      	ldr	r3, [pc, #348]	; (8001d40 <__aeabi_ddiv+0x1ec>)
 8001be4:	00b6      	lsls	r6, r6, #2
 8001be6:	599b      	ldr	r3, [r3, r6]
 8001be8:	469f      	mov	pc, r3
 8001bea:	0003      	movs	r3, r0
 8001bec:	4333      	orrs	r3, r6
 8001bee:	4699      	mov	r9, r3
 8001bf0:	d16c      	bne.n	8001ccc <__aeabi_ddiv+0x178>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	2608      	movs	r6, #8
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	e7ce      	b.n	8001b9c <__aeabi_ddiv+0x48>
 8001bfe:	46cb      	mov	fp, r9
 8001c00:	4641      	mov	r1, r8
 8001c02:	9a03      	ldr	r2, [sp, #12]
 8001c04:	9701      	str	r7, [sp, #4]
 8001c06:	2a02      	cmp	r2, #2
 8001c08:	d165      	bne.n	8001cd6 <__aeabi_ddiv+0x182>
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	4c4a      	ldr	r4, [pc, #296]	; (8001d38 <__aeabi_ddiv+0x1e4>)
 8001c0e:	469c      	mov	ip, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	2200      	movs	r2, #0
 8001c14:	4698      	mov	r8, r3
 8001c16:	e06b      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	4333      	orrs	r3, r6
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	d04e      	beq.n	8001cbe <__aeabi_ddiv+0x16a>
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	d100      	bne.n	8001c26 <__aeabi_ddiv+0xd2>
 8001c24:	e1bc      	b.n	8001fa0 <__aeabi_ddiv+0x44c>
 8001c26:	0030      	movs	r0, r6
 8001c28:	f001 fa5e 	bl	80030e8 <__clzsi2>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	3b0b      	subs	r3, #11
 8001c30:	2b1c      	cmp	r3, #28
 8001c32:	dd00      	ble.n	8001c36 <__aeabi_ddiv+0xe2>
 8001c34:	e1ac      	b.n	8001f90 <__aeabi_ddiv+0x43c>
 8001c36:	221d      	movs	r2, #29
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	465a      	mov	r2, fp
 8001c3c:	0001      	movs	r1, r0
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	3908      	subs	r1, #8
 8001c42:	408e      	lsls	r6, r1
 8001c44:	0013      	movs	r3, r2
 8001c46:	4333      	orrs	r3, r6
 8001c48:	4699      	mov	r9, r3
 8001c4a:	465b      	mov	r3, fp
 8001c4c:	408b      	lsls	r3, r1
 8001c4e:	4698      	mov	r8, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	4c3c      	ldr	r4, [pc, #240]	; (8001d44 <__aeabi_ddiv+0x1f0>)
 8001c54:	2600      	movs	r6, #0
 8001c56:	1a24      	subs	r4, r4, r0
 8001c58:	9303      	str	r3, [sp, #12]
 8001c5a:	e79f      	b.n	8001b9c <__aeabi_ddiv+0x48>
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	465a      	mov	r2, fp
 8001c60:	4311      	orrs	r1, r2
 8001c62:	d129      	bne.n	8001cb8 <__aeabi_ddiv+0x164>
 8001c64:	2200      	movs	r2, #0
 8001c66:	4693      	mov	fp, r2
 8001c68:	3202      	adds	r2, #2
 8001c6a:	e7b1      	b.n	8001bd0 <__aeabi_ddiv+0x7c>
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	4301      	orrs	r1, r0
 8001c70:	d01e      	beq.n	8001cb0 <__aeabi_ddiv+0x15c>
 8001c72:	465b      	mov	r3, fp
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_ddiv+0x126>
 8001c78:	e19e      	b.n	8001fb8 <__aeabi_ddiv+0x464>
 8001c7a:	4658      	mov	r0, fp
 8001c7c:	f001 fa34 	bl	80030e8 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3b0b      	subs	r3, #11
 8001c84:	2b1c      	cmp	r3, #28
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_ddiv+0x136>
 8001c88:	e18f      	b.n	8001faa <__aeabi_ddiv+0x456>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	3a08      	subs	r2, #8
 8001c90:	4091      	lsls	r1, r2
 8001c92:	468b      	mov	fp, r1
 8001c94:	211d      	movs	r1, #29
 8001c96:	1acb      	subs	r3, r1, r3
 8001c98:	4651      	mov	r1, sl
 8001c9a:	40d9      	lsrs	r1, r3
 8001c9c:	000b      	movs	r3, r1
 8001c9e:	4659      	mov	r1, fp
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	4651      	mov	r1, sl
 8001ca4:	469b      	mov	fp, r3
 8001ca6:	4091      	lsls	r1, r2
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <__aeabi_ddiv+0x1f0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	1a1b      	subs	r3, r3, r0
 8001cae:	e78f      	b.n	8001bd0 <__aeabi_ddiv+0x7c>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	469b      	mov	fp, r3
 8001cb6:	e78b      	b.n	8001bd0 <__aeabi_ddiv+0x7c>
 8001cb8:	4651      	mov	r1, sl
 8001cba:	2203      	movs	r2, #3
 8001cbc:	e788      	b.n	8001bd0 <__aeabi_ddiv+0x7c>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	2604      	movs	r6, #4
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	e767      	b.n	8001b9c <__aeabi_ddiv+0x48>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	46b1      	mov	r9, r6
 8001cd0:	9303      	str	r3, [sp, #12]
 8001cd2:	260c      	movs	r6, #12
 8001cd4:	e762      	b.n	8001b9c <__aeabi_ddiv+0x48>
 8001cd6:	2a03      	cmp	r2, #3
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0x188>
 8001cda:	e25c      	b.n	8002196 <__aeabi_ddiv+0x642>
 8001cdc:	9b01      	ldr	r3, [sp, #4]
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_ddiv+0x190>
 8001ce2:	e1e4      	b.n	80020ae <__aeabi_ddiv+0x55a>
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	469c      	mov	ip, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2400      	movs	r4, #0
 8001cec:	2200      	movs	r2, #0
 8001cee:	4698      	mov	r8, r3
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	0312      	lsls	r2, r2, #12
 8001cf4:	0b13      	lsrs	r3, r2, #12
 8001cf6:	0d0a      	lsrs	r2, r1, #20
 8001cf8:	0512      	lsls	r2, r2, #20
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	0523      	lsls	r3, r4, #20
 8001cfe:	4c12      	ldr	r4, [pc, #72]	; (8001d48 <__aeabi_ddiv+0x1f4>)
 8001d00:	4640      	mov	r0, r8
 8001d02:	4022      	ands	r2, r4
 8001d04:	4313      	orrs	r3, r2
 8001d06:	4662      	mov	r2, ip
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	07d2      	lsls	r2, r2, #31
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	b007      	add	sp, #28
 8001d14:	bc3c      	pop	{r2, r3, r4, r5}
 8001d16:	4690      	mov	r8, r2
 8001d18:	4699      	mov	r9, r3
 8001d1a:	46a2      	mov	sl, r4
 8001d1c:	46ab      	mov	fp, r5
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d20:	2300      	movs	r3, #0
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	469c      	mov	ip, r3
 8001d26:	0312      	lsls	r2, r2, #12
 8001d28:	4698      	mov	r8, r3
 8001d2a:	4c03      	ldr	r4, [pc, #12]	; (8001d38 <__aeabi_ddiv+0x1e4>)
 8001d2c:	e7e0      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	4c01      	ldr	r4, [pc, #4]	; (8001d38 <__aeabi_ddiv+0x1e4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	4698      	mov	r8, r3
 8001d36:	e7db      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001d38:	000007ff 	.word	0x000007ff
 8001d3c:	fffffc01 	.word	0xfffffc01
 8001d40:	08016b1c 	.word	0x08016b1c
 8001d44:	fffffc0d 	.word	0xfffffc0d
 8001d48:	800fffff 	.word	0x800fffff
 8001d4c:	45d9      	cmp	r9, fp
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x1fe>
 8001d50:	e139      	b.n	8001fc6 <__aeabi_ddiv+0x472>
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x202>
 8001d54:	e134      	b.n	8001fc0 <__aeabi_ddiv+0x46c>
 8001d56:	2300      	movs	r3, #0
 8001d58:	4646      	mov	r6, r8
 8001d5a:	464d      	mov	r5, r9
 8001d5c:	469a      	mov	sl, r3
 8001d5e:	3c01      	subs	r4, #1
 8001d60:	465b      	mov	r3, fp
 8001d62:	0e0a      	lsrs	r2, r1, #24
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	431a      	orrs	r2, r3
 8001d68:	020b      	lsls	r3, r1, #8
 8001d6a:	0c17      	lsrs	r7, r2, #16
 8001d6c:	9303      	str	r3, [sp, #12]
 8001d6e:	0413      	lsls	r3, r2, #16
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	0039      	movs	r1, r7
 8001d74:	0028      	movs	r0, r5
 8001d76:	4690      	mov	r8, r2
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	f7fe ff1d 	bl	8000bb8 <__udivsi3>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	9b01      	ldr	r3, [sp, #4]
 8001d82:	4683      	mov	fp, r0
 8001d84:	435a      	muls	r2, r3
 8001d86:	0028      	movs	r0, r5
 8001d88:	0039      	movs	r1, r7
 8001d8a:	4691      	mov	r9, r2
 8001d8c:	f7fe ff9a 	bl	8000cc4 <__aeabi_uidivmod>
 8001d90:	0c35      	lsrs	r5, r6, #16
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	430d      	orrs	r5, r1
 8001d96:	45a9      	cmp	r9, r5
 8001d98:	d90d      	bls.n	8001db6 <__aeabi_ddiv+0x262>
 8001d9a:	465b      	mov	r3, fp
 8001d9c:	4445      	add	r5, r8
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	45a8      	cmp	r8, r5
 8001da2:	d900      	bls.n	8001da6 <__aeabi_ddiv+0x252>
 8001da4:	e13a      	b.n	800201c <__aeabi_ddiv+0x4c8>
 8001da6:	45a9      	cmp	r9, r5
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x258>
 8001daa:	e137      	b.n	800201c <__aeabi_ddiv+0x4c8>
 8001dac:	2302      	movs	r3, #2
 8001dae:	425b      	negs	r3, r3
 8001db0:	469c      	mov	ip, r3
 8001db2:	4445      	add	r5, r8
 8001db4:	44e3      	add	fp, ip
 8001db6:	464b      	mov	r3, r9
 8001db8:	1aeb      	subs	r3, r5, r3
 8001dba:	0039      	movs	r1, r7
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	f7fe fefa 	bl	8000bb8 <__udivsi3>
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	0005      	movs	r5, r0
 8001dc8:	4343      	muls	r3, r0
 8001dca:	0039      	movs	r1, r7
 8001dcc:	9804      	ldr	r0, [sp, #16]
 8001dce:	4699      	mov	r9, r3
 8001dd0:	f7fe ff78 	bl	8000cc4 <__aeabi_uidivmod>
 8001dd4:	0433      	lsls	r3, r6, #16
 8001dd6:	0409      	lsls	r1, r1, #16
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	4599      	cmp	r9, r3
 8001dde:	d909      	bls.n	8001df4 <__aeabi_ddiv+0x2a0>
 8001de0:	4443      	add	r3, r8
 8001de2:	1e6a      	subs	r2, r5, #1
 8001de4:	4598      	cmp	r8, r3
 8001de6:	d900      	bls.n	8001dea <__aeabi_ddiv+0x296>
 8001de8:	e11a      	b.n	8002020 <__aeabi_ddiv+0x4cc>
 8001dea:	4599      	cmp	r9, r3
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x29c>
 8001dee:	e117      	b.n	8002020 <__aeabi_ddiv+0x4cc>
 8001df0:	3d02      	subs	r5, #2
 8001df2:	4443      	add	r3, r8
 8001df4:	464a      	mov	r2, r9
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	465a      	mov	r2, fp
 8001dfa:	0412      	lsls	r2, r2, #16
 8001dfc:	432a      	orrs	r2, r5
 8001dfe:	9903      	ldr	r1, [sp, #12]
 8001e00:	4693      	mov	fp, r2
 8001e02:	0c10      	lsrs	r0, r2, #16
 8001e04:	0c0a      	lsrs	r2, r1, #16
 8001e06:	4691      	mov	r9, r2
 8001e08:	0409      	lsls	r1, r1, #16
 8001e0a:	465a      	mov	r2, fp
 8001e0c:	0c09      	lsrs	r1, r1, #16
 8001e0e:	464e      	mov	r6, r9
 8001e10:	000d      	movs	r5, r1
 8001e12:	0412      	lsls	r2, r2, #16
 8001e14:	0c12      	lsrs	r2, r2, #16
 8001e16:	4345      	muls	r5, r0
 8001e18:	9105      	str	r1, [sp, #20]
 8001e1a:	4351      	muls	r1, r2
 8001e1c:	4372      	muls	r2, r6
 8001e1e:	4370      	muls	r0, r6
 8001e20:	1952      	adds	r2, r2, r5
 8001e22:	0c0e      	lsrs	r6, r1, #16
 8001e24:	18b2      	adds	r2, r6, r2
 8001e26:	4295      	cmp	r5, r2
 8001e28:	d903      	bls.n	8001e32 <__aeabi_ddiv+0x2de>
 8001e2a:	2580      	movs	r5, #128	; 0x80
 8001e2c:	026d      	lsls	r5, r5, #9
 8001e2e:	46ac      	mov	ip, r5
 8001e30:	4460      	add	r0, ip
 8001e32:	0c15      	lsrs	r5, r2, #16
 8001e34:	0409      	lsls	r1, r1, #16
 8001e36:	0412      	lsls	r2, r2, #16
 8001e38:	0c09      	lsrs	r1, r1, #16
 8001e3a:	1828      	adds	r0, r5, r0
 8001e3c:	1852      	adds	r2, r2, r1
 8001e3e:	4283      	cmp	r3, r0
 8001e40:	d200      	bcs.n	8001e44 <__aeabi_ddiv+0x2f0>
 8001e42:	e0ce      	b.n	8001fe2 <__aeabi_ddiv+0x48e>
 8001e44:	d100      	bne.n	8001e48 <__aeabi_ddiv+0x2f4>
 8001e46:	e0c8      	b.n	8001fda <__aeabi_ddiv+0x486>
 8001e48:	1a1d      	subs	r5, r3, r0
 8001e4a:	4653      	mov	r3, sl
 8001e4c:	1a9e      	subs	r6, r3, r2
 8001e4e:	45b2      	cmp	sl, r6
 8001e50:	4192      	sbcs	r2, r2
 8001e52:	4252      	negs	r2, r2
 8001e54:	1aab      	subs	r3, r5, r2
 8001e56:	469a      	mov	sl, r3
 8001e58:	4598      	cmp	r8, r3
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_ddiv+0x30a>
 8001e5c:	e117      	b.n	800208e <__aeabi_ddiv+0x53a>
 8001e5e:	0039      	movs	r1, r7
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe fea9 	bl	8000bb8 <__udivsi3>
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	0005      	movs	r5, r0
 8001e6a:	4343      	muls	r3, r0
 8001e6c:	0039      	movs	r1, r7
 8001e6e:	4650      	mov	r0, sl
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	f7fe ff27 	bl	8000cc4 <__aeabi_uidivmod>
 8001e76:	9804      	ldr	r0, [sp, #16]
 8001e78:	040b      	lsls	r3, r1, #16
 8001e7a:	0c31      	lsrs	r1, r6, #16
 8001e7c:	4319      	orrs	r1, r3
 8001e7e:	4288      	cmp	r0, r1
 8001e80:	d909      	bls.n	8001e96 <__aeabi_ddiv+0x342>
 8001e82:	4441      	add	r1, r8
 8001e84:	1e6b      	subs	r3, r5, #1
 8001e86:	4588      	cmp	r8, r1
 8001e88:	d900      	bls.n	8001e8c <__aeabi_ddiv+0x338>
 8001e8a:	e107      	b.n	800209c <__aeabi_ddiv+0x548>
 8001e8c:	4288      	cmp	r0, r1
 8001e8e:	d800      	bhi.n	8001e92 <__aeabi_ddiv+0x33e>
 8001e90:	e104      	b.n	800209c <__aeabi_ddiv+0x548>
 8001e92:	3d02      	subs	r5, #2
 8001e94:	4441      	add	r1, r8
 8001e96:	9b04      	ldr	r3, [sp, #16]
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	0039      	movs	r1, r7
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	f7fe fe8a 	bl	8000bb8 <__udivsi3>
 8001ea4:	9b01      	ldr	r3, [sp, #4]
 8001ea6:	4682      	mov	sl, r0
 8001ea8:	4343      	muls	r3, r0
 8001eaa:	0039      	movs	r1, r7
 8001eac:	9804      	ldr	r0, [sp, #16]
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	f7fe ff08 	bl	8000cc4 <__aeabi_uidivmod>
 8001eb4:	9801      	ldr	r0, [sp, #4]
 8001eb6:	040b      	lsls	r3, r1, #16
 8001eb8:	0431      	lsls	r1, r6, #16
 8001eba:	0c09      	lsrs	r1, r1, #16
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	4288      	cmp	r0, r1
 8001ec0:	d90d      	bls.n	8001ede <__aeabi_ddiv+0x38a>
 8001ec2:	4653      	mov	r3, sl
 8001ec4:	4441      	add	r1, r8
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4588      	cmp	r8, r1
 8001eca:	d900      	bls.n	8001ece <__aeabi_ddiv+0x37a>
 8001ecc:	e0e8      	b.n	80020a0 <__aeabi_ddiv+0x54c>
 8001ece:	4288      	cmp	r0, r1
 8001ed0:	d800      	bhi.n	8001ed4 <__aeabi_ddiv+0x380>
 8001ed2:	e0e5      	b.n	80020a0 <__aeabi_ddiv+0x54c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	469c      	mov	ip, r3
 8001eda:	4441      	add	r1, r8
 8001edc:	44e2      	add	sl, ip
 8001ede:	9b01      	ldr	r3, [sp, #4]
 8001ee0:	042d      	lsls	r5, r5, #16
 8001ee2:	1ace      	subs	r6, r1, r3
 8001ee4:	4651      	mov	r1, sl
 8001ee6:	4329      	orrs	r1, r5
 8001ee8:	9d05      	ldr	r5, [sp, #20]
 8001eea:	464f      	mov	r7, r9
 8001eec:	002a      	movs	r2, r5
 8001eee:	040b      	lsls	r3, r1, #16
 8001ef0:	0c08      	lsrs	r0, r1, #16
 8001ef2:	0c1b      	lsrs	r3, r3, #16
 8001ef4:	435a      	muls	r2, r3
 8001ef6:	4345      	muls	r5, r0
 8001ef8:	437b      	muls	r3, r7
 8001efa:	4378      	muls	r0, r7
 8001efc:	195b      	adds	r3, r3, r5
 8001efe:	0c17      	lsrs	r7, r2, #16
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	429d      	cmp	r5, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x3ba>
 8001f06:	2580      	movs	r5, #128	; 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1d      	lsrs	r5, r3, #16
 8001f10:	0412      	lsls	r2, r2, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c12      	lsrs	r2, r2, #16
 8001f16:	1828      	adds	r0, r5, r0
 8001f18:	189b      	adds	r3, r3, r2
 8001f1a:	4286      	cmp	r6, r0
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x3cc>
 8001f1e:	e093      	b.n	8002048 <__aeabi_ddiv+0x4f4>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x3d0>
 8001f22:	e08e      	b.n	8002042 <__aeabi_ddiv+0x4ee>
 8001f24:	2301      	movs	r3, #1
 8001f26:	4319      	orrs	r1, r3
 8001f28:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <__aeabi_ddiv+0x658>)
 8001f2a:	18e3      	adds	r3, r4, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x3de>
 8001f30:	e099      	b.n	8002066 <__aeabi_ddiv+0x512>
 8001f32:	074a      	lsls	r2, r1, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x3e4>
 8001f36:	e09e      	b.n	8002076 <__aeabi_ddiv+0x522>
 8001f38:	465a      	mov	r2, fp
 8001f3a:	01d2      	lsls	r2, r2, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x3f8>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	4b9b      	ldr	r3, [pc, #620]	; (80021b0 <__aeabi_ddiv+0x65c>)
 8001f42:	401a      	ands	r2, r3
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	4693      	mov	fp, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	18e3      	adds	r3, r4, r3
 8001f4c:	4a99      	ldr	r2, [pc, #612]	; (80021b4 <__aeabi_ddiv+0x660>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	dd68      	ble.n	8002024 <__aeabi_ddiv+0x4d0>
 8001f52:	2301      	movs	r3, #1
 8001f54:	9a02      	ldr	r2, [sp, #8]
 8001f56:	4c98      	ldr	r4, [pc, #608]	; (80021b8 <__aeabi_ddiv+0x664>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4694      	mov	ip, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	e6c5      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	464b      	mov	r3, r9
 8001f68:	0312      	lsls	r2, r2, #12
 8001f6a:	4213      	tst	r3, r2
 8001f6c:	d00a      	beq.n	8001f84 <__aeabi_ddiv+0x430>
 8001f6e:	465b      	mov	r3, fp
 8001f70:	4213      	tst	r3, r2
 8001f72:	d106      	bne.n	8001f82 <__aeabi_ddiv+0x42e>
 8001f74:	431a      	orrs	r2, r3
 8001f76:	0312      	lsls	r2, r2, #12
 8001f78:	0b12      	lsrs	r2, r2, #12
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	4688      	mov	r8, r1
 8001f7e:	4c8e      	ldr	r4, [pc, #568]	; (80021b8 <__aeabi_ddiv+0x664>)
 8001f80:	e6b6      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001f82:	464b      	mov	r3, r9
 8001f84:	431a      	orrs	r2, r3
 8001f86:	0312      	lsls	r2, r2, #12
 8001f88:	0b12      	lsrs	r2, r2, #12
 8001f8a:	46bc      	mov	ip, r7
 8001f8c:	4c8a      	ldr	r4, [pc, #552]	; (80021b8 <__aeabi_ddiv+0x664>)
 8001f8e:	e6af      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8001f90:	0003      	movs	r3, r0
 8001f92:	465a      	mov	r2, fp
 8001f94:	3b28      	subs	r3, #40	; 0x28
 8001f96:	409a      	lsls	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	e657      	b.n	8001c50 <__aeabi_ddiv+0xfc>
 8001fa0:	4658      	mov	r0, fp
 8001fa2:	f001 f8a1 	bl	80030e8 <__clzsi2>
 8001fa6:	3020      	adds	r0, #32
 8001fa8:	e640      	b.n	8001c2c <__aeabi_ddiv+0xd8>
 8001faa:	0003      	movs	r3, r0
 8001fac:	4652      	mov	r2, sl
 8001fae:	3b28      	subs	r3, #40	; 0x28
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4693      	mov	fp, r2
 8001fb6:	e677      	b.n	8001ca8 <__aeabi_ddiv+0x154>
 8001fb8:	f001 f896 	bl	80030e8 <__clzsi2>
 8001fbc:	3020      	adds	r0, #32
 8001fbe:	e65f      	b.n	8001c80 <__aeabi_ddiv+0x12c>
 8001fc0:	4588      	cmp	r8, r1
 8001fc2:	d200      	bcs.n	8001fc6 <__aeabi_ddiv+0x472>
 8001fc4:	e6c7      	b.n	8001d56 <__aeabi_ddiv+0x202>
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	07de      	lsls	r6, r3, #31
 8001fca:	085d      	lsrs	r5, r3, #1
 8001fcc:	4643      	mov	r3, r8
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	431e      	orrs	r6, r3
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	07db      	lsls	r3, r3, #31
 8001fd6:	469a      	mov	sl, r3
 8001fd8:	e6c2      	b.n	8001d60 <__aeabi_ddiv+0x20c>
 8001fda:	2500      	movs	r5, #0
 8001fdc:	4592      	cmp	sl, r2
 8001fde:	d300      	bcc.n	8001fe2 <__aeabi_ddiv+0x48e>
 8001fe0:	e733      	b.n	8001e4a <__aeabi_ddiv+0x2f6>
 8001fe2:	9e03      	ldr	r6, [sp, #12]
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	46b4      	mov	ip, r6
 8001fe8:	44e2      	add	sl, ip
 8001fea:	45b2      	cmp	sl, r6
 8001fec:	41ad      	sbcs	r5, r5
 8001fee:	426d      	negs	r5, r5
 8001ff0:	4445      	add	r5, r8
 8001ff2:	18eb      	adds	r3, r5, r3
 8001ff4:	3901      	subs	r1, #1
 8001ff6:	4598      	cmp	r8, r3
 8001ff8:	d207      	bcs.n	800200a <__aeabi_ddiv+0x4b6>
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	d900      	bls.n	8002000 <__aeabi_ddiv+0x4ac>
 8001ffe:	e07f      	b.n	8002100 <__aeabi_ddiv+0x5ac>
 8002000:	d100      	bne.n	8002004 <__aeabi_ddiv+0x4b0>
 8002002:	e0bc      	b.n	800217e <__aeabi_ddiv+0x62a>
 8002004:	1a1d      	subs	r5, r3, r0
 8002006:	468b      	mov	fp, r1
 8002008:	e71f      	b.n	8001e4a <__aeabi_ddiv+0x2f6>
 800200a:	4598      	cmp	r8, r3
 800200c:	d1fa      	bne.n	8002004 <__aeabi_ddiv+0x4b0>
 800200e:	9d03      	ldr	r5, [sp, #12]
 8002010:	4555      	cmp	r5, sl
 8002012:	d9f2      	bls.n	8001ffa <__aeabi_ddiv+0x4a6>
 8002014:	4643      	mov	r3, r8
 8002016:	468b      	mov	fp, r1
 8002018:	1a1d      	subs	r5, r3, r0
 800201a:	e716      	b.n	8001e4a <__aeabi_ddiv+0x2f6>
 800201c:	469b      	mov	fp, r3
 800201e:	e6ca      	b.n	8001db6 <__aeabi_ddiv+0x262>
 8002020:	0015      	movs	r5, r2
 8002022:	e6e7      	b.n	8001df4 <__aeabi_ddiv+0x2a0>
 8002024:	465a      	mov	r2, fp
 8002026:	08c9      	lsrs	r1, r1, #3
 8002028:	0752      	lsls	r2, r2, #29
 800202a:	430a      	orrs	r2, r1
 800202c:	055b      	lsls	r3, r3, #21
 800202e:	4690      	mov	r8, r2
 8002030:	0d5c      	lsrs	r4, r3, #21
 8002032:	465a      	mov	r2, fp
 8002034:	2301      	movs	r3, #1
 8002036:	9902      	ldr	r1, [sp, #8]
 8002038:	0252      	lsls	r2, r2, #9
 800203a:	4019      	ands	r1, r3
 800203c:	0b12      	lsrs	r2, r2, #12
 800203e:	468c      	mov	ip, r1
 8002040:	e656      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d100      	bne.n	8002048 <__aeabi_ddiv+0x4f4>
 8002046:	e76f      	b.n	8001f28 <__aeabi_ddiv+0x3d4>
 8002048:	4446      	add	r6, r8
 800204a:	1e4a      	subs	r2, r1, #1
 800204c:	45b0      	cmp	r8, r6
 800204e:	d929      	bls.n	80020a4 <__aeabi_ddiv+0x550>
 8002050:	0011      	movs	r1, r2
 8002052:	4286      	cmp	r6, r0
 8002054:	d000      	beq.n	8002058 <__aeabi_ddiv+0x504>
 8002056:	e765      	b.n	8001f24 <__aeabi_ddiv+0x3d0>
 8002058:	9a03      	ldr	r2, [sp, #12]
 800205a:	4293      	cmp	r3, r2
 800205c:	d000      	beq.n	8002060 <__aeabi_ddiv+0x50c>
 800205e:	e761      	b.n	8001f24 <__aeabi_ddiv+0x3d0>
 8002060:	e762      	b.n	8001f28 <__aeabi_ddiv+0x3d4>
 8002062:	2101      	movs	r1, #1
 8002064:	4249      	negs	r1, r1
 8002066:	2001      	movs	r0, #1
 8002068:	1ac2      	subs	r2, r0, r3
 800206a:	2a38      	cmp	r2, #56	; 0x38
 800206c:	dd21      	ble.n	80020b2 <__aeabi_ddiv+0x55e>
 800206e:	9b02      	ldr	r3, [sp, #8]
 8002070:	4003      	ands	r3, r0
 8002072:	469c      	mov	ip, r3
 8002074:	e638      	b.n	8001ce8 <__aeabi_ddiv+0x194>
 8002076:	220f      	movs	r2, #15
 8002078:	400a      	ands	r2, r1
 800207a:	2a04      	cmp	r2, #4
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x52c>
 800207e:	e75b      	b.n	8001f38 <__aeabi_ddiv+0x3e4>
 8002080:	000a      	movs	r2, r1
 8002082:	1d11      	adds	r1, r2, #4
 8002084:	4291      	cmp	r1, r2
 8002086:	4192      	sbcs	r2, r2
 8002088:	4252      	negs	r2, r2
 800208a:	4493      	add	fp, r2
 800208c:	e754      	b.n	8001f38 <__aeabi_ddiv+0x3e4>
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <__aeabi_ddiv+0x658>)
 8002090:	18e3      	adds	r3, r4, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	dde5      	ble.n	8002062 <__aeabi_ddiv+0x50e>
 8002096:	2201      	movs	r2, #1
 8002098:	4252      	negs	r2, r2
 800209a:	e7f2      	b.n	8002082 <__aeabi_ddiv+0x52e>
 800209c:	001d      	movs	r5, r3
 800209e:	e6fa      	b.n	8001e96 <__aeabi_ddiv+0x342>
 80020a0:	469a      	mov	sl, r3
 80020a2:	e71c      	b.n	8001ede <__aeabi_ddiv+0x38a>
 80020a4:	42b0      	cmp	r0, r6
 80020a6:	d839      	bhi.n	800211c <__aeabi_ddiv+0x5c8>
 80020a8:	d06e      	beq.n	8002188 <__aeabi_ddiv+0x634>
 80020aa:	0011      	movs	r1, r2
 80020ac:	e73a      	b.n	8001f24 <__aeabi_ddiv+0x3d0>
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	e73a      	b.n	8001f28 <__aeabi_ddiv+0x3d4>
 80020b2:	2a1f      	cmp	r2, #31
 80020b4:	dc3c      	bgt.n	8002130 <__aeabi_ddiv+0x5dc>
 80020b6:	2320      	movs	r3, #32
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	000c      	movs	r4, r1
 80020bc:	4658      	mov	r0, fp
 80020be:	4099      	lsls	r1, r3
 80020c0:	4098      	lsls	r0, r3
 80020c2:	1e4b      	subs	r3, r1, #1
 80020c4:	4199      	sbcs	r1, r3
 80020c6:	465b      	mov	r3, fp
 80020c8:	40d4      	lsrs	r4, r2
 80020ca:	40d3      	lsrs	r3, r2
 80020cc:	4320      	orrs	r0, r4
 80020ce:	4308      	orrs	r0, r1
 80020d0:	001a      	movs	r2, r3
 80020d2:	0743      	lsls	r3, r0, #29
 80020d4:	d009      	beq.n	80020ea <__aeabi_ddiv+0x596>
 80020d6:	230f      	movs	r3, #15
 80020d8:	4003      	ands	r3, r0
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d005      	beq.n	80020ea <__aeabi_ddiv+0x596>
 80020de:	0001      	movs	r1, r0
 80020e0:	1d08      	adds	r0, r1, #4
 80020e2:	4288      	cmp	r0, r1
 80020e4:	419b      	sbcs	r3, r3
 80020e6:	425b      	negs	r3, r3
 80020e8:	18d2      	adds	r2, r2, r3
 80020ea:	0213      	lsls	r3, r2, #8
 80020ec:	d53a      	bpl.n	8002164 <__aeabi_ddiv+0x610>
 80020ee:	2301      	movs	r3, #1
 80020f0:	9a02      	ldr	r2, [sp, #8]
 80020f2:	2401      	movs	r4, #1
 80020f4:	401a      	ands	r2, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	4694      	mov	ip, r2
 80020fa:	4698      	mov	r8, r3
 80020fc:	2200      	movs	r2, #0
 80020fe:	e5f7      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 8002100:	2102      	movs	r1, #2
 8002102:	4249      	negs	r1, r1
 8002104:	468c      	mov	ip, r1
 8002106:	9d03      	ldr	r5, [sp, #12]
 8002108:	44e3      	add	fp, ip
 800210a:	46ac      	mov	ip, r5
 800210c:	44e2      	add	sl, ip
 800210e:	45aa      	cmp	sl, r5
 8002110:	41ad      	sbcs	r5, r5
 8002112:	426d      	negs	r5, r5
 8002114:	4445      	add	r5, r8
 8002116:	18ed      	adds	r5, r5, r3
 8002118:	1a2d      	subs	r5, r5, r0
 800211a:	e696      	b.n	8001e4a <__aeabi_ddiv+0x2f6>
 800211c:	1e8a      	subs	r2, r1, #2
 800211e:	9903      	ldr	r1, [sp, #12]
 8002120:	004d      	lsls	r5, r1, #1
 8002122:	428d      	cmp	r5, r1
 8002124:	4189      	sbcs	r1, r1
 8002126:	4249      	negs	r1, r1
 8002128:	4441      	add	r1, r8
 800212a:	1876      	adds	r6, r6, r1
 800212c:	9503      	str	r5, [sp, #12]
 800212e:	e78f      	b.n	8002050 <__aeabi_ddiv+0x4fc>
 8002130:	201f      	movs	r0, #31
 8002132:	4240      	negs	r0, r0
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	4658      	mov	r0, fp
 8002138:	40d8      	lsrs	r0, r3
 800213a:	0003      	movs	r3, r0
 800213c:	2a20      	cmp	r2, #32
 800213e:	d028      	beq.n	8002192 <__aeabi_ddiv+0x63e>
 8002140:	2040      	movs	r0, #64	; 0x40
 8002142:	465d      	mov	r5, fp
 8002144:	1a82      	subs	r2, r0, r2
 8002146:	4095      	lsls	r5, r2
 8002148:	4329      	orrs	r1, r5
 800214a:	1e4a      	subs	r2, r1, #1
 800214c:	4191      	sbcs	r1, r2
 800214e:	4319      	orrs	r1, r3
 8002150:	2307      	movs	r3, #7
 8002152:	2200      	movs	r2, #0
 8002154:	400b      	ands	r3, r1
 8002156:	d009      	beq.n	800216c <__aeabi_ddiv+0x618>
 8002158:	230f      	movs	r3, #15
 800215a:	2200      	movs	r2, #0
 800215c:	400b      	ands	r3, r1
 800215e:	0008      	movs	r0, r1
 8002160:	2b04      	cmp	r3, #4
 8002162:	d1bd      	bne.n	80020e0 <__aeabi_ddiv+0x58c>
 8002164:	0001      	movs	r1, r0
 8002166:	0753      	lsls	r3, r2, #29
 8002168:	0252      	lsls	r2, r2, #9
 800216a:	0b12      	lsrs	r2, r2, #12
 800216c:	08c9      	lsrs	r1, r1, #3
 800216e:	4319      	orrs	r1, r3
 8002170:	2301      	movs	r3, #1
 8002172:	4688      	mov	r8, r1
 8002174:	9902      	ldr	r1, [sp, #8]
 8002176:	2400      	movs	r4, #0
 8002178:	4019      	ands	r1, r3
 800217a:	468c      	mov	ip, r1
 800217c:	e5b8      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 800217e:	4552      	cmp	r2, sl
 8002180:	d8be      	bhi.n	8002100 <__aeabi_ddiv+0x5ac>
 8002182:	468b      	mov	fp, r1
 8002184:	2500      	movs	r5, #0
 8002186:	e660      	b.n	8001e4a <__aeabi_ddiv+0x2f6>
 8002188:	9d03      	ldr	r5, [sp, #12]
 800218a:	429d      	cmp	r5, r3
 800218c:	d3c6      	bcc.n	800211c <__aeabi_ddiv+0x5c8>
 800218e:	0011      	movs	r1, r2
 8002190:	e762      	b.n	8002058 <__aeabi_ddiv+0x504>
 8002192:	2500      	movs	r5, #0
 8002194:	e7d8      	b.n	8002148 <__aeabi_ddiv+0x5f4>
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	465b      	mov	r3, fp
 800219a:	0312      	lsls	r2, r2, #12
 800219c:	431a      	orrs	r2, r3
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	0312      	lsls	r2, r2, #12
 80021a2:	0b12      	lsrs	r2, r2, #12
 80021a4:	469c      	mov	ip, r3
 80021a6:	4688      	mov	r8, r1
 80021a8:	4c03      	ldr	r4, [pc, #12]	; (80021b8 <__aeabi_ddiv+0x664>)
 80021aa:	e5a1      	b.n	8001cf0 <__aeabi_ddiv+0x19c>
 80021ac:	000003ff 	.word	0x000003ff
 80021b0:	feffffff 	.word	0xfeffffff
 80021b4:	000007fe 	.word	0x000007fe
 80021b8:	000007ff 	.word	0x000007ff

080021bc <__eqdf2>:
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	464f      	mov	r7, r9
 80021c0:	4646      	mov	r6, r8
 80021c2:	46d6      	mov	lr, sl
 80021c4:	005c      	lsls	r4, r3, #1
 80021c6:	b5c0      	push	{r6, r7, lr}
 80021c8:	031f      	lsls	r7, r3, #12
 80021ca:	0fdb      	lsrs	r3, r3, #31
 80021cc:	469a      	mov	sl, r3
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <__eqdf2+0x70>)
 80021d0:	030e      	lsls	r6, r1, #12
 80021d2:	004d      	lsls	r5, r1, #1
 80021d4:	4684      	mov	ip, r0
 80021d6:	4680      	mov	r8, r0
 80021d8:	0b36      	lsrs	r6, r6, #12
 80021da:	0d6d      	lsrs	r5, r5, #21
 80021dc:	0fc9      	lsrs	r1, r1, #31
 80021de:	4691      	mov	r9, r2
 80021e0:	0b3f      	lsrs	r7, r7, #12
 80021e2:	0d64      	lsrs	r4, r4, #21
 80021e4:	2001      	movs	r0, #1
 80021e6:	429d      	cmp	r5, r3
 80021e8:	d008      	beq.n	80021fc <__eqdf2+0x40>
 80021ea:	429c      	cmp	r4, r3
 80021ec:	d001      	beq.n	80021f2 <__eqdf2+0x36>
 80021ee:	42a5      	cmp	r5, r4
 80021f0:	d00b      	beq.n	800220a <__eqdf2+0x4e>
 80021f2:	bc1c      	pop	{r2, r3, r4}
 80021f4:	4690      	mov	r8, r2
 80021f6:	4699      	mov	r9, r3
 80021f8:	46a2      	mov	sl, r4
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fc:	4663      	mov	r3, ip
 80021fe:	4333      	orrs	r3, r6
 8002200:	d1f7      	bne.n	80021f2 <__eqdf2+0x36>
 8002202:	42ac      	cmp	r4, r5
 8002204:	d1f5      	bne.n	80021f2 <__eqdf2+0x36>
 8002206:	433a      	orrs	r2, r7
 8002208:	d1f3      	bne.n	80021f2 <__eqdf2+0x36>
 800220a:	2001      	movs	r0, #1
 800220c:	42be      	cmp	r6, r7
 800220e:	d1f0      	bne.n	80021f2 <__eqdf2+0x36>
 8002210:	45c8      	cmp	r8, r9
 8002212:	d1ee      	bne.n	80021f2 <__eqdf2+0x36>
 8002214:	4551      	cmp	r1, sl
 8002216:	d007      	beq.n	8002228 <__eqdf2+0x6c>
 8002218:	2d00      	cmp	r5, #0
 800221a:	d1ea      	bne.n	80021f2 <__eqdf2+0x36>
 800221c:	4663      	mov	r3, ip
 800221e:	431e      	orrs	r6, r3
 8002220:	0030      	movs	r0, r6
 8002222:	1e46      	subs	r6, r0, #1
 8002224:	41b0      	sbcs	r0, r6
 8002226:	e7e4      	b.n	80021f2 <__eqdf2+0x36>
 8002228:	2000      	movs	r0, #0
 800222a:	e7e2      	b.n	80021f2 <__eqdf2+0x36>
 800222c:	000007ff 	.word	0x000007ff

08002230 <__gedf2>:
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	4645      	mov	r5, r8
 8002234:	46de      	mov	lr, fp
 8002236:	4657      	mov	r7, sl
 8002238:	464e      	mov	r6, r9
 800223a:	b5e0      	push	{r5, r6, r7, lr}
 800223c:	031f      	lsls	r7, r3, #12
 800223e:	0b3d      	lsrs	r5, r7, #12
 8002240:	4f2c      	ldr	r7, [pc, #176]	; (80022f4 <__gedf2+0xc4>)
 8002242:	030e      	lsls	r6, r1, #12
 8002244:	004c      	lsls	r4, r1, #1
 8002246:	46ab      	mov	fp, r5
 8002248:	005d      	lsls	r5, r3, #1
 800224a:	4684      	mov	ip, r0
 800224c:	0b36      	lsrs	r6, r6, #12
 800224e:	0d64      	lsrs	r4, r4, #21
 8002250:	0fc9      	lsrs	r1, r1, #31
 8002252:	4690      	mov	r8, r2
 8002254:	0d6d      	lsrs	r5, r5, #21
 8002256:	0fdb      	lsrs	r3, r3, #31
 8002258:	42bc      	cmp	r4, r7
 800225a:	d02a      	beq.n	80022b2 <__gedf2+0x82>
 800225c:	4f25      	ldr	r7, [pc, #148]	; (80022f4 <__gedf2+0xc4>)
 800225e:	42bd      	cmp	r5, r7
 8002260:	d02d      	beq.n	80022be <__gedf2+0x8e>
 8002262:	2c00      	cmp	r4, #0
 8002264:	d10f      	bne.n	8002286 <__gedf2+0x56>
 8002266:	4330      	orrs	r0, r6
 8002268:	0007      	movs	r7, r0
 800226a:	4681      	mov	r9, r0
 800226c:	4278      	negs	r0, r7
 800226e:	4178      	adcs	r0, r7
 8002270:	b2c0      	uxtb	r0, r0
 8002272:	2d00      	cmp	r5, #0
 8002274:	d117      	bne.n	80022a6 <__gedf2+0x76>
 8002276:	465f      	mov	r7, fp
 8002278:	433a      	orrs	r2, r7
 800227a:	d114      	bne.n	80022a6 <__gedf2+0x76>
 800227c:	464b      	mov	r3, r9
 800227e:	2000      	movs	r0, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <__gedf2+0x6a>
 8002284:	e006      	b.n	8002294 <__gedf2+0x64>
 8002286:	2d00      	cmp	r5, #0
 8002288:	d102      	bne.n	8002290 <__gedf2+0x60>
 800228a:	4658      	mov	r0, fp
 800228c:	4302      	orrs	r2, r0
 800228e:	d001      	beq.n	8002294 <__gedf2+0x64>
 8002290:	4299      	cmp	r1, r3
 8002292:	d018      	beq.n	80022c6 <__gedf2+0x96>
 8002294:	4248      	negs	r0, r1
 8002296:	2101      	movs	r1, #1
 8002298:	4308      	orrs	r0, r1
 800229a:	bc3c      	pop	{r2, r3, r4, r5}
 800229c:	4690      	mov	r8, r2
 800229e:	4699      	mov	r9, r3
 80022a0:	46a2      	mov	sl, r4
 80022a2:	46ab      	mov	fp, r5
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d0f2      	beq.n	8002290 <__gedf2+0x60>
 80022aa:	2001      	movs	r0, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	4318      	orrs	r0, r3
 80022b0:	e7f3      	b.n	800229a <__gedf2+0x6a>
 80022b2:	0037      	movs	r7, r6
 80022b4:	4307      	orrs	r7, r0
 80022b6:	d0d1      	beq.n	800225c <__gedf2+0x2c>
 80022b8:	2002      	movs	r0, #2
 80022ba:	4240      	negs	r0, r0
 80022bc:	e7ed      	b.n	800229a <__gedf2+0x6a>
 80022be:	465f      	mov	r7, fp
 80022c0:	4317      	orrs	r7, r2
 80022c2:	d0ce      	beq.n	8002262 <__gedf2+0x32>
 80022c4:	e7f8      	b.n	80022b8 <__gedf2+0x88>
 80022c6:	42ac      	cmp	r4, r5
 80022c8:	dce4      	bgt.n	8002294 <__gedf2+0x64>
 80022ca:	da03      	bge.n	80022d4 <__gedf2+0xa4>
 80022cc:	1e48      	subs	r0, r1, #1
 80022ce:	2101      	movs	r1, #1
 80022d0:	4308      	orrs	r0, r1
 80022d2:	e7e2      	b.n	800229a <__gedf2+0x6a>
 80022d4:	455e      	cmp	r6, fp
 80022d6:	d8dd      	bhi.n	8002294 <__gedf2+0x64>
 80022d8:	d006      	beq.n	80022e8 <__gedf2+0xb8>
 80022da:	2000      	movs	r0, #0
 80022dc:	455e      	cmp	r6, fp
 80022de:	d2dc      	bcs.n	800229a <__gedf2+0x6a>
 80022e0:	2301      	movs	r3, #1
 80022e2:	1e48      	subs	r0, r1, #1
 80022e4:	4318      	orrs	r0, r3
 80022e6:	e7d8      	b.n	800229a <__gedf2+0x6a>
 80022e8:	45c4      	cmp	ip, r8
 80022ea:	d8d3      	bhi.n	8002294 <__gedf2+0x64>
 80022ec:	2000      	movs	r0, #0
 80022ee:	45c4      	cmp	ip, r8
 80022f0:	d3f6      	bcc.n	80022e0 <__gedf2+0xb0>
 80022f2:	e7d2      	b.n	800229a <__gedf2+0x6a>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__ledf2>:
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	464e      	mov	r6, r9
 80022fc:	4645      	mov	r5, r8
 80022fe:	46de      	mov	lr, fp
 8002300:	4657      	mov	r7, sl
 8002302:	005c      	lsls	r4, r3, #1
 8002304:	b5e0      	push	{r5, r6, r7, lr}
 8002306:	031f      	lsls	r7, r3, #12
 8002308:	0fdb      	lsrs	r3, r3, #31
 800230a:	4699      	mov	r9, r3
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <__ledf2+0xc0>)
 800230e:	030e      	lsls	r6, r1, #12
 8002310:	004d      	lsls	r5, r1, #1
 8002312:	0fc9      	lsrs	r1, r1, #31
 8002314:	4684      	mov	ip, r0
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	0d6d      	lsrs	r5, r5, #21
 800231a:	468b      	mov	fp, r1
 800231c:	4690      	mov	r8, r2
 800231e:	0b3f      	lsrs	r7, r7, #12
 8002320:	0d64      	lsrs	r4, r4, #21
 8002322:	429d      	cmp	r5, r3
 8002324:	d020      	beq.n	8002368 <__ledf2+0x70>
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <__ledf2+0xc0>)
 8002328:	429c      	cmp	r4, r3
 800232a:	d022      	beq.n	8002372 <__ledf2+0x7a>
 800232c:	2d00      	cmp	r5, #0
 800232e:	d112      	bne.n	8002356 <__ledf2+0x5e>
 8002330:	4330      	orrs	r0, r6
 8002332:	4243      	negs	r3, r0
 8002334:	4143      	adcs	r3, r0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2c00      	cmp	r4, #0
 800233a:	d01f      	beq.n	800237c <__ledf2+0x84>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <__ledf2+0x62>
 8002340:	464b      	mov	r3, r9
 8002342:	2001      	movs	r0, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	4303      	orrs	r3, r0
 8002348:	0018      	movs	r0, r3
 800234a:	bc3c      	pop	{r2, r3, r4, r5}
 800234c:	4690      	mov	r8, r2
 800234e:	4699      	mov	r9, r3
 8002350:	46a2      	mov	sl, r4
 8002352:	46ab      	mov	fp, r5
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	2c00      	cmp	r4, #0
 8002358:	d016      	beq.n	8002388 <__ledf2+0x90>
 800235a:	45cb      	cmp	fp, r9
 800235c:	d017      	beq.n	800238e <__ledf2+0x96>
 800235e:	465b      	mov	r3, fp
 8002360:	4259      	negs	r1, r3
 8002362:	2301      	movs	r3, #1
 8002364:	430b      	orrs	r3, r1
 8002366:	e7ef      	b.n	8002348 <__ledf2+0x50>
 8002368:	0031      	movs	r1, r6
 800236a:	2302      	movs	r3, #2
 800236c:	4301      	orrs	r1, r0
 800236e:	d1eb      	bne.n	8002348 <__ledf2+0x50>
 8002370:	e7d9      	b.n	8002326 <__ledf2+0x2e>
 8002372:	0039      	movs	r1, r7
 8002374:	2302      	movs	r3, #2
 8002376:	4311      	orrs	r1, r2
 8002378:	d1e6      	bne.n	8002348 <__ledf2+0x50>
 800237a:	e7d7      	b.n	800232c <__ledf2+0x34>
 800237c:	433a      	orrs	r2, r7
 800237e:	d1dd      	bne.n	800233c <__ledf2+0x44>
 8002380:	2300      	movs	r3, #0
 8002382:	2800      	cmp	r0, #0
 8002384:	d0e0      	beq.n	8002348 <__ledf2+0x50>
 8002386:	e7ea      	b.n	800235e <__ledf2+0x66>
 8002388:	433a      	orrs	r2, r7
 800238a:	d1e6      	bne.n	800235a <__ledf2+0x62>
 800238c:	e7e7      	b.n	800235e <__ledf2+0x66>
 800238e:	42a5      	cmp	r5, r4
 8002390:	dce5      	bgt.n	800235e <__ledf2+0x66>
 8002392:	db05      	blt.n	80023a0 <__ledf2+0xa8>
 8002394:	42be      	cmp	r6, r7
 8002396:	d8e2      	bhi.n	800235e <__ledf2+0x66>
 8002398:	d007      	beq.n	80023aa <__ledf2+0xb2>
 800239a:	2300      	movs	r3, #0
 800239c:	42be      	cmp	r6, r7
 800239e:	d2d3      	bcs.n	8002348 <__ledf2+0x50>
 80023a0:	4659      	mov	r1, fp
 80023a2:	2301      	movs	r3, #1
 80023a4:	3901      	subs	r1, #1
 80023a6:	430b      	orrs	r3, r1
 80023a8:	e7ce      	b.n	8002348 <__ledf2+0x50>
 80023aa:	45c4      	cmp	ip, r8
 80023ac:	d8d7      	bhi.n	800235e <__ledf2+0x66>
 80023ae:	2300      	movs	r3, #0
 80023b0:	45c4      	cmp	ip, r8
 80023b2:	d3f5      	bcc.n	80023a0 <__ledf2+0xa8>
 80023b4:	e7c8      	b.n	8002348 <__ledf2+0x50>
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	000007ff 	.word	0x000007ff

080023bc <__aeabi_dmul>:
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	4657      	mov	r7, sl
 80023c0:	4645      	mov	r5, r8
 80023c2:	46de      	mov	lr, fp
 80023c4:	464e      	mov	r6, r9
 80023c6:	b5e0      	push	{r5, r6, r7, lr}
 80023c8:	030c      	lsls	r4, r1, #12
 80023ca:	4698      	mov	r8, r3
 80023cc:	004e      	lsls	r6, r1, #1
 80023ce:	0b23      	lsrs	r3, r4, #12
 80023d0:	b087      	sub	sp, #28
 80023d2:	0007      	movs	r7, r0
 80023d4:	4692      	mov	sl, r2
 80023d6:	469b      	mov	fp, r3
 80023d8:	0d76      	lsrs	r6, r6, #21
 80023da:	0fcd      	lsrs	r5, r1, #31
 80023dc:	2e00      	cmp	r6, #0
 80023de:	d06b      	beq.n	80024b8 <__aeabi_dmul+0xfc>
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <__aeabi_dmul+0x1dc>)
 80023e2:	429e      	cmp	r6, r3
 80023e4:	d035      	beq.n	8002452 <__aeabi_dmul+0x96>
 80023e6:	2480      	movs	r4, #128	; 0x80
 80023e8:	465b      	mov	r3, fp
 80023ea:	0f42      	lsrs	r2, r0, #29
 80023ec:	0424      	lsls	r4, r4, #16
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4314      	orrs	r4, r2
 80023f2:	431c      	orrs	r4, r3
 80023f4:	00c3      	lsls	r3, r0, #3
 80023f6:	4699      	mov	r9, r3
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <__aeabi_dmul+0x1e0>)
 80023fa:	46a3      	mov	fp, r4
 80023fc:	469c      	mov	ip, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	2700      	movs	r7, #0
 8002402:	4466      	add	r6, ip
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	4643      	mov	r3, r8
 8002408:	031c      	lsls	r4, r3, #12
 800240a:	005a      	lsls	r2, r3, #1
 800240c:	0fdb      	lsrs	r3, r3, #31
 800240e:	4650      	mov	r0, sl
 8002410:	0b24      	lsrs	r4, r4, #12
 8002412:	0d52      	lsrs	r2, r2, #21
 8002414:	4698      	mov	r8, r3
 8002416:	d100      	bne.n	800241a <__aeabi_dmul+0x5e>
 8002418:	e076      	b.n	8002508 <__aeabi_dmul+0x14c>
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <__aeabi_dmul+0x1dc>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d06d      	beq.n	80024fc <__aeabi_dmul+0x140>
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	0f41      	lsrs	r1, r0, #29
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	430b      	orrs	r3, r1
 8002428:	495c      	ldr	r1, [pc, #368]	; (800259c <__aeabi_dmul+0x1e0>)
 800242a:	00e4      	lsls	r4, r4, #3
 800242c:	468c      	mov	ip, r1
 800242e:	431c      	orrs	r4, r3
 8002430:	00c3      	lsls	r3, r0, #3
 8002432:	2000      	movs	r0, #0
 8002434:	4462      	add	r2, ip
 8002436:	4641      	mov	r1, r8
 8002438:	18b6      	adds	r6, r6, r2
 800243a:	4069      	eors	r1, r5
 800243c:	1c72      	adds	r2, r6, #1
 800243e:	9101      	str	r1, [sp, #4]
 8002440:	4694      	mov	ip, r2
 8002442:	4307      	orrs	r7, r0
 8002444:	2f0f      	cmp	r7, #15
 8002446:	d900      	bls.n	800244a <__aeabi_dmul+0x8e>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x1f0>
 800244a:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <__aeabi_dmul+0x1e4>)
 800244c:	00bf      	lsls	r7, r7, #2
 800244e:	59d2      	ldr	r2, [r2, r7]
 8002450:	4697      	mov	pc, r2
 8002452:	465b      	mov	r3, fp
 8002454:	4303      	orrs	r3, r0
 8002456:	4699      	mov	r9, r3
 8002458:	d000      	beq.n	800245c <__aeabi_dmul+0xa0>
 800245a:	e087      	b.n	800256c <__aeabi_dmul+0x1b0>
 800245c:	2300      	movs	r3, #0
 800245e:	469b      	mov	fp, r3
 8002460:	3302      	adds	r3, #2
 8002462:	2708      	movs	r7, #8
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	e7ce      	b.n	8002406 <__aeabi_dmul+0x4a>
 8002468:	4642      	mov	r2, r8
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	2802      	cmp	r0, #2
 800246e:	d067      	beq.n	8002540 <__aeabi_dmul+0x184>
 8002470:	2803      	cmp	r0, #3
 8002472:	d100      	bne.n	8002476 <__aeabi_dmul+0xba>
 8002474:	e20e      	b.n	8002894 <__aeabi_dmul+0x4d8>
 8002476:	2801      	cmp	r0, #1
 8002478:	d000      	beq.n	800247c <__aeabi_dmul+0xc0>
 800247a:	e162      	b.n	8002742 <__aeabi_dmul+0x386>
 800247c:	2300      	movs	r3, #0
 800247e:	2400      	movs	r4, #0
 8002480:	2200      	movs	r2, #0
 8002482:	4699      	mov	r9, r3
 8002484:	9901      	ldr	r1, [sp, #4]
 8002486:	4001      	ands	r1, r0
 8002488:	b2cd      	uxtb	r5, r1
 800248a:	2100      	movs	r1, #0
 800248c:	0312      	lsls	r2, r2, #12
 800248e:	0d0b      	lsrs	r3, r1, #20
 8002490:	0b12      	lsrs	r2, r2, #12
 8002492:	051b      	lsls	r3, r3, #20
 8002494:	4313      	orrs	r3, r2
 8002496:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <__aeabi_dmul+0x1e8>)
 8002498:	0524      	lsls	r4, r4, #20
 800249a:	4013      	ands	r3, r2
 800249c:	431c      	orrs	r4, r3
 800249e:	0064      	lsls	r4, r4, #1
 80024a0:	07ed      	lsls	r5, r5, #31
 80024a2:	0864      	lsrs	r4, r4, #1
 80024a4:	432c      	orrs	r4, r5
 80024a6:	4648      	mov	r0, r9
 80024a8:	0021      	movs	r1, r4
 80024aa:	b007      	add	sp, #28
 80024ac:	bc3c      	pop	{r2, r3, r4, r5}
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	46a2      	mov	sl, r4
 80024b4:	46ab      	mov	fp, r5
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	4303      	orrs	r3, r0
 80024ba:	4699      	mov	r9, r3
 80024bc:	d04f      	beq.n	800255e <__aeabi_dmul+0x1a2>
 80024be:	465b      	mov	r3, fp
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dmul+0x10a>
 80024c4:	e189      	b.n	80027da <__aeabi_dmul+0x41e>
 80024c6:	4658      	mov	r0, fp
 80024c8:	f000 fe0e 	bl	80030e8 <__clzsi2>
 80024cc:	0003      	movs	r3, r0
 80024ce:	3b0b      	subs	r3, #11
 80024d0:	2b1c      	cmp	r3, #28
 80024d2:	dd00      	ble.n	80024d6 <__aeabi_dmul+0x11a>
 80024d4:	e17a      	b.n	80027cc <__aeabi_dmul+0x410>
 80024d6:	221d      	movs	r2, #29
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	003a      	movs	r2, r7
 80024dc:	0001      	movs	r1, r0
 80024de:	465c      	mov	r4, fp
 80024e0:	40da      	lsrs	r2, r3
 80024e2:	3908      	subs	r1, #8
 80024e4:	408c      	lsls	r4, r1
 80024e6:	0013      	movs	r3, r2
 80024e8:	408f      	lsls	r7, r1
 80024ea:	4323      	orrs	r3, r4
 80024ec:	469b      	mov	fp, r3
 80024ee:	46b9      	mov	r9, r7
 80024f0:	2300      	movs	r3, #0
 80024f2:	4e2d      	ldr	r6, [pc, #180]	; (80025a8 <__aeabi_dmul+0x1ec>)
 80024f4:	2700      	movs	r7, #0
 80024f6:	1a36      	subs	r6, r6, r0
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	e784      	b.n	8002406 <__aeabi_dmul+0x4a>
 80024fc:	4653      	mov	r3, sl
 80024fe:	4323      	orrs	r3, r4
 8002500:	d12a      	bne.n	8002558 <__aeabi_dmul+0x19c>
 8002502:	2400      	movs	r4, #0
 8002504:	2002      	movs	r0, #2
 8002506:	e796      	b.n	8002436 <__aeabi_dmul+0x7a>
 8002508:	4653      	mov	r3, sl
 800250a:	4323      	orrs	r3, r4
 800250c:	d020      	beq.n	8002550 <__aeabi_dmul+0x194>
 800250e:	2c00      	cmp	r4, #0
 8002510:	d100      	bne.n	8002514 <__aeabi_dmul+0x158>
 8002512:	e157      	b.n	80027c4 <__aeabi_dmul+0x408>
 8002514:	0020      	movs	r0, r4
 8002516:	f000 fde7 	bl	80030e8 <__clzsi2>
 800251a:	0003      	movs	r3, r0
 800251c:	3b0b      	subs	r3, #11
 800251e:	2b1c      	cmp	r3, #28
 8002520:	dd00      	ble.n	8002524 <__aeabi_dmul+0x168>
 8002522:	e149      	b.n	80027b8 <__aeabi_dmul+0x3fc>
 8002524:	211d      	movs	r1, #29
 8002526:	1acb      	subs	r3, r1, r3
 8002528:	4651      	mov	r1, sl
 800252a:	0002      	movs	r2, r0
 800252c:	40d9      	lsrs	r1, r3
 800252e:	4653      	mov	r3, sl
 8002530:	3a08      	subs	r2, #8
 8002532:	4094      	lsls	r4, r2
 8002534:	4093      	lsls	r3, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <__aeabi_dmul+0x1ec>)
 800253a:	1a12      	subs	r2, r2, r0
 800253c:	2000      	movs	r0, #0
 800253e:	e77a      	b.n	8002436 <__aeabi_dmul+0x7a>
 8002540:	2501      	movs	r5, #1
 8002542:	9b01      	ldr	r3, [sp, #4]
 8002544:	4c14      	ldr	r4, [pc, #80]	; (8002598 <__aeabi_dmul+0x1dc>)
 8002546:	401d      	ands	r5, r3
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	4699      	mov	r9, r3
 800254e:	e79c      	b.n	800248a <__aeabi_dmul+0xce>
 8002550:	2400      	movs	r4, #0
 8002552:	2200      	movs	r2, #0
 8002554:	2001      	movs	r0, #1
 8002556:	e76e      	b.n	8002436 <__aeabi_dmul+0x7a>
 8002558:	4653      	mov	r3, sl
 800255a:	2003      	movs	r0, #3
 800255c:	e76b      	b.n	8002436 <__aeabi_dmul+0x7a>
 800255e:	2300      	movs	r3, #0
 8002560:	469b      	mov	fp, r3
 8002562:	3301      	adds	r3, #1
 8002564:	2704      	movs	r7, #4
 8002566:	2600      	movs	r6, #0
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	e74c      	b.n	8002406 <__aeabi_dmul+0x4a>
 800256c:	2303      	movs	r3, #3
 800256e:	4681      	mov	r9, r0
 8002570:	270c      	movs	r7, #12
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	e747      	b.n	8002406 <__aeabi_dmul+0x4a>
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	2300      	movs	r3, #0
 800257a:	2500      	movs	r5, #0
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4699      	mov	r9, r3
 8002580:	4c05      	ldr	r4, [pc, #20]	; (8002598 <__aeabi_dmul+0x1dc>)
 8002582:	e782      	b.n	800248a <__aeabi_dmul+0xce>
 8002584:	465c      	mov	r4, fp
 8002586:	464b      	mov	r3, r9
 8002588:	9802      	ldr	r0, [sp, #8]
 800258a:	e76f      	b.n	800246c <__aeabi_dmul+0xb0>
 800258c:	465c      	mov	r4, fp
 800258e:	464b      	mov	r3, r9
 8002590:	9501      	str	r5, [sp, #4]
 8002592:	9802      	ldr	r0, [sp, #8]
 8002594:	e76a      	b.n	800246c <__aeabi_dmul+0xb0>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	000007ff 	.word	0x000007ff
 800259c:	fffffc01 	.word	0xfffffc01
 80025a0:	08016b5c 	.word	0x08016b5c
 80025a4:	800fffff 	.word	0x800fffff
 80025a8:	fffffc0d 	.word	0xfffffc0d
 80025ac:	464a      	mov	r2, r9
 80025ae:	4649      	mov	r1, r9
 80025b0:	0c17      	lsrs	r7, r2, #16
 80025b2:	0c1a      	lsrs	r2, r3, #16
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	0408      	lsls	r0, r1, #16
 80025ba:	0019      	movs	r1, r3
 80025bc:	0c00      	lsrs	r0, r0, #16
 80025be:	4341      	muls	r1, r0
 80025c0:	0015      	movs	r5, r2
 80025c2:	4688      	mov	r8, r1
 80025c4:	0019      	movs	r1, r3
 80025c6:	437d      	muls	r5, r7
 80025c8:	4379      	muls	r1, r7
 80025ca:	9503      	str	r5, [sp, #12]
 80025cc:	4689      	mov	r9, r1
 80025ce:	0029      	movs	r1, r5
 80025d0:	0015      	movs	r5, r2
 80025d2:	4345      	muls	r5, r0
 80025d4:	444d      	add	r5, r9
 80025d6:	9502      	str	r5, [sp, #8]
 80025d8:	4645      	mov	r5, r8
 80025da:	0c2d      	lsrs	r5, r5, #16
 80025dc:	46aa      	mov	sl, r5
 80025de:	9d02      	ldr	r5, [sp, #8]
 80025e0:	4455      	add	r5, sl
 80025e2:	45a9      	cmp	r9, r5
 80025e4:	d906      	bls.n	80025f4 <__aeabi_dmul+0x238>
 80025e6:	468a      	mov	sl, r1
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0249      	lsls	r1, r1, #9
 80025ec:	4689      	mov	r9, r1
 80025ee:	44ca      	add	sl, r9
 80025f0:	4651      	mov	r1, sl
 80025f2:	9103      	str	r1, [sp, #12]
 80025f4:	0c29      	lsrs	r1, r5, #16
 80025f6:	9104      	str	r1, [sp, #16]
 80025f8:	4641      	mov	r1, r8
 80025fa:	0409      	lsls	r1, r1, #16
 80025fc:	042d      	lsls	r5, r5, #16
 80025fe:	0c09      	lsrs	r1, r1, #16
 8002600:	4688      	mov	r8, r1
 8002602:	0029      	movs	r1, r5
 8002604:	0c25      	lsrs	r5, r4, #16
 8002606:	0424      	lsls	r4, r4, #16
 8002608:	4441      	add	r1, r8
 800260a:	0c24      	lsrs	r4, r4, #16
 800260c:	9105      	str	r1, [sp, #20]
 800260e:	0021      	movs	r1, r4
 8002610:	4341      	muls	r1, r0
 8002612:	4688      	mov	r8, r1
 8002614:	0021      	movs	r1, r4
 8002616:	4379      	muls	r1, r7
 8002618:	468a      	mov	sl, r1
 800261a:	4368      	muls	r0, r5
 800261c:	4641      	mov	r1, r8
 800261e:	4450      	add	r0, sl
 8002620:	4681      	mov	r9, r0
 8002622:	0c08      	lsrs	r0, r1, #16
 8002624:	4448      	add	r0, r9
 8002626:	436f      	muls	r7, r5
 8002628:	4582      	cmp	sl, r0
 800262a:	d903      	bls.n	8002634 <__aeabi_dmul+0x278>
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0249      	lsls	r1, r1, #9
 8002630:	4689      	mov	r9, r1
 8002632:	444f      	add	r7, r9
 8002634:	0c01      	lsrs	r1, r0, #16
 8002636:	4689      	mov	r9, r1
 8002638:	0039      	movs	r1, r7
 800263a:	4449      	add	r1, r9
 800263c:	9102      	str	r1, [sp, #8]
 800263e:	4641      	mov	r1, r8
 8002640:	040f      	lsls	r7, r1, #16
 8002642:	9904      	ldr	r1, [sp, #16]
 8002644:	0c3f      	lsrs	r7, r7, #16
 8002646:	4688      	mov	r8, r1
 8002648:	0400      	lsls	r0, r0, #16
 800264a:	19c0      	adds	r0, r0, r7
 800264c:	4480      	add	r8, r0
 800264e:	4641      	mov	r1, r8
 8002650:	9104      	str	r1, [sp, #16]
 8002652:	4659      	mov	r1, fp
 8002654:	0c0f      	lsrs	r7, r1, #16
 8002656:	0409      	lsls	r1, r1, #16
 8002658:	0c09      	lsrs	r1, r1, #16
 800265a:	4688      	mov	r8, r1
 800265c:	4359      	muls	r1, r3
 800265e:	468a      	mov	sl, r1
 8002660:	0039      	movs	r1, r7
 8002662:	4351      	muls	r1, r2
 8002664:	4689      	mov	r9, r1
 8002666:	4641      	mov	r1, r8
 8002668:	434a      	muls	r2, r1
 800266a:	4651      	mov	r1, sl
 800266c:	0c09      	lsrs	r1, r1, #16
 800266e:	468b      	mov	fp, r1
 8002670:	437b      	muls	r3, r7
 8002672:	18d2      	adds	r2, r2, r3
 8002674:	445a      	add	r2, fp
 8002676:	4293      	cmp	r3, r2
 8002678:	d903      	bls.n	8002682 <__aeabi_dmul+0x2c6>
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	469b      	mov	fp, r3
 8002680:	44d9      	add	r9, fp
 8002682:	4651      	mov	r1, sl
 8002684:	0409      	lsls	r1, r1, #16
 8002686:	0c09      	lsrs	r1, r1, #16
 8002688:	468a      	mov	sl, r1
 800268a:	4641      	mov	r1, r8
 800268c:	4361      	muls	r1, r4
 800268e:	437c      	muls	r4, r7
 8002690:	0c13      	lsrs	r3, r2, #16
 8002692:	0412      	lsls	r2, r2, #16
 8002694:	444b      	add	r3, r9
 8002696:	4452      	add	r2, sl
 8002698:	46a1      	mov	r9, r4
 800269a:	468a      	mov	sl, r1
 800269c:	003c      	movs	r4, r7
 800269e:	4641      	mov	r1, r8
 80026a0:	436c      	muls	r4, r5
 80026a2:	434d      	muls	r5, r1
 80026a4:	4651      	mov	r1, sl
 80026a6:	444d      	add	r5, r9
 80026a8:	0c0f      	lsrs	r7, r1, #16
 80026aa:	197d      	adds	r5, r7, r5
 80026ac:	45a9      	cmp	r9, r5
 80026ae:	d903      	bls.n	80026b8 <__aeabi_dmul+0x2fc>
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0249      	lsls	r1, r1, #9
 80026b4:	4688      	mov	r8, r1
 80026b6:	4444      	add	r4, r8
 80026b8:	9f04      	ldr	r7, [sp, #16]
 80026ba:	9903      	ldr	r1, [sp, #12]
 80026bc:	46b8      	mov	r8, r7
 80026be:	4441      	add	r1, r8
 80026c0:	468b      	mov	fp, r1
 80026c2:	4583      	cmp	fp, r0
 80026c4:	4180      	sbcs	r0, r0
 80026c6:	4241      	negs	r1, r0
 80026c8:	4688      	mov	r8, r1
 80026ca:	4651      	mov	r1, sl
 80026cc:	0408      	lsls	r0, r1, #16
 80026ce:	042f      	lsls	r7, r5, #16
 80026d0:	0c00      	lsrs	r0, r0, #16
 80026d2:	183f      	adds	r7, r7, r0
 80026d4:	4658      	mov	r0, fp
 80026d6:	9902      	ldr	r1, [sp, #8]
 80026d8:	1810      	adds	r0, r2, r0
 80026da:	4689      	mov	r9, r1
 80026dc:	4290      	cmp	r0, r2
 80026de:	4192      	sbcs	r2, r2
 80026e0:	444f      	add	r7, r9
 80026e2:	46ba      	mov	sl, r7
 80026e4:	4252      	negs	r2, r2
 80026e6:	4699      	mov	r9, r3
 80026e8:	4693      	mov	fp, r2
 80026ea:	44c2      	add	sl, r8
 80026ec:	44d1      	add	r9, sl
 80026ee:	44cb      	add	fp, r9
 80026f0:	428f      	cmp	r7, r1
 80026f2:	41bf      	sbcs	r7, r7
 80026f4:	45c2      	cmp	sl, r8
 80026f6:	4189      	sbcs	r1, r1
 80026f8:	4599      	cmp	r9, r3
 80026fa:	419b      	sbcs	r3, r3
 80026fc:	4593      	cmp	fp, r2
 80026fe:	4192      	sbcs	r2, r2
 8002700:	427f      	negs	r7, r7
 8002702:	4249      	negs	r1, r1
 8002704:	0c2d      	lsrs	r5, r5, #16
 8002706:	4252      	negs	r2, r2
 8002708:	430f      	orrs	r7, r1
 800270a:	425b      	negs	r3, r3
 800270c:	4313      	orrs	r3, r2
 800270e:	197f      	adds	r7, r7, r5
 8002710:	18ff      	adds	r7, r7, r3
 8002712:	465b      	mov	r3, fp
 8002714:	193c      	adds	r4, r7, r4
 8002716:	0ddb      	lsrs	r3, r3, #23
 8002718:	9a05      	ldr	r2, [sp, #20]
 800271a:	0264      	lsls	r4, r4, #9
 800271c:	431c      	orrs	r4, r3
 800271e:	0243      	lsls	r3, r0, #9
 8002720:	4313      	orrs	r3, r2
 8002722:	1e5d      	subs	r5, r3, #1
 8002724:	41ab      	sbcs	r3, r5
 8002726:	465a      	mov	r2, fp
 8002728:	0dc0      	lsrs	r0, r0, #23
 800272a:	4303      	orrs	r3, r0
 800272c:	0252      	lsls	r2, r2, #9
 800272e:	4313      	orrs	r3, r2
 8002730:	01e2      	lsls	r2, r4, #7
 8002732:	d556      	bpl.n	80027e2 <__aeabi_dmul+0x426>
 8002734:	2001      	movs	r0, #1
 8002736:	085a      	lsrs	r2, r3, #1
 8002738:	4003      	ands	r3, r0
 800273a:	4313      	orrs	r3, r2
 800273c:	07e2      	lsls	r2, r4, #31
 800273e:	4313      	orrs	r3, r2
 8002740:	0864      	lsrs	r4, r4, #1
 8002742:	485a      	ldr	r0, [pc, #360]	; (80028ac <__aeabi_dmul+0x4f0>)
 8002744:	4460      	add	r0, ip
 8002746:	2800      	cmp	r0, #0
 8002748:	dd4d      	ble.n	80027e6 <__aeabi_dmul+0x42a>
 800274a:	075a      	lsls	r2, r3, #29
 800274c:	d009      	beq.n	8002762 <__aeabi_dmul+0x3a6>
 800274e:	220f      	movs	r2, #15
 8002750:	401a      	ands	r2, r3
 8002752:	2a04      	cmp	r2, #4
 8002754:	d005      	beq.n	8002762 <__aeabi_dmul+0x3a6>
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	429a      	cmp	r2, r3
 800275a:	419b      	sbcs	r3, r3
 800275c:	425b      	negs	r3, r3
 800275e:	18e4      	adds	r4, r4, r3
 8002760:	0013      	movs	r3, r2
 8002762:	01e2      	lsls	r2, r4, #7
 8002764:	d504      	bpl.n	8002770 <__aeabi_dmul+0x3b4>
 8002766:	2080      	movs	r0, #128	; 0x80
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <__aeabi_dmul+0x4f4>)
 800276a:	00c0      	lsls	r0, r0, #3
 800276c:	4014      	ands	r4, r2
 800276e:	4460      	add	r0, ip
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <__aeabi_dmul+0x4f8>)
 8002772:	4290      	cmp	r0, r2
 8002774:	dd00      	ble.n	8002778 <__aeabi_dmul+0x3bc>
 8002776:	e6e3      	b.n	8002540 <__aeabi_dmul+0x184>
 8002778:	2501      	movs	r5, #1
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	0762      	lsls	r2, r4, #29
 800277e:	431a      	orrs	r2, r3
 8002780:	0264      	lsls	r4, r4, #9
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	4691      	mov	r9, r2
 8002786:	0b22      	lsrs	r2, r4, #12
 8002788:	0544      	lsls	r4, r0, #21
 800278a:	0d64      	lsrs	r4, r4, #21
 800278c:	401d      	ands	r5, r3
 800278e:	e67c      	b.n	800248a <__aeabi_dmul+0xce>
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	4659      	mov	r1, fp
 8002794:	0312      	lsls	r2, r2, #12
 8002796:	4211      	tst	r1, r2
 8002798:	d008      	beq.n	80027ac <__aeabi_dmul+0x3f0>
 800279a:	4214      	tst	r4, r2
 800279c:	d106      	bne.n	80027ac <__aeabi_dmul+0x3f0>
 800279e:	4322      	orrs	r2, r4
 80027a0:	0312      	lsls	r2, r2, #12
 80027a2:	0b12      	lsrs	r2, r2, #12
 80027a4:	4645      	mov	r5, r8
 80027a6:	4699      	mov	r9, r3
 80027a8:	4c43      	ldr	r4, [pc, #268]	; (80028b8 <__aeabi_dmul+0x4fc>)
 80027aa:	e66e      	b.n	800248a <__aeabi_dmul+0xce>
 80027ac:	465b      	mov	r3, fp
 80027ae:	431a      	orrs	r2, r3
 80027b0:	0312      	lsls	r2, r2, #12
 80027b2:	0b12      	lsrs	r2, r2, #12
 80027b4:	4c40      	ldr	r4, [pc, #256]	; (80028b8 <__aeabi_dmul+0x4fc>)
 80027b6:	e668      	b.n	800248a <__aeabi_dmul+0xce>
 80027b8:	0003      	movs	r3, r0
 80027ba:	4654      	mov	r4, sl
 80027bc:	3b28      	subs	r3, #40	; 0x28
 80027be:	409c      	lsls	r4, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	e6b9      	b.n	8002538 <__aeabi_dmul+0x17c>
 80027c4:	f000 fc90 	bl	80030e8 <__clzsi2>
 80027c8:	3020      	adds	r0, #32
 80027ca:	e6a6      	b.n	800251a <__aeabi_dmul+0x15e>
 80027cc:	0003      	movs	r3, r0
 80027ce:	3b28      	subs	r3, #40	; 0x28
 80027d0:	409f      	lsls	r7, r3
 80027d2:	2300      	movs	r3, #0
 80027d4:	46bb      	mov	fp, r7
 80027d6:	4699      	mov	r9, r3
 80027d8:	e68a      	b.n	80024f0 <__aeabi_dmul+0x134>
 80027da:	f000 fc85 	bl	80030e8 <__clzsi2>
 80027de:	3020      	adds	r0, #32
 80027e0:	e674      	b.n	80024cc <__aeabi_dmul+0x110>
 80027e2:	46b4      	mov	ip, r6
 80027e4:	e7ad      	b.n	8002742 <__aeabi_dmul+0x386>
 80027e6:	2501      	movs	r5, #1
 80027e8:	1a2a      	subs	r2, r5, r0
 80027ea:	2a38      	cmp	r2, #56	; 0x38
 80027ec:	dd06      	ble.n	80027fc <__aeabi_dmul+0x440>
 80027ee:	9b01      	ldr	r3, [sp, #4]
 80027f0:	2400      	movs	r4, #0
 80027f2:	401d      	ands	r5, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	4699      	mov	r9, r3
 80027fa:	e646      	b.n	800248a <__aeabi_dmul+0xce>
 80027fc:	2a1f      	cmp	r2, #31
 80027fe:	dc21      	bgt.n	8002844 <__aeabi_dmul+0x488>
 8002800:	2520      	movs	r5, #32
 8002802:	0020      	movs	r0, r4
 8002804:	1aad      	subs	r5, r5, r2
 8002806:	001e      	movs	r6, r3
 8002808:	40ab      	lsls	r3, r5
 800280a:	40a8      	lsls	r0, r5
 800280c:	40d6      	lsrs	r6, r2
 800280e:	1e5d      	subs	r5, r3, #1
 8002810:	41ab      	sbcs	r3, r5
 8002812:	4330      	orrs	r0, r6
 8002814:	4318      	orrs	r0, r3
 8002816:	40d4      	lsrs	r4, r2
 8002818:	0743      	lsls	r3, r0, #29
 800281a:	d009      	beq.n	8002830 <__aeabi_dmul+0x474>
 800281c:	230f      	movs	r3, #15
 800281e:	4003      	ands	r3, r0
 8002820:	2b04      	cmp	r3, #4
 8002822:	d005      	beq.n	8002830 <__aeabi_dmul+0x474>
 8002824:	0003      	movs	r3, r0
 8002826:	1d18      	adds	r0, r3, #4
 8002828:	4298      	cmp	r0, r3
 800282a:	419b      	sbcs	r3, r3
 800282c:	425b      	negs	r3, r3
 800282e:	18e4      	adds	r4, r4, r3
 8002830:	0223      	lsls	r3, r4, #8
 8002832:	d521      	bpl.n	8002878 <__aeabi_dmul+0x4bc>
 8002834:	2501      	movs	r5, #1
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2401      	movs	r4, #1
 800283a:	401d      	ands	r5, r3
 800283c:	2300      	movs	r3, #0
 800283e:	2200      	movs	r2, #0
 8002840:	4699      	mov	r9, r3
 8002842:	e622      	b.n	800248a <__aeabi_dmul+0xce>
 8002844:	251f      	movs	r5, #31
 8002846:	0021      	movs	r1, r4
 8002848:	426d      	negs	r5, r5
 800284a:	1a28      	subs	r0, r5, r0
 800284c:	40c1      	lsrs	r1, r0
 800284e:	0008      	movs	r0, r1
 8002850:	2a20      	cmp	r2, #32
 8002852:	d01d      	beq.n	8002890 <__aeabi_dmul+0x4d4>
 8002854:	355f      	adds	r5, #95	; 0x5f
 8002856:	1aaa      	subs	r2, r5, r2
 8002858:	4094      	lsls	r4, r2
 800285a:	4323      	orrs	r3, r4
 800285c:	1e5c      	subs	r4, r3, #1
 800285e:	41a3      	sbcs	r3, r4
 8002860:	2507      	movs	r5, #7
 8002862:	4303      	orrs	r3, r0
 8002864:	401d      	ands	r5, r3
 8002866:	2200      	movs	r2, #0
 8002868:	2d00      	cmp	r5, #0
 800286a:	d009      	beq.n	8002880 <__aeabi_dmul+0x4c4>
 800286c:	220f      	movs	r2, #15
 800286e:	2400      	movs	r4, #0
 8002870:	401a      	ands	r2, r3
 8002872:	0018      	movs	r0, r3
 8002874:	2a04      	cmp	r2, #4
 8002876:	d1d6      	bne.n	8002826 <__aeabi_dmul+0x46a>
 8002878:	0003      	movs	r3, r0
 800287a:	0765      	lsls	r5, r4, #29
 800287c:	0264      	lsls	r4, r4, #9
 800287e:	0b22      	lsrs	r2, r4, #12
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	432b      	orrs	r3, r5
 8002884:	2501      	movs	r5, #1
 8002886:	4699      	mov	r9, r3
 8002888:	9b01      	ldr	r3, [sp, #4]
 800288a:	2400      	movs	r4, #0
 800288c:	401d      	ands	r5, r3
 800288e:	e5fc      	b.n	800248a <__aeabi_dmul+0xce>
 8002890:	2400      	movs	r4, #0
 8002892:	e7e2      	b.n	800285a <__aeabi_dmul+0x49e>
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	2501      	movs	r5, #1
 8002898:	0312      	lsls	r2, r2, #12
 800289a:	4322      	orrs	r2, r4
 800289c:	9901      	ldr	r1, [sp, #4]
 800289e:	0312      	lsls	r2, r2, #12
 80028a0:	0b12      	lsrs	r2, r2, #12
 80028a2:	400d      	ands	r5, r1
 80028a4:	4699      	mov	r9, r3
 80028a6:	4c04      	ldr	r4, [pc, #16]	; (80028b8 <__aeabi_dmul+0x4fc>)
 80028a8:	e5ef      	b.n	800248a <__aeabi_dmul+0xce>
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	000003ff 	.word	0x000003ff
 80028b0:	feffffff 	.word	0xfeffffff
 80028b4:	000007fe 	.word	0x000007fe
 80028b8:	000007ff 	.word	0x000007ff

080028bc <__aeabi_dsub>:
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	4646      	mov	r6, r8
 80028c0:	46d6      	mov	lr, sl
 80028c2:	464f      	mov	r7, r9
 80028c4:	030c      	lsls	r4, r1, #12
 80028c6:	b5c0      	push	{r6, r7, lr}
 80028c8:	0fcd      	lsrs	r5, r1, #31
 80028ca:	004e      	lsls	r6, r1, #1
 80028cc:	0a61      	lsrs	r1, r4, #9
 80028ce:	0f44      	lsrs	r4, r0, #29
 80028d0:	430c      	orrs	r4, r1
 80028d2:	00c1      	lsls	r1, r0, #3
 80028d4:	0058      	lsls	r0, r3, #1
 80028d6:	0d40      	lsrs	r0, r0, #21
 80028d8:	4684      	mov	ip, r0
 80028da:	468a      	mov	sl, r1
 80028dc:	000f      	movs	r7, r1
 80028de:	0319      	lsls	r1, r3, #12
 80028e0:	0f50      	lsrs	r0, r2, #29
 80028e2:	0a49      	lsrs	r1, r1, #9
 80028e4:	4301      	orrs	r1, r0
 80028e6:	48c6      	ldr	r0, [pc, #792]	; (8002c00 <__aeabi_dsub+0x344>)
 80028e8:	0d76      	lsrs	r6, r6, #21
 80028ea:	46a8      	mov	r8, r5
 80028ec:	0fdb      	lsrs	r3, r3, #31
 80028ee:	00d2      	lsls	r2, r2, #3
 80028f0:	4584      	cmp	ip, r0
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x3a>
 80028f4:	e0d8      	b.n	8002aa8 <__aeabi_dsub+0x1ec>
 80028f6:	2001      	movs	r0, #1
 80028f8:	4043      	eors	r3, r0
 80028fa:	42ab      	cmp	r3, r5
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x44>
 80028fe:	e0a6      	b.n	8002a4e <__aeabi_dsub+0x192>
 8002900:	4660      	mov	r0, ip
 8002902:	1a35      	subs	r5, r6, r0
 8002904:	2d00      	cmp	r5, #0
 8002906:	dc00      	bgt.n	800290a <__aeabi_dsub+0x4e>
 8002908:	e105      	b.n	8002b16 <__aeabi_dsub+0x25a>
 800290a:	2800      	cmp	r0, #0
 800290c:	d110      	bne.n	8002930 <__aeabi_dsub+0x74>
 800290e:	000b      	movs	r3, r1
 8002910:	4313      	orrs	r3, r2
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x5a>
 8002914:	e0d7      	b.n	8002ac6 <__aeabi_dsub+0x20a>
 8002916:	1e6b      	subs	r3, r5, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x62>
 800291c:	e14b      	b.n	8002bb6 <__aeabi_dsub+0x2fa>
 800291e:	4653      	mov	r3, sl
 8002920:	1a9f      	subs	r7, r3, r2
 8002922:	45ba      	cmp	sl, r7
 8002924:	4180      	sbcs	r0, r0
 8002926:	1a64      	subs	r4, r4, r1
 8002928:	4240      	negs	r0, r0
 800292a:	1a24      	subs	r4, r4, r0
 800292c:	2601      	movs	r6, #1
 800292e:	e01e      	b.n	800296e <__aeabi_dsub+0xb2>
 8002930:	4bb3      	ldr	r3, [pc, #716]	; (8002c00 <__aeabi_dsub+0x344>)
 8002932:	429e      	cmp	r6, r3
 8002934:	d048      	beq.n	80029c8 <__aeabi_dsub+0x10c>
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	4319      	orrs	r1, r3
 800293c:	2d38      	cmp	r5, #56	; 0x38
 800293e:	dd00      	ble.n	8002942 <__aeabi_dsub+0x86>
 8002940:	e119      	b.n	8002b76 <__aeabi_dsub+0x2ba>
 8002942:	2d1f      	cmp	r5, #31
 8002944:	dd00      	ble.n	8002948 <__aeabi_dsub+0x8c>
 8002946:	e14c      	b.n	8002be2 <__aeabi_dsub+0x326>
 8002948:	2320      	movs	r3, #32
 800294a:	000f      	movs	r7, r1
 800294c:	1b5b      	subs	r3, r3, r5
 800294e:	0010      	movs	r0, r2
 8002950:	409a      	lsls	r2, r3
 8002952:	409f      	lsls	r7, r3
 8002954:	40e8      	lsrs	r0, r5
 8002956:	1e53      	subs	r3, r2, #1
 8002958:	419a      	sbcs	r2, r3
 800295a:	40e9      	lsrs	r1, r5
 800295c:	4307      	orrs	r7, r0
 800295e:	4317      	orrs	r7, r2
 8002960:	4653      	mov	r3, sl
 8002962:	1bdf      	subs	r7, r3, r7
 8002964:	1a61      	subs	r1, r4, r1
 8002966:	45ba      	cmp	sl, r7
 8002968:	41a4      	sbcs	r4, r4
 800296a:	4264      	negs	r4, r4
 800296c:	1b0c      	subs	r4, r1, r4
 800296e:	0223      	lsls	r3, r4, #8
 8002970:	d400      	bmi.n	8002974 <__aeabi_dsub+0xb8>
 8002972:	e0c5      	b.n	8002b00 <__aeabi_dsub+0x244>
 8002974:	0264      	lsls	r4, r4, #9
 8002976:	0a65      	lsrs	r5, r4, #9
 8002978:	2d00      	cmp	r5, #0
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0xc2>
 800297c:	e0f6      	b.n	8002b6c <__aeabi_dsub+0x2b0>
 800297e:	0028      	movs	r0, r5
 8002980:	f000 fbb2 	bl	80030e8 <__clzsi2>
 8002984:	0003      	movs	r3, r0
 8002986:	3b08      	subs	r3, #8
 8002988:	2b1f      	cmp	r3, #31
 800298a:	dd00      	ble.n	800298e <__aeabi_dsub+0xd2>
 800298c:	e0e9      	b.n	8002b62 <__aeabi_dsub+0x2a6>
 800298e:	2220      	movs	r2, #32
 8002990:	003c      	movs	r4, r7
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	409d      	lsls	r5, r3
 8002996:	40d4      	lsrs	r4, r2
 8002998:	409f      	lsls	r7, r3
 800299a:	4325      	orrs	r5, r4
 800299c:	429e      	cmp	r6, r3
 800299e:	dd00      	ble.n	80029a2 <__aeabi_dsub+0xe6>
 80029a0:	e0db      	b.n	8002b5a <__aeabi_dsub+0x29e>
 80029a2:	1b9e      	subs	r6, r3, r6
 80029a4:	1c73      	adds	r3, r6, #1
 80029a6:	2b1f      	cmp	r3, #31
 80029a8:	dd00      	ble.n	80029ac <__aeabi_dsub+0xf0>
 80029aa:	e10a      	b.n	8002bc2 <__aeabi_dsub+0x306>
 80029ac:	2220      	movs	r2, #32
 80029ae:	0038      	movs	r0, r7
 80029b0:	1ad2      	subs	r2, r2, r3
 80029b2:	0029      	movs	r1, r5
 80029b4:	4097      	lsls	r7, r2
 80029b6:	002c      	movs	r4, r5
 80029b8:	4091      	lsls	r1, r2
 80029ba:	40d8      	lsrs	r0, r3
 80029bc:	1e7a      	subs	r2, r7, #1
 80029be:	4197      	sbcs	r7, r2
 80029c0:	40dc      	lsrs	r4, r3
 80029c2:	2600      	movs	r6, #0
 80029c4:	4301      	orrs	r1, r0
 80029c6:	430f      	orrs	r7, r1
 80029c8:	077b      	lsls	r3, r7, #29
 80029ca:	d009      	beq.n	80029e0 <__aeabi_dsub+0x124>
 80029cc:	230f      	movs	r3, #15
 80029ce:	403b      	ands	r3, r7
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <__aeabi_dsub+0x124>
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	42bb      	cmp	r3, r7
 80029d8:	41bf      	sbcs	r7, r7
 80029da:	427f      	negs	r7, r7
 80029dc:	19e4      	adds	r4, r4, r7
 80029de:	001f      	movs	r7, r3
 80029e0:	0223      	lsls	r3, r4, #8
 80029e2:	d525      	bpl.n	8002a30 <__aeabi_dsub+0x174>
 80029e4:	4b86      	ldr	r3, [pc, #536]	; (8002c00 <__aeabi_dsub+0x344>)
 80029e6:	3601      	adds	r6, #1
 80029e8:	429e      	cmp	r6, r3
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x132>
 80029ec:	e0af      	b.n	8002b4e <__aeabi_dsub+0x292>
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <__aeabi_dsub+0x348>)
 80029f0:	2501      	movs	r5, #1
 80029f2:	401c      	ands	r4, r3
 80029f4:	4643      	mov	r3, r8
 80029f6:	0762      	lsls	r2, r4, #29
 80029f8:	08ff      	lsrs	r7, r7, #3
 80029fa:	0264      	lsls	r4, r4, #9
 80029fc:	0576      	lsls	r6, r6, #21
 80029fe:	4317      	orrs	r7, r2
 8002a00:	0b24      	lsrs	r4, r4, #12
 8002a02:	0d76      	lsrs	r6, r6, #21
 8002a04:	401d      	ands	r5, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	0324      	lsls	r4, r4, #12
 8002a0a:	0b23      	lsrs	r3, r4, #12
 8002a0c:	0d0c      	lsrs	r4, r1, #20
 8002a0e:	4a7e      	ldr	r2, [pc, #504]	; (8002c08 <__aeabi_dsub+0x34c>)
 8002a10:	0524      	lsls	r4, r4, #20
 8002a12:	431c      	orrs	r4, r3
 8002a14:	4014      	ands	r4, r2
 8002a16:	0533      	lsls	r3, r6, #20
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	07ed      	lsls	r5, r5, #31
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	432b      	orrs	r3, r5
 8002a22:	0038      	movs	r0, r7
 8002a24:	0019      	movs	r1, r3
 8002a26:	bc1c      	pop	{r2, r3, r4}
 8002a28:	4690      	mov	r8, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	46a2      	mov	sl, r4
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a30:	2501      	movs	r5, #1
 8002a32:	4643      	mov	r3, r8
 8002a34:	0762      	lsls	r2, r4, #29
 8002a36:	08ff      	lsrs	r7, r7, #3
 8002a38:	4317      	orrs	r7, r2
 8002a3a:	08e4      	lsrs	r4, r4, #3
 8002a3c:	401d      	ands	r5, r3
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <__aeabi_dsub+0x344>)
 8002a40:	429e      	cmp	r6, r3
 8002a42:	d036      	beq.n	8002ab2 <__aeabi_dsub+0x1f6>
 8002a44:	0324      	lsls	r4, r4, #12
 8002a46:	0576      	lsls	r6, r6, #21
 8002a48:	0b24      	lsrs	r4, r4, #12
 8002a4a:	0d76      	lsrs	r6, r6, #21
 8002a4c:	e7db      	b.n	8002a06 <__aeabi_dsub+0x14a>
 8002a4e:	4663      	mov	r3, ip
 8002a50:	1af3      	subs	r3, r6, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	dc00      	bgt.n	8002a58 <__aeabi_dsub+0x19c>
 8002a56:	e094      	b.n	8002b82 <__aeabi_dsub+0x2c6>
 8002a58:	4660      	mov	r0, ip
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d035      	beq.n	8002aca <__aeabi_dsub+0x20e>
 8002a5e:	4868      	ldr	r0, [pc, #416]	; (8002c00 <__aeabi_dsub+0x344>)
 8002a60:	4286      	cmp	r6, r0
 8002a62:	d0b1      	beq.n	80029c8 <__aeabi_dsub+0x10c>
 8002a64:	2780      	movs	r7, #128	; 0x80
 8002a66:	043f      	lsls	r7, r7, #16
 8002a68:	4339      	orrs	r1, r7
 8002a6a:	2b38      	cmp	r3, #56	; 0x38
 8002a6c:	dc00      	bgt.n	8002a70 <__aeabi_dsub+0x1b4>
 8002a6e:	e0fd      	b.n	8002c6c <__aeabi_dsub+0x3b0>
 8002a70:	430a      	orrs	r2, r1
 8002a72:	0017      	movs	r7, r2
 8002a74:	2100      	movs	r1, #0
 8002a76:	1e7a      	subs	r2, r7, #1
 8002a78:	4197      	sbcs	r7, r2
 8002a7a:	4457      	add	r7, sl
 8002a7c:	4557      	cmp	r7, sl
 8002a7e:	4180      	sbcs	r0, r0
 8002a80:	1909      	adds	r1, r1, r4
 8002a82:	4244      	negs	r4, r0
 8002a84:	190c      	adds	r4, r1, r4
 8002a86:	0223      	lsls	r3, r4, #8
 8002a88:	d53a      	bpl.n	8002b00 <__aeabi_dsub+0x244>
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <__aeabi_dsub+0x344>)
 8002a8c:	3601      	adds	r6, #1
 8002a8e:	429e      	cmp	r6, r3
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x1d8>
 8002a92:	e14b      	b.n	8002d2c <__aeabi_dsub+0x470>
 8002a94:	2201      	movs	r2, #1
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <__aeabi_dsub+0x348>)
 8002a98:	401c      	ands	r4, r3
 8002a9a:	087b      	lsrs	r3, r7, #1
 8002a9c:	4017      	ands	r7, r2
 8002a9e:	431f      	orrs	r7, r3
 8002aa0:	07e2      	lsls	r2, r4, #31
 8002aa2:	4317      	orrs	r7, r2
 8002aa4:	0864      	lsrs	r4, r4, #1
 8002aa6:	e78f      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	4310      	orrs	r0, r2
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x1f4>
 8002aae:	e724      	b.n	80028fa <__aeabi_dsub+0x3e>
 8002ab0:	e721      	b.n	80028f6 <__aeabi_dsub+0x3a>
 8002ab2:	0023      	movs	r3, r4
 8002ab4:	433b      	orrs	r3, r7
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x1fe>
 8002ab8:	e1b9      	b.n	8002e2e <__aeabi_dsub+0x572>
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	0312      	lsls	r2, r2, #12
 8002abe:	4314      	orrs	r4, r2
 8002ac0:	0324      	lsls	r4, r4, #12
 8002ac2:	0b24      	lsrs	r4, r4, #12
 8002ac4:	e79f      	b.n	8002a06 <__aeabi_dsub+0x14a>
 8002ac6:	002e      	movs	r6, r5
 8002ac8:	e77e      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002aca:	0008      	movs	r0, r1
 8002acc:	4310      	orrs	r0, r2
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x216>
 8002ad0:	e0ca      	b.n	8002c68 <__aeabi_dsub+0x3ac>
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	4684      	mov	ip, r0
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d000      	beq.n	8002adc <__aeabi_dsub+0x220>
 8002ada:	e0e7      	b.n	8002cac <__aeabi_dsub+0x3f0>
 8002adc:	4452      	add	r2, sl
 8002ade:	4552      	cmp	r2, sl
 8002ae0:	4180      	sbcs	r0, r0
 8002ae2:	1864      	adds	r4, r4, r1
 8002ae4:	4240      	negs	r0, r0
 8002ae6:	1824      	adds	r4, r4, r0
 8002ae8:	0017      	movs	r7, r2
 8002aea:	2601      	movs	r6, #1
 8002aec:	0223      	lsls	r3, r4, #8
 8002aee:	d507      	bpl.n	8002b00 <__aeabi_dsub+0x244>
 8002af0:	2602      	movs	r6, #2
 8002af2:	e7cf      	b.n	8002a94 <__aeabi_dsub+0x1d8>
 8002af4:	4664      	mov	r4, ip
 8002af6:	432c      	orrs	r4, r5
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x240>
 8002afa:	e1b3      	b.n	8002e64 <__aeabi_dsub+0x5a8>
 8002afc:	002c      	movs	r4, r5
 8002afe:	4667      	mov	r7, ip
 8002b00:	077b      	lsls	r3, r7, #29
 8002b02:	d000      	beq.n	8002b06 <__aeabi_dsub+0x24a>
 8002b04:	e762      	b.n	80029cc <__aeabi_dsub+0x110>
 8002b06:	0763      	lsls	r3, r4, #29
 8002b08:	08ff      	lsrs	r7, r7, #3
 8002b0a:	431f      	orrs	r7, r3
 8002b0c:	2501      	movs	r5, #1
 8002b0e:	4643      	mov	r3, r8
 8002b10:	08e4      	lsrs	r4, r4, #3
 8002b12:	401d      	ands	r5, r3
 8002b14:	e793      	b.n	8002a3e <__aeabi_dsub+0x182>
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	d178      	bne.n	8002c0c <__aeabi_dsub+0x350>
 8002b1a:	1c75      	adds	r5, r6, #1
 8002b1c:	056d      	lsls	r5, r5, #21
 8002b1e:	0d6d      	lsrs	r5, r5, #21
 8002b20:	2d01      	cmp	r5, #1
 8002b22:	dc00      	bgt.n	8002b26 <__aeabi_dsub+0x26a>
 8002b24:	e0f2      	b.n	8002d0c <__aeabi_dsub+0x450>
 8002b26:	4650      	mov	r0, sl
 8002b28:	1a80      	subs	r0, r0, r2
 8002b2a:	4582      	cmp	sl, r0
 8002b2c:	41bf      	sbcs	r7, r7
 8002b2e:	1a65      	subs	r5, r4, r1
 8002b30:	427f      	negs	r7, r7
 8002b32:	1bed      	subs	r5, r5, r7
 8002b34:	4684      	mov	ip, r0
 8002b36:	0228      	lsls	r0, r5, #8
 8002b38:	d400      	bmi.n	8002b3c <__aeabi_dsub+0x280>
 8002b3a:	e08c      	b.n	8002c56 <__aeabi_dsub+0x39a>
 8002b3c:	4650      	mov	r0, sl
 8002b3e:	1a17      	subs	r7, r2, r0
 8002b40:	42ba      	cmp	r2, r7
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	1b0c      	subs	r4, r1, r4
 8002b46:	4255      	negs	r5, r2
 8002b48:	1b65      	subs	r5, r4, r5
 8002b4a:	4698      	mov	r8, r3
 8002b4c:	e714      	b.n	8002978 <__aeabi_dsub+0xbc>
 8002b4e:	2501      	movs	r5, #1
 8002b50:	4643      	mov	r3, r8
 8002b52:	2400      	movs	r4, #0
 8002b54:	401d      	ands	r5, r3
 8002b56:	2700      	movs	r7, #0
 8002b58:	e755      	b.n	8002a06 <__aeabi_dsub+0x14a>
 8002b5a:	4c2a      	ldr	r4, [pc, #168]	; (8002c04 <__aeabi_dsub+0x348>)
 8002b5c:	1af6      	subs	r6, r6, r3
 8002b5e:	402c      	ands	r4, r5
 8002b60:	e732      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002b62:	003d      	movs	r5, r7
 8002b64:	3828      	subs	r0, #40	; 0x28
 8002b66:	4085      	lsls	r5, r0
 8002b68:	2700      	movs	r7, #0
 8002b6a:	e717      	b.n	800299c <__aeabi_dsub+0xe0>
 8002b6c:	0038      	movs	r0, r7
 8002b6e:	f000 fabb 	bl	80030e8 <__clzsi2>
 8002b72:	3020      	adds	r0, #32
 8002b74:	e706      	b.n	8002984 <__aeabi_dsub+0xc8>
 8002b76:	430a      	orrs	r2, r1
 8002b78:	0017      	movs	r7, r2
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	1e7a      	subs	r2, r7, #1
 8002b7e:	4197      	sbcs	r7, r2
 8002b80:	e6ee      	b.n	8002960 <__aeabi_dsub+0xa4>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d000      	beq.n	8002b88 <__aeabi_dsub+0x2cc>
 8002b86:	e0e5      	b.n	8002d54 <__aeabi_dsub+0x498>
 8002b88:	1c73      	adds	r3, r6, #1
 8002b8a:	469c      	mov	ip, r3
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	0d5b      	lsrs	r3, r3, #21
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	dc00      	bgt.n	8002b96 <__aeabi_dsub+0x2da>
 8002b94:	e09f      	b.n	8002cd6 <__aeabi_dsub+0x41a>
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <__aeabi_dsub+0x344>)
 8002b98:	459c      	cmp	ip, r3
 8002b9a:	d100      	bne.n	8002b9e <__aeabi_dsub+0x2e2>
 8002b9c:	e0c5      	b.n	8002d2a <__aeabi_dsub+0x46e>
 8002b9e:	4452      	add	r2, sl
 8002ba0:	4552      	cmp	r2, sl
 8002ba2:	4180      	sbcs	r0, r0
 8002ba4:	1864      	adds	r4, r4, r1
 8002ba6:	4240      	negs	r0, r0
 8002ba8:	1824      	adds	r4, r4, r0
 8002baa:	07e7      	lsls	r7, r4, #31
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	4317      	orrs	r7, r2
 8002bb0:	0864      	lsrs	r4, r4, #1
 8002bb2:	4666      	mov	r6, ip
 8002bb4:	e708      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002bb6:	4812      	ldr	r0, [pc, #72]	; (8002c00 <__aeabi_dsub+0x344>)
 8002bb8:	4285      	cmp	r5, r0
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x302>
 8002bbc:	e085      	b.n	8002cca <__aeabi_dsub+0x40e>
 8002bbe:	001d      	movs	r5, r3
 8002bc0:	e6bc      	b.n	800293c <__aeabi_dsub+0x80>
 8002bc2:	0029      	movs	r1, r5
 8002bc4:	3e1f      	subs	r6, #31
 8002bc6:	40f1      	lsrs	r1, r6
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d100      	bne.n	8002bce <__aeabi_dsub+0x312>
 8002bcc:	e07f      	b.n	8002cce <__aeabi_dsub+0x412>
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	409d      	lsls	r5, r3
 8002bd4:	432f      	orrs	r7, r5
 8002bd6:	1e7d      	subs	r5, r7, #1
 8002bd8:	41af      	sbcs	r7, r5
 8002bda:	2400      	movs	r4, #0
 8002bdc:	430f      	orrs	r7, r1
 8002bde:	2600      	movs	r6, #0
 8002be0:	e78e      	b.n	8002b00 <__aeabi_dsub+0x244>
 8002be2:	002b      	movs	r3, r5
 8002be4:	000f      	movs	r7, r1
 8002be6:	3b20      	subs	r3, #32
 8002be8:	40df      	lsrs	r7, r3
 8002bea:	2d20      	cmp	r5, #32
 8002bec:	d071      	beq.n	8002cd2 <__aeabi_dsub+0x416>
 8002bee:	2340      	movs	r3, #64	; 0x40
 8002bf0:	1b5d      	subs	r5, r3, r5
 8002bf2:	40a9      	lsls	r1, r5
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	1e51      	subs	r1, r2, #1
 8002bf8:	418a      	sbcs	r2, r1
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4317      	orrs	r7, r2
 8002bfe:	e6af      	b.n	8002960 <__aeabi_dsub+0xa4>
 8002c00:	000007ff 	.word	0x000007ff
 8002c04:	ff7fffff 	.word	0xff7fffff
 8002c08:	800fffff 	.word	0x800fffff
 8002c0c:	2e00      	cmp	r6, #0
 8002c0e:	d03e      	beq.n	8002c8e <__aeabi_dsub+0x3d2>
 8002c10:	4eb3      	ldr	r6, [pc, #716]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002c12:	45b4      	cmp	ip, r6
 8002c14:	d045      	beq.n	8002ca2 <__aeabi_dsub+0x3e6>
 8002c16:	2680      	movs	r6, #128	; 0x80
 8002c18:	0436      	lsls	r6, r6, #16
 8002c1a:	426d      	negs	r5, r5
 8002c1c:	4334      	orrs	r4, r6
 8002c1e:	2d38      	cmp	r5, #56	; 0x38
 8002c20:	dd00      	ble.n	8002c24 <__aeabi_dsub+0x368>
 8002c22:	e0a8      	b.n	8002d76 <__aeabi_dsub+0x4ba>
 8002c24:	2d1f      	cmp	r5, #31
 8002c26:	dd00      	ble.n	8002c2a <__aeabi_dsub+0x36e>
 8002c28:	e11f      	b.n	8002e6a <__aeabi_dsub+0x5ae>
 8002c2a:	2620      	movs	r6, #32
 8002c2c:	0027      	movs	r7, r4
 8002c2e:	4650      	mov	r0, sl
 8002c30:	1b76      	subs	r6, r6, r5
 8002c32:	40b7      	lsls	r7, r6
 8002c34:	40e8      	lsrs	r0, r5
 8002c36:	4307      	orrs	r7, r0
 8002c38:	4650      	mov	r0, sl
 8002c3a:	40b0      	lsls	r0, r6
 8002c3c:	1e46      	subs	r6, r0, #1
 8002c3e:	41b0      	sbcs	r0, r6
 8002c40:	40ec      	lsrs	r4, r5
 8002c42:	4338      	orrs	r0, r7
 8002c44:	1a17      	subs	r7, r2, r0
 8002c46:	42ba      	cmp	r2, r7
 8002c48:	4192      	sbcs	r2, r2
 8002c4a:	1b0c      	subs	r4, r1, r4
 8002c4c:	4252      	negs	r2, r2
 8002c4e:	1aa4      	subs	r4, r4, r2
 8002c50:	4666      	mov	r6, ip
 8002c52:	4698      	mov	r8, r3
 8002c54:	e68b      	b.n	800296e <__aeabi_dsub+0xb2>
 8002c56:	4664      	mov	r4, ip
 8002c58:	4667      	mov	r7, ip
 8002c5a:	432c      	orrs	r4, r5
 8002c5c:	d000      	beq.n	8002c60 <__aeabi_dsub+0x3a4>
 8002c5e:	e68b      	b.n	8002978 <__aeabi_dsub+0xbc>
 8002c60:	2500      	movs	r5, #0
 8002c62:	2600      	movs	r6, #0
 8002c64:	2700      	movs	r7, #0
 8002c66:	e6ea      	b.n	8002a3e <__aeabi_dsub+0x182>
 8002c68:	001e      	movs	r6, r3
 8002c6a:	e6ad      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002c6c:	2b1f      	cmp	r3, #31
 8002c6e:	dc60      	bgt.n	8002d32 <__aeabi_dsub+0x476>
 8002c70:	2720      	movs	r7, #32
 8002c72:	1af8      	subs	r0, r7, r3
 8002c74:	000f      	movs	r7, r1
 8002c76:	4684      	mov	ip, r0
 8002c78:	4087      	lsls	r7, r0
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	40d8      	lsrs	r0, r3
 8002c7e:	4307      	orrs	r7, r0
 8002c80:	4660      	mov	r0, ip
 8002c82:	4082      	lsls	r2, r0
 8002c84:	1e50      	subs	r0, r2, #1
 8002c86:	4182      	sbcs	r2, r0
 8002c88:	40d9      	lsrs	r1, r3
 8002c8a:	4317      	orrs	r7, r2
 8002c8c:	e6f5      	b.n	8002a7a <__aeabi_dsub+0x1be>
 8002c8e:	0026      	movs	r6, r4
 8002c90:	4650      	mov	r0, sl
 8002c92:	4306      	orrs	r6, r0
 8002c94:	d005      	beq.n	8002ca2 <__aeabi_dsub+0x3e6>
 8002c96:	43ed      	mvns	r5, r5
 8002c98:	2d00      	cmp	r5, #0
 8002c9a:	d0d3      	beq.n	8002c44 <__aeabi_dsub+0x388>
 8002c9c:	4e90      	ldr	r6, [pc, #576]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002c9e:	45b4      	cmp	ip, r6
 8002ca0:	d1bd      	bne.n	8002c1e <__aeabi_dsub+0x362>
 8002ca2:	000c      	movs	r4, r1
 8002ca4:	0017      	movs	r7, r2
 8002ca6:	4666      	mov	r6, ip
 8002ca8:	4698      	mov	r8, r3
 8002caa:	e68d      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002cac:	488c      	ldr	r0, [pc, #560]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002cae:	4283      	cmp	r3, r0
 8002cb0:	d00b      	beq.n	8002cca <__aeabi_dsub+0x40e>
 8002cb2:	4663      	mov	r3, ip
 8002cb4:	e6d9      	b.n	8002a6a <__aeabi_dsub+0x1ae>
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	d000      	beq.n	8002cbc <__aeabi_dsub+0x400>
 8002cba:	e096      	b.n	8002dea <__aeabi_dsub+0x52e>
 8002cbc:	0008      	movs	r0, r1
 8002cbe:	4310      	orrs	r0, r2
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x408>
 8002cc2:	e0e2      	b.n	8002e8a <__aeabi_dsub+0x5ce>
 8002cc4:	000c      	movs	r4, r1
 8002cc6:	0017      	movs	r7, r2
 8002cc8:	4698      	mov	r8, r3
 8002cca:	4e85      	ldr	r6, [pc, #532]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002ccc:	e67c      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e780      	b.n	8002bd4 <__aeabi_dsub+0x318>
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	e78e      	b.n	8002bf4 <__aeabi_dsub+0x338>
 8002cd6:	0023      	movs	r3, r4
 8002cd8:	4650      	mov	r0, sl
 8002cda:	4303      	orrs	r3, r0
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	d000      	beq.n	8002ce2 <__aeabi_dsub+0x426>
 8002ce0:	e0a8      	b.n	8002e34 <__aeabi_dsub+0x578>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x42c>
 8002ce6:	e0de      	b.n	8002ea6 <__aeabi_dsub+0x5ea>
 8002ce8:	000b      	movs	r3, r1
 8002cea:	4313      	orrs	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x434>
 8002cee:	e66b      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002cf0:	4452      	add	r2, sl
 8002cf2:	4552      	cmp	r2, sl
 8002cf4:	4180      	sbcs	r0, r0
 8002cf6:	1864      	adds	r4, r4, r1
 8002cf8:	4240      	negs	r0, r0
 8002cfa:	1824      	adds	r4, r4, r0
 8002cfc:	0017      	movs	r7, r2
 8002cfe:	0223      	lsls	r3, r4, #8
 8002d00:	d400      	bmi.n	8002d04 <__aeabi_dsub+0x448>
 8002d02:	e6fd      	b.n	8002b00 <__aeabi_dsub+0x244>
 8002d04:	4b77      	ldr	r3, [pc, #476]	; (8002ee4 <__aeabi_dsub+0x628>)
 8002d06:	4666      	mov	r6, ip
 8002d08:	401c      	ands	r4, r3
 8002d0a:	e65d      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002d0c:	0025      	movs	r5, r4
 8002d0e:	4650      	mov	r0, sl
 8002d10:	4305      	orrs	r5, r0
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	d1cf      	bne.n	8002cb6 <__aeabi_dsub+0x3fa>
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	d14f      	bne.n	8002dba <__aeabi_dsub+0x4fe>
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	4314      	orrs	r4, r2
 8002d1e:	d100      	bne.n	8002d22 <__aeabi_dsub+0x466>
 8002d20:	e0a0      	b.n	8002e64 <__aeabi_dsub+0x5a8>
 8002d22:	000c      	movs	r4, r1
 8002d24:	0017      	movs	r7, r2
 8002d26:	4698      	mov	r8, r3
 8002d28:	e64e      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002d2a:	4666      	mov	r6, ip
 8002d2c:	2400      	movs	r4, #0
 8002d2e:	2700      	movs	r7, #0
 8002d30:	e685      	b.n	8002a3e <__aeabi_dsub+0x182>
 8002d32:	001f      	movs	r7, r3
 8002d34:	0008      	movs	r0, r1
 8002d36:	3f20      	subs	r7, #32
 8002d38:	40f8      	lsrs	r0, r7
 8002d3a:	0007      	movs	r7, r0
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d100      	bne.n	8002d42 <__aeabi_dsub+0x486>
 8002d40:	e08e      	b.n	8002e60 <__aeabi_dsub+0x5a4>
 8002d42:	2040      	movs	r0, #64	; 0x40
 8002d44:	1ac3      	subs	r3, r0, r3
 8002d46:	4099      	lsls	r1, r3
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	1e51      	subs	r1, r2, #1
 8002d4c:	418a      	sbcs	r2, r1
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4317      	orrs	r7, r2
 8002d52:	e692      	b.n	8002a7a <__aeabi_dsub+0x1be>
 8002d54:	2e00      	cmp	r6, #0
 8002d56:	d114      	bne.n	8002d82 <__aeabi_dsub+0x4c6>
 8002d58:	0026      	movs	r6, r4
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	4306      	orrs	r6, r0
 8002d5e:	d062      	beq.n	8002e26 <__aeabi_dsub+0x56a>
 8002d60:	43db      	mvns	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15c      	bne.n	8002e20 <__aeabi_dsub+0x564>
 8002d66:	1887      	adds	r7, r0, r2
 8002d68:	4297      	cmp	r7, r2
 8002d6a:	4192      	sbcs	r2, r2
 8002d6c:	1864      	adds	r4, r4, r1
 8002d6e:	4252      	negs	r2, r2
 8002d70:	18a4      	adds	r4, r4, r2
 8002d72:	4666      	mov	r6, ip
 8002d74:	e687      	b.n	8002a86 <__aeabi_dsub+0x1ca>
 8002d76:	4650      	mov	r0, sl
 8002d78:	4320      	orrs	r0, r4
 8002d7a:	1e44      	subs	r4, r0, #1
 8002d7c:	41a0      	sbcs	r0, r4
 8002d7e:	2400      	movs	r4, #0
 8002d80:	e760      	b.n	8002c44 <__aeabi_dsub+0x388>
 8002d82:	4e57      	ldr	r6, [pc, #348]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002d84:	45b4      	cmp	ip, r6
 8002d86:	d04e      	beq.n	8002e26 <__aeabi_dsub+0x56a>
 8002d88:	2680      	movs	r6, #128	; 0x80
 8002d8a:	0436      	lsls	r6, r6, #16
 8002d8c:	425b      	negs	r3, r3
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	2b38      	cmp	r3, #56	; 0x38
 8002d92:	dd00      	ble.n	8002d96 <__aeabi_dsub+0x4da>
 8002d94:	e07f      	b.n	8002e96 <__aeabi_dsub+0x5da>
 8002d96:	2b1f      	cmp	r3, #31
 8002d98:	dd00      	ble.n	8002d9c <__aeabi_dsub+0x4e0>
 8002d9a:	e08b      	b.n	8002eb4 <__aeabi_dsub+0x5f8>
 8002d9c:	2620      	movs	r6, #32
 8002d9e:	0027      	movs	r7, r4
 8002da0:	4650      	mov	r0, sl
 8002da2:	1af6      	subs	r6, r6, r3
 8002da4:	40b7      	lsls	r7, r6
 8002da6:	40d8      	lsrs	r0, r3
 8002da8:	4307      	orrs	r7, r0
 8002daa:	4650      	mov	r0, sl
 8002dac:	40b0      	lsls	r0, r6
 8002dae:	1e46      	subs	r6, r0, #1
 8002db0:	41b0      	sbcs	r0, r6
 8002db2:	4307      	orrs	r7, r0
 8002db4:	40dc      	lsrs	r4, r3
 8002db6:	18bf      	adds	r7, r7, r2
 8002db8:	e7d6      	b.n	8002d68 <__aeabi_dsub+0x4ac>
 8002dba:	000d      	movs	r5, r1
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x506>
 8002dc0:	e602      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002dc2:	4650      	mov	r0, sl
 8002dc4:	1a80      	subs	r0, r0, r2
 8002dc6:	4582      	cmp	sl, r0
 8002dc8:	41bf      	sbcs	r7, r7
 8002dca:	1a65      	subs	r5, r4, r1
 8002dcc:	427f      	negs	r7, r7
 8002dce:	1bed      	subs	r5, r5, r7
 8002dd0:	4684      	mov	ip, r0
 8002dd2:	0228      	lsls	r0, r5, #8
 8002dd4:	d400      	bmi.n	8002dd8 <__aeabi_dsub+0x51c>
 8002dd6:	e68d      	b.n	8002af4 <__aeabi_dsub+0x238>
 8002dd8:	4650      	mov	r0, sl
 8002dda:	1a17      	subs	r7, r2, r0
 8002ddc:	42ba      	cmp	r2, r7
 8002dde:	4192      	sbcs	r2, r2
 8002de0:	1b0c      	subs	r4, r1, r4
 8002de2:	4252      	negs	r2, r2
 8002de4:	1aa4      	subs	r4, r4, r2
 8002de6:	4698      	mov	r8, r3
 8002de8:	e5ee      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002dea:	000d      	movs	r5, r1
 8002dec:	4315      	orrs	r5, r2
 8002dee:	d100      	bne.n	8002df2 <__aeabi_dsub+0x536>
 8002df0:	e76b      	b.n	8002cca <__aeabi_dsub+0x40e>
 8002df2:	4650      	mov	r0, sl
 8002df4:	0767      	lsls	r7, r4, #29
 8002df6:	08c0      	lsrs	r0, r0, #3
 8002df8:	4307      	orrs	r7, r0
 8002dfa:	2080      	movs	r0, #128	; 0x80
 8002dfc:	08e4      	lsrs	r4, r4, #3
 8002dfe:	0300      	lsls	r0, r0, #12
 8002e00:	4204      	tst	r4, r0
 8002e02:	d007      	beq.n	8002e14 <__aeabi_dsub+0x558>
 8002e04:	08cd      	lsrs	r5, r1, #3
 8002e06:	4205      	tst	r5, r0
 8002e08:	d104      	bne.n	8002e14 <__aeabi_dsub+0x558>
 8002e0a:	002c      	movs	r4, r5
 8002e0c:	4698      	mov	r8, r3
 8002e0e:	08d7      	lsrs	r7, r2, #3
 8002e10:	0749      	lsls	r1, r1, #29
 8002e12:	430f      	orrs	r7, r1
 8002e14:	0f7b      	lsrs	r3, r7, #29
 8002e16:	00e4      	lsls	r4, r4, #3
 8002e18:	431c      	orrs	r4, r3
 8002e1a:	00ff      	lsls	r7, r7, #3
 8002e1c:	4e30      	ldr	r6, [pc, #192]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002e1e:	e5d3      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002e20:	4e2f      	ldr	r6, [pc, #188]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002e22:	45b4      	cmp	ip, r6
 8002e24:	d1b4      	bne.n	8002d90 <__aeabi_dsub+0x4d4>
 8002e26:	000c      	movs	r4, r1
 8002e28:	0017      	movs	r7, r2
 8002e2a:	4666      	mov	r6, ip
 8002e2c:	e5cc      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002e2e:	2700      	movs	r7, #0
 8002e30:	2400      	movs	r4, #0
 8002e32:	e5e8      	b.n	8002a06 <__aeabi_dsub+0x14a>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d039      	beq.n	8002eac <__aeabi_dsub+0x5f0>
 8002e38:	000b      	movs	r3, r1
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	d100      	bne.n	8002e40 <__aeabi_dsub+0x584>
 8002e3e:	e744      	b.n	8002cca <__aeabi_dsub+0x40e>
 8002e40:	08c0      	lsrs	r0, r0, #3
 8002e42:	0767      	lsls	r7, r4, #29
 8002e44:	4307      	orrs	r7, r0
 8002e46:	2080      	movs	r0, #128	; 0x80
 8002e48:	08e4      	lsrs	r4, r4, #3
 8002e4a:	0300      	lsls	r0, r0, #12
 8002e4c:	4204      	tst	r4, r0
 8002e4e:	d0e1      	beq.n	8002e14 <__aeabi_dsub+0x558>
 8002e50:	08cb      	lsrs	r3, r1, #3
 8002e52:	4203      	tst	r3, r0
 8002e54:	d1de      	bne.n	8002e14 <__aeabi_dsub+0x558>
 8002e56:	08d7      	lsrs	r7, r2, #3
 8002e58:	0749      	lsls	r1, r1, #29
 8002e5a:	430f      	orrs	r7, r1
 8002e5c:	001c      	movs	r4, r3
 8002e5e:	e7d9      	b.n	8002e14 <__aeabi_dsub+0x558>
 8002e60:	2100      	movs	r1, #0
 8002e62:	e771      	b.n	8002d48 <__aeabi_dsub+0x48c>
 8002e64:	2500      	movs	r5, #0
 8002e66:	2700      	movs	r7, #0
 8002e68:	e5e9      	b.n	8002a3e <__aeabi_dsub+0x182>
 8002e6a:	002e      	movs	r6, r5
 8002e6c:	0027      	movs	r7, r4
 8002e6e:	3e20      	subs	r6, #32
 8002e70:	40f7      	lsrs	r7, r6
 8002e72:	2d20      	cmp	r5, #32
 8002e74:	d02f      	beq.n	8002ed6 <__aeabi_dsub+0x61a>
 8002e76:	2640      	movs	r6, #64	; 0x40
 8002e78:	1b75      	subs	r5, r6, r5
 8002e7a:	40ac      	lsls	r4, r5
 8002e7c:	4650      	mov	r0, sl
 8002e7e:	4320      	orrs	r0, r4
 8002e80:	1e44      	subs	r4, r0, #1
 8002e82:	41a0      	sbcs	r0, r4
 8002e84:	2400      	movs	r4, #0
 8002e86:	4338      	orrs	r0, r7
 8002e88:	e6dc      	b.n	8002c44 <__aeabi_dsub+0x388>
 8002e8a:	2480      	movs	r4, #128	; 0x80
 8002e8c:	2500      	movs	r5, #0
 8002e8e:	0324      	lsls	r4, r4, #12
 8002e90:	4e13      	ldr	r6, [pc, #76]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002e92:	2700      	movs	r7, #0
 8002e94:	e5d3      	b.n	8002a3e <__aeabi_dsub+0x182>
 8002e96:	4650      	mov	r0, sl
 8002e98:	4320      	orrs	r0, r4
 8002e9a:	0007      	movs	r7, r0
 8002e9c:	1e78      	subs	r0, r7, #1
 8002e9e:	4187      	sbcs	r7, r0
 8002ea0:	2400      	movs	r4, #0
 8002ea2:	18bf      	adds	r7, r7, r2
 8002ea4:	e760      	b.n	8002d68 <__aeabi_dsub+0x4ac>
 8002ea6:	000c      	movs	r4, r1
 8002ea8:	0017      	movs	r7, r2
 8002eaa:	e58d      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002eac:	000c      	movs	r4, r1
 8002eae:	0017      	movs	r7, r2
 8002eb0:	4e0b      	ldr	r6, [pc, #44]	; (8002ee0 <__aeabi_dsub+0x624>)
 8002eb2:	e589      	b.n	80029c8 <__aeabi_dsub+0x10c>
 8002eb4:	001e      	movs	r6, r3
 8002eb6:	0027      	movs	r7, r4
 8002eb8:	3e20      	subs	r6, #32
 8002eba:	40f7      	lsrs	r7, r6
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d00c      	beq.n	8002eda <__aeabi_dsub+0x61e>
 8002ec0:	2640      	movs	r6, #64	; 0x40
 8002ec2:	1af3      	subs	r3, r6, r3
 8002ec4:	409c      	lsls	r4, r3
 8002ec6:	4650      	mov	r0, sl
 8002ec8:	4320      	orrs	r0, r4
 8002eca:	1e44      	subs	r4, r0, #1
 8002ecc:	41a0      	sbcs	r0, r4
 8002ece:	4307      	orrs	r7, r0
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	18bf      	adds	r7, r7, r2
 8002ed4:	e748      	b.n	8002d68 <__aeabi_dsub+0x4ac>
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	e7d0      	b.n	8002e7c <__aeabi_dsub+0x5c0>
 8002eda:	2400      	movs	r4, #0
 8002edc:	e7f3      	b.n	8002ec6 <__aeabi_dsub+0x60a>
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	000007ff 	.word	0x000007ff
 8002ee4:	ff7fffff 	.word	0xff7fffff

08002ee8 <__aeabi_d2iz>:
 8002ee8:	b530      	push	{r4, r5, lr}
 8002eea:	4d13      	ldr	r5, [pc, #76]	; (8002f38 <__aeabi_d2iz+0x50>)
 8002eec:	030a      	lsls	r2, r1, #12
 8002eee:	004b      	lsls	r3, r1, #1
 8002ef0:	0b12      	lsrs	r2, r2, #12
 8002ef2:	0d5b      	lsrs	r3, r3, #21
 8002ef4:	0fc9      	lsrs	r1, r1, #31
 8002ef6:	2400      	movs	r4, #0
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dd10      	ble.n	8002f1e <__aeabi_d2iz+0x36>
 8002efc:	4c0f      	ldr	r4, [pc, #60]	; (8002f3c <__aeabi_d2iz+0x54>)
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	dc0f      	bgt.n	8002f22 <__aeabi_d2iz+0x3a>
 8002f02:	2480      	movs	r4, #128	; 0x80
 8002f04:	4d0e      	ldr	r5, [pc, #56]	; (8002f40 <__aeabi_d2iz+0x58>)
 8002f06:	0364      	lsls	r4, r4, #13
 8002f08:	4322      	orrs	r2, r4
 8002f0a:	1aed      	subs	r5, r5, r3
 8002f0c:	2d1f      	cmp	r5, #31
 8002f0e:	dd0b      	ble.n	8002f28 <__aeabi_d2iz+0x40>
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <__aeabi_d2iz+0x5c>)
 8002f12:	1ac3      	subs	r3, r0, r3
 8002f14:	40da      	lsrs	r2, r3
 8002f16:	4254      	negs	r4, r2
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d100      	bne.n	8002f1e <__aeabi_d2iz+0x36>
 8002f1c:	0014      	movs	r4, r2
 8002f1e:	0020      	movs	r0, r4
 8002f20:	bd30      	pop	{r4, r5, pc}
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__aeabi_d2iz+0x60>)
 8002f24:	18cc      	adds	r4, r1, r3
 8002f26:	e7fa      	b.n	8002f1e <__aeabi_d2iz+0x36>
 8002f28:	4c08      	ldr	r4, [pc, #32]	; (8002f4c <__aeabi_d2iz+0x64>)
 8002f2a:	40e8      	lsrs	r0, r5
 8002f2c:	46a4      	mov	ip, r4
 8002f2e:	4463      	add	r3, ip
 8002f30:	409a      	lsls	r2, r3
 8002f32:	4302      	orrs	r2, r0
 8002f34:	e7ef      	b.n	8002f16 <__aeabi_d2iz+0x2e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	000003fe 	.word	0x000003fe
 8002f3c:	0000041d 	.word	0x0000041d
 8002f40:	00000433 	.word	0x00000433
 8002f44:	00000413 	.word	0x00000413
 8002f48:	7fffffff 	.word	0x7fffffff
 8002f4c:	fffffbed 	.word	0xfffffbed

08002f50 <__aeabi_i2d>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d030      	beq.n	8002fb8 <__aeabi_i2d+0x68>
 8002f56:	17c3      	asrs	r3, r0, #31
 8002f58:	18c4      	adds	r4, r0, r3
 8002f5a:	405c      	eors	r4, r3
 8002f5c:	0fc5      	lsrs	r5, r0, #31
 8002f5e:	0020      	movs	r0, r4
 8002f60:	f000 f8c2 	bl	80030e8 <__clzsi2>
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <__aeabi_i2d+0x74>)
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <__aeabi_i2d+0x78>)
 8002f68:	1a1b      	subs	r3, r3, r0
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	2a1f      	cmp	r2, #31
 8002f6e:	dd18      	ble.n	8002fa2 <__aeabi_i2d+0x52>
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <__aeabi_i2d+0x7c>)
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	4094      	lsls	r4, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	0324      	lsls	r4, r4, #12
 8002f7a:	055b      	lsls	r3, r3, #21
 8002f7c:	0b24      	lsrs	r4, r4, #12
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	2100      	movs	r1, #0
 8002f82:	0010      	movs	r0, r2
 8002f84:	0324      	lsls	r4, r4, #12
 8002f86:	0d0a      	lsrs	r2, r1, #20
 8002f88:	0b24      	lsrs	r4, r4, #12
 8002f8a:	0512      	lsls	r2, r2, #20
 8002f8c:	4322      	orrs	r2, r4
 8002f8e:	4c10      	ldr	r4, [pc, #64]	; (8002fd0 <__aeabi_i2d+0x80>)
 8002f90:	051b      	lsls	r3, r3, #20
 8002f92:	4022      	ands	r2, r4
 8002f94:	4313      	orrs	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	07ed      	lsls	r5, r5, #31
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	432b      	orrs	r3, r5
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	210b      	movs	r1, #11
 8002faa:	1a08      	subs	r0, r1, r0
 8002fac:	40c4      	lsrs	r4, r0
 8002fae:	055b      	lsls	r3, r3, #21
 8002fb0:	0324      	lsls	r4, r4, #12
 8002fb2:	0b24      	lsrs	r4, r4, #12
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	e7e3      	b.n	8002f80 <__aeabi_i2d+0x30>
 8002fb8:	2500      	movs	r5, #0
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	e7de      	b.n	8002f80 <__aeabi_i2d+0x30>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0000041e 	.word	0x0000041e
 8002fc8:	00000433 	.word	0x00000433
 8002fcc:	00000413 	.word	0x00000413
 8002fd0:	800fffff 	.word	0x800fffff

08002fd4 <__aeabi_ui2d>:
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	1e04      	subs	r4, r0, #0
 8002fd8:	d028      	beq.n	800302c <__aeabi_ui2d+0x58>
 8002fda:	f000 f885 	bl	80030e8 <__clzsi2>
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <__aeabi_ui2d+0x60>)
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <__aeabi_ui2d+0x64>)
 8002fe2:	1a1b      	subs	r3, r3, r0
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	2a1f      	cmp	r2, #31
 8002fe8:	dd15      	ble.n	8003016 <__aeabi_ui2d+0x42>
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <__aeabi_ui2d+0x68>)
 8002fec:	1ad2      	subs	r2, r2, r3
 8002fee:	4094      	lsls	r4, r2
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	0324      	lsls	r4, r4, #12
 8002ff4:	055b      	lsls	r3, r3, #21
 8002ff6:	0b24      	lsrs	r4, r4, #12
 8002ff8:	0d5b      	lsrs	r3, r3, #21
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	0324      	lsls	r4, r4, #12
 8003000:	0d0a      	lsrs	r2, r1, #20
 8003002:	0b24      	lsrs	r4, r4, #12
 8003004:	0512      	lsls	r2, r2, #20
 8003006:	4322      	orrs	r2, r4
 8003008:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__aeabi_ui2d+0x6c>)
 800300a:	051b      	lsls	r3, r3, #20
 800300c:	4022      	ands	r2, r4
 800300e:	4313      	orrs	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	0859      	lsrs	r1, r3, #1
 8003014:	bd10      	pop	{r4, pc}
 8003016:	0021      	movs	r1, r4
 8003018:	4091      	lsls	r1, r2
 800301a:	000a      	movs	r2, r1
 800301c:	210b      	movs	r1, #11
 800301e:	1a08      	subs	r0, r1, r0
 8003020:	40c4      	lsrs	r4, r0
 8003022:	055b      	lsls	r3, r3, #21
 8003024:	0324      	lsls	r4, r4, #12
 8003026:	0b24      	lsrs	r4, r4, #12
 8003028:	0d5b      	lsrs	r3, r3, #21
 800302a:	e7e6      	b.n	8002ffa <__aeabi_ui2d+0x26>
 800302c:	2300      	movs	r3, #0
 800302e:	2400      	movs	r4, #0
 8003030:	2200      	movs	r2, #0
 8003032:	e7e2      	b.n	8002ffa <__aeabi_ui2d+0x26>
 8003034:	0000041e 	.word	0x0000041e
 8003038:	00000433 	.word	0x00000433
 800303c:	00000413 	.word	0x00000413
 8003040:	800fffff 	.word	0x800fffff

08003044 <__aeabi_f2d>:
 8003044:	0041      	lsls	r1, r0, #1
 8003046:	0e09      	lsrs	r1, r1, #24
 8003048:	1c4b      	adds	r3, r1, #1
 800304a:	b570      	push	{r4, r5, r6, lr}
 800304c:	b2db      	uxtb	r3, r3
 800304e:	0246      	lsls	r6, r0, #9
 8003050:	0a75      	lsrs	r5, r6, #9
 8003052:	0fc4      	lsrs	r4, r0, #31
 8003054:	2b01      	cmp	r3, #1
 8003056:	dd14      	ble.n	8003082 <__aeabi_f2d+0x3e>
 8003058:	23e0      	movs	r3, #224	; 0xe0
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	076d      	lsls	r5, r5, #29
 800305e:	0b36      	lsrs	r6, r6, #12
 8003060:	18cb      	adds	r3, r1, r3
 8003062:	2100      	movs	r1, #0
 8003064:	0d0a      	lsrs	r2, r1, #20
 8003066:	0028      	movs	r0, r5
 8003068:	0512      	lsls	r2, r2, #20
 800306a:	4d1c      	ldr	r5, [pc, #112]	; (80030dc <__aeabi_f2d+0x98>)
 800306c:	4332      	orrs	r2, r6
 800306e:	055b      	lsls	r3, r3, #21
 8003070:	402a      	ands	r2, r5
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	4313      	orrs	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	07e4      	lsls	r4, r4, #31
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	4323      	orrs	r3, r4
 800307e:	0019      	movs	r1, r3
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	2900      	cmp	r1, #0
 8003084:	d114      	bne.n	80030b0 <__aeabi_f2d+0x6c>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d01e      	beq.n	80030c8 <__aeabi_f2d+0x84>
 800308a:	0028      	movs	r0, r5
 800308c:	f000 f82c 	bl	80030e8 <__clzsi2>
 8003090:	280a      	cmp	r0, #10
 8003092:	dc1c      	bgt.n	80030ce <__aeabi_f2d+0x8a>
 8003094:	230b      	movs	r3, #11
 8003096:	002a      	movs	r2, r5
 8003098:	1a1b      	subs	r3, r3, r0
 800309a:	40da      	lsrs	r2, r3
 800309c:	0003      	movs	r3, r0
 800309e:	3315      	adds	r3, #21
 80030a0:	409d      	lsls	r5, r3
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <__aeabi_f2d+0x9c>)
 80030a4:	0312      	lsls	r2, r2, #12
 80030a6:	1a1b      	subs	r3, r3, r0
 80030a8:	055b      	lsls	r3, r3, #21
 80030aa:	0b16      	lsrs	r6, r2, #12
 80030ac:	0d5b      	lsrs	r3, r3, #21
 80030ae:	e7d8      	b.n	8003062 <__aeabi_f2d+0x1e>
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	d006      	beq.n	80030c2 <__aeabi_f2d+0x7e>
 80030b4:	0b32      	lsrs	r2, r6, #12
 80030b6:	2680      	movs	r6, #128	; 0x80
 80030b8:	0336      	lsls	r6, r6, #12
 80030ba:	076d      	lsls	r5, r5, #29
 80030bc:	4316      	orrs	r6, r2
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <__aeabi_f2d+0xa0>)
 80030c0:	e7cf      	b.n	8003062 <__aeabi_f2d+0x1e>
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <__aeabi_f2d+0xa0>)
 80030c4:	2600      	movs	r6, #0
 80030c6:	e7cc      	b.n	8003062 <__aeabi_f2d+0x1e>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2600      	movs	r6, #0
 80030cc:	e7c9      	b.n	8003062 <__aeabi_f2d+0x1e>
 80030ce:	0003      	movs	r3, r0
 80030d0:	002a      	movs	r2, r5
 80030d2:	3b0b      	subs	r3, #11
 80030d4:	409a      	lsls	r2, r3
 80030d6:	2500      	movs	r5, #0
 80030d8:	e7e3      	b.n	80030a2 <__aeabi_f2d+0x5e>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	800fffff 	.word	0x800fffff
 80030e0:	00000389 	.word	0x00000389
 80030e4:	000007ff 	.word	0x000007ff

080030e8 <__clzsi2>:
 80030e8:	211c      	movs	r1, #28
 80030ea:	2301      	movs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d301      	bcc.n	80030f6 <__clzsi2+0xe>
 80030f2:	0c00      	lsrs	r0, r0, #16
 80030f4:	3910      	subs	r1, #16
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	4298      	cmp	r0, r3
 80030fa:	d301      	bcc.n	8003100 <__clzsi2+0x18>
 80030fc:	0a00      	lsrs	r0, r0, #8
 80030fe:	3908      	subs	r1, #8
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	4298      	cmp	r0, r3
 8003104:	d301      	bcc.n	800310a <__clzsi2+0x22>
 8003106:	0900      	lsrs	r0, r0, #4
 8003108:	3904      	subs	r1, #4
 800310a:	a202      	add	r2, pc, #8	; (adr r2, 8003114 <__clzsi2+0x2c>)
 800310c:	5c10      	ldrb	r0, [r2, r0]
 800310e:	1840      	adds	r0, r0, r1
 8003110:	4770      	bx	lr
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	02020304 	.word	0x02020304
 8003118:	01010101 	.word	0x01010101
	...

08003124 <__clzdi2>:
 8003124:	b510      	push	{r4, lr}
 8003126:	2900      	cmp	r1, #0
 8003128:	d103      	bne.n	8003132 <__clzdi2+0xe>
 800312a:	f7ff ffdd 	bl	80030e8 <__clzsi2>
 800312e:	3020      	adds	r0, #32
 8003130:	e002      	b.n	8003138 <__clzdi2+0x14>
 8003132:	1c08      	adds	r0, r1, #0
 8003134:	f7ff ffd8 	bl	80030e8 <__clzsi2>
 8003138:	bd10      	pop	{r4, pc}
 800313a:	46c0      	nop			; (mov r8, r8)

0800313c <__errno>:
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <__errno+0x8>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	4770      	bx	lr
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	20000000 	.word	0x20000000

08003148 <__fp_lock>:
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr

0800314c <_cleanup_r>:
 800314c:	b510      	push	{r4, lr}
 800314e:	4902      	ldr	r1, [pc, #8]	; (8003158 <_cleanup_r+0xc>)
 8003150:	f000 f92e 	bl	80033b0 <_fwalk_reent>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	08004d31 	.word	0x08004d31

0800315c <__sinit.part.0>:
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	46d6      	mov	lr, sl
 8003160:	464f      	mov	r7, r9
 8003162:	4646      	mov	r6, r8
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <__sinit.part.0+0xcc>)
 8003166:	b5c0      	push	{r6, r7, lr}
 8003168:	63c3      	str	r3, [r0, #60]	; 0x3c
 800316a:	23b8      	movs	r3, #184	; 0xb8
 800316c:	2400      	movs	r4, #0
 800316e:	2203      	movs	r2, #3
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	50c4      	str	r4, [r0, r3]
 8003174:	3304      	adds	r3, #4
 8003176:	6845      	ldr	r5, [r0, #4]
 8003178:	50c2      	str	r2, [r0, r3]
 800317a:	3308      	adds	r3, #8
 800317c:	18c2      	adds	r2, r0, r3
 800317e:	3b04      	subs	r3, #4
 8003180:	50c2      	str	r2, [r0, r3]
 8003182:	0006      	movs	r6, r0
 8003184:	2304      	movs	r3, #4
 8003186:	0028      	movs	r0, r5
 8003188:	666c      	str	r4, [r5, #100]	; 0x64
 800318a:	602c      	str	r4, [r5, #0]
 800318c:	606c      	str	r4, [r5, #4]
 800318e:	60ac      	str	r4, [r5, #8]
 8003190:	60eb      	str	r3, [r5, #12]
 8003192:	612c      	str	r4, [r5, #16]
 8003194:	616c      	str	r4, [r5, #20]
 8003196:	61ac      	str	r4, [r5, #24]
 8003198:	2208      	movs	r2, #8
 800319a:	2100      	movs	r1, #0
 800319c:	305c      	adds	r0, #92	; 0x5c
 800319e:	f7fd f82f 	bl	8000200 <memset>
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <__sinit.part.0+0xd0>)
 80031a4:	4f22      	ldr	r7, [pc, #136]	; (8003230 <__sinit.part.0+0xd4>)
 80031a6:	469a      	mov	sl, r3
 80031a8:	622b      	str	r3, [r5, #32]
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <__sinit.part.0+0xd8>)
 80031ac:	62ef      	str	r7, [r5, #44]	; 0x2c
 80031ae:	4699      	mov	r9, r3
 80031b0:	626b      	str	r3, [r5, #36]	; 0x24
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <__sinit.part.0+0xdc>)
 80031b4:	61ed      	str	r5, [r5, #28]
 80031b6:	62ab      	str	r3, [r5, #40]	; 0x28
 80031b8:	68b5      	ldr	r5, [r6, #8]
 80031ba:	4698      	mov	r8, r3
 80031bc:	0028      	movs	r0, r5
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <__sinit.part.0+0xe0>)
 80031c0:	666c      	str	r4, [r5, #100]	; 0x64
 80031c2:	602c      	str	r4, [r5, #0]
 80031c4:	606c      	str	r4, [r5, #4]
 80031c6:	60ac      	str	r4, [r5, #8]
 80031c8:	60eb      	str	r3, [r5, #12]
 80031ca:	612c      	str	r4, [r5, #16]
 80031cc:	616c      	str	r4, [r5, #20]
 80031ce:	61ac      	str	r4, [r5, #24]
 80031d0:	2208      	movs	r2, #8
 80031d2:	2100      	movs	r1, #0
 80031d4:	305c      	adds	r0, #92	; 0x5c
 80031d6:	f7fd f813 	bl	8000200 <memset>
 80031da:	4653      	mov	r3, sl
 80031dc:	622b      	str	r3, [r5, #32]
 80031de:	464b      	mov	r3, r9
 80031e0:	626b      	str	r3, [r5, #36]	; 0x24
 80031e2:	4643      	mov	r3, r8
 80031e4:	62ef      	str	r7, [r5, #44]	; 0x2c
 80031e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80031e8:	61ed      	str	r5, [r5, #28]
 80031ea:	68f5      	ldr	r5, [r6, #12]
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <__sinit.part.0+0xe4>)
 80031ee:	0028      	movs	r0, r5
 80031f0:	60eb      	str	r3, [r5, #12]
 80031f2:	666c      	str	r4, [r5, #100]	; 0x64
 80031f4:	602c      	str	r4, [r5, #0]
 80031f6:	606c      	str	r4, [r5, #4]
 80031f8:	60ac      	str	r4, [r5, #8]
 80031fa:	612c      	str	r4, [r5, #16]
 80031fc:	616c      	str	r4, [r5, #20]
 80031fe:	61ac      	str	r4, [r5, #24]
 8003200:	2208      	movs	r2, #8
 8003202:	2100      	movs	r1, #0
 8003204:	305c      	adds	r0, #92	; 0x5c
 8003206:	f7fc fffb 	bl	8000200 <memset>
 800320a:	4653      	mov	r3, sl
 800320c:	622b      	str	r3, [r5, #32]
 800320e:	464b      	mov	r3, r9
 8003210:	626b      	str	r3, [r5, #36]	; 0x24
 8003212:	4643      	mov	r3, r8
 8003214:	62ab      	str	r3, [r5, #40]	; 0x28
 8003216:	2301      	movs	r3, #1
 8003218:	62ef      	str	r7, [r5, #44]	; 0x2c
 800321a:	61ed      	str	r5, [r5, #28]
 800321c:	63b3      	str	r3, [r6, #56]	; 0x38
 800321e:	bc1c      	pop	{r2, r3, r4}
 8003220:	4690      	mov	r8, r2
 8003222:	4699      	mov	r9, r3
 8003224:	46a2      	mov	sl, r4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003228:	0800314d 	.word	0x0800314d
 800322c:	08003a21 	.word	0x08003a21
 8003230:	08003ab5 	.word	0x08003ab5
 8003234:	08003a4d 	.word	0x08003a4d
 8003238:	08003a89 	.word	0x08003a89
 800323c:	00010009 	.word	0x00010009
 8003240:	00020012 	.word	0x00020012

08003244 <__fp_unlock>:
 8003244:	2000      	movs	r0, #0
 8003246:	4770      	bx	lr

08003248 <__sfmoreglue>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	2468      	movs	r4, #104	; 0x68
 800324c:	1e4a      	subs	r2, r1, #1
 800324e:	4354      	muls	r4, r2
 8003250:	000e      	movs	r6, r1
 8003252:	0021      	movs	r1, r4
 8003254:	3174      	adds	r1, #116	; 0x74
 8003256:	f000 f8d1 	bl	80033fc <_malloc_r>
 800325a:	1e05      	subs	r5, r0, #0
 800325c:	d009      	beq.n	8003272 <__sfmoreglue+0x2a>
 800325e:	2300      	movs	r3, #0
 8003260:	0022      	movs	r2, r4
 8003262:	6003      	str	r3, [r0, #0]
 8003264:	6046      	str	r6, [r0, #4]
 8003266:	300c      	adds	r0, #12
 8003268:	60a8      	str	r0, [r5, #8]
 800326a:	3268      	adds	r2, #104	; 0x68
 800326c:	2100      	movs	r1, #0
 800326e:	f7fc ffc7 	bl	8000200 <memset>
 8003272:	0028      	movs	r0, r5
 8003274:	bd70      	pop	{r4, r5, r6, pc}
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <__sfp>:
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <__sfp+0x84>)
 800327a:	b570      	push	{r4, r5, r6, lr}
 800327c:	681d      	ldr	r5, [r3, #0]
 800327e:	0006      	movs	r6, r0
 8003280:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02a      	beq.n	80032dc <__sfp+0x64>
 8003286:	23b8      	movs	r3, #184	; 0xb8
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	469c      	mov	ip, r3
 800328c:	4465      	add	r5, ip
 800328e:	686b      	ldr	r3, [r5, #4]
 8003290:	68ac      	ldr	r4, [r5, #8]
 8003292:	3b01      	subs	r3, #1
 8003294:	d503      	bpl.n	800329e <__sfp+0x26>
 8003296:	e01c      	b.n	80032d2 <__sfp+0x5a>
 8003298:	3468      	adds	r4, #104	; 0x68
 800329a:	3b01      	subs	r3, #1
 800329c:	d319      	bcc.n	80032d2 <__sfp+0x5a>
 800329e:	210c      	movs	r1, #12
 80032a0:	5e62      	ldrsh	r2, [r4, r1]
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	d1f8      	bne.n	8003298 <__sfp+0x20>
 80032a6:	2500      	movs	r5, #0
 80032a8:	0020      	movs	r0, r4
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <__sfp+0x88>)
 80032ac:	6665      	str	r5, [r4, #100]	; 0x64
 80032ae:	6025      	str	r5, [r4, #0]
 80032b0:	6065      	str	r5, [r4, #4]
 80032b2:	60a5      	str	r5, [r4, #8]
 80032b4:	60e3      	str	r3, [r4, #12]
 80032b6:	6125      	str	r5, [r4, #16]
 80032b8:	6165      	str	r5, [r4, #20]
 80032ba:	61a5      	str	r5, [r4, #24]
 80032bc:	2208      	movs	r2, #8
 80032be:	2100      	movs	r1, #0
 80032c0:	305c      	adds	r0, #92	; 0x5c
 80032c2:	f7fc ff9d 	bl	8000200 <memset>
 80032c6:	6325      	str	r5, [r4, #48]	; 0x30
 80032c8:	6365      	str	r5, [r4, #52]	; 0x34
 80032ca:	6465      	str	r5, [r4, #68]	; 0x44
 80032cc:	64a5      	str	r5, [r4, #72]	; 0x48
 80032ce:	0020      	movs	r0, r4
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
 80032d2:	6828      	ldr	r0, [r5, #0]
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d005      	beq.n	80032e4 <__sfp+0x6c>
 80032d8:	0005      	movs	r5, r0
 80032da:	e7d8      	b.n	800328e <__sfp+0x16>
 80032dc:	0028      	movs	r0, r5
 80032de:	f7ff ff3d 	bl	800315c <__sinit.part.0>
 80032e2:	e7d0      	b.n	8003286 <__sfp+0xe>
 80032e4:	2104      	movs	r1, #4
 80032e6:	0030      	movs	r0, r6
 80032e8:	f7ff ffae 	bl	8003248 <__sfmoreglue>
 80032ec:	6028      	str	r0, [r5, #0]
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d1f2      	bne.n	80032d8 <__sfp+0x60>
 80032f2:	230c      	movs	r3, #12
 80032f4:	2400      	movs	r4, #0
 80032f6:	6033      	str	r3, [r6, #0]
 80032f8:	e7e9      	b.n	80032ce <__sfp+0x56>
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	08016a78 	.word	0x08016a78
 8003300:	ffff0001 	.word	0xffff0001

08003304 <_cleanup>:
 8003304:	b510      	push	{r4, lr}
 8003306:	4b03      	ldr	r3, [pc, #12]	; (8003314 <_cleanup+0x10>)
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <_cleanup+0x14>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	f000 f850 	bl	80033b0 <_fwalk_reent>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	08016a78 	.word	0x08016a78
 8003318:	08004d31 	.word	0x08004d31

0800331c <__sinit>:
 800331c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800331e:	b510      	push	{r4, lr}
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <__sinit+0xc>
 8003324:	f7ff ff1a 	bl	800315c <__sinit.part.0>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	46c0      	nop			; (mov r8, r8)

0800332c <__sfp_lock_acquire>:
 800332c:	4770      	bx	lr
 800332e:	46c0      	nop			; (mov r8, r8)

08003330 <__sfp_lock_release>:
 8003330:	4770      	bx	lr
 8003332:	46c0      	nop			; (mov r8, r8)

08003334 <__sinit_lock_acquire>:
 8003334:	4770      	bx	lr
 8003336:	46c0      	nop			; (mov r8, r8)

08003338 <__sinit_lock_release>:
 8003338:	4770      	bx	lr
 800333a:	46c0      	nop			; (mov r8, r8)

0800333c <__fp_lock_all>:
 800333c:	b510      	push	{r4, lr}
 800333e:	4b03      	ldr	r3, [pc, #12]	; (800334c <__fp_lock_all+0x10>)
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <__fp_lock_all+0x14>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	f000 f812 	bl	800336c <_fwalk>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	20000000 	.word	0x20000000
 8003350:	08003149 	.word	0x08003149

08003354 <__fp_unlock_all>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4b03      	ldr	r3, [pc, #12]	; (8003364 <__fp_unlock_all+0x10>)
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <__fp_unlock_all+0x14>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	f000 f806 	bl	800336c <_fwalk>
 8003360:	bd10      	pop	{r4, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20000000 	.word	0x20000000
 8003368:	08003245 	.word	0x08003245

0800336c <_fwalk>:
 800336c:	23b8      	movs	r3, #184	; 0xb8
 800336e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003370:	46c6      	mov	lr, r8
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18c7      	adds	r7, r0, r3
 8003376:	b500      	push	{lr}
 8003378:	4688      	mov	r8, r1
 800337a:	2600      	movs	r6, #0
 800337c:	2f00      	cmp	r7, #0
 800337e:	d013      	beq.n	80033a8 <_fwalk+0x3c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68bc      	ldr	r4, [r7, #8]
 8003384:	1e5d      	subs	r5, r3, #1
 8003386:	d40c      	bmi.n	80033a2 <_fwalk+0x36>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d906      	bls.n	800339c <_fwalk+0x30>
 800338e:	220e      	movs	r2, #14
 8003390:	5ea3      	ldrsh	r3, [r4, r2]
 8003392:	3301      	adds	r3, #1
 8003394:	d002      	beq.n	800339c <_fwalk+0x30>
 8003396:	0020      	movs	r0, r4
 8003398:	47c0      	blx	r8
 800339a:	4306      	orrs	r6, r0
 800339c:	3468      	adds	r4, #104	; 0x68
 800339e:	3d01      	subs	r5, #1
 80033a0:	d2f2      	bcs.n	8003388 <_fwalk+0x1c>
 80033a2:	683f      	ldr	r7, [r7, #0]
 80033a4:	2f00      	cmp	r7, #0
 80033a6:	d1eb      	bne.n	8003380 <_fwalk+0x14>
 80033a8:	0030      	movs	r0, r6
 80033aa:	bc04      	pop	{r2}
 80033ac:	4690      	mov	r8, r2
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b0 <_fwalk_reent>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	4647      	mov	r7, r8
 80033b4:	46ce      	mov	lr, r9
 80033b6:	b580      	push	{r7, lr}
 80033b8:	27b8      	movs	r7, #184	; 0xb8
 80033ba:	4680      	mov	r8, r0
 80033bc:	00bf      	lsls	r7, r7, #2
 80033be:	4447      	add	r7, r8
 80033c0:	4689      	mov	r9, r1
 80033c2:	2600      	movs	r6, #0
 80033c4:	2f00      	cmp	r7, #0
 80033c6:	d014      	beq.n	80033f2 <_fwalk_reent+0x42>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68bc      	ldr	r4, [r7, #8]
 80033cc:	1e5d      	subs	r5, r3, #1
 80033ce:	d40d      	bmi.n	80033ec <_fwalk_reent+0x3c>
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d907      	bls.n	80033e6 <_fwalk_reent+0x36>
 80033d6:	220e      	movs	r2, #14
 80033d8:	5ea3      	ldrsh	r3, [r4, r2]
 80033da:	3301      	adds	r3, #1
 80033dc:	d003      	beq.n	80033e6 <_fwalk_reent+0x36>
 80033de:	0021      	movs	r1, r4
 80033e0:	4640      	mov	r0, r8
 80033e2:	47c8      	blx	r9
 80033e4:	4306      	orrs	r6, r0
 80033e6:	3468      	adds	r4, #104	; 0x68
 80033e8:	3d01      	subs	r5, #1
 80033ea:	d2f1      	bcs.n	80033d0 <_fwalk_reent+0x20>
 80033ec:	683f      	ldr	r7, [r7, #0]
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d1ea      	bne.n	80033c8 <_fwalk_reent+0x18>
 80033f2:	0030      	movs	r0, r6
 80033f4:	bc0c      	pop	{r2, r3}
 80033f6:	4690      	mov	r8, r2
 80033f8:	4699      	mov	r9, r3
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033fc <_malloc_r>:
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	4657      	mov	r7, sl
 8003400:	4645      	mov	r5, r8
 8003402:	46de      	mov	lr, fp
 8003404:	464e      	mov	r6, r9
 8003406:	b5e0      	push	{r5, r6, r7, lr}
 8003408:	000d      	movs	r5, r1
 800340a:	350b      	adds	r5, #11
 800340c:	b083      	sub	sp, #12
 800340e:	0007      	movs	r7, r0
 8003410:	2d16      	cmp	r5, #22
 8003412:	d828      	bhi.n	8003466 <_malloc_r+0x6a>
 8003414:	2910      	cmp	r1, #16
 8003416:	d900      	bls.n	800341a <_malloc_r+0x1e>
 8003418:	e0c1      	b.n	800359e <_malloc_r+0x1a2>
 800341a:	f000 faeb 	bl	80039f4 <__malloc_lock>
 800341e:	2510      	movs	r5, #16
 8003420:	2318      	movs	r3, #24
 8003422:	2002      	movs	r0, #2
 8003424:	4ece      	ldr	r6, [pc, #824]	; (8003760 <_malloc_r+0x364>)
 8003426:	18f3      	adds	r3, r6, r3
 8003428:	001a      	movs	r2, r3
 800342a:	685c      	ldr	r4, [r3, #4]
 800342c:	3a08      	subs	r2, #8
 800342e:	4294      	cmp	r4, r2
 8003430:	d100      	bne.n	8003434 <_malloc_r+0x38>
 8003432:	e160      	b.n	80036f6 <_malloc_r+0x2fa>
 8003434:	2303      	movs	r3, #3
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	439a      	bics	r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	68e2      	ldr	r2, [r4, #12]
 800343e:	68a1      	ldr	r1, [r4, #8]
 8003440:	60ca      	str	r2, [r1, #12]
 8003442:	6091      	str	r1, [r2, #8]
 8003444:	2201      	movs	r2, #1
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	0038      	movs	r0, r7
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	f000 fad2 	bl	80039f8 <__malloc_unlock>
 8003454:	0020      	movs	r0, r4
 8003456:	3008      	adds	r0, #8
 8003458:	b003      	add	sp, #12
 800345a:	bc3c      	pop	{r2, r3, r4, r5}
 800345c:	4690      	mov	r8, r2
 800345e:	4699      	mov	r9, r3
 8003460:	46a2      	mov	sl, r4
 8003462:	46ab      	mov	fp, r5
 8003464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003466:	2307      	movs	r3, #7
 8003468:	439d      	bics	r5, r3
 800346a:	d500      	bpl.n	800346e <_malloc_r+0x72>
 800346c:	e097      	b.n	800359e <_malloc_r+0x1a2>
 800346e:	42a9      	cmp	r1, r5
 8003470:	d900      	bls.n	8003474 <_malloc_r+0x78>
 8003472:	e094      	b.n	800359e <_malloc_r+0x1a2>
 8003474:	f000 fabe 	bl	80039f4 <__malloc_lock>
 8003478:	23f8      	movs	r3, #248	; 0xf8
 800347a:	33ff      	adds	r3, #255	; 0xff
 800347c:	429d      	cmp	r5, r3
 800347e:	d800      	bhi.n	8003482 <_malloc_r+0x86>
 8003480:	e15e      	b.n	8003740 <_malloc_r+0x344>
 8003482:	0a68      	lsrs	r0, r5, #9
 8003484:	d100      	bne.n	8003488 <_malloc_r+0x8c>
 8003486:	e08e      	b.n	80035a6 <_malloc_r+0x1aa>
 8003488:	2804      	cmp	r0, #4
 800348a:	d900      	bls.n	800348e <_malloc_r+0x92>
 800348c:	e139      	b.n	8003702 <_malloc_r+0x306>
 800348e:	2338      	movs	r3, #56	; 0x38
 8003490:	4698      	mov	r8, r3
 8003492:	09a8      	lsrs	r0, r5, #6
 8003494:	4480      	add	r8, r0
 8003496:	3039      	adds	r0, #57	; 0x39
 8003498:	00c1      	lsls	r1, r0, #3
 800349a:	4eb1      	ldr	r6, [pc, #708]	; (8003760 <_malloc_r+0x364>)
 800349c:	1871      	adds	r1, r6, r1
 800349e:	3908      	subs	r1, #8
 80034a0:	68cc      	ldr	r4, [r1, #12]
 80034a2:	42a1      	cmp	r1, r4
 80034a4:	d018      	beq.n	80034d8 <_malloc_r+0xdc>
 80034a6:	2303      	movs	r3, #3
 80034a8:	6862      	ldr	r2, [r4, #4]
 80034aa:	439a      	bics	r2, r3
 80034ac:	0013      	movs	r3, r2
 80034ae:	1b52      	subs	r2, r2, r5
 80034b0:	2a0f      	cmp	r2, #15
 80034b2:	dd00      	ble.n	80034b6 <_malloc_r+0xba>
 80034b4:	e11d      	b.n	80036f2 <_malloc_r+0x2f6>
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	dac0      	bge.n	800343c <_malloc_r+0x40>
 80034ba:	2303      	movs	r3, #3
 80034bc:	469c      	mov	ip, r3
 80034be:	e008      	b.n	80034d2 <_malloc_r+0xd6>
 80034c0:	4662      	mov	r2, ip
 80034c2:	6863      	ldr	r3, [r4, #4]
 80034c4:	4393      	bics	r3, r2
 80034c6:	1b5a      	subs	r2, r3, r5
 80034c8:	2a0f      	cmp	r2, #15
 80034ca:	dd00      	ble.n	80034ce <_malloc_r+0xd2>
 80034cc:	e111      	b.n	80036f2 <_malloc_r+0x2f6>
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	dab4      	bge.n	800343c <_malloc_r+0x40>
 80034d2:	68e4      	ldr	r4, [r4, #12]
 80034d4:	42a1      	cmp	r1, r4
 80034d6:	d1f3      	bne.n	80034c0 <_malloc_r+0xc4>
 80034d8:	0032      	movs	r2, r6
 80034da:	6934      	ldr	r4, [r6, #16]
 80034dc:	3208      	adds	r2, #8
 80034de:	4294      	cmp	r4, r2
 80034e0:	d067      	beq.n	80035b2 <_malloc_r+0x1b6>
 80034e2:	2303      	movs	r3, #3
 80034e4:	6861      	ldr	r1, [r4, #4]
 80034e6:	4399      	bics	r1, r3
 80034e8:	468a      	mov	sl, r1
 80034ea:	000b      	movs	r3, r1
 80034ec:	1b49      	subs	r1, r1, r5
 80034ee:	290f      	cmp	r1, #15
 80034f0:	dd00      	ble.n	80034f4 <_malloc_r+0xf8>
 80034f2:	e112      	b.n	800371a <_malloc_r+0x31e>
 80034f4:	6172      	str	r2, [r6, #20]
 80034f6:	6132      	str	r2, [r6, #16]
 80034f8:	2900      	cmp	r1, #0
 80034fa:	daa3      	bge.n	8003444 <_malloc_r+0x48>
 80034fc:	4a99      	ldr	r2, [pc, #612]	; (8003764 <_malloc_r+0x368>)
 80034fe:	4592      	cmp	sl, r2
 8003500:	d900      	bls.n	8003504 <_malloc_r+0x108>
 8003502:	e148      	b.n	8003796 <_malloc_r+0x39a>
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	3aff      	subs	r2, #255	; 0xff
 8003508:	1099      	asrs	r1, r3, #2
 800350a:	3aff      	subs	r2, #255	; 0xff
 800350c:	408a      	lsls	r2, r1
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	6871      	ldr	r1, [r6, #4]
 8003512:	199b      	adds	r3, r3, r6
 8003514:	430a      	orrs	r2, r1
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	6072      	str	r2, [r6, #4]
 800351a:	60e3      	str	r3, [r4, #12]
 800351c:	60a1      	str	r1, [r4, #8]
 800351e:	609c      	str	r4, [r3, #8]
 8003520:	60cc      	str	r4, [r1, #12]
 8003522:	2101      	movs	r1, #1
 8003524:	1083      	asrs	r3, r0, #2
 8003526:	4099      	lsls	r1, r3
 8003528:	4291      	cmp	r1, r2
 800352a:	d848      	bhi.n	80035be <_malloc_r+0x1c2>
 800352c:	420a      	tst	r2, r1
 800352e:	d105      	bne.n	800353c <_malloc_r+0x140>
 8003530:	2303      	movs	r3, #3
 8003532:	4398      	bics	r0, r3
 8003534:	0049      	lsls	r1, r1, #1
 8003536:	3004      	adds	r0, #4
 8003538:	420a      	tst	r2, r1
 800353a:	d0fb      	beq.n	8003534 <_malloc_r+0x138>
 800353c:	2303      	movs	r3, #3
 800353e:	4698      	mov	r8, r3
 8003540:	00c3      	lsls	r3, r0, #3
 8003542:	4699      	mov	r9, r3
 8003544:	44b1      	add	r9, r6
 8003546:	46cc      	mov	ip, r9
 8003548:	4682      	mov	sl, r0
 800354a:	4663      	mov	r3, ip
 800354c:	68dc      	ldr	r4, [r3, #12]
 800354e:	45a4      	cmp	ip, r4
 8003550:	d107      	bne.n	8003562 <_malloc_r+0x166>
 8003552:	e0f9      	b.n	8003748 <_malloc_r+0x34c>
 8003554:	2a00      	cmp	r2, #0
 8003556:	db00      	blt.n	800355a <_malloc_r+0x15e>
 8003558:	e10e      	b.n	8003778 <_malloc_r+0x37c>
 800355a:	68e4      	ldr	r4, [r4, #12]
 800355c:	45a4      	cmp	ip, r4
 800355e:	d100      	bne.n	8003562 <_malloc_r+0x166>
 8003560:	e0f2      	b.n	8003748 <_malloc_r+0x34c>
 8003562:	4642      	mov	r2, r8
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	4393      	bics	r3, r2
 8003568:	1b5a      	subs	r2, r3, r5
 800356a:	2a0f      	cmp	r2, #15
 800356c:	ddf2      	ble.n	8003554 <_malloc_r+0x158>
 800356e:	2001      	movs	r0, #1
 8003570:	4680      	mov	r8, r0
 8003572:	1961      	adds	r1, r4, r5
 8003574:	4305      	orrs	r5, r0
 8003576:	6065      	str	r5, [r4, #4]
 8003578:	68a0      	ldr	r0, [r4, #8]
 800357a:	68e5      	ldr	r5, [r4, #12]
 800357c:	3608      	adds	r6, #8
 800357e:	60c5      	str	r5, [r0, #12]
 8003580:	60a8      	str	r0, [r5, #8]
 8003582:	4640      	mov	r0, r8
 8003584:	60f1      	str	r1, [r6, #12]
 8003586:	60b1      	str	r1, [r6, #8]
 8003588:	4310      	orrs	r0, r2
 800358a:	6048      	str	r0, [r1, #4]
 800358c:	60ce      	str	r6, [r1, #12]
 800358e:	608e      	str	r6, [r1, #8]
 8003590:	0038      	movs	r0, r7
 8003592:	50e2      	str	r2, [r4, r3]
 8003594:	f000 fa30 	bl	80039f8 <__malloc_unlock>
 8003598:	0020      	movs	r0, r4
 800359a:	3008      	adds	r0, #8
 800359c:	e75c      	b.n	8003458 <_malloc_r+0x5c>
 800359e:	230c      	movs	r3, #12
 80035a0:	2000      	movs	r0, #0
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	e758      	b.n	8003458 <_malloc_r+0x5c>
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	233f      	movs	r3, #63	; 0x3f
 80035aa:	0089      	lsls	r1, r1, #2
 80035ac:	2040      	movs	r0, #64	; 0x40
 80035ae:	4698      	mov	r8, r3
 80035b0:	e773      	b.n	800349a <_malloc_r+0x9e>
 80035b2:	2101      	movs	r1, #1
 80035b4:	6872      	ldr	r2, [r6, #4]
 80035b6:	1083      	asrs	r3, r0, #2
 80035b8:	4099      	lsls	r1, r3
 80035ba:	4291      	cmp	r1, r2
 80035bc:	d9b6      	bls.n	800352c <_malloc_r+0x130>
 80035be:	2303      	movs	r3, #3
 80035c0:	68b4      	ldr	r4, [r6, #8]
 80035c2:	6862      	ldr	r2, [r4, #4]
 80035c4:	439a      	bics	r2, r3
 80035c6:	4690      	mov	r8, r2
 80035c8:	42aa      	cmp	r2, r5
 80035ca:	d303      	bcc.n	80035d4 <_malloc_r+0x1d8>
 80035cc:	1b53      	subs	r3, r2, r5
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	dd00      	ble.n	80035d4 <_malloc_r+0x1d8>
 80035d2:	e080      	b.n	80036d6 <_malloc_r+0x2da>
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <_malloc_r+0x36c>)
 80035d6:	4a65      	ldr	r2, [pc, #404]	; (800376c <_malloc_r+0x370>)
 80035d8:	469a      	mov	sl, r3
 80035da:	4693      	mov	fp, r2
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	18eb      	adds	r3, r5, r3
 80035e2:	3201      	adds	r2, #1
 80035e4:	d100      	bne.n	80035e8 <_malloc_r+0x1ec>
 80035e6:	e138      	b.n	800385a <_malloc_r+0x45e>
 80035e8:	4a61      	ldr	r2, [pc, #388]	; (8003770 <_malloc_r+0x374>)
 80035ea:	4694      	mov	ip, r2
 80035ec:	4463      	add	r3, ip
 80035ee:	0b1b      	lsrs	r3, r3, #12
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	9900      	ldr	r1, [sp, #0]
 80035f6:	0038      	movs	r0, r7
 80035f8:	f000 fa00 	bl	80039fc <_sbrk_r>
 80035fc:	0003      	movs	r3, r0
 80035fe:	4681      	mov	r9, r0
 8003600:	3301      	adds	r3, #1
 8003602:	d100      	bne.n	8003606 <_malloc_r+0x20a>
 8003604:	e0f6      	b.n	80037f4 <_malloc_r+0x3f8>
 8003606:	4643      	mov	r3, r8
 8003608:	18e2      	adds	r2, r4, r3
 800360a:	4282      	cmp	r2, r0
 800360c:	d900      	bls.n	8003610 <_malloc_r+0x214>
 800360e:	e0ef      	b.n	80037f0 <_malloc_r+0x3f4>
 8003610:	4651      	mov	r1, sl
 8003612:	6849      	ldr	r1, [r1, #4]
 8003614:	9b00      	ldr	r3, [sp, #0]
 8003616:	468c      	mov	ip, r1
 8003618:	4651      	mov	r1, sl
 800361a:	4463      	add	r3, ip
 800361c:	604b      	str	r3, [r1, #4]
 800361e:	4282      	cmp	r2, r0
 8003620:	d100      	bne.n	8003624 <_malloc_r+0x228>
 8003622:	e14b      	b.n	80038bc <_malloc_r+0x4c0>
 8003624:	4659      	mov	r1, fp
 8003626:	6809      	ldr	r1, [r1, #0]
 8003628:	3101      	adds	r1, #1
 800362a:	d100      	bne.n	800362e <_malloc_r+0x232>
 800362c:	e15d      	b.n	80038ea <_malloc_r+0x4ee>
 800362e:	4649      	mov	r1, r9
 8003630:	1a8a      	subs	r2, r1, r2
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	4652      	mov	r2, sl
 8003636:	6053      	str	r3, [r2, #4]
 8003638:	2307      	movs	r3, #7
 800363a:	464a      	mov	r2, r9
 800363c:	401a      	ands	r2, r3
 800363e:	9201      	str	r2, [sp, #4]
 8003640:	d100      	bne.n	8003644 <_malloc_r+0x248>
 8003642:	e120      	b.n	8003886 <_malloc_r+0x48a>
 8003644:	2108      	movs	r1, #8
 8003646:	464b      	mov	r3, r9
 8003648:	4689      	mov	r9, r1
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	4499      	add	r9, r3
 800364e:	9900      	ldr	r1, [sp, #0]
 8003650:	4b48      	ldr	r3, [pc, #288]	; (8003774 <_malloc_r+0x378>)
 8003652:	4449      	add	r1, r9
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	051b      	lsls	r3, r3, #20
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	9100      	str	r1, [sp, #0]
 800365e:	0038      	movs	r0, r7
 8003660:	0019      	movs	r1, r3
 8003662:	469b      	mov	fp, r3
 8003664:	f000 f9ca 	bl	80039fc <_sbrk_r>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d100      	bne.n	800366e <_malloc_r+0x272>
 800366c:	e15a      	b.n	8003924 <_malloc_r+0x528>
 800366e:	4653      	mov	r3, sl
 8003670:	4652      	mov	r2, sl
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4649      	mov	r1, r9
 8003676:	445b      	add	r3, fp
 8003678:	6053      	str	r3, [r2, #4]
 800367a:	464a      	mov	r2, r9
 800367c:	60b2      	str	r2, [r6, #8]
 800367e:	1a80      	subs	r0, r0, r2
 8003680:	2201      	movs	r2, #1
 8003682:	4458      	add	r0, fp
 8003684:	4310      	orrs	r0, r2
 8003686:	6048      	str	r0, [r1, #4]
 8003688:	42b4      	cmp	r4, r6
 800368a:	d011      	beq.n	80036b0 <_malloc_r+0x2b4>
 800368c:	4641      	mov	r1, r8
 800368e:	290f      	cmp	r1, #15
 8003690:	d800      	bhi.n	8003694 <_malloc_r+0x298>
 8003692:	e127      	b.n	80038e4 <_malloc_r+0x4e8>
 8003694:	2007      	movs	r0, #7
 8003696:	390c      	subs	r1, #12
 8003698:	4381      	bics	r1, r0
 800369a:	6860      	ldr	r0, [r4, #4]
 800369c:	4002      	ands	r2, r0
 800369e:	2005      	movs	r0, #5
 80036a0:	430a      	orrs	r2, r1
 80036a2:	6062      	str	r2, [r4, #4]
 80036a4:	1862      	adds	r2, r4, r1
 80036a6:	6050      	str	r0, [r2, #4]
 80036a8:	6090      	str	r0, [r2, #8]
 80036aa:	290f      	cmp	r1, #15
 80036ac:	d900      	bls.n	80036b0 <_malloc_r+0x2b4>
 80036ae:	e141      	b.n	8003934 <_malloc_r+0x538>
 80036b0:	4652      	mov	r2, sl
 80036b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <_malloc_r+0x2c0>
 80036b8:	4652      	mov	r2, sl
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80036bc:	2203      	movs	r2, #3
 80036be:	68b4      	ldr	r4, [r6, #8]
 80036c0:	6861      	ldr	r1, [r4, #4]
 80036c2:	4391      	bics	r1, r2
 80036c4:	000a      	movs	r2, r1
 80036c6:	4651      	mov	r1, sl
 80036c8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80036ca:	428b      	cmp	r3, r1
 80036cc:	d800      	bhi.n	80036d0 <_malloc_r+0x2d4>
 80036ce:	e095      	b.n	80037fc <_malloc_r+0x400>
 80036d0:	4651      	mov	r1, sl
 80036d2:	630b      	str	r3, [r1, #48]	; 0x30
 80036d4:	e092      	b.n	80037fc <_malloc_r+0x400>
 80036d6:	2201      	movs	r2, #1
 80036d8:	0029      	movs	r1, r5
 80036da:	4313      	orrs	r3, r2
 80036dc:	4311      	orrs	r1, r2
 80036de:	1965      	adds	r5, r4, r5
 80036e0:	6061      	str	r1, [r4, #4]
 80036e2:	0038      	movs	r0, r7
 80036e4:	60b5      	str	r5, [r6, #8]
 80036e6:	606b      	str	r3, [r5, #4]
 80036e8:	f000 f986 	bl	80039f8 <__malloc_unlock>
 80036ec:	0020      	movs	r0, r4
 80036ee:	3008      	adds	r0, #8
 80036f0:	e6b2      	b.n	8003458 <_malloc_r+0x5c>
 80036f2:	4640      	mov	r0, r8
 80036f4:	e6f0      	b.n	80034d8 <_malloc_r+0xdc>
 80036f6:	68dc      	ldr	r4, [r3, #12]
 80036f8:	3002      	adds	r0, #2
 80036fa:	42a3      	cmp	r3, r4
 80036fc:	d100      	bne.n	8003700 <_malloc_r+0x304>
 80036fe:	e6eb      	b.n	80034d8 <_malloc_r+0xdc>
 8003700:	e698      	b.n	8003434 <_malloc_r+0x38>
 8003702:	2814      	cmp	r0, #20
 8003704:	d96e      	bls.n	80037e4 <_malloc_r+0x3e8>
 8003706:	2854      	cmp	r0, #84	; 0x54
 8003708:	d900      	bls.n	800370c <_malloc_r+0x310>
 800370a:	e0a9      	b.n	8003860 <_malloc_r+0x464>
 800370c:	236e      	movs	r3, #110	; 0x6e
 800370e:	4698      	mov	r8, r3
 8003710:	0b28      	lsrs	r0, r5, #12
 8003712:	4480      	add	r8, r0
 8003714:	306f      	adds	r0, #111	; 0x6f
 8003716:	00c1      	lsls	r1, r0, #3
 8003718:	e6bf      	b.n	800349a <_malloc_r+0x9e>
 800371a:	2301      	movs	r3, #1
 800371c:	1960      	adds	r0, r4, r5
 800371e:	431d      	orrs	r5, r3
 8003720:	6065      	str	r5, [r4, #4]
 8003722:	6170      	str	r0, [r6, #20]
 8003724:	6130      	str	r0, [r6, #16]
 8003726:	60c2      	str	r2, [r0, #12]
 8003728:	6082      	str	r2, [r0, #8]
 800372a:	001a      	movs	r2, r3
 800372c:	4653      	mov	r3, sl
 800372e:	430a      	orrs	r2, r1
 8003730:	6042      	str	r2, [r0, #4]
 8003732:	0038      	movs	r0, r7
 8003734:	50e1      	str	r1, [r4, r3]
 8003736:	f000 f95f 	bl	80039f8 <__malloc_unlock>
 800373a:	0020      	movs	r0, r4
 800373c:	3008      	adds	r0, #8
 800373e:	e68b      	b.n	8003458 <_malloc_r+0x5c>
 8003740:	002b      	movs	r3, r5
 8003742:	08e8      	lsrs	r0, r5, #3
 8003744:	3308      	adds	r3, #8
 8003746:	e66d      	b.n	8003424 <_malloc_r+0x28>
 8003748:	2308      	movs	r3, #8
 800374a:	469b      	mov	fp, r3
 800374c:	3b07      	subs	r3, #7
 800374e:	44dc      	add	ip, fp
 8003750:	469b      	mov	fp, r3
 8003752:	44da      	add	sl, fp
 8003754:	4643      	mov	r3, r8
 8003756:	4652      	mov	r2, sl
 8003758:	4213      	tst	r3, r2
 800375a:	d000      	beq.n	800375e <_malloc_r+0x362>
 800375c:	e6f5      	b.n	800354a <_malloc_r+0x14e>
 800375e:	e067      	b.n	8003830 <_malloc_r+0x434>
 8003760:	20000444 	.word	0x20000444
 8003764:	000001ff 	.word	0x000001ff
 8003768:	20000be0 	.word	0x20000be0
 800376c:	2000043c 	.word	0x2000043c
 8003770:	0000100f 	.word	0x0000100f
 8003774:	00001008 	.word	0x00001008
 8003778:	2201      	movs	r2, #1
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	0038      	movs	r0, r7
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	68e3      	ldr	r3, [r4, #12]
 8003786:	68a2      	ldr	r2, [r4, #8]
 8003788:	60d3      	str	r3, [r2, #12]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	f000 f934 	bl	80039f8 <__malloc_unlock>
 8003790:	0020      	movs	r0, r4
 8003792:	3008      	adds	r0, #8
 8003794:	e660      	b.n	8003458 <_malloc_r+0x5c>
 8003796:	0a5a      	lsrs	r2, r3, #9
 8003798:	2a04      	cmp	r2, #4
 800379a:	d93a      	bls.n	8003812 <_malloc_r+0x416>
 800379c:	2a14      	cmp	r2, #20
 800379e:	d900      	bls.n	80037a2 <_malloc_r+0x3a6>
 80037a0:	e083      	b.n	80038aa <_malloc_r+0x4ae>
 80037a2:	235b      	movs	r3, #91	; 0x5b
 80037a4:	4698      	mov	r8, r3
 80037a6:	4490      	add	r8, r2
 80037a8:	325c      	adds	r2, #92	; 0x5c
 80037aa:	00d2      	lsls	r2, r2, #3
 80037ac:	2308      	movs	r3, #8
 80037ae:	425b      	negs	r3, r3
 80037b0:	469c      	mov	ip, r3
 80037b2:	18b2      	adds	r2, r6, r2
 80037b4:	4494      	add	ip, r2
 80037b6:	4663      	mov	r3, ip
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	2303      	movs	r3, #3
 80037bc:	4699      	mov	r9, r3
 80037be:	458c      	cmp	ip, r1
 80037c0:	d059      	beq.n	8003876 <_malloc_r+0x47a>
 80037c2:	464b      	mov	r3, r9
 80037c4:	684a      	ldr	r2, [r1, #4]
 80037c6:	439a      	bics	r2, r3
 80037c8:	4552      	cmp	r2, sl
 80037ca:	d902      	bls.n	80037d2 <_malloc_r+0x3d6>
 80037cc:	6889      	ldr	r1, [r1, #8]
 80037ce:	458c      	cmp	ip, r1
 80037d0:	d1f7      	bne.n	80037c2 <_malloc_r+0x3c6>
 80037d2:	68cb      	ldr	r3, [r1, #12]
 80037d4:	6872      	ldr	r2, [r6, #4]
 80037d6:	469c      	mov	ip, r3
 80037d8:	4663      	mov	r3, ip
 80037da:	60a1      	str	r1, [r4, #8]
 80037dc:	60e3      	str	r3, [r4, #12]
 80037de:	609c      	str	r4, [r3, #8]
 80037e0:	60cc      	str	r4, [r1, #12]
 80037e2:	e69e      	b.n	8003522 <_malloc_r+0x126>
 80037e4:	235b      	movs	r3, #91	; 0x5b
 80037e6:	4698      	mov	r8, r3
 80037e8:	4480      	add	r8, r0
 80037ea:	305c      	adds	r0, #92	; 0x5c
 80037ec:	00c1      	lsls	r1, r0, #3
 80037ee:	e654      	b.n	800349a <_malloc_r+0x9e>
 80037f0:	42b4      	cmp	r4, r6
 80037f2:	d07e      	beq.n	80038f2 <_malloc_r+0x4f6>
 80037f4:	2303      	movs	r3, #3
 80037f6:	68b4      	ldr	r4, [r6, #8]
 80037f8:	6862      	ldr	r2, [r4, #4]
 80037fa:	439a      	bics	r2, r3
 80037fc:	1b53      	subs	r3, r2, r5
 80037fe:	4295      	cmp	r5, r2
 8003800:	d802      	bhi.n	8003808 <_malloc_r+0x40c>
 8003802:	2b0f      	cmp	r3, #15
 8003804:	dd00      	ble.n	8003808 <_malloc_r+0x40c>
 8003806:	e766      	b.n	80036d6 <_malloc_r+0x2da>
 8003808:	0038      	movs	r0, r7
 800380a:	f000 f8f5 	bl	80039f8 <__malloc_unlock>
 800380e:	2000      	movs	r0, #0
 8003810:	e622      	b.n	8003458 <_malloc_r+0x5c>
 8003812:	099a      	lsrs	r2, r3, #6
 8003814:	2338      	movs	r3, #56	; 0x38
 8003816:	4698      	mov	r8, r3
 8003818:	4490      	add	r8, r2
 800381a:	3239      	adds	r2, #57	; 0x39
 800381c:	00d2      	lsls	r2, r2, #3
 800381e:	e7c5      	b.n	80037ac <_malloc_r+0x3b0>
 8003820:	464b      	mov	r3, r9
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	3b08      	subs	r3, #8
 8003826:	3801      	subs	r0, #1
 8003828:	4691      	mov	r9, r2
 800382a:	429a      	cmp	r2, r3
 800382c:	d000      	beq.n	8003830 <_malloc_r+0x434>
 800382e:	e098      	b.n	8003962 <_malloc_r+0x566>
 8003830:	4643      	mov	r3, r8
 8003832:	4203      	tst	r3, r0
 8003834:	d1f4      	bne.n	8003820 <_malloc_r+0x424>
 8003836:	6873      	ldr	r3, [r6, #4]
 8003838:	438b      	bics	r3, r1
 800383a:	6073      	str	r3, [r6, #4]
 800383c:	0049      	lsls	r1, r1, #1
 800383e:	4299      	cmp	r1, r3
 8003840:	d900      	bls.n	8003844 <_malloc_r+0x448>
 8003842:	e6bc      	b.n	80035be <_malloc_r+0x1c2>
 8003844:	2900      	cmp	r1, #0
 8003846:	d104      	bne.n	8003852 <_malloc_r+0x456>
 8003848:	e6b9      	b.n	80035be <_malloc_r+0x1c2>
 800384a:	2204      	movs	r2, #4
 800384c:	4694      	mov	ip, r2
 800384e:	0049      	lsls	r1, r1, #1
 8003850:	44e2      	add	sl, ip
 8003852:	420b      	tst	r3, r1
 8003854:	d0f9      	beq.n	800384a <_malloc_r+0x44e>
 8003856:	4650      	mov	r0, sl
 8003858:	e672      	b.n	8003540 <_malloc_r+0x144>
 800385a:	3310      	adds	r3, #16
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	e6c9      	b.n	80035f4 <_malloc_r+0x1f8>
 8003860:	23aa      	movs	r3, #170	; 0xaa
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4298      	cmp	r0, r3
 8003866:	d833      	bhi.n	80038d0 <_malloc_r+0x4d4>
 8003868:	3bdd      	subs	r3, #221	; 0xdd
 800386a:	4698      	mov	r8, r3
 800386c:	0be8      	lsrs	r0, r5, #15
 800386e:	4480      	add	r8, r0
 8003870:	3078      	adds	r0, #120	; 0x78
 8003872:	00c1      	lsls	r1, r0, #3
 8003874:	e611      	b.n	800349a <_malloc_r+0x9e>
 8003876:	4643      	mov	r3, r8
 8003878:	2201      	movs	r2, #1
 800387a:	109b      	asrs	r3, r3, #2
 800387c:	409a      	lsls	r2, r3
 800387e:	6873      	ldr	r3, [r6, #4]
 8003880:	431a      	orrs	r2, r3
 8003882:	6072      	str	r2, [r6, #4]
 8003884:	e7a8      	b.n	80037d8 <_malloc_r+0x3dc>
 8003886:	9b00      	ldr	r3, [sp, #0]
 8003888:	0038      	movs	r0, r7
 800388a:	444b      	add	r3, r9
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	051b      	lsls	r3, r3, #20
 8003890:	425b      	negs	r3, r3
 8003892:	0d1b      	lsrs	r3, r3, #20
 8003894:	0019      	movs	r1, r3
 8003896:	469b      	mov	fp, r3
 8003898:	f000 f8b0 	bl	80039fc <_sbrk_r>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d000      	beq.n	80038a2 <_malloc_r+0x4a6>
 80038a0:	e6e5      	b.n	800366e <_malloc_r+0x272>
 80038a2:	2300      	movs	r3, #0
 80038a4:	9800      	ldr	r0, [sp, #0]
 80038a6:	469b      	mov	fp, r3
 80038a8:	e6e1      	b.n	800366e <_malloc_r+0x272>
 80038aa:	2a54      	cmp	r2, #84	; 0x54
 80038ac:	d829      	bhi.n	8003902 <_malloc_r+0x506>
 80038ae:	0b1a      	lsrs	r2, r3, #12
 80038b0:	236e      	movs	r3, #110	; 0x6e
 80038b2:	4698      	mov	r8, r3
 80038b4:	4490      	add	r8, r2
 80038b6:	326f      	adds	r2, #111	; 0x6f
 80038b8:	00d2      	lsls	r2, r2, #3
 80038ba:	e777      	b.n	80037ac <_malloc_r+0x3b0>
 80038bc:	0511      	lsls	r1, r2, #20
 80038be:	d000      	beq.n	80038c2 <_malloc_r+0x4c6>
 80038c0:	e6b0      	b.n	8003624 <_malloc_r+0x228>
 80038c2:	2001      	movs	r0, #1
 80038c4:	9a00      	ldr	r2, [sp, #0]
 80038c6:	68b1      	ldr	r1, [r6, #8]
 80038c8:	4442      	add	r2, r8
 80038ca:	4302      	orrs	r2, r0
 80038cc:	604a      	str	r2, [r1, #4]
 80038ce:	e6ef      	b.n	80036b0 <_malloc_r+0x2b4>
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <_malloc_r+0x56c>)
 80038d2:	4298      	cmp	r0, r3
 80038d4:	d820      	bhi.n	8003918 <_malloc_r+0x51c>
 80038d6:	237c      	movs	r3, #124	; 0x7c
 80038d8:	4698      	mov	r8, r3
 80038da:	0ca8      	lsrs	r0, r5, #18
 80038dc:	4480      	add	r8, r0
 80038de:	307d      	adds	r0, #125	; 0x7d
 80038e0:	00c1      	lsls	r1, r0, #3
 80038e2:	e5da      	b.n	800349a <_malloc_r+0x9e>
 80038e4:	464b      	mov	r3, r9
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	e78e      	b.n	8003808 <_malloc_r+0x40c>
 80038ea:	465b      	mov	r3, fp
 80038ec:	464a      	mov	r2, r9
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e6a2      	b.n	8003638 <_malloc_r+0x23c>
 80038f2:	4651      	mov	r1, sl
 80038f4:	6849      	ldr	r1, [r1, #4]
 80038f6:	9b00      	ldr	r3, [sp, #0]
 80038f8:	468c      	mov	ip, r1
 80038fa:	4651      	mov	r1, sl
 80038fc:	4463      	add	r3, ip
 80038fe:	604b      	str	r3, [r1, #4]
 8003900:	e690      	b.n	8003624 <_malloc_r+0x228>
 8003902:	21aa      	movs	r1, #170	; 0xaa
 8003904:	0049      	lsls	r1, r1, #1
 8003906:	428a      	cmp	r2, r1
 8003908:	d81c      	bhi.n	8003944 <_malloc_r+0x548>
 800390a:	0bda      	lsrs	r2, r3, #15
 800390c:	2377      	movs	r3, #119	; 0x77
 800390e:	4698      	mov	r8, r3
 8003910:	4490      	add	r8, r2
 8003912:	3278      	adds	r2, #120	; 0x78
 8003914:	00d2      	lsls	r2, r2, #3
 8003916:	e749      	b.n	80037ac <_malloc_r+0x3b0>
 8003918:	21fe      	movs	r1, #254	; 0xfe
 800391a:	237e      	movs	r3, #126	; 0x7e
 800391c:	0089      	lsls	r1, r1, #2
 800391e:	207f      	movs	r0, #127	; 0x7f
 8003920:	4698      	mov	r8, r3
 8003922:	e5ba      	b.n	800349a <_malloc_r+0x9e>
 8003924:	9b00      	ldr	r3, [sp, #0]
 8003926:	9801      	ldr	r0, [sp, #4]
 8003928:	469c      	mov	ip, r3
 800392a:	2300      	movs	r3, #0
 800392c:	3808      	subs	r0, #8
 800392e:	4460      	add	r0, ip
 8003930:	469b      	mov	fp, r3
 8003932:	e69c      	b.n	800366e <_malloc_r+0x272>
 8003934:	0021      	movs	r1, r4
 8003936:	0038      	movs	r0, r7
 8003938:	3108      	adds	r1, #8
 800393a:	f001 fb6f 	bl	800501c <_free_r>
 800393e:	4653      	mov	r3, sl
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	e6b5      	b.n	80036b0 <_malloc_r+0x2b4>
 8003944:	4908      	ldr	r1, [pc, #32]	; (8003968 <_malloc_r+0x56c>)
 8003946:	428a      	cmp	r2, r1
 8003948:	d806      	bhi.n	8003958 <_malloc_r+0x55c>
 800394a:	0c9a      	lsrs	r2, r3, #18
 800394c:	237c      	movs	r3, #124	; 0x7c
 800394e:	4698      	mov	r8, r3
 8003950:	4490      	add	r8, r2
 8003952:	327d      	adds	r2, #125	; 0x7d
 8003954:	00d2      	lsls	r2, r2, #3
 8003956:	e729      	b.n	80037ac <_malloc_r+0x3b0>
 8003958:	22fe      	movs	r2, #254	; 0xfe
 800395a:	237e      	movs	r3, #126	; 0x7e
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4698      	mov	r8, r3
 8003960:	e724      	b.n	80037ac <_malloc_r+0x3b0>
 8003962:	6873      	ldr	r3, [r6, #4]
 8003964:	e76a      	b.n	800383c <_malloc_r+0x440>
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	00000554 	.word	0x00000554

0800396c <memcpy>:
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396e:	2a0f      	cmp	r2, #15
 8003970:	d937      	bls.n	80039e2 <memcpy+0x76>
 8003972:	000d      	movs	r5, r1
 8003974:	4305      	orrs	r5, r0
 8003976:	000c      	movs	r4, r1
 8003978:	0003      	movs	r3, r0
 800397a:	07ad      	lsls	r5, r5, #30
 800397c:	d135      	bne.n	80039ea <memcpy+0x7e>
 800397e:	0015      	movs	r5, r2
 8003980:	3d10      	subs	r5, #16
 8003982:	092d      	lsrs	r5, r5, #4
 8003984:	012e      	lsls	r6, r5, #4
 8003986:	1836      	adds	r6, r6, r0
 8003988:	3610      	adds	r6, #16
 800398a:	6827      	ldr	r7, [r4, #0]
 800398c:	601f      	str	r7, [r3, #0]
 800398e:	6867      	ldr	r7, [r4, #4]
 8003990:	605f      	str	r7, [r3, #4]
 8003992:	68a7      	ldr	r7, [r4, #8]
 8003994:	609f      	str	r7, [r3, #8]
 8003996:	68e7      	ldr	r7, [r4, #12]
 8003998:	3410      	adds	r4, #16
 800399a:	60df      	str	r7, [r3, #12]
 800399c:	3310      	adds	r3, #16
 800399e:	42b3      	cmp	r3, r6
 80039a0:	d1f3      	bne.n	800398a <memcpy+0x1e>
 80039a2:	240f      	movs	r4, #15
 80039a4:	3501      	adds	r5, #1
 80039a6:	012d      	lsls	r5, r5, #4
 80039a8:	1949      	adds	r1, r1, r5
 80039aa:	4014      	ands	r4, r2
 80039ac:	1945      	adds	r5, r0, r5
 80039ae:	2c03      	cmp	r4, #3
 80039b0:	d91d      	bls.n	80039ee <memcpy+0x82>
 80039b2:	2300      	movs	r3, #0
 80039b4:	58ce      	ldr	r6, [r1, r3]
 80039b6:	50ee      	str	r6, [r5, r3]
 80039b8:	3304      	adds	r3, #4
 80039ba:	1ae6      	subs	r6, r4, r3
 80039bc:	2e03      	cmp	r6, #3
 80039be:	d8f9      	bhi.n	80039b4 <memcpy+0x48>
 80039c0:	2303      	movs	r3, #3
 80039c2:	3c04      	subs	r4, #4
 80039c4:	08a4      	lsrs	r4, r4, #2
 80039c6:	3401      	adds	r4, #1
 80039c8:	00a4      	lsls	r4, r4, #2
 80039ca:	401a      	ands	r2, r3
 80039cc:	192d      	adds	r5, r5, r4
 80039ce:	1909      	adds	r1, r1, r4
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d005      	beq.n	80039e0 <memcpy+0x74>
 80039d4:	2300      	movs	r3, #0
 80039d6:	5ccc      	ldrb	r4, [r1, r3]
 80039d8:	54ec      	strb	r4, [r5, r3]
 80039da:	3301      	adds	r3, #1
 80039dc:	4293      	cmp	r3, r2
 80039de:	d1fa      	bne.n	80039d6 <memcpy+0x6a>
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e2:	0005      	movs	r5, r0
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d1f5      	bne.n	80039d4 <memcpy+0x68>
 80039e8:	e7fa      	b.n	80039e0 <memcpy+0x74>
 80039ea:	0005      	movs	r5, r0
 80039ec:	e7f2      	b.n	80039d4 <memcpy+0x68>
 80039ee:	0022      	movs	r2, r4
 80039f0:	e7f8      	b.n	80039e4 <memcpy+0x78>
 80039f2:	46c0      	nop			; (mov r8, r8)

080039f4 <__malloc_lock>:
 80039f4:	4770      	bx	lr
 80039f6:	46c0      	nop			; (mov r8, r8)

080039f8 <__malloc_unlock>:
 80039f8:	4770      	bx	lr
 80039fa:	46c0      	nop			; (mov r8, r8)

080039fc <_sbrk_r>:
 80039fc:	2300      	movs	r3, #0
 80039fe:	b570      	push	{r4, r5, r6, lr}
 8003a00:	4c06      	ldr	r4, [pc, #24]	; (8003a1c <_sbrk_r+0x20>)
 8003a02:	0005      	movs	r5, r0
 8003a04:	0008      	movs	r0, r1
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	f7fc fdf8 	bl	80005fc <_sbrk>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d000      	beq.n	8003a12 <_sbrk_r+0x16>
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0fb      	beq.n	8003a10 <_sbrk_r+0x14>
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	e7f9      	b.n	8003a10 <_sbrk_r+0x14>
 8003a1c:	20002350 	.word	0x20002350

08003a20 <__sread>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	000c      	movs	r4, r1
 8003a24:	250e      	movs	r5, #14
 8003a26:	5f49      	ldrsh	r1, [r1, r5]
 8003a28:	f002 f912 	bl	8005c50 <_read_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	db03      	blt.n	8003a38 <__sread+0x18>
 8003a30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a32:	181b      	adds	r3, r3, r0
 8003a34:	6523      	str	r3, [r4, #80]	; 0x50
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <__sread+0x24>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	e7f9      	b.n	8003a36 <__sread+0x16>
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	ffffefff 	.word	0xffffefff

08003a48 <__seofread>:
 8003a48:	2000      	movs	r0, #0
 8003a4a:	4770      	bx	lr

08003a4c <__swrite>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	0016      	movs	r6, r2
 8003a50:	001f      	movs	r7, r3
 8003a52:	220c      	movs	r2, #12
 8003a54:	5e8b      	ldrsh	r3, [r1, r2]
 8003a56:	000c      	movs	r4, r1
 8003a58:	0005      	movs	r5, r0
 8003a5a:	220e      	movs	r2, #14
 8003a5c:	5e89      	ldrsh	r1, [r1, r2]
 8003a5e:	05da      	lsls	r2, r3, #23
 8003a60:	d507      	bpl.n	8003a72 <__swrite+0x26>
 8003a62:	2200      	movs	r2, #0
 8003a64:	2302      	movs	r3, #2
 8003a66:	f001 fbdd 	bl	8005224 <_lseek_r>
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	5ea3      	ldrsh	r3, [r4, r2]
 8003a6e:	220e      	movs	r2, #14
 8003a70:	5ea1      	ldrsh	r1, [r4, r2]
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <__swrite+0x38>)
 8003a74:	0028      	movs	r0, r5
 8003a76:	4013      	ands	r3, r2
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	0032      	movs	r2, r6
 8003a7c:	003b      	movs	r3, r7
 8003a7e:	f000 f8e1 	bl	8003c44 <_write_r>
 8003a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a84:	ffffefff 	.word	0xffffefff

08003a88 <__sseek>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	000c      	movs	r4, r1
 8003a8c:	250e      	movs	r5, #14
 8003a8e:	5f49      	ldrsh	r1, [r1, r5]
 8003a90:	f001 fbc8 	bl	8005224 <_lseek_r>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d006      	beq.n	8003aa6 <__sseek+0x1e>
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	89a2      	ldrh	r2, [r4, #12]
 8003a9c:	015b      	lsls	r3, r3, #5
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	6520      	str	r0, [r4, #80]	; 0x50
 8003aa4:	bd70      	pop	{r4, r5, r6, pc}
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	4a01      	ldr	r2, [pc, #4]	; (8003ab0 <__sseek+0x28>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	e7f9      	b.n	8003aa4 <__sseek+0x1c>
 8003ab0:	ffffefff 	.word	0xffffefff

08003ab4 <__sclose>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	230e      	movs	r3, #14
 8003ab8:	5ec9      	ldrsh	r1, [r1, r3]
 8003aba:	f000 f8d7 	bl	8003c6c <_close_r>
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <strlen>:
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	0004      	movs	r4, r0
 8003ac4:	0783      	lsls	r3, r0, #30
 8003ac6:	d00a      	beq.n	8003ade <strlen+0x1e>
 8003ac8:	7803      	ldrb	r3, [r0, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <strlen+0x56>
 8003ace:	2203      	movs	r2, #3
 8003ad0:	e002      	b.n	8003ad8 <strlen+0x18>
 8003ad2:	7803      	ldrb	r3, [r0, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <strlen+0x52>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	4210      	tst	r0, r2
 8003adc:	d1f9      	bne.n	8003ad2 <strlen+0x12>
 8003ade:	6802      	ldr	r2, [r0, #0]
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <strlen+0x5c>)
 8003ae2:	490f      	ldr	r1, [pc, #60]	; (8003b20 <strlen+0x60>)
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	420b      	tst	r3, r1
 8003aea:	d10f      	bne.n	8003b0c <strlen+0x4c>
 8003aec:	3004      	adds	r0, #4
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <strlen+0x5c>)
 8003af2:	18d3      	adds	r3, r2, r3
 8003af4:	4393      	bics	r3, r2
 8003af6:	420b      	tst	r3, r1
 8003af8:	d108      	bne.n	8003b0c <strlen+0x4c>
 8003afa:	3004      	adds	r0, #4
 8003afc:	6802      	ldr	r2, [r0, #0]
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <strlen+0x5c>)
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	4393      	bics	r3, r2
 8003b04:	420b      	tst	r3, r1
 8003b06:	d0f1      	beq.n	8003aec <strlen+0x2c>
 8003b08:	e000      	b.n	8003b0c <strlen+0x4c>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	7803      	ldrb	r3, [r0, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1fb      	bne.n	8003b0a <strlen+0x4a>
 8003b12:	1b00      	subs	r0, r0, r4
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	2000      	movs	r0, #0
 8003b18:	e7fc      	b.n	8003b14 <strlen+0x54>
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	fefefeff 	.word	0xfefefeff
 8003b20:	80808080 	.word	0x80808080

08003b24 <strncmp>:
 8003b24:	b530      	push	{r4, r5, lr}
 8003b26:	2400      	movs	r4, #0
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d039      	beq.n	8003ba0 <strncmp+0x7c>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	079b      	lsls	r3, r3, #30
 8003b32:	d120      	bne.n	8003b76 <strncmp+0x52>
 8003b34:	2a03      	cmp	r2, #3
 8003b36:	d91e      	bls.n	8003b76 <strncmp+0x52>
 8003b38:	6803      	ldr	r3, [r0, #0]
 8003b3a:	680d      	ldr	r5, [r1, #0]
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	d11a      	bne.n	8003b76 <strncmp+0x52>
 8003b40:	3a04      	subs	r2, #4
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d02c      	beq.n	8003ba0 <strncmp+0x7c>
 8003b46:	4d18      	ldr	r5, [pc, #96]	; (8003ba8 <strncmp+0x84>)
 8003b48:	195d      	adds	r5, r3, r5
 8003b4a:	439d      	bics	r5, r3
 8003b4c:	002b      	movs	r3, r5
 8003b4e:	4d17      	ldr	r5, [pc, #92]	; (8003bac <strncmp+0x88>)
 8003b50:	422b      	tst	r3, r5
 8003b52:	d00c      	beq.n	8003b6e <strncmp+0x4a>
 8003b54:	e024      	b.n	8003ba0 <strncmp+0x7c>
 8003b56:	6803      	ldr	r3, [r0, #0]
 8003b58:	680c      	ldr	r4, [r1, #0]
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	d10b      	bne.n	8003b76 <strncmp+0x52>
 8003b5e:	3a04      	subs	r2, #4
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d01f      	beq.n	8003ba4 <strncmp+0x80>
 8003b64:	4c10      	ldr	r4, [pc, #64]	; (8003ba8 <strncmp+0x84>)
 8003b66:	191c      	adds	r4, r3, r4
 8003b68:	439c      	bics	r4, r3
 8003b6a:	422c      	tst	r4, r5
 8003b6c:	d11a      	bne.n	8003ba4 <strncmp+0x80>
 8003b6e:	3004      	adds	r0, #4
 8003b70:	3104      	adds	r1, #4
 8003b72:	2a03      	cmp	r2, #3
 8003b74:	d8ef      	bhi.n	8003b56 <strncmp+0x32>
 8003b76:	7804      	ldrb	r4, [r0, #0]
 8003b78:	780d      	ldrb	r5, [r1, #0]
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	42a5      	cmp	r5, r4
 8003b7e:	d10e      	bne.n	8003b9e <strncmp+0x7a>
 8003b80:	2a00      	cmp	r2, #0
 8003b82:	d00f      	beq.n	8003ba4 <strncmp+0x80>
 8003b84:	2d00      	cmp	r5, #0
 8003b86:	d00d      	beq.n	8003ba4 <strncmp+0x80>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e004      	b.n	8003b96 <strncmp+0x72>
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d009      	beq.n	8003ba4 <strncmp+0x80>
 8003b90:	3301      	adds	r3, #1
 8003b92:	2c00      	cmp	r4, #0
 8003b94:	d006      	beq.n	8003ba4 <strncmp+0x80>
 8003b96:	5cc4      	ldrb	r4, [r0, r3]
 8003b98:	5ccd      	ldrb	r5, [r1, r3]
 8003b9a:	42ac      	cmp	r4, r5
 8003b9c:	d0f6      	beq.n	8003b8c <strncmp+0x68>
 8003b9e:	1b64      	subs	r4, r4, r5
 8003ba0:	0020      	movs	r0, r4
 8003ba2:	bd30      	pop	{r4, r5, pc}
 8003ba4:	2400      	movs	r4, #0
 8003ba6:	e7fb      	b.n	8003ba0 <strncmp+0x7c>
 8003ba8:	fefefeff 	.word	0xfefefeff
 8003bac:	80808080 	.word	0x80808080

08003bb0 <_vsnprintf_r>:
 8003bb0:	b530      	push	{r4, r5, lr}
 8003bb2:	0004      	movs	r4, r0
 8003bb4:	b09b      	sub	sp, #108	; 0x6c
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	db2d      	blt.n	8003c18 <_vsnprintf_r+0x68>
 8003bbc:	2382      	movs	r3, #130	; 0x82
 8003bbe:	466d      	mov	r5, sp
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	81ab      	strh	r3, [r5, #12]
 8003bc4:	9100      	str	r1, [sp, #0]
 8003bc6:	9104      	str	r1, [sp, #16]
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	d013      	beq.n	8003bf4 <_vsnprintf_r+0x44>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	3a01      	subs	r2, #1
 8003bd0:	425b      	negs	r3, r3
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9205      	str	r2, [sp, #20]
 8003bd6:	81eb      	strh	r3, [r5, #14]
 8003bd8:	0002      	movs	r2, r0
 8003bda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bdc:	4669      	mov	r1, sp
 8003bde:	0020      	movs	r0, r4
 8003be0:	f002 f84a 	bl	8005c78 <_svfprintf_r>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	da01      	bge.n	8003bec <_vsnprintf_r+0x3c>
 8003be8:	238b      	movs	r3, #139	; 0x8b
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	9a00      	ldr	r2, [sp, #0]
 8003bf0:	7013      	strb	r3, [r2, #0]
 8003bf2:	e00c      	b.n	8003c0e <_vsnprintf_r+0x5e>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	425b      	negs	r3, r3
 8003bf8:	9202      	str	r2, [sp, #8]
 8003bfa:	9205      	str	r2, [sp, #20]
 8003bfc:	81eb      	strh	r3, [r5, #14]
 8003bfe:	0002      	movs	r2, r0
 8003c00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c02:	4669      	mov	r1, sp
 8003c04:	0020      	movs	r0, r4
 8003c06:	f002 f837 	bl	8005c78 <_svfprintf_r>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	db01      	blt.n	8003c12 <_vsnprintf_r+0x62>
 8003c0e:	b01b      	add	sp, #108	; 0x6c
 8003c10:	bd30      	pop	{r4, r5, pc}
 8003c12:	238b      	movs	r3, #139	; 0x8b
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	e7fa      	b.n	8003c0e <_vsnprintf_r+0x5e>
 8003c18:	238b      	movs	r3, #139	; 0x8b
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	4240      	negs	r0, r0
 8003c20:	e7f5      	b.n	8003c0e <_vsnprintf_r+0x5e>
 8003c22:	46c0      	nop			; (mov r8, r8)

08003c24 <vsnprintf>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	0004      	movs	r4, r0
 8003c28:	4805      	ldr	r0, [pc, #20]	; (8003c40 <vsnprintf+0x1c>)
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	0013      	movs	r3, r2
 8003c32:	000a      	movs	r2, r1
 8003c34:	0021      	movs	r1, r4
 8003c36:	f7ff ffbb 	bl	8003bb0 <_vsnprintf_r>
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000000 	.word	0x20000000

08003c44 <_write_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	0005      	movs	r5, r0
 8003c48:	0008      	movs	r0, r1
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4c06      	ldr	r4, [pc, #24]	; (8003c68 <_write_r+0x24>)
 8003c50:	6022      	str	r2, [r4, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	f7fc fc54 	bl	8000500 <_write>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d000      	beq.n	8003c5e <_write_r+0x1a>
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0fb      	beq.n	8003c5c <_write_r+0x18>
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	e7f9      	b.n	8003c5c <_write_r+0x18>
 8003c68:	20002350 	.word	0x20002350

08003c6c <_close_r>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	4c06      	ldr	r4, [pc, #24]	; (8003c8c <_close_r+0x20>)
 8003c72:	0005      	movs	r5, r0
 8003c74:	0008      	movs	r0, r1
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	f7fc fc8c 	bl	8000594 <_close>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d000      	beq.n	8003c82 <_close_r+0x16>
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0fb      	beq.n	8003c80 <_close_r+0x14>
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	e7f9      	b.n	8003c80 <_close_r+0x14>
 8003c8c:	20002350 	.word	0x20002350

08003c90 <quorem>:
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	4645      	mov	r5, r8
 8003c94:	4680      	mov	r8, r0
 8003c96:	4657      	mov	r7, sl
 8003c98:	46de      	mov	lr, fp
 8003c9a:	464e      	mov	r6, r9
 8003c9c:	4643      	mov	r3, r8
 8003c9e:	b5e0      	push	{r5, r6, r7, lr}
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	690d      	ldr	r5, [r1, #16]
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	000f      	movs	r7, r1
 8003ca8:	2000      	movs	r0, #0
 8003caa:	42ab      	cmp	r3, r5
 8003cac:	da00      	bge.n	8003cb0 <quorem+0x20>
 8003cae:	e092      	b.n	8003dd6 <quorem+0x146>
 8003cb0:	2314      	movs	r3, #20
 8003cb2:	469c      	mov	ip, r3
 8003cb4:	448c      	add	ip, r1
 8003cb6:	4662      	mov	r2, ip
 8003cb8:	3d01      	subs	r5, #1
 8003cba:	00ab      	lsls	r3, r5, #2
 8003cbc:	9202      	str	r2, [sp, #8]
 8003cbe:	18d6      	adds	r6, r2, r3
 8003cc0:	2214      	movs	r2, #20
 8003cc2:	4442      	add	r2, r8
 8003cc4:	4691      	mov	r9, r2
 8003cc6:	4499      	add	r9, r3
 8003cc8:	6833      	ldr	r3, [r6, #0]
 8003cca:	9201      	str	r2, [sp, #4]
 8003ccc:	1c59      	adds	r1, r3, #1
 8003cce:	464b      	mov	r3, r9
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	f7fc ff71 	bl	8000bb8 <__udivsi3>
 8003cd6:	1e04      	subs	r4, r0, #0
 8003cd8:	d046      	beq.n	8003d68 <quorem+0xd8>
 8003cda:	9a02      	ldr	r2, [sp, #8]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4692      	mov	sl, r2
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	464a      	mov	r2, r9
 8003ce6:	46a4      	mov	ip, r4
 8003ce8:	46b1      	mov	r9, r6
 8003cea:	4654      	mov	r4, sl
 8003cec:	46bb      	mov	fp, r7
 8003cee:	46aa      	mov	sl, r5
 8003cf0:	0006      	movs	r6, r0
 8003cf2:	000d      	movs	r5, r1
 8003cf4:	001f      	movs	r7, r3
 8003cf6:	9203      	str	r2, [sp, #12]
 8003cf8:	4663      	mov	r3, ip
 8003cfa:	cc04      	ldmia	r4!, {r2}
 8003cfc:	0410      	lsls	r0, r2, #16
 8003cfe:	0c00      	lsrs	r0, r0, #16
 8003d00:	4358      	muls	r0, r3
 8003d02:	0c12      	lsrs	r2, r2, #16
 8003d04:	435a      	muls	r2, r3
 8003d06:	19c0      	adds	r0, r0, r7
 8003d08:	0c03      	lsrs	r3, r0, #16
 8003d0a:	18d2      	adds	r2, r2, r3
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	0400      	lsls	r0, r0, #16
 8003d10:	0419      	lsls	r1, r3, #16
 8003d12:	0c09      	lsrs	r1, r1, #16
 8003d14:	1989      	adds	r1, r1, r6
 8003d16:	0c17      	lsrs	r7, r2, #16
 8003d18:	0c00      	lsrs	r0, r0, #16
 8003d1a:	0412      	lsls	r2, r2, #16
 8003d1c:	1a09      	subs	r1, r1, r0
 8003d1e:	0c12      	lsrs	r2, r2, #16
 8003d20:	0c1b      	lsrs	r3, r3, #16
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	140a      	asrs	r2, r1, #16
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	0409      	lsls	r1, r1, #16
 8003d2a:	141e      	asrs	r6, r3, #16
 8003d2c:	0c09      	lsrs	r1, r1, #16
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	4319      	orrs	r1, r3
 8003d32:	c502      	stmia	r5!, {r1}
 8003d34:	45a1      	cmp	r9, r4
 8003d36:	d2df      	bcs.n	8003cf8 <quorem+0x68>
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	464e      	mov	r6, r9
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4664      	mov	r4, ip
 8003d42:	4655      	mov	r5, sl
 8003d44:	465f      	mov	r7, fp
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <quorem+0xd8>
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d304      	bcc.n	8003d5e <quorem+0xce>
 8003d54:	e006      	b.n	8003d64 <quorem+0xd4>
 8003d56:	3b04      	subs	r3, #4
 8003d58:	3d01      	subs	r5, #1
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d202      	bcs.n	8003d64 <quorem+0xd4>
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d0f8      	beq.n	8003d56 <quorem+0xc6>
 8003d64:	4643      	mov	r3, r8
 8003d66:	611d      	str	r5, [r3, #16]
 8003d68:	0039      	movs	r1, r7
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	f001 fd42 	bl	80057f4 <__mcmp>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	db2f      	blt.n	8003dd4 <quorem+0x144>
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	3401      	adds	r4, #1
 8003d78:	2000      	movs	r0, #0
 8003d7a:	46a4      	mov	ip, r4
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	9f01      	ldr	r7, [sp, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	c910      	ldmia	r1!, {r4}
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	0c12      	lsrs	r2, r2, #16
 8003d88:	1810      	adds	r0, r2, r0
 8003d8a:	0422      	lsls	r2, r4, #16
 8003d8c:	0c12      	lsrs	r2, r2, #16
 8003d8e:	1a82      	subs	r2, r0, r2
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	0c20      	lsrs	r0, r4, #16
 8003d94:	1a1b      	subs	r3, r3, r0
 8003d96:	1410      	asrs	r0, r2, #16
 8003d98:	181b      	adds	r3, r3, r0
 8003d9a:	0412      	lsls	r2, r2, #16
 8003d9c:	1418      	asrs	r0, r3, #16
 8003d9e:	0c12      	lsrs	r2, r2, #16
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	4313      	orrs	r3, r2
 8003da4:	c708      	stmia	r7!, {r3}
 8003da6:	428e      	cmp	r6, r1
 8003da8:	d2ea      	bcs.n	8003d80 <quorem+0xf0>
 8003daa:	9a01      	ldr	r2, [sp, #4]
 8003dac:	4664      	mov	r4, ip
 8003dae:	4694      	mov	ip, r2
 8003db0:	00ab      	lsls	r3, r5, #2
 8003db2:	4463      	add	r3, ip
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	d10c      	bne.n	8003dd4 <quorem+0x144>
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d304      	bcc.n	8003dca <quorem+0x13a>
 8003dc0:	e006      	b.n	8003dd0 <quorem+0x140>
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	3d01      	subs	r5, #1
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d202      	bcs.n	8003dd0 <quorem+0x140>
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d0f8      	beq.n	8003dc2 <quorem+0x132>
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	611d      	str	r5, [r3, #16]
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	b005      	add	sp, #20
 8003dd8:	bc3c      	pop	{r2, r3, r4, r5}
 8003dda:	4690      	mov	r8, r2
 8003ddc:	4699      	mov	r9, r3
 8003dde:	46a2      	mov	sl, r4
 8003de0:	46ab      	mov	fp, r5
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de4 <_dtoa_r>:
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	4657      	mov	r7, sl
 8003de8:	464e      	mov	r6, r9
 8003dea:	46de      	mov	lr, fp
 8003dec:	4645      	mov	r5, r8
 8003dee:	b5e0      	push	{r5, r6, r7, lr}
 8003df0:	0016      	movs	r6, r2
 8003df2:	001f      	movs	r7, r3
 8003df4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003df6:	b09d      	sub	sp, #116	; 0x74
 8003df8:	0004      	movs	r4, r0
 8003dfa:	9602      	str	r6, [sp, #8]
 8003dfc:	9703      	str	r7, [sp, #12]
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	d008      	beq.n	8003e14 <_dtoa_r+0x30>
 8003e02:	2301      	movs	r3, #1
 8003e04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e06:	4093      	lsls	r3, r2
 8003e08:	604a      	str	r2, [r1, #4]
 8003e0a:	608b      	str	r3, [r1, #8]
 8003e0c:	f001 fa86 	bl	800531c <_Bfree>
 8003e10:	2300      	movs	r3, #0
 8003e12:	6423      	str	r3, [r4, #64]	; 0x40
 8003e14:	1e3d      	subs	r5, r7, #0
 8003e16:	da00      	bge.n	8003e1a <_dtoa_r+0x36>
 8003e18:	e1b8      	b.n	800418c <_dtoa_r+0x3a8>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	002a      	movs	r2, r5
 8003e22:	4bcc      	ldr	r3, [pc, #816]	; (8004154 <_dtoa_r+0x370>)
 8003e24:	401a      	ands	r2, r3
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d100      	bne.n	8003e2c <_dtoa_r+0x48>
 8003e2a:	e1bb      	b.n	80041a4 <_dtoa_r+0x3c0>
 8003e2c:	9e02      	ldr	r6, [sp, #8]
 8003e2e:	9f03      	ldr	r7, [sp, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2300      	movs	r3, #0
 8003e34:	0030      	movs	r0, r6
 8003e36:	0039      	movs	r1, r7
 8003e38:	f7fd f844 	bl	8000ec4 <__aeabi_dcmpeq>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d013      	beq.n	8003e68 <_dtoa_r+0x84>
 8003e40:	2301      	movs	r3, #1
 8003e42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d100      	bne.n	8003e4e <_dtoa_r+0x6a>
 8003e4c:	e1d4      	b.n	80041f8 <_dtoa_r+0x414>
 8003e4e:	4bc2      	ldr	r3, [pc, #776]	; (8004158 <_dtoa_r+0x374>)
 8003e50:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	469a      	mov	sl, r3
 8003e58:	4650      	mov	r0, sl
 8003e5a:	b01d      	add	sp, #116	; 0x74
 8003e5c:	bc3c      	pop	{r2, r3, r4, r5}
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	46a2      	mov	sl, r4
 8003e64:	46ab      	mov	fp, r5
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e68:	ab1a      	add	r3, sp, #104	; 0x68
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	0032      	movs	r2, r6
 8003e72:	003b      	movs	r3, r7
 8003e74:	0020      	movs	r0, r4
 8003e76:	f001 fded 	bl	8005a54 <__d2b>
 8003e7a:	0d2b      	lsrs	r3, r5, #20
 8003e7c:	4683      	mov	fp, r0
 8003e7e:	d000      	beq.n	8003e82 <_dtoa_r+0x9e>
 8003e80:	e1ad      	b.n	80041de <_dtoa_r+0x3fa>
 8003e82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003e84:	4698      	mov	r8, r3
 8003e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e88:	4443      	add	r3, r8
 8003e8a:	001e      	movs	r6, r3
 8003e8c:	4bb3      	ldr	r3, [pc, #716]	; (800415c <_dtoa_r+0x378>)
 8003e8e:	18f3      	adds	r3, r6, r3
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	dc01      	bgt.n	8003e98 <_dtoa_r+0xb4>
 8003e94:	f000 fc95 	bl	80047c2 <_dtoa_r+0x9de>
 8003e98:	2240      	movs	r2, #64	; 0x40
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	409d      	lsls	r5, r3
 8003e9e:	4bb0      	ldr	r3, [pc, #704]	; (8004160 <_dtoa_r+0x37c>)
 8003ea0:	9802      	ldr	r0, [sp, #8]
 8003ea2:	18f3      	adds	r3, r6, r3
 8003ea4:	40d8      	lsrs	r0, r3
 8003ea6:	4328      	orrs	r0, r5
 8003ea8:	f7ff f894 	bl	8002fd4 <__aeabi_ui2d>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4dad      	ldr	r5, [pc, #692]	; (8004164 <_dtoa_r+0x380>)
 8003eb0:	9316      	str	r3, [sp, #88]	; 0x58
 8003eb2:	1949      	adds	r1, r1, r5
 8003eb4:	1e75      	subs	r5, r6, #1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4bab      	ldr	r3, [pc, #684]	; (8004168 <_dtoa_r+0x384>)
 8003eba:	f7fe fcff 	bl	80028bc <__aeabi_dsub>
 8003ebe:	4aab      	ldr	r2, [pc, #684]	; (800416c <_dtoa_r+0x388>)
 8003ec0:	4bab      	ldr	r3, [pc, #684]	; (8004170 <_dtoa_r+0x38c>)
 8003ec2:	f7fe fa7b 	bl	80023bc <__aeabi_dmul>
 8003ec6:	4aab      	ldr	r2, [pc, #684]	; (8004174 <_dtoa_r+0x390>)
 8003ec8:	4bab      	ldr	r3, [pc, #684]	; (8004178 <_dtoa_r+0x394>)
 8003eca:	f7fd fb33 	bl	8001534 <__aeabi_dadd>
 8003ece:	0006      	movs	r6, r0
 8003ed0:	0028      	movs	r0, r5
 8003ed2:	000f      	movs	r7, r1
 8003ed4:	f7ff f83c 	bl	8002f50 <__aeabi_i2d>
 8003ed8:	4aa8      	ldr	r2, [pc, #672]	; (800417c <_dtoa_r+0x398>)
 8003eda:	4ba9      	ldr	r3, [pc, #676]	; (8004180 <_dtoa_r+0x39c>)
 8003edc:	f7fe fa6e 	bl	80023bc <__aeabi_dmul>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	000b      	movs	r3, r1
 8003ee4:	0030      	movs	r0, r6
 8003ee6:	0039      	movs	r1, r7
 8003ee8:	f7fd fb24 	bl	8001534 <__aeabi_dadd>
 8003eec:	0006      	movs	r6, r0
 8003eee:	000f      	movs	r7, r1
 8003ef0:	f7fe fffa 	bl	8002ee8 <__aeabi_d2iz>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9006      	str	r0, [sp, #24]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	0030      	movs	r0, r6
 8003efc:	0039      	movs	r1, r7
 8003efe:	f7fc ffe7 	bl	8000ed0 <__aeabi_dcmplt>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d00d      	beq.n	8003f22 <_dtoa_r+0x13e>
 8003f06:	9b06      	ldr	r3, [sp, #24]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	4699      	mov	r9, r3
 8003f0c:	f7ff f820 	bl	8002f50 <__aeabi_i2d>
 8003f10:	003b      	movs	r3, r7
 8003f12:	0032      	movs	r2, r6
 8003f14:	f7fc ffd6 	bl	8000ec4 <__aeabi_dcmpeq>
 8003f18:	4243      	negs	r3, r0
 8003f1a:	4158      	adcs	r0, r3
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	1a1b      	subs	r3, r3, r0
 8003f20:	9306      	str	r3, [sp, #24]
 8003f22:	2301      	movs	r3, #1
 8003f24:	9e06      	ldr	r6, [sp, #24]
 8003f26:	930a      	str	r3, [sp, #40]	; 0x28
 8003f28:	2e16      	cmp	r6, #22
 8003f2a:	d810      	bhi.n	8003f4e <_dtoa_r+0x16a>
 8003f2c:	4995      	ldr	r1, [pc, #596]	; (8004184 <_dtoa_r+0x3a0>)
 8003f2e:	00f3      	lsls	r3, r6, #3
 8003f30:	18c9      	adds	r1, r1, r3
 8003f32:	6808      	ldr	r0, [r1, #0]
 8003f34:	6849      	ldr	r1, [r1, #4]
 8003f36:	9a02      	ldr	r2, [sp, #8]
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	f7fc ffdd 	bl	8000ef8 <__aeabi_dcmpgt>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d101      	bne.n	8003f46 <_dtoa_r+0x162>
 8003f42:	f000 fc44 	bl	80047ce <_dtoa_r+0x9ea>
 8003f46:	2300      	movs	r3, #0
 8003f48:	3e01      	subs	r6, #1
 8003f4a:	9606      	str	r6, [sp, #24]
 8003f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8003f4e:	4643      	mov	r3, r8
 8003f50:	1b5d      	subs	r5, r3, r5
 8003f52:	2300      	movs	r3, #0
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	002b      	movs	r3, r5
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4698      	mov	r8, r3
 8003f5c:	d504      	bpl.n	8003f68 <_dtoa_r+0x184>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	1b5b      	subs	r3, r3, r5
 8003f62:	9304      	str	r3, [sp, #16]
 8003f64:	2300      	movs	r3, #0
 8003f66:	4698      	mov	r8, r3
 8003f68:	9b06      	ldr	r3, [sp, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da00      	bge.n	8003f70 <_dtoa_r+0x18c>
 8003f6e:	e289      	b.n	8004484 <_dtoa_r+0x6a0>
 8003f70:	469c      	mov	ip, r3
 8003f72:	9309      	str	r3, [sp, #36]	; 0x24
 8003f74:	2300      	movs	r3, #0
 8003f76:	4699      	mov	r9, r3
 8003f78:	44e0      	add	r8, ip
 8003f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d900      	bls.n	8003f82 <_dtoa_r+0x19e>
 8003f80:	e13d      	b.n	80041fe <_dtoa_r+0x41a>
 8003f82:	2601      	movs	r6, #1
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	dd02      	ble.n	8003f8e <_dtoa_r+0x1aa>
 8003f88:	2600      	movs	r6, #0
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	9326      	str	r3, [sp, #152]	; 0x98
 8003f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d101      	bne.n	8003f98 <_dtoa_r+0x1b4>
 8003f94:	f000 fd42 	bl	8004a1c <_dtoa_r+0xc38>
 8003f98:	dc01      	bgt.n	8003f9e <_dtoa_r+0x1ba>
 8003f9a:	f000 fcf8 	bl	800498e <_dtoa_r+0xbaa>
 8003f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d101      	bne.n	8003fa8 <_dtoa_r+0x1c4>
 8003fa4:	f000 fc6d 	bl	8004882 <_dtoa_r+0xa9e>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	9308      	str	r3, [sp, #32]
 8003fac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d001      	beq.n	8003fb6 <_dtoa_r+0x1d2>
 8003fb2:	f000 fcf2 	bl	800499a <_dtoa_r+0xbb6>
 8003fb6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003fb8:	9b06      	ldr	r3, [sp, #24]
 8003fba:	4694      	mov	ip, r2
 8003fbc:	4463      	add	r3, ip
 8003fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	9307      	str	r3, [sp, #28]
 8003fc4:	1e1f      	subs	r7, r3, #0
 8003fc6:	dc00      	bgt.n	8003fca <_dtoa_r+0x1e6>
 8003fc8:	2701      	movs	r7, #1
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9d07      	ldr	r5, [sp, #28]
 8003fce:	6463      	str	r3, [r4, #68]	; 0x44
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2f17      	cmp	r7, #23
 8003fd4:	dc00      	bgt.n	8003fd8 <_dtoa_r+0x1f4>
 8003fd6:	e120      	b.n	800421a <_dtoa_r+0x436>
 8003fd8:	2201      	movs	r2, #1
 8003fda:	3304      	adds	r3, #4
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	0018      	movs	r0, r3
 8003fe0:	3014      	adds	r0, #20
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	3201      	adds	r2, #1
 8003fe6:	42b8      	cmp	r0, r7
 8003fe8:	d9f8      	bls.n	8003fdc <_dtoa_r+0x1f8>
 8003fea:	6461      	str	r1, [r4, #68]	; 0x44
 8003fec:	0020      	movs	r0, r4
 8003fee:	f001 f96d 	bl	80052cc <_Balloc>
 8003ff2:	4682      	mov	sl, r0
 8003ff4:	6420      	str	r0, [r4, #64]	; 0x40
 8003ff6:	2d0e      	cmp	r5, #14
 8003ff8:	d800      	bhi.n	8003ffc <_dtoa_r+0x218>
 8003ffa:	e116      	b.n	800422a <_dtoa_r+0x446>
 8003ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da00      	bge.n	8004004 <_dtoa_r+0x220>
 8004002:	e221      	b.n	8004448 <_dtoa_r+0x664>
 8004004:	9a06      	ldr	r2, [sp, #24]
 8004006:	2a0e      	cmp	r2, #14
 8004008:	dd00      	ble.n	800400c <_dtoa_r+0x228>
 800400a:	e21d      	b.n	8004448 <_dtoa_r+0x664>
 800400c:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <_dtoa_r+0x3a0>)
 800400e:	00d2      	lsls	r2, r2, #3
 8004010:	189b      	adds	r3, r3, r2
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	9204      	str	r2, [sp, #16]
 8004018:	9305      	str	r3, [sp, #20]
 800401a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800401c:	2b00      	cmp	r3, #0
 800401e:	da01      	bge.n	8004024 <_dtoa_r+0x240>
 8004020:	f000 fc3a 	bl	8004898 <_dtoa_r+0xab4>
 8004024:	9e02      	ldr	r6, [sp, #8]
 8004026:	9f03      	ldr	r7, [sp, #12]
 8004028:	9a04      	ldr	r2, [sp, #16]
 800402a:	9b05      	ldr	r3, [sp, #20]
 800402c:	0030      	movs	r0, r6
 800402e:	0039      	movs	r1, r7
 8004030:	f7fd fd90 	bl	8001b54 <__aeabi_ddiv>
 8004034:	f7fe ff58 	bl	8002ee8 <__aeabi_d2iz>
 8004038:	4681      	mov	r9, r0
 800403a:	f7fe ff89 	bl	8002f50 <__aeabi_i2d>
 800403e:	9a04      	ldr	r2, [sp, #16]
 8004040:	9b05      	ldr	r3, [sp, #20]
 8004042:	f7fe f9bb 	bl	80023bc <__aeabi_dmul>
 8004046:	0002      	movs	r2, r0
 8004048:	000b      	movs	r3, r1
 800404a:	0030      	movs	r0, r6
 800404c:	0039      	movs	r1, r7
 800404e:	f7fe fc35 	bl	80028bc <__aeabi_dsub>
 8004052:	4653      	mov	r3, sl
 8004054:	1c5d      	adds	r5, r3, #1
 8004056:	464b      	mov	r3, r9
 8004058:	4652      	mov	r2, sl
 800405a:	3330      	adds	r3, #48	; 0x30
 800405c:	7013      	strb	r3, [r2, #0]
 800405e:	9b07      	ldr	r3, [sp, #28]
 8004060:	0006      	movs	r6, r0
 8004062:	000f      	movs	r7, r1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d045      	beq.n	80040f4 <_dtoa_r+0x310>
 8004068:	2200      	movs	r2, #0
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <_dtoa_r+0x3a4>)
 800406c:	f7fe f9a6 	bl	80023bc <__aeabi_dmul>
 8004070:	2200      	movs	r2, #0
 8004072:	2300      	movs	r3, #0
 8004074:	0006      	movs	r6, r0
 8004076:	000f      	movs	r7, r1
 8004078:	f7fc ff24 	bl	8000ec4 <__aeabi_dcmpeq>
 800407c:	2800      	cmp	r0, #0
 800407e:	d000      	beq.n	8004082 <_dtoa_r+0x29e>
 8004080:	e368      	b.n	8004754 <_dtoa_r+0x970>
 8004082:	2202      	movs	r2, #2
 8004084:	9b07      	ldr	r3, [sp, #28]
 8004086:	4452      	add	r2, sl
 8004088:	4453      	add	r3, sl
 800408a:	9302      	str	r3, [sp, #8]
 800408c:	0015      	movs	r5, r2
 800408e:	46a1      	mov	r9, r4
 8004090:	e00e      	b.n	80040b0 <_dtoa_r+0x2cc>
 8004092:	2200      	movs	r2, #0
 8004094:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <_dtoa_r+0x3a4>)
 8004096:	f7fe f991 	bl	80023bc <__aeabi_dmul>
 800409a:	2200      	movs	r2, #0
 800409c:	2300      	movs	r3, #0
 800409e:	0006      	movs	r6, r0
 80040a0:	000f      	movs	r7, r1
 80040a2:	3501      	adds	r5, #1
 80040a4:	f7fc ff0e 	bl	8000ec4 <__aeabi_dcmpeq>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d001      	beq.n	80040b0 <_dtoa_r+0x2cc>
 80040ac:	f000 fcc1 	bl	8004a32 <_dtoa_r+0xc4e>
 80040b0:	9a04      	ldr	r2, [sp, #16]
 80040b2:	9b05      	ldr	r3, [sp, #20]
 80040b4:	0030      	movs	r0, r6
 80040b6:	0039      	movs	r1, r7
 80040b8:	f7fd fd4c 	bl	8001b54 <__aeabi_ddiv>
 80040bc:	f7fe ff14 	bl	8002ee8 <__aeabi_d2iz>
 80040c0:	0004      	movs	r4, r0
 80040c2:	f7fe ff45 	bl	8002f50 <__aeabi_i2d>
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	9b05      	ldr	r3, [sp, #20]
 80040ca:	f7fe f977 	bl	80023bc <__aeabi_dmul>
 80040ce:	0002      	movs	r2, r0
 80040d0:	000b      	movs	r3, r1
 80040d2:	0030      	movs	r0, r6
 80040d4:	0039      	movs	r1, r7
 80040d6:	f7fe fbf1 	bl	80028bc <__aeabi_dsub>
 80040da:	0022      	movs	r2, r4
 80040dc:	1e6b      	subs	r3, r5, #1
 80040de:	3230      	adds	r2, #48	; 0x30
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	9b02      	ldr	r3, [sp, #8]
 80040e4:	0006      	movs	r6, r0
 80040e6:	000f      	movs	r7, r1
 80040e8:	46a8      	mov	r8, r5
 80040ea:	42ab      	cmp	r3, r5
 80040ec:	d1d1      	bne.n	8004092 <_dtoa_r+0x2ae>
 80040ee:	464b      	mov	r3, r9
 80040f0:	46a1      	mov	r9, r4
 80040f2:	001c      	movs	r4, r3
 80040f4:	0032      	movs	r2, r6
 80040f6:	003b      	movs	r3, r7
 80040f8:	0030      	movs	r0, r6
 80040fa:	0039      	movs	r1, r7
 80040fc:	f7fd fa1a 	bl	8001534 <__aeabi_dadd>
 8004100:	9a04      	ldr	r2, [sp, #16]
 8004102:	9b05      	ldr	r3, [sp, #20]
 8004104:	0006      	movs	r6, r0
 8004106:	000f      	movs	r7, r1
 8004108:	f7fc fef6 	bl	8000ef8 <__aeabi_dcmpgt>
 800410c:	2800      	cmp	r0, #0
 800410e:	d10c      	bne.n	800412a <_dtoa_r+0x346>
 8004110:	9a04      	ldr	r2, [sp, #16]
 8004112:	9b05      	ldr	r3, [sp, #20]
 8004114:	0030      	movs	r0, r6
 8004116:	0039      	movs	r1, r7
 8004118:	f7fc fed4 	bl	8000ec4 <__aeabi_dcmpeq>
 800411c:	2800      	cmp	r0, #0
 800411e:	d100      	bne.n	8004122 <_dtoa_r+0x33e>
 8004120:	e318      	b.n	8004754 <_dtoa_r+0x970>
 8004122:	464b      	mov	r3, r9
 8004124:	07db      	lsls	r3, r3, #31
 8004126:	d400      	bmi.n	800412a <_dtoa_r+0x346>
 8004128:	e314      	b.n	8004754 <_dtoa_r+0x970>
 800412a:	1e6b      	subs	r3, r5, #1
 800412c:	7819      	ldrb	r1, [r3, #0]
 800412e:	4650      	mov	r0, sl
 8004130:	e007      	b.n	8004142 <_dtoa_r+0x35e>
 8004132:	4298      	cmp	r0, r3
 8004134:	d101      	bne.n	800413a <_dtoa_r+0x356>
 8004136:	f000 fcff 	bl	8004b38 <_dtoa_r+0xd54>
 800413a:	3d02      	subs	r5, #2
 800413c:	7829      	ldrb	r1, [r5, #0]
 800413e:	001d      	movs	r5, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	001a      	movs	r2, r3
 8004144:	2939      	cmp	r1, #57	; 0x39
 8004146:	d0f4      	beq.n	8004132 <_dtoa_r+0x34e>
 8004148:	4682      	mov	sl, r0
 800414a:	9102      	str	r1, [sp, #8]
 800414c:	9e02      	ldr	r6, [sp, #8]
 800414e:	3601      	adds	r6, #1
 8004150:	7016      	strb	r6, [r2, #0]
 8004152:	e2ff      	b.n	8004754 <_dtoa_r+0x970>
 8004154:	7ff00000 	.word	0x7ff00000
 8004158:	08018b51 	.word	0x08018b51
 800415c:	00000432 	.word	0x00000432
 8004160:	00000412 	.word	0x00000412
 8004164:	fe100000 	.word	0xfe100000
 8004168:	3ff80000 	.word	0x3ff80000
 800416c:	636f4361 	.word	0x636f4361
 8004170:	3fd287a7 	.word	0x3fd287a7
 8004174:	8b60c8b3 	.word	0x8b60c8b3
 8004178:	3fc68a28 	.word	0x3fc68a28
 800417c:	509f79fb 	.word	0x509f79fb
 8004180:	3fd34413 	.word	0x3fd34413
 8004184:	08016c00 	.word	0x08016c00
 8004188:	40240000 	.word	0x40240000
 800418c:	2301      	movs	r3, #1
 800418e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004190:	007d      	lsls	r5, r7, #1
 8004192:	086d      	lsrs	r5, r5, #1
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	002a      	movs	r2, r5
 8004198:	4bbf      	ldr	r3, [pc, #764]	; (8004498 <_dtoa_r+0x6b4>)
 800419a:	9503      	str	r5, [sp, #12]
 800419c:	401a      	ands	r2, r3
 800419e:	429a      	cmp	r2, r3
 80041a0:	d000      	beq.n	80041a4 <_dtoa_r+0x3c0>
 80041a2:	e643      	b.n	8003e2c <_dtoa_r+0x48>
 80041a4:	4bbd      	ldr	r3, [pc, #756]	; (800449c <_dtoa_r+0x6b8>)
 80041a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	9b02      	ldr	r3, [sp, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10c      	bne.n	80041ca <_dtoa_r+0x3e6>
 80041b0:	032d      	lsls	r5, r5, #12
 80041b2:	d10a      	bne.n	80041ca <_dtoa_r+0x3e6>
 80041b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <_dtoa_r+0x3da>
 80041ba:	f000 fda7 	bl	8004d0c <_dtoa_r+0xf28>
 80041be:	4bb8      	ldr	r3, [pc, #736]	; (80044a0 <_dtoa_r+0x6bc>)
 80041c0:	469a      	mov	sl, r3
 80041c2:	3308      	adds	r3, #8
 80041c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e646      	b.n	8003e58 <_dtoa_r+0x74>
 80041ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <_dtoa_r+0x3f2>
 80041d0:	4bb4      	ldr	r3, [pc, #720]	; (80044a4 <_dtoa_r+0x6c0>)
 80041d2:	469a      	mov	sl, r3
 80041d4:	e640      	b.n	8003e58 <_dtoa_r+0x74>
 80041d6:	4bb3      	ldr	r3, [pc, #716]	; (80044a4 <_dtoa_r+0x6c0>)
 80041d8:	469a      	mov	sl, r3
 80041da:	3303      	adds	r3, #3
 80041dc:	e7f2      	b.n	80041c4 <_dtoa_r+0x3e0>
 80041de:	033a      	lsls	r2, r7, #12
 80041e0:	4db1      	ldr	r5, [pc, #708]	; (80044a8 <_dtoa_r+0x6c4>)
 80041e2:	0b12      	lsrs	r2, r2, #12
 80041e4:	4315      	orrs	r5, r2
 80041e6:	4ab1      	ldr	r2, [pc, #708]	; (80044ac <_dtoa_r+0x6c8>)
 80041e8:	0029      	movs	r1, r5
 80041ea:	189d      	adds	r5, r3, r2
 80041ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80041ee:	0030      	movs	r0, r6
 80041f0:	4698      	mov	r8, r3
 80041f2:	2300      	movs	r3, #0
 80041f4:	9316      	str	r3, [sp, #88]	; 0x58
 80041f6:	e65e      	b.n	8003eb6 <_dtoa_r+0xd2>
 80041f8:	4bad      	ldr	r3, [pc, #692]	; (80044b0 <_dtoa_r+0x6cc>)
 80041fa:	469a      	mov	sl, r3
 80041fc:	e62c      	b.n	8003e58 <_dtoa_r+0x74>
 80041fe:	2501      	movs	r5, #1
 8004200:	2300      	movs	r3, #0
 8004202:	2201      	movs	r2, #1
 8004204:	2601      	movs	r6, #1
 8004206:	426d      	negs	r5, r5
 8004208:	9326      	str	r3, [sp, #152]	; 0x98
 800420a:	9208      	str	r2, [sp, #32]
 800420c:	9507      	str	r5, [sp, #28]
 800420e:	9327      	str	r3, [sp, #156]	; 0x9c
 8004210:	2300      	movs	r3, #0
 8004212:	2100      	movs	r1, #0
 8004214:	6463      	str	r3, [r4, #68]	; 0x44
 8004216:	9b07      	ldr	r3, [sp, #28]
 8004218:	930b      	str	r3, [sp, #44]	; 0x2c
 800421a:	0020      	movs	r0, r4
 800421c:	f001 f856 	bl	80052cc <_Balloc>
 8004220:	4682      	mov	sl, r0
 8004222:	6420      	str	r0, [r4, #64]	; 0x40
 8004224:	2d0e      	cmp	r5, #14
 8004226:	d900      	bls.n	800422a <_dtoa_r+0x446>
 8004228:	e6e8      	b.n	8003ffc <_dtoa_r+0x218>
 800422a:	2e00      	cmp	r6, #0
 800422c:	d100      	bne.n	8004230 <_dtoa_r+0x44c>
 800422e:	e6e5      	b.n	8003ffc <_dtoa_r+0x218>
 8004230:	9a02      	ldr	r2, [sp, #8]
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	9f06      	ldr	r7, [sp, #24]
 8004236:	920e      	str	r2, [sp, #56]	; 0x38
 8004238:	930f      	str	r3, [sp, #60]	; 0x3c
 800423a:	2f00      	cmp	r7, #0
 800423c:	dc00      	bgt.n	8004240 <_dtoa_r+0x45c>
 800423e:	e351      	b.n	80048e4 <_dtoa_r+0xb00>
 8004240:	210f      	movs	r1, #15
 8004242:	003b      	movs	r3, r7
 8004244:	400b      	ands	r3, r1
 8004246:	00da      	lsls	r2, r3, #3
 8004248:	4b9a      	ldr	r3, [pc, #616]	; (80044b4 <_dtoa_r+0x6d0>)
 800424a:	189b      	adds	r3, r3, r2
 800424c:	681d      	ldr	r5, [r3, #0]
 800424e:	685e      	ldr	r6, [r3, #4]
 8004250:	950c      	str	r5, [sp, #48]	; 0x30
 8004252:	960d      	str	r6, [sp, #52]	; 0x34
 8004254:	113d      	asrs	r5, r7, #4
 8004256:	06eb      	lsls	r3, r5, #27
 8004258:	d401      	bmi.n	800425e <_dtoa_r+0x47a>
 800425a:	f000 fc06 	bl	8004a6a <_dtoa_r+0xc86>
 800425e:	4b96      	ldr	r3, [pc, #600]	; (80044b8 <_dtoa_r+0x6d4>)
 8004260:	400d      	ands	r5, r1
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004268:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800426a:	f7fd fc73 	bl	8001b54 <__aeabi_ddiv>
 800426e:	2303      	movs	r3, #3
 8004270:	9010      	str	r0, [sp, #64]	; 0x40
 8004272:	9111      	str	r1, [sp, #68]	; 0x44
 8004274:	9302      	str	r3, [sp, #8]
 8004276:	2d00      	cmp	r5, #0
 8004278:	d018      	beq.n	80042ac <_dtoa_r+0x4c8>
 800427a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800427c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800427e:	0023      	movs	r3, r4
 8004280:	2701      	movs	r7, #1
 8004282:	464c      	mov	r4, r9
 8004284:	4699      	mov	r9, r3
 8004286:	4e8c      	ldr	r6, [pc, #560]	; (80044b8 <_dtoa_r+0x6d4>)
 8004288:	422f      	tst	r7, r5
 800428a:	d006      	beq.n	800429a <_dtoa_r+0x4b6>
 800428c:	9b02      	ldr	r3, [sp, #8]
 800428e:	3301      	adds	r3, #1
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	6832      	ldr	r2, [r6, #0]
 8004294:	6873      	ldr	r3, [r6, #4]
 8004296:	f7fe f891 	bl	80023bc <__aeabi_dmul>
 800429a:	106d      	asrs	r5, r5, #1
 800429c:	3608      	adds	r6, #8
 800429e:	2d00      	cmp	r5, #0
 80042a0:	d1f2      	bne.n	8004288 <_dtoa_r+0x4a4>
 80042a2:	464b      	mov	r3, r9
 80042a4:	46a1      	mov	r9, r4
 80042a6:	001c      	movs	r4, r3
 80042a8:	900c      	str	r0, [sp, #48]	; 0x30
 80042aa:	910d      	str	r1, [sp, #52]	; 0x34
 80042ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80042b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80042b4:	f7fd fc4e 	bl	8001b54 <__aeabi_ddiv>
 80042b8:	900c      	str	r0, [sp, #48]	; 0x30
 80042ba:	910d      	str	r1, [sp, #52]	; 0x34
 80042bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <_dtoa_r+0x4f2>
 80042c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80042c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042c6:	2200      	movs	r2, #0
 80042c8:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <_dtoa_r+0x6c4>)
 80042ca:	f7fc fe01 	bl	8000ed0 <__aeabi_dcmplt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d001      	beq.n	80042d6 <_dtoa_r+0x4f2>
 80042d2:	f000 fc7e 	bl	8004bd2 <_dtoa_r+0xdee>
 80042d6:	9802      	ldr	r0, [sp, #8]
 80042d8:	f7fe fe3a 	bl	8002f50 <__aeabi_i2d>
 80042dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e0:	f7fe f86c 	bl	80023bc <__aeabi_dmul>
 80042e4:	4b75      	ldr	r3, [pc, #468]	; (80044bc <_dtoa_r+0x6d8>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	f7fd f924 	bl	8001534 <__aeabi_dadd>
 80042ec:	4b74      	ldr	r3, [pc, #464]	; (80044c0 <_dtoa_r+0x6dc>)
 80042ee:	0005      	movs	r5, r0
 80042f0:	18ce      	adds	r6, r1, r3
 80042f2:	9b07      	ldr	r3, [sp, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <_dtoa_r+0x516>
 80042f8:	e36e      	b.n	80049d8 <_dtoa_r+0xbf4>
 80042fa:	9b06      	ldr	r3, [sp, #24]
 80042fc:	9318      	str	r3, [sp, #96]	; 0x60
 80042fe:	9b07      	ldr	r3, [sp, #28]
 8004300:	9310      	str	r3, [sp, #64]	; 0x40
 8004302:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004304:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004306:	f7fe fdef 	bl	8002ee8 <__aeabi_d2iz>
 800430a:	9512      	str	r5, [sp, #72]	; 0x48
 800430c:	9613      	str	r6, [sp, #76]	; 0x4c
 800430e:	0006      	movs	r6, r0
 8004310:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004312:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <_dtoa_r+0x6d0>)
 8004314:	1e6a      	subs	r2, r5, #1
 8004316:	00d2      	lsls	r2, r2, #3
 8004318:	189b      	adds	r3, r3, r2
 800431a:	3630      	adds	r6, #48	; 0x30
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	b2f3      	uxtb	r3, r6
 8004322:	4656      	mov	r6, sl
 8004324:	3601      	adds	r6, #1
 8004326:	9114      	str	r1, [sp, #80]	; 0x50
 8004328:	9215      	str	r2, [sp, #84]	; 0x54
 800432a:	9302      	str	r3, [sp, #8]
 800432c:	9617      	str	r6, [sp, #92]	; 0x5c
 800432e:	f7fe fe0f 	bl	8002f50 <__aeabi_i2d>
 8004332:	0002      	movs	r2, r0
 8004334:	000b      	movs	r3, r1
 8004336:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004338:	990d      	ldr	r1, [sp, #52]	; 0x34
 800433a:	f7fe fabf 	bl	80028bc <__aeabi_dsub>
 800433e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004342:	0006      	movs	r6, r0
 8004344:	9808      	ldr	r0, [sp, #32]
 8004346:	000f      	movs	r7, r1
 8004348:	2800      	cmp	r0, #0
 800434a:	d100      	bne.n	800434e <_dtoa_r+0x56a>
 800434c:	e3ab      	b.n	8004aa6 <_dtoa_r+0xcc2>
 800434e:	2000      	movs	r0, #0
 8004350:	495c      	ldr	r1, [pc, #368]	; (80044c4 <_dtoa_r+0x6e0>)
 8004352:	f7fd fbff 	bl	8001b54 <__aeabi_ddiv>
 8004356:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800435a:	f7fe faaf 	bl	80028bc <__aeabi_dsub>
 800435e:	4652      	mov	r2, sl
 8004360:	9b02      	ldr	r3, [sp, #8]
 8004362:	900c      	str	r0, [sp, #48]	; 0x30
 8004364:	910d      	str	r1, [sp, #52]	; 0x34
 8004366:	7013      	strb	r3, [r2, #0]
 8004368:	0032      	movs	r2, r6
 800436a:	003b      	movs	r3, r7
 800436c:	f7fc fdc4 	bl	8000ef8 <__aeabi_dcmpgt>
 8004370:	2800      	cmp	r0, #0
 8004372:	d001      	beq.n	8004378 <_dtoa_r+0x594>
 8004374:	f000 fcba 	bl	8004cec <_dtoa_r+0xf08>
 8004378:	0032      	movs	r2, r6
 800437a:	003b      	movs	r3, r7
 800437c:	2000      	movs	r0, #0
 800437e:	494a      	ldr	r1, [pc, #296]	; (80044a8 <_dtoa_r+0x6c4>)
 8004380:	f7fe fa9c 	bl	80028bc <__aeabi_dsub>
 8004384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004388:	f7fc fda2 	bl	8000ed0 <__aeabi_dcmplt>
 800438c:	2800      	cmp	r0, #0
 800438e:	d001      	beq.n	8004394 <_dtoa_r+0x5b0>
 8004390:	f000 fcae 	bl	8004cf0 <_dtoa_r+0xf0c>
 8004394:	2d01      	cmp	r5, #1
 8004396:	d100      	bne.n	800439a <_dtoa_r+0x5b6>
 8004398:	e377      	b.n	8004a8a <_dtoa_r+0xca6>
 800439a:	464a      	mov	r2, r9
 800439c:	9214      	str	r2, [sp, #80]	; 0x50
 800439e:	4642      	mov	r2, r8
 80043a0:	9219      	str	r2, [sp, #100]	; 0x64
 80043a2:	465a      	mov	r2, fp
 80043a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043a6:	4455      	add	r5, sl
 80043a8:	9502      	str	r5, [sp, #8]
 80043aa:	9412      	str	r4, [sp, #72]	; 0x48
 80043ac:	9210      	str	r2, [sp, #64]	; 0x40
 80043ae:	4699      	mov	r9, r3
 80043b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80043b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80043b4:	46d3      	mov	fp, sl
 80043b6:	e012      	b.n	80043de <_dtoa_r+0x5fa>
 80043b8:	0032      	movs	r2, r6
 80043ba:	003b      	movs	r3, r7
 80043bc:	2000      	movs	r0, #0
 80043be:	493a      	ldr	r1, [pc, #232]	; (80044a8 <_dtoa_r+0x6c4>)
 80043c0:	f7fe fa7c 	bl	80028bc <__aeabi_dsub>
 80043c4:	0022      	movs	r2, r4
 80043c6:	002b      	movs	r3, r5
 80043c8:	f7fc fd82 	bl	8000ed0 <__aeabi_dcmplt>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d001      	beq.n	80043d4 <_dtoa_r+0x5f0>
 80043d0:	f000 fc62 	bl	8004c98 <_dtoa_r+0xeb4>
 80043d4:	9b02      	ldr	r3, [sp, #8]
 80043d6:	46d1      	mov	r9, sl
 80043d8:	4553      	cmp	r3, sl
 80043da:	d100      	bne.n	80043de <_dtoa_r+0x5fa>
 80043dc:	e34d      	b.n	8004a7a <_dtoa_r+0xc96>
 80043de:	2200      	movs	r2, #0
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <_dtoa_r+0x6e4>)
 80043e2:	0020      	movs	r0, r4
 80043e4:	0029      	movs	r1, r5
 80043e6:	f7fd ffe9 	bl	80023bc <__aeabi_dmul>
 80043ea:	2200      	movs	r2, #0
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <_dtoa_r+0x6e4>)
 80043ee:	0004      	movs	r4, r0
 80043f0:	000d      	movs	r5, r1
 80043f2:	0030      	movs	r0, r6
 80043f4:	0039      	movs	r1, r7
 80043f6:	f7fd ffe1 	bl	80023bc <__aeabi_dmul>
 80043fa:	000f      	movs	r7, r1
 80043fc:	0006      	movs	r6, r0
 80043fe:	f7fe fd73 	bl	8002ee8 <__aeabi_d2iz>
 8004402:	4680      	mov	r8, r0
 8004404:	f7fe fda4 	bl	8002f50 <__aeabi_i2d>
 8004408:	0002      	movs	r2, r0
 800440a:	000b      	movs	r3, r1
 800440c:	0030      	movs	r0, r6
 800440e:	0039      	movs	r1, r7
 8004410:	f7fe fa54 	bl	80028bc <__aeabi_dsub>
 8004414:	2301      	movs	r3, #1
 8004416:	444b      	add	r3, r9
 8004418:	469a      	mov	sl, r3
 800441a:	4643      	mov	r3, r8
 800441c:	3330      	adds	r3, #48	; 0x30
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4698      	mov	r8, r3
 8004422:	464b      	mov	r3, r9
 8004424:	4642      	mov	r2, r8
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	0022      	movs	r2, r4
 800442a:	002b      	movs	r3, r5
 800442c:	0006      	movs	r6, r0
 800442e:	000f      	movs	r7, r1
 8004430:	f7fc fd4e 	bl	8000ed0 <__aeabi_dcmplt>
 8004434:	2800      	cmp	r0, #0
 8004436:	d0bf      	beq.n	80043b8 <_dtoa_r+0x5d4>
 8004438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800443a:	4655      	mov	r5, sl
 800443c:	46da      	mov	sl, fp
 800443e:	469b      	mov	fp, r3
 8004440:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004442:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004444:	9306      	str	r3, [sp, #24]
 8004446:	e185      	b.n	8004754 <_dtoa_r+0x970>
 8004448:	9a08      	ldr	r2, [sp, #32]
 800444a:	2a00      	cmp	r2, #0
 800444c:	d03e      	beq.n	80044cc <_dtoa_r+0x6e8>
 800444e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004450:	2a01      	cmp	r2, #1
 8004452:	dc00      	bgt.n	8004456 <_dtoa_r+0x672>
 8004454:	e205      	b.n	8004862 <_dtoa_r+0xa7e>
 8004456:	9b07      	ldr	r3, [sp, #28]
 8004458:	1e5d      	subs	r5, r3, #1
 800445a:	464b      	mov	r3, r9
 800445c:	45a9      	cmp	r9, r5
 800445e:	da00      	bge.n	8004462 <_dtoa_r+0x67e>
 8004460:	e2ea      	b.n	8004a38 <_dtoa_r+0xc54>
 8004462:	1b5d      	subs	r5, r3, r5
 8004464:	9b07      	ldr	r3, [sp, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da00      	bge.n	800446c <_dtoa_r+0x688>
 800446a:	e314      	b.n	8004a96 <_dtoa_r+0xcb2>
 800446c:	469c      	mov	ip, r3
 800446e:	9a04      	ldr	r2, [sp, #16]
 8004470:	44e0      	add	r8, ip
 8004472:	0017      	movs	r7, r2
 8004474:	4462      	add	r2, ip
 8004476:	9204      	str	r2, [sp, #16]
 8004478:	2101      	movs	r1, #1
 800447a:	0020      	movs	r0, r4
 800447c:	f001 f830 	bl	80054e0 <__i2b>
 8004480:	0006      	movs	r6, r0
 8004482:	e026      	b.n	80044d2 <_dtoa_r+0x6ee>
 8004484:	9a04      	ldr	r2, [sp, #16]
 8004486:	9b06      	ldr	r3, [sp, #24]
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	425b      	negs	r3, r3
 800448c:	4699      	mov	r9, r3
 800448e:	2300      	movs	r3, #0
 8004490:	9204      	str	r2, [sp, #16]
 8004492:	9309      	str	r3, [sp, #36]	; 0x24
 8004494:	e571      	b.n	8003f7a <_dtoa_r+0x196>
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	7ff00000 	.word	0x7ff00000
 800449c:	0000270f 	.word	0x0000270f
 80044a0:	08018b40 	.word	0x08018b40
 80044a4:	08018b4c 	.word	0x08018b4c
 80044a8:	3ff00000 	.word	0x3ff00000
 80044ac:	fffffc01 	.word	0xfffffc01
 80044b0:	08018b50 	.word	0x08018b50
 80044b4:	08016c00 	.word	0x08016c00
 80044b8:	08016bd8 	.word	0x08016bd8
 80044bc:	401c0000 	.word	0x401c0000
 80044c0:	fcc00000 	.word	0xfcc00000
 80044c4:	3fe00000 	.word	0x3fe00000
 80044c8:	40240000 	.word	0x40240000
 80044cc:	464d      	mov	r5, r9
 80044ce:	2600      	movs	r6, #0
 80044d0:	9f04      	ldr	r7, [sp, #16]
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	dd0d      	ble.n	80044f2 <_dtoa_r+0x70e>
 80044d6:	4643      	mov	r3, r8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dd0a      	ble.n	80044f2 <_dtoa_r+0x70e>
 80044dc:	003b      	movs	r3, r7
 80044de:	4547      	cmp	r7, r8
 80044e0:	dd00      	ble.n	80044e4 <_dtoa_r+0x700>
 80044e2:	e191      	b.n	8004808 <_dtoa_r+0xa24>
 80044e4:	9a04      	ldr	r2, [sp, #16]
 80044e6:	1aff      	subs	r7, r7, r3
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	9204      	str	r2, [sp, #16]
 80044ec:	4642      	mov	r2, r8
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4698      	mov	r8, r3
 80044f2:	464b      	mov	r3, r9
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <_dtoa_r+0x732>
 80044f8:	9b08      	ldr	r3, [sp, #32]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <_dtoa_r+0x726>
 80044fe:	464b      	mov	r3, r9
 8004500:	1b5b      	subs	r3, r3, r5
 8004502:	4699      	mov	r9, r3
 8004504:	2d00      	cmp	r5, #0
 8004506:	d000      	beq.n	800450a <_dtoa_r+0x726>
 8004508:	e180      	b.n	800480c <_dtoa_r+0xa28>
 800450a:	4659      	mov	r1, fp
 800450c:	464a      	mov	r2, r9
 800450e:	0020      	movs	r0, r4
 8004510:	f001 f8ac 	bl	800566c <__pow5mult>
 8004514:	4683      	mov	fp, r0
 8004516:	2101      	movs	r1, #1
 8004518:	0020      	movs	r0, r4
 800451a:	f000 ffe1 	bl	80054e0 <__i2b>
 800451e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004520:	4681      	mov	r9, r0
 8004522:	2a00      	cmp	r2, #0
 8004524:	d000      	beq.n	8004528 <_dtoa_r+0x744>
 8004526:	e136      	b.n	8004796 <_dtoa_r+0x9b2>
 8004528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800452a:	2b01      	cmp	r3, #1
 800452c:	dc00      	bgt.n	8004530 <_dtoa_r+0x74c>
 800452e:	e152      	b.n	80047d6 <_dtoa_r+0x9f2>
 8004530:	2301      	movs	r3, #1
 8004532:	201f      	movs	r0, #31
 8004534:	4443      	add	r3, r8
 8004536:	4018      	ands	r0, r3
 8004538:	d100      	bne.n	800453c <_dtoa_r+0x758>
 800453a:	e12a      	b.n	8004792 <_dtoa_r+0x9ae>
 800453c:	2320      	movs	r3, #32
 800453e:	1a1b      	subs	r3, r3, r0
 8004540:	2b04      	cmp	r3, #4
 8004542:	dc00      	bgt.n	8004546 <_dtoa_r+0x762>
 8004544:	e3dc      	b.n	8004d00 <_dtoa_r+0xf1c>
 8004546:	231c      	movs	r3, #28
 8004548:	1a18      	subs	r0, r3, r0
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	183f      	adds	r7, r7, r0
 800454e:	469c      	mov	ip, r3
 8004550:	4484      	add	ip, r0
 8004552:	4663      	mov	r3, ip
 8004554:	4480      	add	r8, r0
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9b04      	ldr	r3, [sp, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	dd05      	ble.n	800456a <_dtoa_r+0x786>
 800455e:	4659      	mov	r1, fp
 8004560:	001a      	movs	r2, r3
 8004562:	0020      	movs	r0, r4
 8004564:	f001 f8e2 	bl	800572c <__lshift>
 8004568:	4683      	mov	fp, r0
 800456a:	4643      	mov	r3, r8
 800456c:	2b00      	cmp	r3, #0
 800456e:	dd05      	ble.n	800457c <_dtoa_r+0x798>
 8004570:	4649      	mov	r1, r9
 8004572:	4642      	mov	r2, r8
 8004574:	0020      	movs	r0, r4
 8004576:	f001 f8d9 	bl	800572c <__lshift>
 800457a:	4681      	mov	r9, r0
 800457c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d179      	bne.n	8004676 <_dtoa_r+0x892>
 8004582:	9b07      	ldr	r3, [sp, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc00      	bgt.n	800458a <_dtoa_r+0x7a6>
 8004588:	e1f4      	b.n	8004974 <_dtoa_r+0xb90>
 800458a:	9b08      	ldr	r3, [sp, #32]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d100      	bne.n	8004592 <_dtoa_r+0x7ae>
 8004590:	e08f      	b.n	80046b2 <_dtoa_r+0x8ce>
 8004592:	2f00      	cmp	r7, #0
 8004594:	dd00      	ble.n	8004598 <_dtoa_r+0x7b4>
 8004596:	e14f      	b.n	8004838 <_dtoa_r+0xa54>
 8004598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459a:	9604      	str	r6, [sp, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d000      	beq.n	80045a2 <_dtoa_r+0x7be>
 80045a0:	e1cf      	b.n	8004942 <_dtoa_r+0xb5e>
 80045a2:	9a07      	ldr	r2, [sp, #28]
 80045a4:	4653      	mov	r3, sl
 80045a6:	4694      	mov	ip, r2
 80045a8:	3b01      	subs	r3, #1
 80045aa:	449c      	add	ip, r3
 80045ac:	4663      	mov	r3, ip
 80045ae:	9308      	str	r3, [sp, #32]
 80045b0:	2301      	movs	r3, #1
 80045b2:	9a02      	ldr	r2, [sp, #8]
 80045b4:	465d      	mov	r5, fp
 80045b6:	401a      	ands	r2, r3
 80045b8:	4653      	mov	r3, sl
 80045ba:	46d0      	mov	r8, sl
 80045bc:	46cb      	mov	fp, r9
 80045be:	9207      	str	r2, [sp, #28]
 80045c0:	930a      	str	r3, [sp, #40]	; 0x28
 80045c2:	4659      	mov	r1, fp
 80045c4:	0028      	movs	r0, r5
 80045c6:	f7ff fb63 	bl	8003c90 <quorem>
 80045ca:	0003      	movs	r3, r0
 80045cc:	9009      	str	r0, [sp, #36]	; 0x24
 80045ce:	3330      	adds	r3, #48	; 0x30
 80045d0:	0031      	movs	r1, r6
 80045d2:	0028      	movs	r0, r5
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	f001 f90d 	bl	80057f4 <__mcmp>
 80045da:	9a04      	ldr	r2, [sp, #16]
 80045dc:	0007      	movs	r7, r0
 80045de:	4659      	mov	r1, fp
 80045e0:	0020      	movs	r0, r4
 80045e2:	f001 f921 	bl	8005828 <__mdiff>
 80045e6:	68c3      	ldr	r3, [r0, #12]
 80045e8:	4681      	mov	r9, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d000      	beq.n	80045f0 <_dtoa_r+0x80c>
 80045ee:	e0cd      	b.n	800478c <_dtoa_r+0x9a8>
 80045f0:	0001      	movs	r1, r0
 80045f2:	0028      	movs	r0, r5
 80045f4:	f001 f8fe 	bl	80057f4 <__mcmp>
 80045f8:	4682      	mov	sl, r0
 80045fa:	4649      	mov	r1, r9
 80045fc:	0020      	movs	r0, r4
 80045fe:	f000 fe8d 	bl	800531c <_Bfree>
 8004602:	4652      	mov	r2, sl
 8004604:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004606:	4313      	orrs	r3, r2
 8004608:	d103      	bne.n	8004612 <_dtoa_r+0x82e>
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d100      	bne.n	8004612 <_dtoa_r+0x82e>
 8004610:	e321      	b.n	8004c56 <_dtoa_r+0xe72>
 8004612:	2f00      	cmp	r7, #0
 8004614:	da00      	bge.n	8004618 <_dtoa_r+0x834>
 8004616:	e218      	b.n	8004a4a <_dtoa_r+0xc66>
 8004618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800461a:	431f      	orrs	r7, r3
 800461c:	d103      	bne.n	8004626 <_dtoa_r+0x842>
 800461e:	9b07      	ldr	r3, [sp, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d100      	bne.n	8004626 <_dtoa_r+0x842>
 8004624:	e211      	b.n	8004a4a <_dtoa_r+0xc66>
 8004626:	4643      	mov	r3, r8
 8004628:	1c5f      	adds	r7, r3, #1
 800462a:	4653      	mov	r3, sl
 800462c:	2b00      	cmp	r3, #0
 800462e:	dd00      	ble.n	8004632 <_dtoa_r+0x84e>
 8004630:	e29e      	b.n	8004b70 <_dtoa_r+0xd8c>
 8004632:	4643      	mov	r3, r8
 8004634:	9a02      	ldr	r2, [sp, #8]
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	9b08      	ldr	r3, [sp, #32]
 800463a:	4543      	cmp	r3, r8
 800463c:	d100      	bne.n	8004640 <_dtoa_r+0x85c>
 800463e:	e2a6      	b.n	8004b8e <_dtoa_r+0xdaa>
 8004640:	2300      	movs	r3, #0
 8004642:	0029      	movs	r1, r5
 8004644:	220a      	movs	r2, #10
 8004646:	0020      	movs	r0, r4
 8004648:	f000 fe72 	bl	8005330 <__multadd>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	0005      	movs	r5, r0
 8004650:	429e      	cmp	r6, r3
 8004652:	d100      	bne.n	8004656 <_dtoa_r+0x872>
 8004654:	e090      	b.n	8004778 <_dtoa_r+0x994>
 8004656:	0031      	movs	r1, r6
 8004658:	2300      	movs	r3, #0
 800465a:	220a      	movs	r2, #10
 800465c:	0020      	movs	r0, r4
 800465e:	f000 fe67 	bl	8005330 <__multadd>
 8004662:	2300      	movs	r3, #0
 8004664:	0006      	movs	r6, r0
 8004666:	220a      	movs	r2, #10
 8004668:	9904      	ldr	r1, [sp, #16]
 800466a:	0020      	movs	r0, r4
 800466c:	f000 fe60 	bl	8005330 <__multadd>
 8004670:	46b8      	mov	r8, r7
 8004672:	9004      	str	r0, [sp, #16]
 8004674:	e7a5      	b.n	80045c2 <_dtoa_r+0x7de>
 8004676:	4649      	mov	r1, r9
 8004678:	4658      	mov	r0, fp
 800467a:	f001 f8bb 	bl	80057f4 <__mcmp>
 800467e:	2800      	cmp	r0, #0
 8004680:	db00      	blt.n	8004684 <_dtoa_r+0x8a0>
 8004682:	e77e      	b.n	8004582 <_dtoa_r+0x79e>
 8004684:	9b06      	ldr	r3, [sp, #24]
 8004686:	4659      	mov	r1, fp
 8004688:	3b01      	subs	r3, #1
 800468a:	9306      	str	r3, [sp, #24]
 800468c:	220a      	movs	r2, #10
 800468e:	2300      	movs	r3, #0
 8004690:	0020      	movs	r0, r4
 8004692:	f000 fe4d 	bl	8005330 <__multadd>
 8004696:	9b08      	ldr	r3, [sp, #32]
 8004698:	4683      	mov	fp, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d000      	beq.n	80046a0 <_dtoa_r+0x8bc>
 800469e:	e30f      	b.n	8004cc0 <_dtoa_r+0xedc>
 80046a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dc04      	bgt.n	80046b0 <_dtoa_r+0x8cc>
 80046a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	dd00      	ble.n	80046ae <_dtoa_r+0x8ca>
 80046ac:	e332      	b.n	8004d14 <_dtoa_r+0xf30>
 80046ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b0:	9307      	str	r3, [sp, #28]
 80046b2:	9b07      	ldr	r3, [sp, #28]
 80046b4:	4657      	mov	r7, sl
 80046b6:	4698      	mov	r8, r3
 80046b8:	0023      	movs	r3, r4
 80046ba:	465c      	mov	r4, fp
 80046bc:	46b3      	mov	fp, r6
 80046be:	464e      	mov	r6, r9
 80046c0:	4699      	mov	r9, r3
 80046c2:	e007      	b.n	80046d4 <_dtoa_r+0x8f0>
 80046c4:	0021      	movs	r1, r4
 80046c6:	2300      	movs	r3, #0
 80046c8:	220a      	movs	r2, #10
 80046ca:	4648      	mov	r0, r9
 80046cc:	f000 fe30 	bl	8005330 <__multadd>
 80046d0:	002f      	movs	r7, r5
 80046d2:	0004      	movs	r4, r0
 80046d4:	0031      	movs	r1, r6
 80046d6:	0020      	movs	r0, r4
 80046d8:	f7ff fada 	bl	8003c90 <quorem>
 80046dc:	4653      	mov	r3, sl
 80046de:	3030      	adds	r0, #48	; 0x30
 80046e0:	1c7d      	adds	r5, r7, #1
 80046e2:	7038      	strb	r0, [r7, #0]
 80046e4:	1aeb      	subs	r3, r5, r3
 80046e6:	4543      	cmp	r3, r8
 80046e8:	dbec      	blt.n	80046c4 <_dtoa_r+0x8e0>
 80046ea:	464b      	mov	r3, r9
 80046ec:	2700      	movs	r7, #0
 80046ee:	46b1      	mov	r9, r6
 80046f0:	465e      	mov	r6, fp
 80046f2:	46a3      	mov	fp, r4
 80046f4:	001c      	movs	r4, r3
 80046f6:	9002      	str	r0, [sp, #8]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4659      	mov	r1, fp
 80046fc:	0020      	movs	r0, r4
 80046fe:	f001 f815 	bl	800572c <__lshift>
 8004702:	4649      	mov	r1, r9
 8004704:	4683      	mov	fp, r0
 8004706:	f001 f875 	bl	80057f4 <__mcmp>
 800470a:	1e6b      	subs	r3, r5, #1
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	2800      	cmp	r0, #0
 8004710:	dc00      	bgt.n	8004714 <_dtoa_r+0x930>
 8004712:	e098      	b.n	8004846 <_dtoa_r+0xa62>
 8004714:	4651      	mov	r1, sl
 8004716:	e006      	b.n	8004726 <_dtoa_r+0x942>
 8004718:	4299      	cmp	r1, r3
 800471a:	d100      	bne.n	800471e <_dtoa_r+0x93a>
 800471c:	e182      	b.n	8004a24 <_dtoa_r+0xc40>
 800471e:	3d02      	subs	r5, #2
 8004720:	782a      	ldrb	r2, [r5, #0]
 8004722:	001d      	movs	r5, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	2a39      	cmp	r2, #57	; 0x39
 8004728:	d0f6      	beq.n	8004718 <_dtoa_r+0x934>
 800472a:	468a      	mov	sl, r1
 800472c:	3201      	adds	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	4649      	mov	r1, r9
 8004732:	0020      	movs	r0, r4
 8004734:	f000 fdf2 	bl	800531c <_Bfree>
 8004738:	2e00      	cmp	r6, #0
 800473a:	d00b      	beq.n	8004754 <_dtoa_r+0x970>
 800473c:	2f00      	cmp	r7, #0
 800473e:	d005      	beq.n	800474c <_dtoa_r+0x968>
 8004740:	42b7      	cmp	r7, r6
 8004742:	d003      	beq.n	800474c <_dtoa_r+0x968>
 8004744:	0039      	movs	r1, r7
 8004746:	0020      	movs	r0, r4
 8004748:	f000 fde8 	bl	800531c <_Bfree>
 800474c:	0031      	movs	r1, r6
 800474e:	0020      	movs	r0, r4
 8004750:	f000 fde4 	bl	800531c <_Bfree>
 8004754:	4659      	mov	r1, fp
 8004756:	0020      	movs	r0, r4
 8004758:	f000 fde0 	bl	800531c <_Bfree>
 800475c:	2300      	movs	r3, #0
 800475e:	702b      	strb	r3, [r5, #0]
 8004760:	9b06      	ldr	r3, [sp, #24]
 8004762:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004764:	3301      	adds	r3, #1
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <_dtoa_r+0x98e>
 800476e:	f7ff fb73 	bl	8003e58 <_dtoa_r+0x74>
 8004772:	601d      	str	r5, [r3, #0]
 8004774:	f7ff fb70 	bl	8003e58 <_dtoa_r+0x74>
 8004778:	0031      	movs	r1, r6
 800477a:	2300      	movs	r3, #0
 800477c:	220a      	movs	r2, #10
 800477e:	0020      	movs	r0, r4
 8004780:	f000 fdd6 	bl	8005330 <__multadd>
 8004784:	46b8      	mov	r8, r7
 8004786:	0006      	movs	r6, r0
 8004788:	9004      	str	r0, [sp, #16]
 800478a:	e71a      	b.n	80045c2 <_dtoa_r+0x7de>
 800478c:	2301      	movs	r3, #1
 800478e:	469a      	mov	sl, r3
 8004790:	e733      	b.n	80045fa <_dtoa_r+0x816>
 8004792:	201c      	movs	r0, #28
 8004794:	e6d9      	b.n	800454a <_dtoa_r+0x766>
 8004796:	0001      	movs	r1, r0
 8004798:	0020      	movs	r0, r4
 800479a:	f000 ff67 	bl	800566c <__pow5mult>
 800479e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047a0:	4681      	mov	r9, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	dc00      	bgt.n	80047a8 <_dtoa_r+0x9c4>
 80047a6:	e0e0      	b.n	800496a <_dtoa_r+0xb86>
 80047a8:	2300      	movs	r3, #0
 80047aa:	9309      	str	r3, [sp, #36]	; 0x24
 80047ac:	464b      	mov	r3, r9
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	3303      	adds	r3, #3
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	444b      	add	r3, r9
 80047b6:	6858      	ldr	r0, [r3, #4]
 80047b8:	f000 fe48 	bl	800544c <__hi0bits>
 80047bc:	2320      	movs	r3, #32
 80047be:	1a1b      	subs	r3, r3, r0
 80047c0:	e6b7      	b.n	8004532 <_dtoa_r+0x74e>
 80047c2:	2220      	movs	r2, #32
 80047c4:	9802      	ldr	r0, [sp, #8]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	4098      	lsls	r0, r3
 80047ca:	f7ff fb6d 	bl	8003ea8 <_dtoa_r+0xc4>
 80047ce:	2300      	movs	r3, #0
 80047d0:	930a      	str	r3, [sp, #40]	; 0x28
 80047d2:	f7ff fbbc 	bl	8003f4e <_dtoa_r+0x16a>
 80047d6:	9b02      	ldr	r3, [sp, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d000      	beq.n	80047de <_dtoa_r+0x9fa>
 80047dc:	e6a8      	b.n	8004530 <_dtoa_r+0x74c>
 80047de:	9802      	ldr	r0, [sp, #8]
 80047e0:	9903      	ldr	r1, [sp, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	030b      	lsls	r3, r1, #12
 80047e6:	d109      	bne.n	80047fc <_dtoa_r+0xa18>
 80047e8:	4bd8      	ldr	r3, [pc, #864]	; (8004b4c <_dtoa_r+0xd68>)
 80047ea:	420b      	tst	r3, r1
 80047ec:	d006      	beq.n	80047fc <_dtoa_r+0xa18>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	3201      	adds	r2, #1
 80047f2:	3301      	adds	r3, #1
 80047f4:	9304      	str	r3, [sp, #16]
 80047f6:	2301      	movs	r3, #1
 80047f8:	469c      	mov	ip, r3
 80047fa:	44e0      	add	r8, ip
 80047fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	d100      	bne.n	8004806 <_dtoa_r+0xa22>
 8004804:	e694      	b.n	8004530 <_dtoa_r+0x74c>
 8004806:	e7d1      	b.n	80047ac <_dtoa_r+0x9c8>
 8004808:	4643      	mov	r3, r8
 800480a:	e66b      	b.n	80044e4 <_dtoa_r+0x700>
 800480c:	002a      	movs	r2, r5
 800480e:	0031      	movs	r1, r6
 8004810:	0020      	movs	r0, r4
 8004812:	f000 ff2b 	bl	800566c <__pow5mult>
 8004816:	465a      	mov	r2, fp
 8004818:	0001      	movs	r1, r0
 800481a:	0006      	movs	r6, r0
 800481c:	0020      	movs	r0, r4
 800481e:	f000 fe69 	bl	80054f4 <__multiply>
 8004822:	4659      	mov	r1, fp
 8004824:	0005      	movs	r5, r0
 8004826:	0020      	movs	r0, r4
 8004828:	f000 fd78 	bl	800531c <_Bfree>
 800482c:	464b      	mov	r3, r9
 800482e:	46ab      	mov	fp, r5
 8004830:	2b00      	cmp	r3, #0
 8004832:	d100      	bne.n	8004836 <_dtoa_r+0xa52>
 8004834:	e66f      	b.n	8004516 <_dtoa_r+0x732>
 8004836:	e668      	b.n	800450a <_dtoa_r+0x726>
 8004838:	0031      	movs	r1, r6
 800483a:	003a      	movs	r2, r7
 800483c:	0020      	movs	r0, r4
 800483e:	f000 ff75 	bl	800572c <__lshift>
 8004842:	0006      	movs	r6, r0
 8004844:	e6a8      	b.n	8004598 <_dtoa_r+0x7b4>
 8004846:	2800      	cmp	r0, #0
 8004848:	d108      	bne.n	800485c <_dtoa_r+0xa78>
 800484a:	9902      	ldr	r1, [sp, #8]
 800484c:	07c9      	lsls	r1, r1, #31
 800484e:	d500      	bpl.n	8004852 <_dtoa_r+0xa6e>
 8004850:	e760      	b.n	8004714 <_dtoa_r+0x930>
 8004852:	e003      	b.n	800485c <_dtoa_r+0xa78>
 8004854:	3d02      	subs	r5, #2
 8004856:	782a      	ldrb	r2, [r5, #0]
 8004858:	001d      	movs	r5, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	2a30      	cmp	r2, #48	; 0x30
 800485e:	d0f9      	beq.n	8004854 <_dtoa_r+0xa70>
 8004860:	e766      	b.n	8004730 <_dtoa_r+0x94c>
 8004862:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004864:	2a00      	cmp	r2, #0
 8004866:	d100      	bne.n	800486a <_dtoa_r+0xa86>
 8004868:	e199      	b.n	8004b9e <_dtoa_r+0xdba>
 800486a:	4ab9      	ldr	r2, [pc, #740]	; (8004b50 <_dtoa_r+0xd6c>)
 800486c:	4694      	mov	ip, r2
 800486e:	4463      	add	r3, ip
 8004870:	9a04      	ldr	r2, [sp, #16]
 8004872:	4498      	add	r8, r3
 8004874:	4694      	mov	ip, r2
 8004876:	449c      	add	ip, r3
 8004878:	4663      	mov	r3, ip
 800487a:	464d      	mov	r5, r9
 800487c:	0017      	movs	r7, r2
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	e5fa      	b.n	8004478 <_dtoa_r+0x694>
 8004882:	2301      	movs	r3, #1
 8004884:	9308      	str	r3, [sp, #32]
 8004886:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc00      	bgt.n	800488e <_dtoa_r+0xaaa>
 800488c:	e0c0      	b.n	8004a10 <_dtoa_r+0xc2c>
 800488e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004890:	9307      	str	r3, [sp, #28]
 8004892:	001f      	movs	r7, r3
 8004894:	f7ff fb99 	bl	8003fca <_dtoa_r+0x1e6>
 8004898:	9b07      	ldr	r3, [sp, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	dd01      	ble.n	80048a2 <_dtoa_r+0xabe>
 800489e:	f7ff fbc1 	bl	8004024 <_dtoa_r+0x240>
 80048a2:	d000      	beq.n	80048a6 <_dtoa_r+0xac2>
 80048a4:	e0b0      	b.n	8004a08 <_dtoa_r+0xc24>
 80048a6:	9804      	ldr	r0, [sp, #16]
 80048a8:	9905      	ldr	r1, [sp, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	4ba9      	ldr	r3, [pc, #676]	; (8004b54 <_dtoa_r+0xd70>)
 80048ae:	f7fd fd85 	bl	80023bc <__aeabi_dmul>
 80048b2:	9a02      	ldr	r2, [sp, #8]
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	f7fc fb29 	bl	8000f0c <__aeabi_dcmpge>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2600      	movs	r6, #0
 80048be:	4699      	mov	r9, r3
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d15f      	bne.n	8004984 <_dtoa_r+0xba0>
 80048c4:	4653      	mov	r3, sl
 80048c6:	4652      	mov	r2, sl
 80048c8:	1c5d      	adds	r5, r3, #1
 80048ca:	2331      	movs	r3, #49	; 0x31
 80048cc:	7013      	strb	r3, [r2, #0]
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	3301      	adds	r3, #1
 80048d2:	9306      	str	r3, [sp, #24]
 80048d4:	4649      	mov	r1, r9
 80048d6:	0020      	movs	r0, r4
 80048d8:	f000 fd20 	bl	800531c <_Bfree>
 80048dc:	2e00      	cmp	r6, #0
 80048de:	d000      	beq.n	80048e2 <_dtoa_r+0xafe>
 80048e0:	e734      	b.n	800474c <_dtoa_r+0x968>
 80048e2:	e737      	b.n	8004754 <_dtoa_r+0x970>
 80048e4:	9b06      	ldr	r3, [sp, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d100      	bne.n	80048ec <_dtoa_r+0xb08>
 80048ea:	e16a      	b.n	8004bc2 <_dtoa_r+0xdde>
 80048ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048f0:	425d      	negs	r5, r3
 80048f2:	230f      	movs	r3, #15
 80048f4:	4a98      	ldr	r2, [pc, #608]	; (8004b58 <_dtoa_r+0xd74>)
 80048f6:	402b      	ands	r3, r5
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	18d3      	adds	r3, r2, r3
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f7fd fd5c 	bl	80023bc <__aeabi_dmul>
 8004904:	112d      	asrs	r5, r5, #4
 8004906:	900c      	str	r0, [sp, #48]	; 0x30
 8004908:	910d      	str	r1, [sp, #52]	; 0x34
 800490a:	2d00      	cmp	r5, #0
 800490c:	d100      	bne.n	8004910 <_dtoa_r+0xb2c>
 800490e:	e1e9      	b.n	8004ce4 <_dtoa_r+0xf00>
 8004910:	2202      	movs	r2, #2
 8004912:	2300      	movs	r3, #0
 8004914:	2701      	movs	r7, #1
 8004916:	4e91      	ldr	r6, [pc, #580]	; (8004b5c <_dtoa_r+0xd78>)
 8004918:	9202      	str	r2, [sp, #8]
 800491a:	422f      	tst	r7, r5
 800491c:	d007      	beq.n	800492e <_dtoa_r+0xb4a>
 800491e:	9b02      	ldr	r3, [sp, #8]
 8004920:	3301      	adds	r3, #1
 8004922:	9302      	str	r3, [sp, #8]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	6873      	ldr	r3, [r6, #4]
 8004928:	f7fd fd48 	bl	80023bc <__aeabi_dmul>
 800492c:	2301      	movs	r3, #1
 800492e:	106d      	asrs	r5, r5, #1
 8004930:	3608      	adds	r6, #8
 8004932:	2d00      	cmp	r5, #0
 8004934:	d1f1      	bne.n	800491a <_dtoa_r+0xb36>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d100      	bne.n	800493c <_dtoa_r+0xb58>
 800493a:	e4bf      	b.n	80042bc <_dtoa_r+0x4d8>
 800493c:	900c      	str	r0, [sp, #48]	; 0x30
 800493e:	910d      	str	r1, [sp, #52]	; 0x34
 8004940:	e4bc      	b.n	80042bc <_dtoa_r+0x4d8>
 8004942:	6871      	ldr	r1, [r6, #4]
 8004944:	0020      	movs	r0, r4
 8004946:	f000 fcc1 	bl	80052cc <_Balloc>
 800494a:	0031      	movs	r1, r6
 800494c:	0005      	movs	r5, r0
 800494e:	6933      	ldr	r3, [r6, #16]
 8004950:	310c      	adds	r1, #12
 8004952:	1c9a      	adds	r2, r3, #2
 8004954:	0092      	lsls	r2, r2, #2
 8004956:	300c      	adds	r0, #12
 8004958:	f7ff f808 	bl	800396c <memcpy>
 800495c:	2201      	movs	r2, #1
 800495e:	0029      	movs	r1, r5
 8004960:	0020      	movs	r0, r4
 8004962:	f000 fee3 	bl	800572c <__lshift>
 8004966:	9004      	str	r0, [sp, #16]
 8004968:	e61b      	b.n	80045a2 <_dtoa_r+0x7be>
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d100      	bne.n	8004972 <_dtoa_r+0xb8e>
 8004970:	e735      	b.n	80047de <_dtoa_r+0x9fa>
 8004972:	e719      	b.n	80047a8 <_dtoa_r+0x9c4>
 8004974:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004976:	2b02      	cmp	r3, #2
 8004978:	dc00      	bgt.n	800497c <_dtoa_r+0xb98>
 800497a:	e606      	b.n	800458a <_dtoa_r+0x7a6>
 800497c:	9b07      	ldr	r3, [sp, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d100      	bne.n	8004984 <_dtoa_r+0xba0>
 8004982:	e110      	b.n	8004ba6 <_dtoa_r+0xdc2>
 8004984:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004986:	4655      	mov	r5, sl
 8004988:	43db      	mvns	r3, r3
 800498a:	9306      	str	r3, [sp, #24]
 800498c:	e7a2      	b.n	80048d4 <_dtoa_r+0xaf0>
 800498e:	2300      	movs	r3, #0
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004994:	2b02      	cmp	r3, #2
 8004996:	d100      	bne.n	800499a <_dtoa_r+0xbb6>
 8004998:	e775      	b.n	8004886 <_dtoa_r+0xaa2>
 800499a:	2300      	movs	r3, #0
 800499c:	2100      	movs	r1, #0
 800499e:	6463      	str	r3, [r4, #68]	; 0x44
 80049a0:	0020      	movs	r0, r4
 80049a2:	f000 fc93 	bl	80052cc <_Balloc>
 80049a6:	2300      	movs	r3, #0
 80049a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80049aa:	3301      	adds	r3, #1
 80049ac:	9308      	str	r3, [sp, #32]
 80049ae:	3b02      	subs	r3, #2
 80049b0:	4682      	mov	sl, r0
 80049b2:	6420      	str	r0, [r4, #64]	; 0x40
 80049b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b6:	9307      	str	r3, [sp, #28]
 80049b8:	f7ff fb20 	bl	8003ffc <_dtoa_r+0x218>
 80049bc:	9802      	ldr	r0, [sp, #8]
 80049be:	f7fe fac7 	bl	8002f50 <__aeabi_i2d>
 80049c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c6:	f7fd fcf9 	bl	80023bc <__aeabi_dmul>
 80049ca:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <_dtoa_r+0xd7c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	f7fc fdb1 	bl	8001534 <__aeabi_dadd>
 80049d2:	0005      	movs	r5, r0
 80049d4:	4b63      	ldr	r3, [pc, #396]	; (8004b64 <_dtoa_r+0xd80>)
 80049d6:	18ce      	adds	r6, r1, r3
 80049d8:	2200      	movs	r2, #0
 80049da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049de:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <_dtoa_r+0xd70>)
 80049e0:	f7fd ff6c 	bl	80028bc <__aeabi_dsub>
 80049e4:	002a      	movs	r2, r5
 80049e6:	0033      	movs	r3, r6
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9103      	str	r1, [sp, #12]
 80049ec:	f7fc fa84 	bl	8000ef8 <__aeabi_dcmpgt>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d154      	bne.n	8004a9e <_dtoa_r+0xcba>
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	0609      	lsls	r1, r1, #24
 80049f8:	1873      	adds	r3, r6, r1
 80049fa:	002a      	movs	r2, r5
 80049fc:	9802      	ldr	r0, [sp, #8]
 80049fe:	9903      	ldr	r1, [sp, #12]
 8004a00:	f7fc fa66 	bl	8000ed0 <__aeabi_dcmplt>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d040      	beq.n	8004a8a <_dtoa_r+0xca6>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	4699      	mov	r9, r3
 8004a0e:	e7b9      	b.n	8004984 <_dtoa_r+0xba0>
 8004a10:	2301      	movs	r3, #1
 8004a12:	2501      	movs	r5, #1
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	9327      	str	r3, [sp, #156]	; 0x9c
 8004a18:	f7ff fbfa 	bl	8004210 <_dtoa_r+0x42c>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9308      	str	r3, [sp, #32]
 8004a20:	f7ff fac9 	bl	8003fb6 <_dtoa_r+0x1d2>
 8004a24:	9b06      	ldr	r3, [sp, #24]
 8004a26:	468a      	mov	sl, r1
 8004a28:	3301      	adds	r3, #1
 8004a2a:	9306      	str	r3, [sp, #24]
 8004a2c:	2331      	movs	r3, #49	; 0x31
 8004a2e:	700b      	strb	r3, [r1, #0]
 8004a30:	e67e      	b.n	8004730 <_dtoa_r+0x94c>
 8004a32:	4645      	mov	r5, r8
 8004a34:	464c      	mov	r4, r9
 8004a36:	e68d      	b.n	8004754 <_dtoa_r+0x970>
 8004a38:	1aee      	subs	r6, r5, r3
 8004a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3c:	46a9      	mov	r9, r5
 8004a3e:	469c      	mov	ip, r3
 8004a40:	44b4      	add	ip, r6
 8004a42:	4663      	mov	r3, ip
 8004a44:	2500      	movs	r5, #0
 8004a46:	9309      	str	r3, [sp, #36]	; 0x24
 8004a48:	e50c      	b.n	8004464 <_dtoa_r+0x680>
 8004a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a4c:	4653      	mov	r3, sl
 8004a4e:	4692      	mov	sl, r2
 8004a50:	4642      	mov	r2, r8
 8004a52:	46d9      	mov	r9, fp
 8004a54:	46ab      	mov	fp, r5
 8004a56:	1c55      	adds	r5, r2, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	dd00      	ble.n	8004a5e <_dtoa_r+0xc7a>
 8004a5c:	e0e0      	b.n	8004c20 <_dtoa_r+0xe3c>
 8004a5e:	4643      	mov	r3, r8
 8004a60:	9a02      	ldr	r2, [sp, #8]
 8004a62:	0037      	movs	r7, r6
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	9e04      	ldr	r6, [sp, #16]
 8004a68:	e662      	b.n	8004730 <_dtoa_r+0x94c>
 8004a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6e:	9210      	str	r2, [sp, #64]	; 0x40
 8004a70:	9311      	str	r3, [sp, #68]	; 0x44
 8004a72:	2302      	movs	r3, #2
 8004a74:	9302      	str	r3, [sp, #8]
 8004a76:	f7ff fbfe 	bl	8004276 <_dtoa_r+0x492>
 8004a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a7c:	46da      	mov	sl, fp
 8004a7e:	4699      	mov	r9, r3
 8004a80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004a84:	4698      	mov	r8, r3
 8004a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a88:	469b      	mov	fp, r3
 8004a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a8e:	9202      	str	r2, [sp, #8]
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	f7ff fab3 	bl	8003ffc <_dtoa_r+0x218>
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	9a07      	ldr	r2, [sp, #28]
 8004a9a:	1a9f      	subs	r7, r3, r2
 8004a9c:	e4ec      	b.n	8004478 <_dtoa_r+0x694>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	4699      	mov	r9, r3
 8004aa4:	e70e      	b.n	80048c4 <_dtoa_r+0xae0>
 8004aa6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004aa8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004aaa:	f7fd fc87 	bl	80023bc <__aeabi_dmul>
 8004aae:	4653      	mov	r3, sl
 8004ab0:	9a02      	ldr	r2, [sp, #8]
 8004ab2:	900c      	str	r0, [sp, #48]	; 0x30
 8004ab4:	910d      	str	r1, [sp, #52]	; 0x34
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aba:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d027      	beq.n	8004b10 <_dtoa_r+0xd2c>
 8004ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ac2:	4453      	add	r3, sl
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	46c1      	mov	r9, r8
 8004aca:	46a0      	mov	r8, r4
 8004acc:	002c      	movs	r4, r5
 8004ace:	9310      	str	r3, [sp, #64]	; 0x40
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <_dtoa_r+0xd84>)
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	0039      	movs	r1, r7
 8004ad8:	f7fd fc70 	bl	80023bc <__aeabi_dmul>
 8004adc:	000f      	movs	r7, r1
 8004ade:	0006      	movs	r6, r0
 8004ae0:	f7fe fa02 	bl	8002ee8 <__aeabi_d2iz>
 8004ae4:	0005      	movs	r5, r0
 8004ae6:	f7fe fa33 	bl	8002f50 <__aeabi_i2d>
 8004aea:	000b      	movs	r3, r1
 8004aec:	0002      	movs	r2, r0
 8004aee:	0039      	movs	r1, r7
 8004af0:	0030      	movs	r0, r6
 8004af2:	f7fd fee3 	bl	80028bc <__aeabi_dsub>
 8004af6:	3530      	adds	r5, #48	; 0x30
 8004af8:	9b02      	ldr	r3, [sp, #8]
 8004afa:	7025      	strb	r5, [r4, #0]
 8004afc:	3401      	adds	r4, #1
 8004afe:	0006      	movs	r6, r0
 8004b00:	000f      	movs	r7, r1
 8004b02:	42a3      	cmp	r3, r4
 8004b04:	d1e4      	bne.n	8004ad0 <_dtoa_r+0xcec>
 8004b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b08:	4644      	mov	r4, r8
 8004b0a:	46c8      	mov	r8, r9
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	9d02      	ldr	r5, [sp, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <_dtoa_r+0xd88>)
 8004b18:	f7fc fd0c 	bl	8001534 <__aeabi_dadd>
 8004b1c:	0032      	movs	r2, r6
 8004b1e:	003b      	movs	r3, r7
 8004b20:	f7fc f9d6 	bl	8000ed0 <__aeabi_dcmplt>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d100      	bne.n	8004b2a <_dtoa_r+0xd46>
 8004b28:	e0a1      	b.n	8004c6e <_dtoa_r+0xe8a>
 8004b2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004b2c:	1e6b      	subs	r3, r5, #1
 8004b2e:	7819      	ldrb	r1, [r3, #0]
 8004b30:	9206      	str	r2, [sp, #24]
 8004b32:	4650      	mov	r0, sl
 8004b34:	f7ff fb05 	bl	8004142 <_dtoa_r+0x35e>
 8004b38:	9b06      	ldr	r3, [sp, #24]
 8004b3a:	4682      	mov	sl, r0
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	9306      	str	r3, [sp, #24]
 8004b40:	2330      	movs	r3, #48	; 0x30
 8004b42:	0002      	movs	r2, r0
 8004b44:	7003      	strb	r3, [r0, #0]
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	f7ff fb00 	bl	800414c <_dtoa_r+0x368>
 8004b4c:	7ff00000 	.word	0x7ff00000
 8004b50:	00000433 	.word	0x00000433
 8004b54:	40140000 	.word	0x40140000
 8004b58:	08016c00 	.word	0x08016c00
 8004b5c:	08016bd8 	.word	0x08016bd8
 8004b60:	401c0000 	.word	0x401c0000
 8004b64:	fcc00000 	.word	0xfcc00000
 8004b68:	40240000 	.word	0x40240000
 8004b6c:	3fe00000 	.word	0x3fe00000
 8004b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b72:	46d9      	mov	r9, fp
 8004b74:	469a      	mov	sl, r3
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	46ab      	mov	fp, r5
 8004b7a:	003d      	movs	r5, r7
 8004b7c:	2b39      	cmp	r3, #57	; 0x39
 8004b7e:	d061      	beq.n	8004c44 <_dtoa_r+0xe60>
 8004b80:	4642      	mov	r2, r8
 8004b82:	9b02      	ldr	r3, [sp, #8]
 8004b84:	0037      	movs	r7, r6
 8004b86:	3301      	adds	r3, #1
 8004b88:	7013      	strb	r3, [r2, #0]
 8004b8a:	9e04      	ldr	r6, [sp, #16]
 8004b8c:	e5d0      	b.n	8004730 <_dtoa_r+0x94c>
 8004b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b90:	46d9      	mov	r9, fp
 8004b92:	469a      	mov	sl, r3
 8004b94:	46ab      	mov	fp, r5
 8004b96:	003d      	movs	r5, r7
 8004b98:	0037      	movs	r7, r6
 8004b9a:	9e04      	ldr	r6, [sp, #16]
 8004b9c:	e5ac      	b.n	80046f8 <_dtoa_r+0x914>
 8004b9e:	2336      	movs	r3, #54	; 0x36
 8004ba0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	e664      	b.n	8004870 <_dtoa_r+0xa8c>
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	2205      	movs	r2, #5
 8004baa:	0020      	movs	r0, r4
 8004bac:	f000 fbc0 	bl	8005330 <__multadd>
 8004bb0:	4681      	mov	r9, r0
 8004bb2:	0001      	movs	r1, r0
 8004bb4:	4658      	mov	r0, fp
 8004bb6:	f000 fe1d 	bl	80057f4 <__mcmp>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	dd00      	ble.n	8004bc0 <_dtoa_r+0xddc>
 8004bbe:	e681      	b.n	80048c4 <_dtoa_r+0xae0>
 8004bc0:	e6e0      	b.n	8004984 <_dtoa_r+0xba0>
 8004bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc6:	920c      	str	r2, [sp, #48]	; 0x30
 8004bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8004bca:	2302      	movs	r3, #2
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	f7ff fb75 	bl	80042bc <_dtoa_r+0x4d8>
 8004bd2:	9b07      	ldr	r3, [sp, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d100      	bne.n	8004bda <_dtoa_r+0xdf6>
 8004bd8:	e6f0      	b.n	80049bc <_dtoa_r+0xbd8>
 8004bda:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	dc00      	bgt.n	8004be2 <_dtoa_r+0xdfe>
 8004be0:	e753      	b.n	8004a8a <_dtoa_r+0xca6>
 8004be2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004be4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004be6:	9b06      	ldr	r3, [sp, #24]
 8004be8:	2200      	movs	r2, #0
 8004bea:	3b01      	subs	r3, #1
 8004bec:	9318      	str	r3, [sp, #96]	; 0x60
 8004bee:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <_dtoa_r+0xf38>)
 8004bf0:	f7fd fbe4 	bl	80023bc <__aeabi_dmul>
 8004bf4:	0005      	movs	r5, r0
 8004bf6:	000e      	movs	r6, r1
 8004bf8:	9802      	ldr	r0, [sp, #8]
 8004bfa:	950c      	str	r5, [sp, #48]	; 0x30
 8004bfc:	960d      	str	r6, [sp, #52]	; 0x34
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f7fe f9a6 	bl	8002f50 <__aeabi_i2d>
 8004c04:	002a      	movs	r2, r5
 8004c06:	0033      	movs	r3, r6
 8004c08:	f7fd fbd8 	bl	80023bc <__aeabi_dmul>
 8004c0c:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <_dtoa_r+0xf3c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f7fc fc90 	bl	8001534 <__aeabi_dadd>
 8004c14:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <_dtoa_r+0xf40>)
 8004c16:	0005      	movs	r5, r0
 8004c18:	18ce      	adds	r6, r1, r3
 8004c1a:	9710      	str	r7, [sp, #64]	; 0x40
 8004c1c:	f7ff fb71 	bl	8004302 <_dtoa_r+0x51e>
 8004c20:	4659      	mov	r1, fp
 8004c22:	2201      	movs	r2, #1
 8004c24:	0020      	movs	r0, r4
 8004c26:	f000 fd81 	bl	800572c <__lshift>
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4683      	mov	fp, r0
 8004c2e:	f000 fde1 	bl	80057f4 <__mcmp>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	dd3c      	ble.n	8004cb0 <_dtoa_r+0xecc>
 8004c36:	9b02      	ldr	r3, [sp, #8]
 8004c38:	2b39      	cmp	r3, #57	; 0x39
 8004c3a:	d003      	beq.n	8004c44 <_dtoa_r+0xe60>
 8004c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3e:	3331      	adds	r3, #49	; 0x31
 8004c40:	9302      	str	r3, [sp, #8]
 8004c42:	e70c      	b.n	8004a5e <_dtoa_r+0xc7a>
 8004c44:	2339      	movs	r3, #57	; 0x39
 8004c46:	4642      	mov	r2, r8
 8004c48:	0037      	movs	r7, r6
 8004c4a:	7013      	strb	r3, [r2, #0]
 8004c4c:	9e04      	ldr	r6, [sp, #16]
 8004c4e:	2239      	movs	r2, #57	; 0x39
 8004c50:	1e6b      	subs	r3, r5, #1
 8004c52:	4651      	mov	r1, sl
 8004c54:	e567      	b.n	8004726 <_dtoa_r+0x942>
 8004c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c58:	46d9      	mov	r9, fp
 8004c5a:	469a      	mov	sl, r3
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	46ab      	mov	fp, r5
 8004c60:	1c5d      	adds	r5, r3, #1
 8004c62:	9b02      	ldr	r3, [sp, #8]
 8004c64:	2b39      	cmp	r3, #57	; 0x39
 8004c66:	d0ed      	beq.n	8004c44 <_dtoa_r+0xe60>
 8004c68:	2f00      	cmp	r7, #0
 8004c6a:	dce7      	bgt.n	8004c3c <_dtoa_r+0xe58>
 8004c6c:	e6f7      	b.n	8004a5e <_dtoa_r+0xc7a>
 8004c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c72:	2000      	movs	r0, #0
 8004c74:	492c      	ldr	r1, [pc, #176]	; (8004d28 <_dtoa_r+0xf44>)
 8004c76:	f7fd fe21 	bl	80028bc <__aeabi_dsub>
 8004c7a:	0032      	movs	r2, r6
 8004c7c:	003b      	movs	r3, r7
 8004c7e:	f7fc f93b 	bl	8000ef8 <__aeabi_dcmpgt>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d101      	bne.n	8004c8a <_dtoa_r+0xea6>
 8004c86:	e700      	b.n	8004a8a <_dtoa_r+0xca6>
 8004c88:	001d      	movs	r5, r3
 8004c8a:	1e6b      	subs	r3, r5, #1
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	2a30      	cmp	r2, #48	; 0x30
 8004c90:	d0fa      	beq.n	8004c88 <_dtoa_r+0xea4>
 8004c92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004c94:	9306      	str	r3, [sp, #24]
 8004c96:	e55d      	b.n	8004754 <_dtoa_r+0x970>
 8004c98:	4655      	mov	r5, sl
 8004c9a:	46da      	mov	sl, fp
 8004c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	4693      	mov	fp, r2
 8004ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004ca8:	9206      	str	r2, [sp, #24]
 8004caa:	4650      	mov	r0, sl
 8004cac:	f7ff fa49 	bl	8004142 <_dtoa_r+0x35e>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d000      	beq.n	8004cb6 <_dtoa_r+0xed2>
 8004cb4:	e6d3      	b.n	8004a5e <_dtoa_r+0xc7a>
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	07db      	lsls	r3, r3, #31
 8004cba:	d400      	bmi.n	8004cbe <_dtoa_r+0xeda>
 8004cbc:	e6cf      	b.n	8004a5e <_dtoa_r+0xc7a>
 8004cbe:	e7ba      	b.n	8004c36 <_dtoa_r+0xe52>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	0031      	movs	r1, r6
 8004cc4:	220a      	movs	r2, #10
 8004cc6:	0020      	movs	r0, r4
 8004cc8:	f000 fb32 	bl	8005330 <__multadd>
 8004ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cce:	0006      	movs	r6, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dd01      	ble.n	8004cd8 <_dtoa_r+0xef4>
 8004cd4:	9307      	str	r3, [sp, #28]
 8004cd6:	e45c      	b.n	8004592 <_dtoa_r+0x7ae>
 8004cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	dc1a      	bgt.n	8004d14 <_dtoa_r+0xf30>
 8004cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce0:	9307      	str	r3, [sp, #28]
 8004ce2:	e456      	b.n	8004592 <_dtoa_r+0x7ae>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	f7ff fae8 	bl	80042bc <_dtoa_r+0x4d8>
 8004cec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004cee:	e7d0      	b.n	8004c92 <_dtoa_r+0xeae>
 8004cf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004cf2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004cf4:	9306      	str	r3, [sp, #24]
 8004cf6:	9902      	ldr	r1, [sp, #8]
 8004cf8:	4653      	mov	r3, sl
 8004cfa:	4650      	mov	r0, sl
 8004cfc:	f7ff fa21 	bl	8004142 <_dtoa_r+0x35e>
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d100      	bne.n	8004d06 <_dtoa_r+0xf22>
 8004d04:	e428      	b.n	8004558 <_dtoa_r+0x774>
 8004d06:	233c      	movs	r3, #60	; 0x3c
 8004d08:	1a18      	subs	r0, r3, r0
 8004d0a:	e41e      	b.n	800454a <_dtoa_r+0x766>
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <_dtoa_r+0xf48>)
 8004d0e:	469a      	mov	sl, r3
 8004d10:	f7ff f8a2 	bl	8003e58 <_dtoa_r+0x74>
 8004d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d16:	9307      	str	r3, [sp, #28]
 8004d18:	e630      	b.n	800497c <_dtoa_r+0xb98>
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40240000 	.word	0x40240000
 8004d20:	401c0000 	.word	0x401c0000
 8004d24:	fcc00000 	.word	0xfcc00000
 8004d28:	3fe00000 	.word	0x3fe00000
 8004d2c:	08018b40 	.word	0x08018b40

08004d30 <_fclose_r>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	0005      	movs	r5, r0
 8004d34:	1e0c      	subs	r4, r1, #0
 8004d36:	d008      	beq.n	8004d4a <_fclose_r+0x1a>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d002      	beq.n	8004d42 <_fclose_r+0x12>
 8004d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d031      	beq.n	8004da6 <_fclose_r+0x76>
 8004d42:	220c      	movs	r2, #12
 8004d44:	5ea3      	ldrsh	r3, [r4, r2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <_fclose_r+0x20>
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	0030      	movs	r0, r6
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	0021      	movs	r1, r4
 8004d52:	0028      	movs	r0, r5
 8004d54:	f000 f840 	bl	8004dd8 <__sflush_r>
 8004d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d5a:	0006      	movs	r6, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <_fclose_r+0x3a>
 8004d60:	69e1      	ldr	r1, [r4, #28]
 8004d62:	0028      	movs	r0, r5
 8004d64:	4798      	blx	r3
 8004d66:	2800      	cmp	r0, #0
 8004d68:	db24      	blt.n	8004db4 <_fclose_r+0x84>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	d424      	bmi.n	8004dba <_fclose_r+0x8a>
 8004d70:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d008      	beq.n	8004d88 <_fclose_r+0x58>
 8004d76:	0023      	movs	r3, r4
 8004d78:	3340      	adds	r3, #64	; 0x40
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	d002      	beq.n	8004d84 <_fclose_r+0x54>
 8004d7e:	0028      	movs	r0, r5
 8004d80:	f000 f94c 	bl	800501c <_free_r>
 8004d84:	2300      	movs	r3, #0
 8004d86:	6323      	str	r3, [r4, #48]	; 0x30
 8004d88:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d8a:	2900      	cmp	r1, #0
 8004d8c:	d004      	beq.n	8004d98 <_fclose_r+0x68>
 8004d8e:	0028      	movs	r0, r5
 8004d90:	f000 f944 	bl	800501c <_free_r>
 8004d94:	2300      	movs	r3, #0
 8004d96:	6463      	str	r3, [r4, #68]	; 0x44
 8004d98:	f7fe fac8 	bl	800332c <__sfp_lock_acquire>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	81a3      	strh	r3, [r4, #12]
 8004da0:	f7fe fac6 	bl	8003330 <__sfp_lock_release>
 8004da4:	e7d2      	b.n	8004d4c <_fclose_r+0x1c>
 8004da6:	f7fe fab9 	bl	800331c <__sinit>
 8004daa:	220c      	movs	r2, #12
 8004dac:	5ea3      	ldrsh	r3, [r4, r2]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0cb      	beq.n	8004d4a <_fclose_r+0x1a>
 8004db2:	e7cd      	b.n	8004d50 <_fclose_r+0x20>
 8004db4:	2601      	movs	r6, #1
 8004db6:	4276      	negs	r6, r6
 8004db8:	e7d7      	b.n	8004d6a <_fclose_r+0x3a>
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	0028      	movs	r0, r5
 8004dbe:	f000 f92d 	bl	800501c <_free_r>
 8004dc2:	e7d5      	b.n	8004d70 <_fclose_r+0x40>

08004dc4 <fclose>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <fclose+0x10>)
 8004dc8:	0001      	movs	r1, r0
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	f7ff ffb0 	bl	8004d30 <_fclose_r>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	20000000 	.word	0x20000000

08004dd8 <__sflush_r>:
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	46c6      	mov	lr, r8
 8004ddc:	b500      	push	{lr}
 8004dde:	230c      	movs	r3, #12
 8004de0:	5eca      	ldrsh	r2, [r1, r3]
 8004de2:	4680      	mov	r8, r0
 8004de4:	b293      	uxth	r3, r2
 8004de6:	000c      	movs	r4, r1
 8004de8:	0719      	lsls	r1, r3, #28
 8004dea:	d446      	bmi.n	8004e7a <__sflush_r+0xa2>
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4313      	orrs	r3, r2
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	81a3      	strh	r3, [r4, #12]
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	dd5f      	ble.n	8004eba <__sflush_r+0xe2>
 8004dfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	d05f      	beq.n	8004ec0 <__sflush_r+0xe8>
 8004e00:	4642      	mov	r2, r8
 8004e02:	4641      	mov	r1, r8
 8004e04:	6816      	ldr	r6, [r2, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	600a      	str	r2, [r1, #0]
 8004e0c:	69e1      	ldr	r1, [r4, #28]
 8004e0e:	04da      	lsls	r2, r3, #19
 8004e10:	d500      	bpl.n	8004e14 <__sflush_r+0x3c>
 8004e12:	e07e      	b.n	8004f12 <__sflush_r+0x13a>
 8004e14:	2301      	movs	r3, #1
 8004e16:	2200      	movs	r2, #0
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47a8      	blx	r5
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d055      	beq.n	8004ecc <__sflush_r+0xf4>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004e24:	69e1      	ldr	r1, [r4, #28]
 8004e26:	075b      	lsls	r3, r3, #29
 8004e28:	d506      	bpl.n	8004e38 <__sflush_r+0x60>
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	1ac0      	subs	r0, r0, r3
 8004e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <__sflush_r+0x60>
 8004e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e36:	1ac0      	subs	r0, r0, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	47a8      	blx	r5
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d04f      	beq.n	8004ee4 <__sflush_r+0x10c>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	4a36      	ldr	r2, [pc, #216]	; (8004f20 <__sflush_r+0x148>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	6062      	str	r2, [r4, #4]
 8004e4e:	6922      	ldr	r2, [r4, #16]
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	04db      	lsls	r3, r3, #19
 8004e58:	d459      	bmi.n	8004f0e <__sflush_r+0x136>
 8004e5a:	4643      	mov	r3, r8
 8004e5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e5e:	601e      	str	r6, [r3, #0]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d02d      	beq.n	8004ec0 <__sflush_r+0xe8>
 8004e64:	0023      	movs	r3, r4
 8004e66:	3340      	adds	r3, #64	; 0x40
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d002      	beq.n	8004e72 <__sflush_r+0x9a>
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	f000 f8d5 	bl	800501c <_free_r>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2000      	movs	r0, #0
 8004e76:	6323      	str	r3, [r4, #48]	; 0x30
 8004e78:	e023      	b.n	8004ec2 <__sflush_r+0xea>
 8004e7a:	6926      	ldr	r6, [r4, #16]
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	d01f      	beq.n	8004ec0 <__sflush_r+0xe8>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	6026      	str	r6, [r4, #0]
 8004e84:	1b95      	subs	r5, r2, r6
 8004e86:	2200      	movs	r2, #0
 8004e88:	079b      	lsls	r3, r3, #30
 8004e8a:	d01d      	beq.n	8004ec8 <__sflush_r+0xf0>
 8004e8c:	60a2      	str	r2, [r4, #8]
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	dc04      	bgt.n	8004e9c <__sflush_r+0xc4>
 8004e92:	e015      	b.n	8004ec0 <__sflush_r+0xe8>
 8004e94:	1836      	adds	r6, r6, r0
 8004e96:	1a2d      	subs	r5, r5, r0
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	dd11      	ble.n	8004ec0 <__sflush_r+0xe8>
 8004e9c:	002b      	movs	r3, r5
 8004e9e:	0032      	movs	r2, r6
 8004ea0:	69e1      	ldr	r1, [r4, #28]
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004ea6:	47b8      	blx	r7
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	dcf3      	bgt.n	8004e94 <__sflush_r+0xbc>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	2240      	movs	r2, #64	; 0x40
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	4240      	negs	r0, r0
 8004eb8:	e003      	b.n	8004ec2 <__sflush_r+0xea>
 8004eba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	dc9c      	bgt.n	8004dfa <__sflush_r+0x22>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	bc04      	pop	{r2}
 8004ec4:	4690      	mov	r8, r2
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec8:	6962      	ldr	r2, [r4, #20]
 8004eca:	e7df      	b.n	8004e8c <__sflush_r+0xb4>
 8004ecc:	4643      	mov	r3, r8
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0a5      	beq.n	8004e20 <__sflush_r+0x48>
 8004ed4:	2b1d      	cmp	r3, #29
 8004ed6:	d001      	beq.n	8004edc <__sflush_r+0x104>
 8004ed8:	2b16      	cmp	r3, #22
 8004eda:	d11c      	bne.n	8004f16 <__sflush_r+0x13e>
 8004edc:	4643      	mov	r3, r8
 8004ede:	2000      	movs	r0, #0
 8004ee0:	601e      	str	r6, [r3, #0]
 8004ee2:	e7ee      	b.n	8004ec2 <__sflush_r+0xea>
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	681d      	ldr	r5, [r3, #0]
 8004ee8:	220c      	movs	r2, #12
 8004eea:	5ea3      	ldrsh	r3, [r4, r2]
 8004eec:	2d1d      	cmp	r5, #29
 8004eee:	d8de      	bhi.n	8004eae <__sflush_r+0xd6>
 8004ef0:	490c      	ldr	r1, [pc, #48]	; (8004f24 <__sflush_r+0x14c>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	40e9      	lsrs	r1, r5
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	d1d9      	bne.n	8004eae <__sflush_r+0xd6>
 8004efa:	4909      	ldr	r1, [pc, #36]	; (8004f20 <__sflush_r+0x148>)
 8004efc:	6062      	str	r2, [r4, #4]
 8004efe:	6922      	ldr	r2, [r4, #16]
 8004f00:	400b      	ands	r3, r1
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	6022      	str	r2, [r4, #0]
 8004f06:	04db      	lsls	r3, r3, #19
 8004f08:	d5a7      	bpl.n	8004e5a <__sflush_r+0x82>
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	d1a5      	bne.n	8004e5a <__sflush_r+0x82>
 8004f0e:	6520      	str	r0, [r4, #80]	; 0x50
 8004f10:	e7a3      	b.n	8004e5a <__sflush_r+0x82>
 8004f12:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004f14:	e787      	b.n	8004e26 <__sflush_r+0x4e>
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7d0      	b.n	8004ec2 <__sflush_r+0xea>
 8004f20:	fffff7ff 	.word	0xfffff7ff
 8004f24:	20400001 	.word	0x20400001

08004f28 <_fflush_r>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	0004      	movs	r4, r0
 8004f2c:	000d      	movs	r5, r1
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d002      	beq.n	8004f38 <_fflush_r+0x10>
 8004f32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <_fflush_r+0x24>
 8004f38:	220c      	movs	r2, #12
 8004f3a:	5eab      	ldrsh	r3, [r5, r2]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <_fflush_r+0x22>
 8004f42:	0029      	movs	r1, r5
 8004f44:	0020      	movs	r0, r4
 8004f46:	f7ff ff47 	bl	8004dd8 <__sflush_r>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f7fe f9e6 	bl	800331c <__sinit>
 8004f50:	e7f2      	b.n	8004f38 <_fflush_r+0x10>
 8004f52:	46c0      	nop			; (mov r8, r8)

08004f54 <fflush>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	1e01      	subs	r1, r0, #0
 8004f58:	d004      	beq.n	8004f64 <fflush+0x10>
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <fflush+0x1c>)
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	f7ff ffe3 	bl	8004f28 <_fflush_r>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <fflush+0x20>)
 8004f66:	4904      	ldr	r1, [pc, #16]	; (8004f78 <fflush+0x24>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f7fe fa21 	bl	80033b0 <_fwalk_reent>
 8004f6e:	e7f8      	b.n	8004f62 <fflush+0xe>
 8004f70:	20000000 	.word	0x20000000
 8004f74:	08016a78 	.word	0x08016a78
 8004f78:	08004f29 	.word	0x08004f29

08004f7c <_malloc_trim_r>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	000c      	movs	r4, r1
 8004f80:	0006      	movs	r6, r0
 8004f82:	f7fe fd37 	bl	80039f4 <__malloc_lock>
 8004f86:	4f20      	ldr	r7, [pc, #128]	; (8005008 <_malloc_trim_r+0x8c>)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	685d      	ldr	r5, [r3, #4]
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	439d      	bics	r5, r3
 8004f90:	4b1e      	ldr	r3, [pc, #120]	; (800500c <_malloc_trim_r+0x90>)
 8004f92:	1b2c      	subs	r4, r5, r4
 8004f94:	469c      	mov	ip, r3
 8004f96:	4464      	add	r4, ip
 8004f98:	0b24      	lsrs	r4, r4, #12
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <_malloc_trim_r+0x94>)
 8004f9c:	3c01      	subs	r4, #1
 8004f9e:	0324      	lsls	r4, r4, #12
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	dd07      	ble.n	8004fb4 <_malloc_trim_r+0x38>
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	0030      	movs	r0, r6
 8004fa8:	f7fe fd28 	bl	80039fc <_sbrk_r>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	195b      	adds	r3, r3, r5
 8004fb0:	4298      	cmp	r0, r3
 8004fb2:	d004      	beq.n	8004fbe <_malloc_trim_r+0x42>
 8004fb4:	0030      	movs	r0, r6
 8004fb6:	f7fe fd1f 	bl	80039f8 <__malloc_unlock>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbe:	4261      	negs	r1, r4
 8004fc0:	0030      	movs	r0, r6
 8004fc2:	f7fe fd1b 	bl	80039fc <_sbrk_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d00d      	beq.n	8004fe6 <_malloc_trim_r+0x6a>
 8004fca:	2201      	movs	r2, #1
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1b2d      	subs	r5, r5, r4
 8004fd0:	4315      	orrs	r5, r2
 8004fd2:	605d      	str	r5, [r3, #4]
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <_malloc_trim_r+0x98>)
 8004fd6:	0030      	movs	r0, r6
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	1b14      	subs	r4, r2, r4
 8004fdc:	601c      	str	r4, [r3, #0]
 8004fde:	f7fe fd0b 	bl	80039f8 <__malloc_unlock>
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e7ea      	b.n	8004fbc <_malloc_trim_r+0x40>
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	0030      	movs	r0, r6
 8004fea:	f7fe fd07 	bl	80039fc <_sbrk_r>
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	1a83      	subs	r3, r0, r2
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	ddde      	ble.n	8004fb4 <_malloc_trim_r+0x38>
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <_malloc_trim_r+0x9c>)
 8004ff8:	6809      	ldr	r1, [r1, #0]
 8004ffa:	1a40      	subs	r0, r0, r1
 8004ffc:	4905      	ldr	r1, [pc, #20]	; (8005014 <_malloc_trim_r+0x98>)
 8004ffe:	6008      	str	r0, [r1, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	430b      	orrs	r3, r1
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7d5      	b.n	8004fb4 <_malloc_trim_r+0x38>
 8005008:	20000444 	.word	0x20000444
 800500c:	00000fef 	.word	0x00000fef
 8005010:	00000fff 	.word	0x00000fff
 8005014:	20000be4 	.word	0x20000be4
 8005018:	2000043c 	.word	0x2000043c

0800501c <_free_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	46ce      	mov	lr, r9
 8005020:	4647      	mov	r7, r8
 8005022:	0005      	movs	r5, r0
 8005024:	b580      	push	{r7, lr}
 8005026:	1e0c      	subs	r4, r1, #0
 8005028:	d055      	beq.n	80050d6 <_free_r+0xba>
 800502a:	f7fe fce3 	bl	80039f4 <__malloc_lock>
 800502e:	0021      	movs	r1, r4
 8005030:	3908      	subs	r1, #8
 8005032:	684f      	ldr	r7, [r1, #4]
 8005034:	2401      	movs	r4, #1
 8005036:	0038      	movs	r0, r7
 8005038:	2303      	movs	r3, #3
 800503a:	43a0      	bics	r0, r4
 800503c:	180a      	adds	r2, r1, r0
 800503e:	6856      	ldr	r6, [r2, #4]
 8005040:	439e      	bics	r6, r3
 8005042:	46b1      	mov	r9, r6
 8005044:	4e64      	ldr	r6, [pc, #400]	; (80051d8 <_free_r+0x1bc>)
 8005046:	68b3      	ldr	r3, [r6, #8]
 8005048:	4293      	cmp	r3, r2
 800504a:	d029      	beq.n	80050a0 <_free_r+0x84>
 800504c:	464b      	mov	r3, r9
 800504e:	6053      	str	r3, [r2, #4]
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	469c      	mov	ip, r3
 8005054:	423c      	tst	r4, r7
 8005056:	d142      	bne.n	80050de <_free_r+0xc2>
 8005058:	680f      	ldr	r7, [r1, #0]
 800505a:	1bc9      	subs	r1, r1, r7
 800505c:	688b      	ldr	r3, [r1, #8]
 800505e:	19c0      	adds	r0, r0, r7
 8005060:	4698      	mov	r8, r3
 8005062:	4663      	mov	r3, ip
 8005064:	685f      	ldr	r7, [r3, #4]
 8005066:	2308      	movs	r3, #8
 8005068:	469c      	mov	ip, r3
 800506a:	44b4      	add	ip, r6
 800506c:	4027      	ands	r7, r4
 800506e:	45e0      	cmp	r8, ip
 8005070:	d06a      	beq.n	8005148 <_free_r+0x12c>
 8005072:	4643      	mov	r3, r8
 8005074:	68cc      	ldr	r4, [r1, #12]
 8005076:	60dc      	str	r4, [r3, #12]
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	2f00      	cmp	r7, #0
 800507c:	d132      	bne.n	80050e4 <_free_r+0xc8>
 800507e:	2401      	movs	r4, #1
 8005080:	4448      	add	r0, r9
 8005082:	4304      	orrs	r4, r0
 8005084:	46a0      	mov	r8, r4
 8005086:	6893      	ldr	r3, [r2, #8]
 8005088:	4c54      	ldr	r4, [pc, #336]	; (80051dc <_free_r+0x1c0>)
 800508a:	180f      	adds	r7, r1, r0
 800508c:	42a3      	cmp	r3, r4
 800508e:	d100      	bne.n	8005092 <_free_r+0x76>
 8005090:	e07f      	b.n	8005192 <_free_r+0x176>
 8005092:	68d2      	ldr	r2, [r2, #12]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	6093      	str	r3, [r2, #8]
 8005098:	4643      	mov	r3, r8
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	6038      	str	r0, [r7, #0]
 800509e:	e025      	b.n	80050ec <_free_r+0xd0>
 80050a0:	0003      	movs	r3, r0
 80050a2:	444b      	add	r3, r9
 80050a4:	423c      	tst	r4, r7
 80050a6:	d106      	bne.n	80050b6 <_free_r+0x9a>
 80050a8:	680a      	ldr	r2, [r1, #0]
 80050aa:	1a89      	subs	r1, r1, r2
 80050ac:	6888      	ldr	r0, [r1, #8]
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	68ca      	ldr	r2, [r1, #12]
 80050b2:	60c2      	str	r2, [r0, #12]
 80050b4:	6090      	str	r0, [r2, #8]
 80050b6:	2201      	movs	r2, #1
 80050b8:	431a      	orrs	r2, r3
 80050ba:	604a      	str	r2, [r1, #4]
 80050bc:	4a48      	ldr	r2, [pc, #288]	; (80051e0 <_free_r+0x1c4>)
 80050be:	60b1      	str	r1, [r6, #8]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d804      	bhi.n	80050d0 <_free_r+0xb4>
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <_free_r+0x1c8>)
 80050c8:	0028      	movs	r0, r5
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	f7ff ff56 	bl	8004f7c <_malloc_trim_r>
 80050d0:	0028      	movs	r0, r5
 80050d2:	f7fe fc91 	bl	80039f8 <__malloc_unlock>
 80050d6:	bc0c      	pop	{r2, r3}
 80050d8:	4690      	mov	r8, r2
 80050da:	4699      	mov	r9, r3
 80050dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050de:	685f      	ldr	r7, [r3, #4]
 80050e0:	4027      	ands	r7, r4
 80050e2:	d0cc      	beq.n	800507e <_free_r+0x62>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4303      	orrs	r3, r0
 80050e8:	604b      	str	r3, [r1, #4]
 80050ea:	5008      	str	r0, [r1, r0]
 80050ec:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <_free_r+0x1cc>)
 80050ee:	4298      	cmp	r0, r3
 80050f0:	d91a      	bls.n	8005128 <_free_r+0x10c>
 80050f2:	0a43      	lsrs	r3, r0, #9
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d833      	bhi.n	8005160 <_free_r+0x144>
 80050f8:	0982      	lsrs	r2, r0, #6
 80050fa:	0014      	movs	r4, r2
 80050fc:	3239      	adds	r2, #57	; 0x39
 80050fe:	3438      	adds	r4, #56	; 0x38
 8005100:	00d2      	lsls	r2, r2, #3
 8005102:	18b2      	adds	r2, r6, r2
 8005104:	3a08      	subs	r2, #8
 8005106:	6893      	ldr	r3, [r2, #8]
 8005108:	2703      	movs	r7, #3
 800510a:	429a      	cmp	r2, r3
 800510c:	d039      	beq.n	8005182 <_free_r+0x166>
 800510e:	685c      	ldr	r4, [r3, #4]
 8005110:	43bc      	bics	r4, r7
 8005112:	4284      	cmp	r4, r0
 8005114:	d933      	bls.n	800517e <_free_r+0x162>
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	d1f8      	bne.n	800510e <_free_r+0xf2>
 800511c:	68d3      	ldr	r3, [r2, #12]
 800511e:	60cb      	str	r3, [r1, #12]
 8005120:	608a      	str	r2, [r1, #8]
 8005122:	6099      	str	r1, [r3, #8]
 8005124:	60d1      	str	r1, [r2, #12]
 8005126:	e7d3      	b.n	80050d0 <_free_r+0xb4>
 8005128:	08c0      	lsrs	r0, r0, #3
 800512a:	3bff      	subs	r3, #255	; 0xff
 800512c:	1082      	asrs	r2, r0, #2
 800512e:	3bff      	subs	r3, #255	; 0xff
 8005130:	4093      	lsls	r3, r2
 8005132:	6872      	ldr	r2, [r6, #4]
 8005134:	00c0      	lsls	r0, r0, #3
 8005136:	4313      	orrs	r3, r2
 8005138:	6073      	str	r3, [r6, #4]
 800513a:	1986      	adds	r6, r0, r6
 800513c:	68b3      	ldr	r3, [r6, #8]
 800513e:	60ce      	str	r6, [r1, #12]
 8005140:	608b      	str	r3, [r1, #8]
 8005142:	60b1      	str	r1, [r6, #8]
 8005144:	60d9      	str	r1, [r3, #12]
 8005146:	e7c3      	b.n	80050d0 <_free_r+0xb4>
 8005148:	2f00      	cmp	r7, #0
 800514a:	d141      	bne.n	80051d0 <_free_r+0x1b4>
 800514c:	0003      	movs	r3, r0
 800514e:	6890      	ldr	r0, [r2, #8]
 8005150:	444b      	add	r3, r9
 8005152:	68d2      	ldr	r2, [r2, #12]
 8005154:	431c      	orrs	r4, r3
 8005156:	60c2      	str	r2, [r0, #12]
 8005158:	6090      	str	r0, [r2, #8]
 800515a:	604c      	str	r4, [r1, #4]
 800515c:	50cb      	str	r3, [r1, r3]
 800515e:	e7b7      	b.n	80050d0 <_free_r+0xb4>
 8005160:	2b14      	cmp	r3, #20
 8005162:	d907      	bls.n	8005174 <_free_r+0x158>
 8005164:	2b54      	cmp	r3, #84	; 0x54
 8005166:	d81c      	bhi.n	80051a2 <_free_r+0x186>
 8005168:	0b02      	lsrs	r2, r0, #12
 800516a:	0014      	movs	r4, r2
 800516c:	326f      	adds	r2, #111	; 0x6f
 800516e:	346e      	adds	r4, #110	; 0x6e
 8005170:	00d2      	lsls	r2, r2, #3
 8005172:	e7c6      	b.n	8005102 <_free_r+0xe6>
 8005174:	001c      	movs	r4, r3
 8005176:	335c      	adds	r3, #92	; 0x5c
 8005178:	345b      	adds	r4, #91	; 0x5b
 800517a:	00da      	lsls	r2, r3, #3
 800517c:	e7c1      	b.n	8005102 <_free_r+0xe6>
 800517e:	001a      	movs	r2, r3
 8005180:	e7cc      	b.n	800511c <_free_r+0x100>
 8005182:	2301      	movs	r3, #1
 8005184:	10a4      	asrs	r4, r4, #2
 8005186:	40a3      	lsls	r3, r4
 8005188:	6870      	ldr	r0, [r6, #4]
 800518a:	4303      	orrs	r3, r0
 800518c:	6073      	str	r3, [r6, #4]
 800518e:	0013      	movs	r3, r2
 8005190:	e7c5      	b.n	800511e <_free_r+0x102>
 8005192:	60d9      	str	r1, [r3, #12]
 8005194:	6099      	str	r1, [r3, #8]
 8005196:	60cb      	str	r3, [r1, #12]
 8005198:	608b      	str	r3, [r1, #8]
 800519a:	4643      	mov	r3, r8
 800519c:	604b      	str	r3, [r1, #4]
 800519e:	6038      	str	r0, [r7, #0]
 80051a0:	e796      	b.n	80050d0 <_free_r+0xb4>
 80051a2:	22aa      	movs	r2, #170	; 0xaa
 80051a4:	0052      	lsls	r2, r2, #1
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d805      	bhi.n	80051b6 <_free_r+0x19a>
 80051aa:	0bc2      	lsrs	r2, r0, #15
 80051ac:	0014      	movs	r4, r2
 80051ae:	3278      	adds	r2, #120	; 0x78
 80051b0:	3477      	adds	r4, #119	; 0x77
 80051b2:	00d2      	lsls	r2, r2, #3
 80051b4:	e7a5      	b.n	8005102 <_free_r+0xe6>
 80051b6:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <_free_r+0x1d0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d805      	bhi.n	80051c8 <_free_r+0x1ac>
 80051bc:	0c82      	lsrs	r2, r0, #18
 80051be:	0014      	movs	r4, r2
 80051c0:	327d      	adds	r2, #125	; 0x7d
 80051c2:	347c      	adds	r4, #124	; 0x7c
 80051c4:	00d2      	lsls	r2, r2, #3
 80051c6:	e79c      	b.n	8005102 <_free_r+0xe6>
 80051c8:	22fe      	movs	r2, #254	; 0xfe
 80051ca:	247e      	movs	r4, #126	; 0x7e
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	e798      	b.n	8005102 <_free_r+0xe6>
 80051d0:	4304      	orrs	r4, r0
 80051d2:	604c      	str	r4, [r1, #4]
 80051d4:	6010      	str	r0, [r2, #0]
 80051d6:	e77b      	b.n	80050d0 <_free_r+0xb4>
 80051d8:	20000444 	.word	0x20000444
 80051dc:	2000044c 	.word	0x2000044c
 80051e0:	20000440 	.word	0x20000440
 80051e4:	20000be0 	.word	0x20000be0
 80051e8:	000001ff 	.word	0x000001ff
 80051ec:	00000554 	.word	0x00000554

080051f0 <__localeconv_l>:
 80051f0:	30f0      	adds	r0, #240	; 0xf0
 80051f2:	4770      	bx	lr

080051f4 <_localeconv_r>:
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <_localeconv_r+0x10>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d100      	bne.n	8005200 <_localeconv_r+0xc>
 80051fe:	4802      	ldr	r0, [pc, #8]	; (8005208 <_localeconv_r+0x14>)
 8005200:	30f0      	adds	r0, #240	; 0xf0
 8005202:	4770      	bx	lr
 8005204:	20000000 	.word	0x20000000
 8005208:	2000084c 	.word	0x2000084c

0800520c <localeconv>:
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <localeconv+0x10>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005212:	2800      	cmp	r0, #0
 8005214:	d100      	bne.n	8005218 <localeconv+0xc>
 8005216:	4802      	ldr	r0, [pc, #8]	; (8005220 <localeconv+0x14>)
 8005218:	30f0      	adds	r0, #240	; 0xf0
 800521a:	4770      	bx	lr
 800521c:	20000000 	.word	0x20000000
 8005220:	2000084c 	.word	0x2000084c

08005224 <_lseek_r>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	0005      	movs	r5, r0
 8005228:	0008      	movs	r0, r1
 800522a:	0011      	movs	r1, r2
 800522c:	2200      	movs	r2, #0
 800522e:	4c06      	ldr	r4, [pc, #24]	; (8005248 <_lseek_r+0x24>)
 8005230:	6022      	str	r2, [r4, #0]
 8005232:	001a      	movs	r2, r3
 8005234:	f7fb f94c 	bl	80004d0 <_lseek>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d000      	beq.n	800523e <_lseek_r+0x1a>
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0fb      	beq.n	800523c <_lseek_r+0x18>
 8005244:	602b      	str	r3, [r5, #0]
 8005246:	e7f9      	b.n	800523c <_lseek_r+0x18>
 8005248:	20002350 	.word	0x20002350

0800524c <memchr>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	b2cc      	uxtb	r4, r1
 8005250:	0783      	lsls	r3, r0, #30
 8005252:	d034      	beq.n	80052be <memchr+0x72>
 8005254:	1e53      	subs	r3, r2, #1
 8005256:	2a00      	cmp	r2, #0
 8005258:	d01b      	beq.n	8005292 <memchr+0x46>
 800525a:	7802      	ldrb	r2, [r0, #0]
 800525c:	42a2      	cmp	r2, r4
 800525e:	d019      	beq.n	8005294 <memchr+0x48>
 8005260:	2503      	movs	r5, #3
 8005262:	e004      	b.n	800526e <memchr+0x22>
 8005264:	3b01      	subs	r3, #1
 8005266:	d314      	bcc.n	8005292 <memchr+0x46>
 8005268:	7802      	ldrb	r2, [r0, #0]
 800526a:	42a2      	cmp	r2, r4
 800526c:	d012      	beq.n	8005294 <memchr+0x48>
 800526e:	3001      	adds	r0, #1
 8005270:	4228      	tst	r0, r5
 8005272:	d1f7      	bne.n	8005264 <memchr+0x18>
 8005274:	2b03      	cmp	r3, #3
 8005276:	d80e      	bhi.n	8005296 <memchr+0x4a>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <memchr+0x46>
 800527c:	7802      	ldrb	r2, [r0, #0]
 800527e:	42a2      	cmp	r2, r4
 8005280:	d008      	beq.n	8005294 <memchr+0x48>
 8005282:	18c3      	adds	r3, r0, r3
 8005284:	e002      	b.n	800528c <memchr+0x40>
 8005286:	7802      	ldrb	r2, [r0, #0]
 8005288:	42a2      	cmp	r2, r4
 800528a:	d003      	beq.n	8005294 <memchr+0x48>
 800528c:	3001      	adds	r0, #1
 800528e:	4283      	cmp	r3, r0
 8005290:	d1f9      	bne.n	8005286 <memchr+0x3a>
 8005292:	2000      	movs	r0, #0
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	060d      	lsls	r5, r1, #24
 800529a:	0c2d      	lsrs	r5, r5, #16
 800529c:	4011      	ands	r1, r2
 800529e:	4329      	orrs	r1, r5
 80052a0:	040d      	lsls	r5, r1, #16
 80052a2:	4e08      	ldr	r6, [pc, #32]	; (80052c4 <memchr+0x78>)
 80052a4:	430d      	orrs	r5, r1
 80052a6:	6802      	ldr	r2, [r0, #0]
 80052a8:	4907      	ldr	r1, [pc, #28]	; (80052c8 <memchr+0x7c>)
 80052aa:	406a      	eors	r2, r5
 80052ac:	1851      	adds	r1, r2, r1
 80052ae:	4391      	bics	r1, r2
 80052b0:	4231      	tst	r1, r6
 80052b2:	d1e3      	bne.n	800527c <memchr+0x30>
 80052b4:	3b04      	subs	r3, #4
 80052b6:	3004      	adds	r0, #4
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d8f4      	bhi.n	80052a6 <memchr+0x5a>
 80052bc:	e7dc      	b.n	8005278 <memchr+0x2c>
 80052be:	0013      	movs	r3, r2
 80052c0:	e7d8      	b.n	8005274 <memchr+0x28>
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	80808080 	.word	0x80808080
 80052c8:	fefefeff 	.word	0xfefefeff

080052cc <_Balloc>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	0004      	movs	r4, r0
 80052d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80052d2:	000d      	movs	r5, r1
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d00a      	beq.n	80052ee <_Balloc+0x22>
 80052d8:	00ab      	lsls	r3, r5, #2
 80052da:	18c3      	adds	r3, r0, r3
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	2800      	cmp	r0, #0
 80052e0:	d00f      	beq.n	8005302 <_Balloc+0x36>
 80052e2:	6802      	ldr	r2, [r0, #0]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	6103      	str	r3, [r0, #16]
 80052ea:	60c3      	str	r3, [r0, #12]
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
 80052ee:	2221      	movs	r2, #33	; 0x21
 80052f0:	2104      	movs	r1, #4
 80052f2:	0020      	movs	r0, r4
 80052f4:	f001 ffc4 	bl	8007280 <_calloc_r>
 80052f8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d1ec      	bne.n	80052d8 <_Balloc+0xc>
 80052fe:	2000      	movs	r0, #0
 8005300:	e7f4      	b.n	80052ec <_Balloc+0x20>
 8005302:	2601      	movs	r6, #1
 8005304:	40ae      	lsls	r6, r5
 8005306:	1d72      	adds	r2, r6, #5
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	2101      	movs	r1, #1
 800530c:	0020      	movs	r0, r4
 800530e:	f001 ffb7 	bl	8007280 <_calloc_r>
 8005312:	2800      	cmp	r0, #0
 8005314:	d0f3      	beq.n	80052fe <_Balloc+0x32>
 8005316:	6045      	str	r5, [r0, #4]
 8005318:	6086      	str	r6, [r0, #8]
 800531a:	e7e4      	b.n	80052e6 <_Balloc+0x1a>

0800531c <_Bfree>:
 800531c:	2900      	cmp	r1, #0
 800531e:	d006      	beq.n	800532e <_Bfree+0x12>
 8005320:	684b      	ldr	r3, [r1, #4]
 8005322:	009a      	lsls	r2, r3, #2
 8005324:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005326:	189b      	adds	r3, r3, r2
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	600a      	str	r2, [r1, #0]
 800532c:	6019      	str	r1, [r3, #0]
 800532e:	4770      	bx	lr

08005330 <__multadd>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	46ce      	mov	lr, r9
 8005334:	4647      	mov	r7, r8
 8005336:	4681      	mov	r9, r0
 8005338:	0008      	movs	r0, r1
 800533a:	b580      	push	{r7, lr}
 800533c:	000d      	movs	r5, r1
 800533e:	690c      	ldr	r4, [r1, #16]
 8005340:	001f      	movs	r7, r3
 8005342:	2100      	movs	r1, #0
 8005344:	3014      	adds	r0, #20
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	3101      	adds	r1, #1
 800534a:	041e      	lsls	r6, r3, #16
 800534c:	0c36      	lsrs	r6, r6, #16
 800534e:	4356      	muls	r6, r2
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	4353      	muls	r3, r2
 8005354:	19f6      	adds	r6, r6, r7
 8005356:	0c37      	lsrs	r7, r6, #16
 8005358:	19db      	adds	r3, r3, r7
 800535a:	0436      	lsls	r6, r6, #16
 800535c:	0c1f      	lsrs	r7, r3, #16
 800535e:	0c36      	lsrs	r6, r6, #16
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	199b      	adds	r3, r3, r6
 8005364:	c008      	stmia	r0!, {r3}
 8005366:	428c      	cmp	r4, r1
 8005368:	dced      	bgt.n	8005346 <__multadd+0x16>
 800536a:	2f00      	cmp	r7, #0
 800536c:	d008      	beq.n	8005380 <__multadd+0x50>
 800536e:	68ab      	ldr	r3, [r5, #8]
 8005370:	42a3      	cmp	r3, r4
 8005372:	dd0a      	ble.n	800538a <__multadd+0x5a>
 8005374:	1d23      	adds	r3, r4, #4
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	18eb      	adds	r3, r5, r3
 800537a:	3401      	adds	r4, #1
 800537c:	605f      	str	r7, [r3, #4]
 800537e:	612c      	str	r4, [r5, #16]
 8005380:	0028      	movs	r0, r5
 8005382:	bc0c      	pop	{r2, r3}
 8005384:	4690      	mov	r8, r2
 8005386:	4699      	mov	r9, r3
 8005388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538a:	686b      	ldr	r3, [r5, #4]
 800538c:	4648      	mov	r0, r9
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	f7ff ff9c 	bl	80052cc <_Balloc>
 8005394:	0029      	movs	r1, r5
 8005396:	692b      	ldr	r3, [r5, #16]
 8005398:	4680      	mov	r8, r0
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	0092      	lsls	r2, r2, #2
 800539e:	310c      	adds	r1, #12
 80053a0:	300c      	adds	r0, #12
 80053a2:	f7fe fae3 	bl	800396c <memcpy>
 80053a6:	686b      	ldr	r3, [r5, #4]
 80053a8:	009a      	lsls	r2, r3, #2
 80053aa:	464b      	mov	r3, r9
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	601d      	str	r5, [r3, #0]
 80053b6:	4645      	mov	r5, r8
 80053b8:	e7dc      	b.n	8005374 <__multadd+0x44>
 80053ba:	46c0      	nop			; (mov r8, r8)

080053bc <__s2b>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	4647      	mov	r7, r8
 80053c0:	46ce      	mov	lr, r9
 80053c2:	0005      	movs	r5, r0
 80053c4:	0018      	movs	r0, r3
 80053c6:	b580      	push	{r7, lr}
 80053c8:	000c      	movs	r4, r1
 80053ca:	3008      	adds	r0, #8
 80053cc:	2109      	movs	r1, #9
 80053ce:	0017      	movs	r7, r2
 80053d0:	4698      	mov	r8, r3
 80053d2:	f7fb fc7b 	bl	8000ccc <__divsi3>
 80053d6:	2801      	cmp	r0, #1
 80053d8:	dd36      	ble.n	8005448 <__s2b+0x8c>
 80053da:	2301      	movs	r3, #1
 80053dc:	2100      	movs	r1, #0
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	3101      	adds	r1, #1
 80053e2:	4298      	cmp	r0, r3
 80053e4:	dcfb      	bgt.n	80053de <__s2b+0x22>
 80053e6:	0028      	movs	r0, r5
 80053e8:	f7ff ff70 	bl	80052cc <_Balloc>
 80053ec:	9b08      	ldr	r3, [sp, #32]
 80053ee:	6143      	str	r3, [r0, #20]
 80053f0:	2301      	movs	r3, #1
 80053f2:	6103      	str	r3, [r0, #16]
 80053f4:	2f09      	cmp	r7, #9
 80053f6:	dd24      	ble.n	8005442 <__s2b+0x86>
 80053f8:	3308      	adds	r3, #8
 80053fa:	4699      	mov	r9, r3
 80053fc:	44a1      	add	r9, r4
 80053fe:	464e      	mov	r6, r9
 8005400:	19e4      	adds	r4, r4, r7
 8005402:	7833      	ldrb	r3, [r6, #0]
 8005404:	0001      	movs	r1, r0
 8005406:	3b30      	subs	r3, #48	; 0x30
 8005408:	220a      	movs	r2, #10
 800540a:	0028      	movs	r0, r5
 800540c:	3601      	adds	r6, #1
 800540e:	f7ff ff8f 	bl	8005330 <__multadd>
 8005412:	42a6      	cmp	r6, r4
 8005414:	d1f5      	bne.n	8005402 <__s2b+0x46>
 8005416:	464b      	mov	r3, r9
 8005418:	19dc      	adds	r4, r3, r7
 800541a:	3c08      	subs	r4, #8
 800541c:	45b8      	cmp	r8, r7
 800541e:	dd0c      	ble.n	800543a <__s2b+0x7e>
 8005420:	4643      	mov	r3, r8
 8005422:	18e6      	adds	r6, r4, r3
 8005424:	1bf7      	subs	r7, r6, r7
 8005426:	7823      	ldrb	r3, [r4, #0]
 8005428:	0001      	movs	r1, r0
 800542a:	3b30      	subs	r3, #48	; 0x30
 800542c:	220a      	movs	r2, #10
 800542e:	0028      	movs	r0, r5
 8005430:	3401      	adds	r4, #1
 8005432:	f7ff ff7d 	bl	8005330 <__multadd>
 8005436:	42bc      	cmp	r4, r7
 8005438:	d1f5      	bne.n	8005426 <__s2b+0x6a>
 800543a:	bc0c      	pop	{r2, r3}
 800543c:	4690      	mov	r8, r2
 800543e:	4699      	mov	r9, r3
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	340a      	adds	r4, #10
 8005444:	2709      	movs	r7, #9
 8005446:	e7e9      	b.n	800541c <__s2b+0x60>
 8005448:	2100      	movs	r1, #0
 800544a:	e7cc      	b.n	80053e6 <__s2b+0x2a>

0800544c <__hi0bits>:
 800544c:	0003      	movs	r3, r0
 800544e:	0c02      	lsrs	r2, r0, #16
 8005450:	2000      	movs	r0, #0
 8005452:	2a00      	cmp	r2, #0
 8005454:	d101      	bne.n	800545a <__hi0bits+0xe>
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	3010      	adds	r0, #16
 800545a:	0e1a      	lsrs	r2, r3, #24
 800545c:	d101      	bne.n	8005462 <__hi0bits+0x16>
 800545e:	3008      	adds	r0, #8
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	0f1a      	lsrs	r2, r3, #28
 8005464:	d101      	bne.n	800546a <__hi0bits+0x1e>
 8005466:	3004      	adds	r0, #4
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	0f9a      	lsrs	r2, r3, #30
 800546c:	d101      	bne.n	8005472 <__hi0bits+0x26>
 800546e:	3002      	adds	r0, #2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	db02      	blt.n	800547c <__hi0bits+0x30>
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	d501      	bpl.n	800547e <__hi0bits+0x32>
 800547a:	3001      	adds	r0, #1
 800547c:	4770      	bx	lr
 800547e:	2020      	movs	r0, #32
 8005480:	e7fc      	b.n	800547c <__hi0bits+0x30>
 8005482:	46c0      	nop			; (mov r8, r8)

08005484 <__lo0bits>:
 8005484:	6803      	ldr	r3, [r0, #0]
 8005486:	075a      	lsls	r2, r3, #29
 8005488:	d009      	beq.n	800549e <__lo0bits+0x1a>
 800548a:	2200      	movs	r2, #0
 800548c:	07d9      	lsls	r1, r3, #31
 800548e:	d404      	bmi.n	800549a <__lo0bits+0x16>
 8005490:	079a      	lsls	r2, r3, #30
 8005492:	d51e      	bpl.n	80054d2 <__lo0bits+0x4e>
 8005494:	2201      	movs	r2, #1
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	0010      	movs	r0, r2
 800549c:	4770      	bx	lr
 800549e:	0419      	lsls	r1, r3, #16
 80054a0:	2200      	movs	r2, #0
 80054a2:	2900      	cmp	r1, #0
 80054a4:	d101      	bne.n	80054aa <__lo0bits+0x26>
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	3210      	adds	r2, #16
 80054aa:	21ff      	movs	r1, #255	; 0xff
 80054ac:	4219      	tst	r1, r3
 80054ae:	d101      	bne.n	80054b4 <__lo0bits+0x30>
 80054b0:	3208      	adds	r2, #8
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	0719      	lsls	r1, r3, #28
 80054b6:	d101      	bne.n	80054bc <__lo0bits+0x38>
 80054b8:	3204      	adds	r2, #4
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	0799      	lsls	r1, r3, #30
 80054be:	d101      	bne.n	80054c4 <__lo0bits+0x40>
 80054c0:	3202      	adds	r2, #2
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	07d9      	lsls	r1, r3, #31
 80054c6:	d402      	bmi.n	80054ce <__lo0bits+0x4a>
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	d006      	beq.n	80054da <__lo0bits+0x56>
 80054cc:	3201      	adds	r2, #1
 80054ce:	6003      	str	r3, [r0, #0]
 80054d0:	e7e3      	b.n	800549a <__lo0bits+0x16>
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	6003      	str	r3, [r0, #0]
 80054d6:	2202      	movs	r2, #2
 80054d8:	e7df      	b.n	800549a <__lo0bits+0x16>
 80054da:	2220      	movs	r2, #32
 80054dc:	e7dd      	b.n	800549a <__lo0bits+0x16>
 80054de:	46c0      	nop			; (mov r8, r8)

080054e0 <__i2b>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	000c      	movs	r4, r1
 80054e4:	2101      	movs	r1, #1
 80054e6:	f7ff fef1 	bl	80052cc <_Balloc>
 80054ea:	2301      	movs	r3, #1
 80054ec:	6144      	str	r4, [r0, #20]
 80054ee:	6103      	str	r3, [r0, #16]
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)

080054f4 <__multiply>:
 80054f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f6:	4657      	mov	r7, sl
 80054f8:	464e      	mov	r6, r9
 80054fa:	4645      	mov	r5, r8
 80054fc:	46de      	mov	lr, fp
 80054fe:	b5e0      	push	{r5, r6, r7, lr}
 8005500:	6914      	ldr	r4, [r2, #16]
 8005502:	690e      	ldr	r6, [r1, #16]
 8005504:	b085      	sub	sp, #20
 8005506:	000f      	movs	r7, r1
 8005508:	0015      	movs	r5, r2
 800550a:	42a6      	cmp	r6, r4
 800550c:	da04      	bge.n	8005518 <__multiply+0x24>
 800550e:	0033      	movs	r3, r6
 8005510:	0017      	movs	r7, r2
 8005512:	0026      	movs	r6, r4
 8005514:	000d      	movs	r5, r1
 8005516:	001c      	movs	r4, r3
 8005518:	1933      	adds	r3, r6, r4
 800551a:	4698      	mov	r8, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4543      	cmp	r3, r8
 8005522:	da00      	bge.n	8005526 <__multiply+0x32>
 8005524:	3101      	adds	r1, #1
 8005526:	f7ff fed1 	bl	80052cc <_Balloc>
 800552a:	2214      	movs	r2, #20
 800552c:	0003      	movs	r3, r0
 800552e:	4694      	mov	ip, r2
 8005530:	4463      	add	r3, ip
 8005532:	469a      	mov	sl, r3
 8005534:	4643      	mov	r3, r8
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	0019      	movs	r1, r3
 800553a:	4451      	add	r1, sl
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9103      	str	r1, [sp, #12]
 8005540:	458a      	cmp	sl, r1
 8005542:	d204      	bcs.n	800554e <__multiply+0x5a>
 8005544:	4653      	mov	r3, sl
 8005546:	2200      	movs	r2, #0
 8005548:	c304      	stmia	r3!, {r2}
 800554a:	4299      	cmp	r1, r3
 800554c:	d8fc      	bhi.n	8005548 <__multiply+0x54>
 800554e:	003b      	movs	r3, r7
 8005550:	3314      	adds	r3, #20
 8005552:	469c      	mov	ip, r3
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	2314      	movs	r3, #20
 8005558:	00b2      	lsls	r2, r6, #2
 800555a:	4462      	add	r2, ip
 800555c:	00a4      	lsls	r4, r4, #2
 800555e:	469c      	mov	ip, r3
 8005560:	0023      	movs	r3, r4
 8005562:	44ac      	add	ip, r5
 8005564:	4463      	add	r3, ip
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	459c      	cmp	ip, r3
 800556a:	d262      	bcs.n	8005632 <__multiply+0x13e>
 800556c:	4691      	mov	r9, r2
 800556e:	e008      	b.n	8005582 <__multiply+0x8e>
 8005570:	0c24      	lsrs	r4, r4, #16
 8005572:	d132      	bne.n	80055da <__multiply+0xe6>
 8005574:	2304      	movs	r3, #4
 8005576:	469b      	mov	fp, r3
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	44dc      	add	ip, fp
 800557c:	44da      	add	sl, fp
 800557e:	4563      	cmp	r3, ip
 8005580:	d957      	bls.n	8005632 <__multiply+0x13e>
 8005582:	4663      	mov	r3, ip
 8005584:	681c      	ldr	r4, [r3, #0]
 8005586:	0426      	lsls	r6, r4, #16
 8005588:	0c36      	lsrs	r6, r6, #16
 800558a:	d0f1      	beq.n	8005570 <__multiply+0x7c>
 800558c:	4655      	mov	r5, sl
 800558e:	2200      	movs	r2, #0
 8005590:	464c      	mov	r4, r9
 8005592:	9f01      	ldr	r7, [sp, #4]
 8005594:	cf02      	ldmia	r7!, {r1}
 8005596:	6828      	ldr	r0, [r5, #0]
 8005598:	040b      	lsls	r3, r1, #16
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	4373      	muls	r3, r6
 800559e:	0400      	lsls	r0, r0, #16
 80055a0:	0c00      	lsrs	r0, r0, #16
 80055a2:	181b      	adds	r3, r3, r0
 80055a4:	4699      	mov	r9, r3
 80055a6:	4491      	add	r9, r2
 80055a8:	682a      	ldr	r2, [r5, #0]
 80055aa:	0c0b      	lsrs	r3, r1, #16
 80055ac:	0c10      	lsrs	r0, r2, #16
 80055ae:	464a      	mov	r2, r9
 80055b0:	4649      	mov	r1, r9
 80055b2:	4373      	muls	r3, r6
 80055b4:	0c12      	lsrs	r2, r2, #16
 80055b6:	181b      	adds	r3, r3, r0
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	0409      	lsls	r1, r1, #16
 80055bc:	0c1a      	lsrs	r2, r3, #16
 80055be:	0c09      	lsrs	r1, r1, #16
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	430b      	orrs	r3, r1
 80055c4:	46ab      	mov	fp, r5
 80055c6:	c508      	stmia	r5!, {r3}
 80055c8:	42bc      	cmp	r4, r7
 80055ca:	d8e3      	bhi.n	8005594 <__multiply+0xa0>
 80055cc:	465b      	mov	r3, fp
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	4663      	mov	r3, ip
 80055d2:	46a1      	mov	r9, r4
 80055d4:	681c      	ldr	r4, [r3, #0]
 80055d6:	0c24      	lsrs	r4, r4, #16
 80055d8:	d0cc      	beq.n	8005574 <__multiply+0x80>
 80055da:	4653      	mov	r3, sl
 80055dc:	2200      	movs	r2, #0
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4649      	mov	r1, r9
 80055e2:	4650      	mov	r0, sl
 80055e4:	001e      	movs	r6, r3
 80055e6:	4691      	mov	r9, r2
 80055e8:	9d01      	ldr	r5, [sp, #4]
 80055ea:	882a      	ldrh	r2, [r5, #0]
 80055ec:	0c36      	lsrs	r6, r6, #16
 80055ee:	4362      	muls	r2, r4
 80055f0:	1992      	adds	r2, r2, r6
 80055f2:	444a      	add	r2, r9
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	0416      	lsls	r6, r2, #16
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	4333      	orrs	r3, r6
 80055fc:	6846      	ldr	r6, [r0, #4]
 80055fe:	6003      	str	r3, [r0, #0]
 8005600:	0437      	lsls	r7, r6, #16
 8005602:	0c3f      	lsrs	r7, r7, #16
 8005604:	46b9      	mov	r9, r7
 8005606:	cd08      	ldmia	r5!, {r3}
 8005608:	0c12      	lsrs	r2, r2, #16
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	4363      	muls	r3, r4
 800560e:	444b      	add	r3, r9
 8005610:	189b      	adds	r3, r3, r2
 8005612:	0c1a      	lsrs	r2, r3, #16
 8005614:	4683      	mov	fp, r0
 8005616:	4691      	mov	r9, r2
 8005618:	3004      	adds	r0, #4
 800561a:	42a9      	cmp	r1, r5
 800561c:	d8e5      	bhi.n	80055ea <__multiply+0xf6>
 800561e:	465f      	mov	r7, fp
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	2304      	movs	r3, #4
 8005624:	469b      	mov	fp, r3
 8005626:	9b00      	ldr	r3, [sp, #0]
 8005628:	44dc      	add	ip, fp
 800562a:	4689      	mov	r9, r1
 800562c:	44da      	add	sl, fp
 800562e:	4563      	cmp	r3, ip
 8005630:	d8a7      	bhi.n	8005582 <__multiply+0x8e>
 8005632:	4643      	mov	r3, r8
 8005634:	2b00      	cmp	r3, #0
 8005636:	dd0e      	ble.n	8005656 <__multiply+0x162>
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	3b04      	subs	r3, #4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2a00      	cmp	r2, #0
 8005640:	d109      	bne.n	8005656 <__multiply+0x162>
 8005642:	4642      	mov	r2, r8
 8005644:	e003      	b.n	800564e <__multiply+0x15a>
 8005646:	3b04      	subs	r3, #4
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	2900      	cmp	r1, #0
 800564c:	d102      	bne.n	8005654 <__multiply+0x160>
 800564e:	3a01      	subs	r2, #1
 8005650:	2a00      	cmp	r2, #0
 8005652:	d1f8      	bne.n	8005646 <__multiply+0x152>
 8005654:	4690      	mov	r8, r2
 8005656:	9b02      	ldr	r3, [sp, #8]
 8005658:	4642      	mov	r2, r8
 800565a:	0018      	movs	r0, r3
 800565c:	611a      	str	r2, [r3, #16]
 800565e:	b005      	add	sp, #20
 8005660:	bc3c      	pop	{r2, r3, r4, r5}
 8005662:	4690      	mov	r8, r2
 8005664:	4699      	mov	r9, r3
 8005666:	46a2      	mov	sl, r4
 8005668:	46ab      	mov	fp, r5
 800566a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800566c <__pow5mult>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	4647      	mov	r7, r8
 8005670:	46ce      	mov	lr, r9
 8005672:	2303      	movs	r3, #3
 8005674:	b580      	push	{r7, lr}
 8005676:	4688      	mov	r8, r1
 8005678:	0007      	movs	r7, r0
 800567a:	0014      	movs	r4, r2
 800567c:	4013      	ands	r3, r2
 800567e:	d13a      	bne.n	80056f6 <__pow5mult+0x8a>
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	4646      	mov	r6, r8
 8005684:	d026      	beq.n	80056d4 <__pow5mult+0x68>
 8005686:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005688:	2d00      	cmp	r5, #0
 800568a:	d03d      	beq.n	8005708 <__pow5mult+0x9c>
 800568c:	2301      	movs	r3, #1
 800568e:	4646      	mov	r6, r8
 8005690:	4698      	mov	r8, r3
 8005692:	2300      	movs	r3, #0
 8005694:	4699      	mov	r9, r3
 8005696:	4643      	mov	r3, r8
 8005698:	4223      	tst	r3, r4
 800569a:	d108      	bne.n	80056ae <__pow5mult+0x42>
 800569c:	1064      	asrs	r4, r4, #1
 800569e:	d019      	beq.n	80056d4 <__pow5mult+0x68>
 80056a0:	6828      	ldr	r0, [r5, #0]
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d01b      	beq.n	80056de <__pow5mult+0x72>
 80056a6:	0005      	movs	r5, r0
 80056a8:	4643      	mov	r3, r8
 80056aa:	4223      	tst	r3, r4
 80056ac:	d0f6      	beq.n	800569c <__pow5mult+0x30>
 80056ae:	002a      	movs	r2, r5
 80056b0:	0031      	movs	r1, r6
 80056b2:	0038      	movs	r0, r7
 80056b4:	f7ff ff1e 	bl	80054f4 <__multiply>
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	d01a      	beq.n	80056f2 <__pow5mult+0x86>
 80056bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056be:	6873      	ldr	r3, [r6, #4]
 80056c0:	4694      	mov	ip, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4463      	add	r3, ip
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	1064      	asrs	r4, r4, #1
 80056ca:	6032      	str	r2, [r6, #0]
 80056cc:	601e      	str	r6, [r3, #0]
 80056ce:	0006      	movs	r6, r0
 80056d0:	2c00      	cmp	r4, #0
 80056d2:	d1e5      	bne.n	80056a0 <__pow5mult+0x34>
 80056d4:	0030      	movs	r0, r6
 80056d6:	bc0c      	pop	{r2, r3}
 80056d8:	4690      	mov	r8, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056de:	002a      	movs	r2, r5
 80056e0:	0029      	movs	r1, r5
 80056e2:	0038      	movs	r0, r7
 80056e4:	f7ff ff06 	bl	80054f4 <__multiply>
 80056e8:	464b      	mov	r3, r9
 80056ea:	6028      	str	r0, [r5, #0]
 80056ec:	6003      	str	r3, [r0, #0]
 80056ee:	0005      	movs	r5, r0
 80056f0:	e7da      	b.n	80056a8 <__pow5mult+0x3c>
 80056f2:	0006      	movs	r6, r0
 80056f4:	e7d2      	b.n	800569c <__pow5mult+0x30>
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <__pow5mult+0xb8>)
 80056f8:	3b01      	subs	r3, #1
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	589a      	ldr	r2, [r3, r2]
 80056fe:	2300      	movs	r3, #0
 8005700:	f7ff fe16 	bl	8005330 <__multadd>
 8005704:	4680      	mov	r8, r0
 8005706:	e7bb      	b.n	8005680 <__pow5mult+0x14>
 8005708:	2101      	movs	r1, #1
 800570a:	0038      	movs	r0, r7
 800570c:	f7ff fdde 	bl	80052cc <_Balloc>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <__pow5mult+0xbc>)
 8005712:	0005      	movs	r5, r0
 8005714:	6143      	str	r3, [r0, #20]
 8005716:	2301      	movs	r3, #1
 8005718:	6103      	str	r3, [r0, #16]
 800571a:	2300      	movs	r3, #0
 800571c:	64b8      	str	r0, [r7, #72]	; 0x48
 800571e:	6003      	str	r3, [r0, #0]
 8005720:	e7b4      	b.n	800568c <__pow5mult+0x20>
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	08016ba0 	.word	0x08016ba0
 8005728:	00000271 	.word	0x00000271

0800572c <__lshift>:
 800572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572e:	46de      	mov	lr, fp
 8005730:	4657      	mov	r7, sl
 8005732:	464e      	mov	r6, r9
 8005734:	4645      	mov	r5, r8
 8005736:	b5e0      	push	{r5, r6, r7, lr}
 8005738:	000d      	movs	r5, r1
 800573a:	692b      	ldr	r3, [r5, #16]
 800573c:	1156      	asrs	r6, r2, #5
 800573e:	469b      	mov	fp, r3
 8005740:	44b3      	add	fp, r6
 8005742:	465b      	mov	r3, fp
 8005744:	1c5c      	adds	r4, r3, #1
 8005746:	68ab      	ldr	r3, [r5, #8]
 8005748:	b083      	sub	sp, #12
 800574a:	9001      	str	r0, [sp, #4]
 800574c:	0017      	movs	r7, r2
 800574e:	6849      	ldr	r1, [r1, #4]
 8005750:	429c      	cmp	r4, r3
 8005752:	dd03      	ble.n	800575c <__lshift+0x30>
 8005754:	3101      	adds	r1, #1
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	429c      	cmp	r4, r3
 800575a:	dcfb      	bgt.n	8005754 <__lshift+0x28>
 800575c:	9801      	ldr	r0, [sp, #4]
 800575e:	f7ff fdb5 	bl	80052cc <_Balloc>
 8005762:	0003      	movs	r3, r0
 8005764:	4684      	mov	ip, r0
 8005766:	3314      	adds	r3, #20
 8005768:	2e00      	cmp	r6, #0
 800576a:	dd06      	ble.n	800577a <__lshift+0x4e>
 800576c:	2200      	movs	r2, #0
 800576e:	00b1      	lsls	r1, r6, #2
 8005770:	1859      	adds	r1, r3, r1
 8005772:	c304      	stmia	r3!, {r2}
 8005774:	4299      	cmp	r1, r3
 8005776:	d1fc      	bne.n	8005772 <__lshift+0x46>
 8005778:	000b      	movs	r3, r1
 800577a:	6929      	ldr	r1, [r5, #16]
 800577c:	002a      	movs	r2, r5
 800577e:	008e      	lsls	r6, r1, #2
 8005780:	211f      	movs	r1, #31
 8005782:	3214      	adds	r2, #20
 8005784:	4039      	ands	r1, r7
 8005786:	1996      	adds	r6, r2, r6
 8005788:	4689      	mov	r9, r1
 800578a:	2900      	cmp	r1, #0
 800578c:	d029      	beq.n	80057e2 <__lshift+0xb6>
 800578e:	2120      	movs	r1, #32
 8005790:	4648      	mov	r0, r9
 8005792:	1a09      	subs	r1, r1, r0
 8005794:	4688      	mov	r8, r1
 8005796:	2700      	movs	r7, #0
 8005798:	0019      	movs	r1, r3
 800579a:	4648      	mov	r0, r9
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	468a      	mov	sl, r1
 80057a0:	4083      	lsls	r3, r0
 80057a2:	433b      	orrs	r3, r7
 80057a4:	c108      	stmia	r1!, {r3}
 80057a6:	4643      	mov	r3, r8
 80057a8:	ca80      	ldmia	r2!, {r7}
 80057aa:	40df      	lsrs	r7, r3
 80057ac:	4296      	cmp	r6, r2
 80057ae:	d8f4      	bhi.n	800579a <__lshift+0x6e>
 80057b0:	4653      	mov	r3, sl
 80057b2:	605f      	str	r7, [r3, #4]
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	d001      	beq.n	80057bc <__lshift+0x90>
 80057b8:	465c      	mov	r4, fp
 80057ba:	3402      	adds	r4, #2
 80057bc:	4663      	mov	r3, ip
 80057be:	4660      	mov	r0, ip
 80057c0:	3c01      	subs	r4, #1
 80057c2:	611c      	str	r4, [r3, #16]
 80057c4:	686b      	ldr	r3, [r5, #4]
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	601d      	str	r5, [r3, #0]
 80057d4:	b003      	add	sp, #12
 80057d6:	bc3c      	pop	{r2, r3, r4, r5}
 80057d8:	4690      	mov	r8, r2
 80057da:	4699      	mov	r9, r3
 80057dc:	46a2      	mov	sl, r4
 80057de:	46ab      	mov	fp, r5
 80057e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e2:	ca02      	ldmia	r2!, {r1}
 80057e4:	c302      	stmia	r3!, {r1}
 80057e6:	4296      	cmp	r6, r2
 80057e8:	d9e8      	bls.n	80057bc <__lshift+0x90>
 80057ea:	ca02      	ldmia	r2!, {r1}
 80057ec:	c302      	stmia	r3!, {r1}
 80057ee:	4296      	cmp	r6, r2
 80057f0:	d8f7      	bhi.n	80057e2 <__lshift+0xb6>
 80057f2:	e7e3      	b.n	80057bc <__lshift+0x90>

080057f4 <__mcmp>:
 80057f4:	690a      	ldr	r2, [r1, #16]
 80057f6:	6903      	ldr	r3, [r0, #16]
 80057f8:	b530      	push	{r4, r5, lr}
 80057fa:	0005      	movs	r5, r0
 80057fc:	1a98      	subs	r0, r3, r2
 80057fe:	d112      	bne.n	8005826 <__mcmp+0x32>
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	3514      	adds	r5, #20
 8005804:	3114      	adds	r1, #20
 8005806:	18ab      	adds	r3, r5, r2
 8005808:	1889      	adds	r1, r1, r2
 800580a:	e001      	b.n	8005810 <__mcmp+0x1c>
 800580c:	429d      	cmp	r5, r3
 800580e:	d20a      	bcs.n	8005826 <__mcmp+0x32>
 8005810:	3b04      	subs	r3, #4
 8005812:	3904      	subs	r1, #4
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	680a      	ldr	r2, [r1, #0]
 8005818:	4294      	cmp	r4, r2
 800581a:	d0f7      	beq.n	800580c <__mcmp+0x18>
 800581c:	4294      	cmp	r4, r2
 800581e:	4180      	sbcs	r0, r0
 8005820:	2301      	movs	r3, #1
 8005822:	4398      	bics	r0, r3
 8005824:	3001      	adds	r0, #1
 8005826:	bd30      	pop	{r4, r5, pc}

08005828 <__mdiff>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	4645      	mov	r5, r8
 800582c:	4657      	mov	r7, sl
 800582e:	464e      	mov	r6, r9
 8005830:	0014      	movs	r4, r2
 8005832:	46de      	mov	lr, fp
 8005834:	b5e0      	push	{r5, r6, r7, lr}
 8005836:	000e      	movs	r6, r1
 8005838:	0025      	movs	r5, r4
 800583a:	6913      	ldr	r3, [r2, #16]
 800583c:	690a      	ldr	r2, [r1, #16]
 800583e:	4688      	mov	r8, r1
 8005840:	1ad7      	subs	r7, r2, r3
 8005842:	3614      	adds	r6, #20
 8005844:	3514      	adds	r5, #20
 8005846:	2f00      	cmp	r7, #0
 8005848:	d116      	bne.n	8005878 <__mdiff+0x50>
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	18f2      	adds	r2, r6, r3
 800584e:	18eb      	adds	r3, r5, r3
 8005850:	e002      	b.n	8005858 <__mdiff+0x30>
 8005852:	42b2      	cmp	r2, r6
 8005854:	d800      	bhi.n	8005858 <__mdiff+0x30>
 8005856:	e06f      	b.n	8005938 <__mdiff+0x110>
 8005858:	3a04      	subs	r2, #4
 800585a:	6811      	ldr	r1, [r2, #0]
 800585c:	3b04      	subs	r3, #4
 800585e:	468c      	mov	ip, r1
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	458c      	cmp	ip, r1
 8005864:	d0f5      	beq.n	8005852 <__mdiff+0x2a>
 8005866:	d20a      	bcs.n	800587e <__mdiff+0x56>
 8005868:	0033      	movs	r3, r6
 800586a:	002e      	movs	r6, r5
 800586c:	001d      	movs	r5, r3
 800586e:	4643      	mov	r3, r8
 8005870:	2701      	movs	r7, #1
 8005872:	46a0      	mov	r8, r4
 8005874:	001c      	movs	r4, r3
 8005876:	e002      	b.n	800587e <__mdiff+0x56>
 8005878:	2f00      	cmp	r7, #0
 800587a:	dbf5      	blt.n	8005868 <__mdiff+0x40>
 800587c:	2700      	movs	r7, #0
 800587e:	4643      	mov	r3, r8
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	f7ff fd23 	bl	80052cc <_Balloc>
 8005886:	4643      	mov	r3, r8
 8005888:	4681      	mov	r9, r0
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	60c7      	str	r7, [r0, #12]
 800588e:	469c      	mov	ip, r3
 8005890:	0098      	lsls	r0, r3, #2
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	4682      	mov	sl, r0
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4698      	mov	r8, r3
 800589a:	464f      	mov	r7, r9
 800589c:	44b2      	add	sl, r6
 800589e:	44a8      	add	r8, r5
 80058a0:	3714      	adds	r7, #20
 80058a2:	2000      	movs	r0, #0
 80058a4:	e000      	b.n	80058a8 <__mdiff+0x80>
 80058a6:	0026      	movs	r6, r4
 80058a8:	cd04      	ldmia	r5!, {r2}
 80058aa:	0034      	movs	r4, r6
 80058ac:	4693      	mov	fp, r2
 80058ae:	4659      	mov	r1, fp
 80058b0:	cc08      	ldmia	r4!, {r3}
 80058b2:	0409      	lsls	r1, r1, #16
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	0c12      	lsrs	r2, r2, #16
 80058b8:	1812      	adds	r2, r2, r0
 80058ba:	0c09      	lsrs	r1, r1, #16
 80058bc:	1a52      	subs	r2, r2, r1
 80058be:	0c19      	lsrs	r1, r3, #16
 80058c0:	465b      	mov	r3, fp
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	1acb      	subs	r3, r1, r3
 80058c6:	1411      	asrs	r1, r2, #16
 80058c8:	185b      	adds	r3, r3, r1
 80058ca:	0412      	lsls	r2, r2, #16
 80058cc:	1418      	asrs	r0, r3, #16
 80058ce:	0c12      	lsrs	r2, r2, #16
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	1d39      	adds	r1, r7, #4
 80058d4:	4313      	orrs	r3, r2
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	000f      	movs	r7, r1
 80058da:	45a8      	cmp	r8, r5
 80058dc:	d8e3      	bhi.n	80058a6 <__mdiff+0x7e>
 80058de:	45a2      	cmp	sl, r4
 80058e0:	d915      	bls.n	800590e <__mdiff+0xe6>
 80058e2:	cc08      	ldmia	r4!, {r3}
 80058e4:	041a      	lsls	r2, r3, #16
 80058e6:	0c12      	lsrs	r2, r2, #16
 80058e8:	1812      	adds	r2, r2, r0
 80058ea:	1415      	asrs	r5, r2, #16
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	195b      	adds	r3, r3, r5
 80058f0:	0412      	lsls	r2, r2, #16
 80058f2:	1418      	asrs	r0, r3, #16
 80058f4:	0c12      	lsrs	r2, r2, #16
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	4313      	orrs	r3, r2
 80058fa:	c708      	stmia	r7!, {r3}
 80058fc:	45a2      	cmp	sl, r4
 80058fe:	d8f0      	bhi.n	80058e2 <__mdiff+0xba>
 8005900:	4652      	mov	r2, sl
 8005902:	1b96      	subs	r6, r2, r6
 8005904:	3e05      	subs	r6, #5
 8005906:	08b6      	lsrs	r6, r6, #2
 8005908:	3601      	adds	r6, #1
 800590a:	00b6      	lsls	r6, r6, #2
 800590c:	1989      	adds	r1, r1, r6
 800590e:	3904      	subs	r1, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <__mdiff+0xfc>
 8005914:	2301      	movs	r3, #1
 8005916:	425b      	negs	r3, r3
 8005918:	4698      	mov	r8, r3
 800591a:	3904      	subs	r1, #4
 800591c:	680b      	ldr	r3, [r1, #0]
 800591e:	44c4      	add	ip, r8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f7      	beq.n	8005914 <__mdiff+0xec>
 8005924:	464b      	mov	r3, r9
 8005926:	4662      	mov	r2, ip
 8005928:	611a      	str	r2, [r3, #16]
 800592a:	4648      	mov	r0, r9
 800592c:	bc3c      	pop	{r2, r3, r4, r5}
 800592e:	4690      	mov	r8, r2
 8005930:	4699      	mov	r9, r3
 8005932:	46a2      	mov	sl, r4
 8005934:	46ab      	mov	fp, r5
 8005936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005938:	2100      	movs	r1, #0
 800593a:	f7ff fcc7 	bl	80052cc <_Balloc>
 800593e:	2301      	movs	r3, #1
 8005940:	6103      	str	r3, [r0, #16]
 8005942:	2300      	movs	r3, #0
 8005944:	4681      	mov	r9, r0
 8005946:	6143      	str	r3, [r0, #20]
 8005948:	e7ef      	b.n	800592a <__mdiff+0x102>
 800594a:	46c0      	nop			; (mov r8, r8)

0800594c <__ulp>:
 800594c:	4b10      	ldr	r3, [pc, #64]	; (8005990 <__ulp+0x44>)
 800594e:	b510      	push	{r4, lr}
 8005950:	4019      	ands	r1, r3
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <__ulp+0x48>)
 8005954:	469c      	mov	ip, r3
 8005956:	4461      	add	r1, ip
 8005958:	2900      	cmp	r1, #0
 800595a:	dd04      	ble.n	8005966 <__ulp+0x1a>
 800595c:	2200      	movs	r2, #0
 800595e:	000b      	movs	r3, r1
 8005960:	0010      	movs	r0, r2
 8005962:	0019      	movs	r1, r3
 8005964:	bd10      	pop	{r4, pc}
 8005966:	4249      	negs	r1, r1
 8005968:	1509      	asrs	r1, r1, #20
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	2913      	cmp	r1, #19
 8005970:	dd08      	ble.n	8005984 <__ulp+0x38>
 8005972:	3914      	subs	r1, #20
 8005974:	2001      	movs	r0, #1
 8005976:	291e      	cmp	r1, #30
 8005978:	dc02      	bgt.n	8005980 <__ulp+0x34>
 800597a:	241f      	movs	r4, #31
 800597c:	1a61      	subs	r1, r4, r1
 800597e:	4088      	lsls	r0, r1
 8005980:	0002      	movs	r2, r0
 8005982:	e7ed      	b.n	8005960 <__ulp+0x14>
 8005984:	2080      	movs	r0, #128	; 0x80
 8005986:	0300      	lsls	r0, r0, #12
 8005988:	4108      	asrs	r0, r1
 800598a:	0003      	movs	r3, r0
 800598c:	e7e8      	b.n	8005960 <__ulp+0x14>
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	7ff00000 	.word	0x7ff00000
 8005994:	fcc00000 	.word	0xfcc00000

08005998 <__b2d>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	0006      	movs	r6, r0
 800599c:	4647      	mov	r7, r8
 800599e:	46ce      	mov	lr, r9
 80059a0:	6904      	ldr	r4, [r0, #16]
 80059a2:	3614      	adds	r6, #20
 80059a4:	00a4      	lsls	r4, r4, #2
 80059a6:	1934      	adds	r4, r6, r4
 80059a8:	1f23      	subs	r3, r4, #4
 80059aa:	681d      	ldr	r5, [r3, #0]
 80059ac:	b580      	push	{r7, lr}
 80059ae:	0028      	movs	r0, r5
 80059b0:	000f      	movs	r7, r1
 80059b2:	4698      	mov	r8, r3
 80059b4:	f7ff fd4a 	bl	800544c <__hi0bits>
 80059b8:	2120      	movs	r1, #32
 80059ba:	1a0a      	subs	r2, r1, r0
 80059bc:	603a      	str	r2, [r7, #0]
 80059be:	280a      	cmp	r0, #10
 80059c0:	dc18      	bgt.n	80059f4 <__b2d+0x5c>
 80059c2:	002f      	movs	r7, r5
 80059c4:	3915      	subs	r1, #21
 80059c6:	1a0b      	subs	r3, r1, r0
 80059c8:	40df      	lsrs	r7, r3
 80059ca:	4921      	ldr	r1, [pc, #132]	; (8005a50 <__b2d+0xb8>)
 80059cc:	4699      	mov	r9, r3
 80059ce:	4339      	orrs	r1, r7
 80059d0:	000b      	movs	r3, r1
 80059d2:	2700      	movs	r7, #0
 80059d4:	4546      	cmp	r6, r8
 80059d6:	d203      	bcs.n	80059e0 <__b2d+0x48>
 80059d8:	4649      	mov	r1, r9
 80059da:	3c08      	subs	r4, #8
 80059dc:	6827      	ldr	r7, [r4, #0]
 80059de:	40cf      	lsrs	r7, r1
 80059e0:	3015      	adds	r0, #21
 80059e2:	4085      	lsls	r5, r0
 80059e4:	433d      	orrs	r5, r7
 80059e6:	002a      	movs	r2, r5
 80059e8:	0010      	movs	r0, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	bc0c      	pop	{r2, r3}
 80059ee:	4690      	mov	r8, r2
 80059f0:	4699      	mov	r9, r3
 80059f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f4:	380b      	subs	r0, #11
 80059f6:	4546      	cmp	r6, r8
 80059f8:	d21b      	bcs.n	8005a32 <__b2d+0x9a>
 80059fa:	2308      	movs	r3, #8
 80059fc:	425b      	negs	r3, r3
 80059fe:	469c      	mov	ip, r3
 8005a00:	44a4      	add	ip, r4
 8005a02:	4663      	mov	r3, ip
 8005a04:	681f      	ldr	r7, [r3, #0]
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d016      	beq.n	8005a38 <__b2d+0xa0>
 8005a0a:	1a0b      	subs	r3, r1, r0
 8005a0c:	4699      	mov	r9, r3
 8005a0e:	4085      	lsls	r5, r0
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <__b2d+0xb8>)
 8005a12:	464a      	mov	r2, r9
 8005a14:	431d      	orrs	r5, r3
 8005a16:	003b      	movs	r3, r7
 8005a18:	40d3      	lsrs	r3, r2
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	4329      	orrs	r1, r5
 8005a1e:	000b      	movs	r3, r1
 8005a20:	4087      	lsls	r7, r0
 8005a22:	4566      	cmp	r6, ip
 8005a24:	d203      	bcs.n	8005a2e <__b2d+0x96>
 8005a26:	3c0c      	subs	r4, #12
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	40d0      	lsrs	r0, r2
 8005a2c:	4307      	orrs	r7, r0
 8005a2e:	003a      	movs	r2, r7
 8005a30:	e7da      	b.n	80059e8 <__b2d+0x50>
 8005a32:	2700      	movs	r7, #0
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d104      	bne.n	8005a42 <__b2d+0xaa>
 8005a38:	4905      	ldr	r1, [pc, #20]	; (8005a50 <__b2d+0xb8>)
 8005a3a:	003a      	movs	r2, r7
 8005a3c:	4329      	orrs	r1, r5
 8005a3e:	000b      	movs	r3, r1
 8005a40:	e7d2      	b.n	80059e8 <__b2d+0x50>
 8005a42:	4085      	lsls	r5, r0
 8005a44:	2700      	movs	r7, #0
 8005a46:	4902      	ldr	r1, [pc, #8]	; (8005a50 <__b2d+0xb8>)
 8005a48:	003a      	movs	r2, r7
 8005a4a:	4329      	orrs	r1, r5
 8005a4c:	000b      	movs	r3, r1
 8005a4e:	e7cb      	b.n	80059e8 <__b2d+0x50>
 8005a50:	3ff00000 	.word	0x3ff00000

08005a54 <__d2b>:
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a56:	2101      	movs	r1, #1
 8005a58:	001c      	movs	r4, r3
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	0015      	movs	r5, r2
 8005a5e:	9f08      	ldr	r7, [sp, #32]
 8005a60:	f7ff fc34 	bl	80052cc <_Balloc>
 8005a64:	0323      	lsls	r3, r4, #12
 8005a66:	0064      	lsls	r4, r4, #1
 8005a68:	0006      	movs	r6, r0
 8005a6a:	0b1b      	lsrs	r3, r3, #12
 8005a6c:	0d64      	lsrs	r4, r4, #21
 8005a6e:	d002      	beq.n	8005a76 <__d2b+0x22>
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	0352      	lsls	r2, r2, #13
 8005a74:	4313      	orrs	r3, r2
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	d019      	beq.n	8005ab0 <__d2b+0x5c>
 8005a7c:	4668      	mov	r0, sp
 8005a7e:	9500      	str	r5, [sp, #0]
 8005a80:	f7ff fd00 	bl	8005484 <__lo0bits>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d130      	bne.n	8005aea <__d2b+0x96>
 8005a88:	9b00      	ldr	r3, [sp, #0]
 8005a8a:	9d01      	ldr	r5, [sp, #4]
 8005a8c:	6173      	str	r3, [r6, #20]
 8005a8e:	61b5      	str	r5, [r6, #24]
 8005a90:	1e6b      	subs	r3, r5, #1
 8005a92:	419d      	sbcs	r5, r3
 8005a94:	3501      	adds	r5, #1
 8005a96:	6135      	str	r5, [r6, #16]
 8005a98:	2c00      	cmp	r4, #0
 8005a9a:	d014      	beq.n	8005ac6 <__d2b+0x72>
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <__d2b+0xb0>)
 8005a9e:	469c      	mov	ip, r3
 8005aa0:	2335      	movs	r3, #53	; 0x35
 8005aa2:	4464      	add	r4, ip
 8005aa4:	1824      	adds	r4, r4, r0
 8005aa6:	1a18      	subs	r0, r3, r0
 8005aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aaa:	603c      	str	r4, [r7, #0]
 8005aac:	6018      	str	r0, [r3, #0]
 8005aae:	e019      	b.n	8005ae4 <__d2b+0x90>
 8005ab0:	a801      	add	r0, sp, #4
 8005ab2:	f7ff fce7 	bl	8005484 <__lo0bits>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	3020      	adds	r0, #32
 8005aba:	6173      	str	r3, [r6, #20]
 8005abc:	2301      	movs	r3, #1
 8005abe:	2501      	movs	r5, #1
 8005ac0:	6133      	str	r3, [r6, #16]
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	d1ea      	bne.n	8005a9c <__d2b+0x48>
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <__d2b+0xb4>)
 8005ac8:	469c      	mov	ip, r3
 8005aca:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <__d2b+0xb8>)
 8005acc:	4460      	add	r0, ip
 8005ace:	18eb      	adds	r3, r5, r3
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	18f3      	adds	r3, r6, r3
 8005ad4:	6038      	str	r0, [r7, #0]
 8005ad6:	6958      	ldr	r0, [r3, #20]
 8005ad8:	f7ff fcb8 	bl	800544c <__hi0bits>
 8005adc:	016d      	lsls	r5, r5, #5
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	1a28      	subs	r0, r5, r0
 8005ae2:	6018      	str	r0, [r3, #0]
 8005ae4:	0030      	movs	r0, r6
 8005ae6:	b003      	add	sp, #12
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aea:	9d01      	ldr	r5, [sp, #4]
 8005aec:	2320      	movs	r3, #32
 8005aee:	002a      	movs	r2, r5
 8005af0:	1a1b      	subs	r3, r3, r0
 8005af2:	409a      	lsls	r2, r3
 8005af4:	0013      	movs	r3, r2
 8005af6:	40c5      	lsrs	r5, r0
 8005af8:	9a00      	ldr	r2, [sp, #0]
 8005afa:	9501      	str	r5, [sp, #4]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	6173      	str	r3, [r6, #20]
 8005b00:	e7c5      	b.n	8005a8e <__d2b+0x3a>
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	fffffbcd 	.word	0xfffffbcd
 8005b08:	fffffbce 	.word	0xfffffbce
 8005b0c:	3fffffff 	.word	0x3fffffff

08005b10 <__ratio>:
 8005b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b12:	46ce      	mov	lr, r9
 8005b14:	4647      	mov	r7, r8
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	4688      	mov	r8, r1
 8005b1c:	a902      	add	r1, sp, #8
 8005b1e:	4681      	mov	r9, r0
 8005b20:	f7ff ff3a 	bl	8005998 <__b2d>
 8005b24:	0006      	movs	r6, r0
 8005b26:	000f      	movs	r7, r1
 8005b28:	4640      	mov	r0, r8
 8005b2a:	a903      	add	r1, sp, #12
 8005b2c:	f7ff ff34 	bl	8005998 <__b2d>
 8005b30:	9000      	str	r0, [sp, #0]
 8005b32:	9101      	str	r1, [sp, #4]
 8005b34:	4649      	mov	r1, r9
 8005b36:	6909      	ldr	r1, [r1, #16]
 8005b38:	0002      	movs	r2, r0
 8005b3a:	468c      	mov	ip, r1
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	6909      	ldr	r1, [r1, #16]
 8005b40:	4688      	mov	r8, r1
 8005b42:	4661      	mov	r1, ip
 8005b44:	4640      	mov	r0, r8
 8005b46:	1a09      	subs	r1, r1, r0
 8005b48:	0149      	lsls	r1, r1, #5
 8005b4a:	468c      	mov	ip, r1
 8005b4c:	9803      	ldr	r0, [sp, #12]
 8005b4e:	9902      	ldr	r1, [sp, #8]
 8005b50:	1a09      	subs	r1, r1, r0
 8005b52:	4688      	mov	r8, r1
 8005b54:	44c4      	add	ip, r8
 8005b56:	4661      	mov	r1, ip
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	dd0d      	ble.n	8005b78 <__ratio+0x68>
 8005b5c:	050b      	lsls	r3, r1, #20
 8005b5e:	19dd      	adds	r5, r3, r7
 8005b60:	002f      	movs	r7, r5
 8005b62:	9a00      	ldr	r2, [sp, #0]
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	0030      	movs	r0, r6
 8005b68:	0039      	movs	r1, r7
 8005b6a:	f7fb fff3 	bl	8001b54 <__aeabi_ddiv>
 8005b6e:	b005      	add	sp, #20
 8005b70:	bc0c      	pop	{r2, r3}
 8005b72:	4690      	mov	r8, r2
 8005b74:	4699      	mov	r9, r3
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b78:	0508      	lsls	r0, r1, #20
 8005b7a:	9901      	ldr	r1, [sp, #4]
 8005b7c:	1a0b      	subs	r3, r1, r0
 8005b7e:	9200      	str	r2, [sp, #0]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	e7ee      	b.n	8005b62 <__ratio+0x52>

08005b84 <_mprec_log10>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	0004      	movs	r4, r0
 8005b88:	2817      	cmp	r0, #23
 8005b8a:	dd09      	ble.n	8005ba0 <_mprec_log10+0x1c>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	4907      	ldr	r1, [pc, #28]	; (8005bac <_mprec_log10+0x28>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <_mprec_log10+0x2c>)
 8005b94:	3c01      	subs	r4, #1
 8005b96:	f7fc fc11 	bl	80023bc <__aeabi_dmul>
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	d1f8      	bne.n	8005b90 <_mprec_log10+0xc>
 8005b9e:	bd10      	pop	{r4, pc}
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <_mprec_log10+0x30>)
 8005ba2:	00c4      	lsls	r4, r0, #3
 8005ba4:	191c      	adds	r4, r3, r4
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	6861      	ldr	r1, [r4, #4]
 8005baa:	e7f8      	b.n	8005b9e <_mprec_log10+0x1a>
 8005bac:	3ff00000 	.word	0x3ff00000
 8005bb0:	40240000 	.word	0x40240000
 8005bb4:	08016c00 	.word	0x08016c00

08005bb8 <__copybits>:
 8005bb8:	b530      	push	{r4, r5, lr}
 8005bba:	0014      	movs	r4, r2
 8005bbc:	3901      	subs	r1, #1
 8005bbe:	6913      	ldr	r3, [r2, #16]
 8005bc0:	1149      	asrs	r1, r1, #5
 8005bc2:	3101      	adds	r1, #1
 8005bc4:	3414      	adds	r4, #20
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	0089      	lsls	r1, r1, #2
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	1841      	adds	r1, r0, r1
 8005bce:	429c      	cmp	r4, r3
 8005bd0:	d20b      	bcs.n	8005bea <__copybits+0x32>
 8005bd2:	1a9a      	subs	r2, r3, r2
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	3a15      	subs	r2, #21
 8005bd8:	0892      	lsrs	r2, r2, #2
 8005bda:	3201      	adds	r2, #1
 8005bdc:	0092      	lsls	r2, r2, #2
 8005bde:	58e5      	ldr	r5, [r4, r3]
 8005be0:	50c5      	str	r5, [r0, r3]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d1fa      	bne.n	8005bde <__copybits+0x26>
 8005be8:	18c0      	adds	r0, r0, r3
 8005bea:	4281      	cmp	r1, r0
 8005bec:	d903      	bls.n	8005bf6 <__copybits+0x3e>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	c008      	stmia	r0!, {r3}
 8005bf2:	4281      	cmp	r1, r0
 8005bf4:	d8fc      	bhi.n	8005bf0 <__copybits+0x38>
 8005bf6:	bd30      	pop	{r4, r5, pc}

08005bf8 <__any_on>:
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	6900      	ldr	r0, [r0, #16]
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	3214      	adds	r2, #20
 8005c00:	114c      	asrs	r4, r1, #5
 8005c02:	42a0      	cmp	r0, r4
 8005c04:	da0f      	bge.n	8005c26 <__any_on+0x2e>
 8005c06:	0083      	lsls	r3, r0, #2
 8005c08:	18d3      	adds	r3, r2, r3
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d21d      	bcs.n	8005c4a <__any_on+0x52>
 8005c0e:	3b04      	subs	r3, #4
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d004      	beq.n	8005c20 <__any_on+0x28>
 8005c16:	e016      	b.n	8005c46 <__any_on+0x4e>
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	6819      	ldr	r1, [r3, #0]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d112      	bne.n	8005c46 <__any_on+0x4e>
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d3f9      	bcc.n	8005c18 <__any_on+0x20>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	00a3      	lsls	r3, r4, #2
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	42a0      	cmp	r0, r4
 8005c2c:	dded      	ble.n	8005c0a <__any_on+0x12>
 8005c2e:	201f      	movs	r0, #31
 8005c30:	4001      	ands	r1, r0
 8005c32:	d0ea      	beq.n	8005c0a <__any_on+0x12>
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	0020      	movs	r0, r4
 8005c38:	40c8      	lsrs	r0, r1
 8005c3a:	4088      	lsls	r0, r1
 8005c3c:	0001      	movs	r1, r0
 8005c3e:	2001      	movs	r0, #1
 8005c40:	428c      	cmp	r4, r1
 8005c42:	d1ef      	bne.n	8005c24 <__any_on+0x2c>
 8005c44:	e7e1      	b.n	8005c0a <__any_on+0x12>
 8005c46:	2001      	movs	r0, #1
 8005c48:	e7ec      	b.n	8005c24 <__any_on+0x2c>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e7ea      	b.n	8005c24 <__any_on+0x2c>
 8005c4e:	46c0      	nop			; (mov r8, r8)

08005c50 <_read_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	0005      	movs	r5, r0
 8005c54:	0008      	movs	r0, r1
 8005c56:	0011      	movs	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4c06      	ldr	r4, [pc, #24]	; (8005c74 <_read_r+0x24>)
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	001a      	movs	r2, r3
 8005c60:	f7fa fbc4 	bl	80003ec <_read>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d000      	beq.n	8005c6a <_read_r+0x1a>
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0fb      	beq.n	8005c68 <_read_r+0x18>
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	e7f9      	b.n	8005c68 <_read_r+0x18>
 8005c74:	20002350 	.word	0x20002350

08005c78 <_svfprintf_r>:
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	46de      	mov	lr, fp
 8005c7c:	4657      	mov	r7, sl
 8005c7e:	464e      	mov	r6, r9
 8005c80:	4645      	mov	r5, r8
 8005c82:	b5e0      	push	{r5, r6, r7, lr}
 8005c84:	b0c3      	sub	sp, #268	; 0x10c
 8005c86:	000c      	movs	r4, r1
 8005c88:	9106      	str	r1, [sp, #24]
 8005c8a:	4692      	mov	sl, r2
 8005c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c8e:	9007      	str	r0, [sp, #28]
 8005c90:	f7ff fab0 	bl	80051f4 <_localeconv_r>
 8005c94:	6803      	ldr	r3, [r0, #0]
 8005c96:	0018      	movs	r0, r3
 8005c98:	931a      	str	r3, [sp, #104]	; 0x68
 8005c9a:	f7fd ff11 	bl	8003ac0 <strlen>
 8005c9e:	9019      	str	r0, [sp, #100]	; 0x64
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	d505      	bpl.n	8005cb2 <_svfprintf_r+0x3a>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <_svfprintf_r+0x3a>
 8005cae:	f000 ff21 	bl	8006af4 <_svfprintf_r+0xe7c>
 8005cb2:	ab32      	add	r3, sp, #200	; 0xc8
 8005cb4:	9325      	str	r3, [sp, #148]	; 0x94
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	af25      	add	r7, sp, #148	; 0x94
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	9318      	str	r3, [sp, #96]	; 0x60
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9316      	str	r3, [sp, #88]	; 0x58
 8005cc6:	9417      	str	r4, [sp, #92]	; 0x5c
 8005cc8:	2300      	movs	r3, #0
 8005cca:	46d3      	mov	fp, sl
 8005ccc:	ae32      	add	r6, sp, #200	; 0xc8
 8005cce:	9314      	str	r3, [sp, #80]	; 0x50
 8005cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d044      	beq.n	8005d66 <_svfprintf_r+0xee>
 8005cdc:	465c      	mov	r4, fp
 8005cde:	2b25      	cmp	r3, #37	; 0x25
 8005ce0:	d102      	bne.n	8005ce8 <_svfprintf_r+0x70>
 8005ce2:	e01b      	b.n	8005d1c <_svfprintf_r+0xa4>
 8005ce4:	2b25      	cmp	r3, #37	; 0x25
 8005ce6:	d003      	beq.n	8005cf0 <_svfprintf_r+0x78>
 8005ce8:	3401      	adds	r4, #1
 8005cea:	7823      	ldrb	r3, [r4, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f9      	bne.n	8005ce4 <_svfprintf_r+0x6c>
 8005cf0:	465b      	mov	r3, fp
 8005cf2:	1ae5      	subs	r5, r4, r3
 8005cf4:	d00f      	beq.n	8005d16 <_svfprintf_r+0x9e>
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6075      	str	r5, [r6, #4]
 8005cfc:	195b      	adds	r3, r3, r5
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3301      	adds	r3, #1
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	dc24      	bgt.n	8005d54 <_svfprintf_r+0xdc>
 8005d0a:	3608      	adds	r6, #8
 8005d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0e:	469c      	mov	ip, r3
 8005d10:	44ac      	add	ip, r5
 8005d12:	4663      	mov	r3, ip
 8005d14:	930a      	str	r3, [sp, #40]	; 0x28
 8005d16:	7823      	ldrb	r3, [r4, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d024      	beq.n	8005d66 <_svfprintf_r+0xee>
 8005d1c:	1c63      	adds	r3, r4, #1
 8005d1e:	469b      	mov	fp, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	aa16      	add	r2, sp, #88	; 0x58
 8005d24:	77d3      	strb	r3, [r2, #31]
 8005d26:	2200      	movs	r2, #0
 8005d28:	4690      	mov	r8, r2
 8005d2a:	3a01      	subs	r2, #1
 8005d2c:	4692      	mov	sl, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d32:	3240      	adds	r2, #64	; 0x40
 8005d34:	4691      	mov	r9, r2
 8005d36:	3a38      	subs	r2, #56	; 0x38
 8005d38:	7863      	ldrb	r3, [r4, #1]
 8005d3a:	4694      	mov	ip, r2
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	2400      	movs	r4, #0
 8005d40:	465a      	mov	r2, fp
 8005d42:	0018      	movs	r0, r3
 8005d44:	3820      	subs	r0, #32
 8005d46:	3201      	adds	r2, #1
 8005d48:	2858      	cmp	r0, #88	; 0x58
 8005d4a:	d83d      	bhi.n	8005dc8 <_svfprintf_r+0x150>
 8005d4c:	4dba      	ldr	r5, [pc, #744]	; (8006038 <_svfprintf_r+0x3c0>)
 8005d4e:	0080      	lsls	r0, r0, #2
 8005d50:	5828      	ldr	r0, [r5, r0]
 8005d52:	4687      	mov	pc, r0
 8005d54:	003a      	movs	r2, r7
 8005d56:	9906      	ldr	r1, [sp, #24]
 8005d58:	9807      	ldr	r0, [sp, #28]
 8005d5a:	f001 fd0d 	bl	8007778 <__ssprint_r>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d109      	bne.n	8005d76 <_svfprintf_r+0xfe>
 8005d62:	ae32      	add	r6, sp, #200	; 0xc8
 8005d64:	e7d2      	b.n	8005d0c <_svfprintf_r+0x94>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <_svfprintf_r+0xfe>
 8005d6c:	003a      	movs	r2, r7
 8005d6e:	9906      	ldr	r1, [sp, #24]
 8005d70:	9807      	ldr	r0, [sp, #28]
 8005d72:	f001 fd01 	bl	8007778 <__ssprint_r>
 8005d76:	9b06      	ldr	r3, [sp, #24]
 8005d78:	899b      	ldrh	r3, [r3, #12]
 8005d7a:	065b      	lsls	r3, r3, #25
 8005d7c:	d501      	bpl.n	8005d82 <_svfprintf_r+0x10a>
 8005d7e:	f001 f972 	bl	8007066 <_svfprintf_r+0x13ee>
 8005d82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d84:	b043      	add	sp, #268	; 0x10c
 8005d86:	bc3c      	pop	{r2, r3, r4, r5}
 8005d88:	4690      	mov	r8, r2
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	46a2      	mov	sl, r4
 8005d8e:	46ab      	mov	fp, r5
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d92:	2500      	movs	r5, #0
 8005d94:	3b30      	subs	r3, #48	; 0x30
 8005d96:	9408      	str	r4, [sp, #32]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	002c      	movs	r4, r5
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	00a3      	lsls	r3, r4, #2
 8005da0:	191c      	adds	r4, r3, r4
 8005da2:	7813      	ldrb	r3, [r2, #0]
 8005da4:	0064      	lsls	r4, r4, #1
 8005da6:	1904      	adds	r4, r0, r4
 8005da8:	0018      	movs	r0, r3
 8005daa:	1c51      	adds	r1, r2, #1
 8005dac:	3830      	subs	r0, #48	; 0x30
 8005dae:	000a      	movs	r2, r1
 8005db0:	2809      	cmp	r0, #9
 8005db2:	d9f4      	bls.n	8005d9e <_svfprintf_r+0x126>
 8005db4:	465a      	mov	r2, fp
 8005db6:	468b      	mov	fp, r1
 8005db8:	0011      	movs	r1, r2
 8005dba:	465a      	mov	r2, fp
 8005dbc:	940b      	str	r4, [sp, #44]	; 0x2c
 8005dbe:	9c08      	ldr	r4, [sp, #32]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	3820      	subs	r0, #32
 8005dc4:	2858      	cmp	r0, #88	; 0x58
 8005dc6:	d9c1      	bls.n	8005d4c <_svfprintf_r+0xd4>
 8005dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dca:	4693      	mov	fp, r2
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d001      	beq.n	8005dd4 <_svfprintf_r+0x15c>
 8005dd0:	f001 fa2c 	bl	800722c <_svfprintf_r+0x15b4>
 8005dd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d0c5      	beq.n	8005d66 <_svfprintf_r+0xee>
 8005dda:	ab28      	add	r3, sp, #160	; 0xa0
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	a916      	add	r1, sp, #88	; 0x58
 8005de2:	77ca      	strb	r2, [r1, #31]
 8005de4:	9409      	str	r4, [sp, #36]	; 0x24
 8005de6:	3201      	adds	r2, #1
 8005de8:	e171      	b.n	80060ce <_svfprintf_r+0x456>
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	431c      	orrs	r4, r3
 8005dee:	7813      	ldrb	r3, [r2, #0]
 8005df0:	e7a7      	b.n	8005d42 <_svfprintf_r+0xca>
 8005df2:	1c53      	adds	r3, r2, #1
 8005df4:	001d      	movs	r5, r3
 8005df6:	7813      	ldrb	r3, [r2, #0]
 8005df8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfa:	d101      	bne.n	8005e00 <_svfprintf_r+0x188>
 8005dfc:	f001 f9f9 	bl	80071f2 <_svfprintf_r+0x157a>
 8005e00:	0018      	movs	r0, r3
 8005e02:	2200      	movs	r2, #0
 8005e04:	3830      	subs	r0, #48	; 0x30
 8005e06:	4692      	mov	sl, r2
 8005e08:	2809      	cmp	r0, #9
 8005e0a:	d901      	bls.n	8005e10 <_svfprintf_r+0x198>
 8005e0c:	f001 f8ae 	bl	8006f6c <_svfprintf_r+0x12f4>
 8005e10:	000b      	movs	r3, r1
 8005e12:	46a3      	mov	fp, r4
 8005e14:	4651      	mov	r1, sl
 8005e16:	002a      	movs	r2, r5
 8005e18:	469a      	mov	sl, r3
 8005e1a:	008b      	lsls	r3, r1, #2
 8005e1c:	185b      	adds	r3, r3, r1
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	1819      	adds	r1, r3, r0
 8005e22:	7813      	ldrb	r3, [r2, #0]
 8005e24:	1c54      	adds	r4, r2, #1
 8005e26:	0018      	movs	r0, r3
 8005e28:	3830      	subs	r0, #48	; 0x30
 8005e2a:	0022      	movs	r2, r4
 8005e2c:	2809      	cmp	r0, #9
 8005e2e:	d9f4      	bls.n	8005e1a <_svfprintf_r+0x1a2>
 8005e30:	0020      	movs	r0, r4
 8005e32:	4652      	mov	r2, sl
 8005e34:	465c      	mov	r4, fp
 8005e36:	4683      	mov	fp, r0
 8005e38:	468a      	mov	sl, r1
 8005e3a:	0011      	movs	r1, r2
 8005e3c:	465a      	mov	r2, fp
 8005e3e:	e7bf      	b.n	8005dc0 <_svfprintf_r+0x148>
 8005e40:	7813      	ldrb	r3, [r2, #0]
 8005e42:	2004      	movs	r0, #4
 8005e44:	4304      	orrs	r4, r0
 8005e46:	e77c      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e48:	202b      	movs	r0, #43	; 0x2b
 8005e4a:	7813      	ldrb	r3, [r2, #0]
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	4680      	mov	r8, r0
 8005e50:	e777      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005e54:	7813      	ldrb	r3, [r2, #0]
 8005e56:	6805      	ldr	r5, [r0, #0]
 8005e58:	3004      	adds	r0, #4
 8005e5a:	950b      	str	r5, [sp, #44]	; 0x2c
 8005e5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	db00      	blt.n	8005e64 <_svfprintf_r+0x1ec>
 8005e62:	e76e      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e64:	4268      	negs	r0, r5
 8005e66:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e68:	e7eb      	b.n	8005e42 <_svfprintf_r+0x1ca>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	431c      	orrs	r4, r3
 8005e6e:	7813      	ldrb	r3, [r2, #0]
 8005e70:	e767      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e72:	4640      	mov	r0, r8
 8005e74:	7813      	ldrb	r3, [r2, #0]
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d000      	beq.n	8005e7c <_svfprintf_r+0x204>
 8005e7a:	e762      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e7c:	3020      	adds	r0, #32
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4680      	mov	r8, r0
 8005e82:	e75e      	b.n	8005d42 <_svfprintf_r+0xca>
 8005e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e86:	4693      	mov	fp, r2
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d001      	beq.n	8005e90 <_svfprintf_r+0x218>
 8005e8c:	f001 f9ec 	bl	8007268 <_svfprintf_r+0x15f0>
 8005e90:	4b6a      	ldr	r3, [pc, #424]	; (800603c <_svfprintf_r+0x3c4>)
 8005e92:	9314      	str	r3, [sp, #80]	; 0x50
 8005e94:	06a3      	lsls	r3, r4, #26
 8005e96:	d400      	bmi.n	8005e9a <_svfprintf_r+0x222>
 8005e98:	e301      	b.n	800649e <_svfprintf_r+0x826>
 8005e9a:	2207      	movs	r2, #7
 8005e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e9e:	3307      	adds	r3, #7
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	3201      	adds	r2, #1
 8005ea4:	4694      	mov	ip, r2
 8005ea6:	449c      	add	ip, r3
 8005ea8:	4662      	mov	r2, ip
 8005eaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	920c      	str	r2, [sp, #48]	; 0x30
 8005eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	07e2      	lsls	r2, r4, #31
 8005eb8:	d566      	bpl.n	8005f88 <_svfprintf_r+0x310>
 8005eba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ebc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ebe:	0008      	movs	r0, r1
 8005ec0:	4310      	orrs	r0, r2
 8005ec2:	d061      	beq.n	8005f88 <_svfprintf_r+0x310>
 8005ec4:	2130      	movs	r1, #48	; 0x30
 8005ec6:	aa1e      	add	r2, sp, #120	; 0x78
 8005ec8:	7011      	strb	r1, [r2, #0]
 8005eca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005ecc:	431c      	orrs	r4, r3
 8005ece:	7051      	strb	r1, [r2, #1]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	a916      	add	r1, sp, #88	; 0x58
 8005ed4:	77ca      	strb	r2, [r1, #31]
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	3201      	adds	r2, #1
 8005eda:	d15b      	bne.n	8005f94 <_svfprintf_r+0x31c>
 8005edc:	2200      	movs	r2, #0
 8005ede:	4690      	mov	r8, r2
 8005ee0:	9409      	str	r4, [sp, #36]	; 0x24
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d100      	bne.n	8005ee8 <_svfprintf_r+0x270>
 8005ee6:	e0ce      	b.n	8006086 <_svfprintf_r+0x40e>
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d101      	bne.n	8005ef0 <_svfprintf_r+0x278>
 8005eec:	f000 fc2e 	bl	800674c <_svfprintf_r+0xad4>
 8005ef0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ef2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ef4:	4653      	mov	r3, sl
 8005ef6:	aa32      	add	r2, sp, #200	; 0xc8
 8005ef8:	4691      	mov	r9, r2
 8005efa:	9308      	str	r3, [sp, #32]
 8005efc:	46b2      	mov	sl, r6
 8005efe:	e000      	b.n	8005f02 <_svfprintf_r+0x28a>
 8005f00:	46a1      	mov	r9, r4
 8005f02:	074a      	lsls	r2, r1, #29
 8005f04:	4694      	mov	ip, r2
 8005f06:	464b      	mov	r3, r9
 8005f08:	4665      	mov	r5, ip
 8005f0a:	1e5c      	subs	r4, r3, #1
 8005f0c:	08c6      	lsrs	r6, r0, #3
 8005f0e:	2307      	movs	r3, #7
 8005f10:	08ca      	lsrs	r2, r1, #3
 8005f12:	4335      	orrs	r5, r6
 8005f14:	0011      	movs	r1, r2
 8005f16:	002a      	movs	r2, r5
 8005f18:	4003      	ands	r3, r0
 8005f1a:	3330      	adds	r3, #48	; 0x30
 8005f1c:	7023      	strb	r3, [r4, #0]
 8005f1e:	0028      	movs	r0, r5
 8005f20:	430a      	orrs	r2, r1
 8005f22:	d1ed      	bne.n	8005f00 <_svfprintf_r+0x288>
 8005f24:	900c      	str	r0, [sp, #48]	; 0x30
 8005f26:	910d      	str	r1, [sp, #52]	; 0x34
 8005f28:	9908      	ldr	r1, [sp, #32]
 8005f2a:	4656      	mov	r6, sl
 8005f2c:	468a      	mov	sl, r1
 8005f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f30:	464a      	mov	r2, r9
 8005f32:	9412      	str	r4, [sp, #72]	; 0x48
 8005f34:	07c9      	lsls	r1, r1, #31
 8005f36:	d501      	bpl.n	8005f3c <_svfprintf_r+0x2c4>
 8005f38:	f000 fcf3 	bl	8006922 <_svfprintf_r+0xcaa>
 8005f3c:	ab32      	add	r3, sp, #200	; 0xc8
 8005f3e:	1b1b      	subs	r3, r3, r4
 8005f40:	930e      	str	r3, [sp, #56]	; 0x38
 8005f42:	4653      	mov	r3, sl
 8005f44:	9308      	str	r3, [sp, #32]
 8005f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f48:	459a      	cmp	sl, r3
 8005f4a:	da00      	bge.n	8005f4e <_svfprintf_r+0x2d6>
 8005f4c:	9308      	str	r3, [sp, #32]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9315      	str	r3, [sp, #84]	; 0x54
 8005f52:	4643      	mov	r3, r8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d100      	bne.n	8005f5a <_svfprintf_r+0x2e2>
 8005f58:	e0c2      	b.n	80060e0 <_svfprintf_r+0x468>
 8005f5a:	9b08      	ldr	r3, [sp, #32]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	9308      	str	r3, [sp, #32]
 8005f60:	e0be      	b.n	80060e0 <_svfprintf_r+0x468>
 8005f62:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f64:	4693      	mov	fp, r2
 8005f66:	06a3      	lsls	r3, r4, #26
 8005f68:	d400      	bmi.n	8005f6c <_svfprintf_r+0x2f4>
 8005f6a:	e2ad      	b.n	80064c8 <_svfprintf_r+0x850>
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f70:	3307      	adds	r3, #7
 8005f72:	4393      	bics	r3, r2
 8005f74:	3201      	adds	r2, #1
 8005f76:	4694      	mov	ip, r2
 8005f78:	449c      	add	ip, r3
 8005f7a:	4662      	mov	r2, ip
 8005f7c:	920f      	str	r2, [sp, #60]	; 0x3c
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	920c      	str	r2, [sp, #48]	; 0x30
 8005f84:	930d      	str	r3, [sp, #52]	; 0x34
 8005f86:	2301      	movs	r3, #1
 8005f88:	2200      	movs	r2, #0
 8005f8a:	a916      	add	r1, sp, #88	; 0x58
 8005f8c:	77ca      	strb	r2, [r1, #31]
 8005f8e:	4652      	mov	r2, sl
 8005f90:	3201      	adds	r2, #1
 8005f92:	d0a3      	beq.n	8005edc <_svfprintf_r+0x264>
 8005f94:	2200      	movs	r2, #0
 8005f96:	4690      	mov	r8, r2
 8005f98:	2280      	movs	r2, #128	; 0x80
 8005f9a:	0021      	movs	r1, r4
 8005f9c:	4391      	bics	r1, r2
 8005f9e:	9109      	str	r1, [sp, #36]	; 0x24
 8005fa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fa4:	0008      	movs	r0, r1
 8005fa6:	4310      	orrs	r0, r2
 8005fa8:	d19b      	bne.n	8005ee2 <_svfprintf_r+0x26a>
 8005faa:	4652      	mov	r2, sl
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	d001      	beq.n	8005fb4 <_svfprintf_r+0x33c>
 8005fb0:	f000 fe50 	bl	8006c54 <_svfprintf_r+0xfdc>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <_svfprintf_r+0x344>
 8005fb8:	f000 fc71 	bl	800689e <_svfprintf_r+0xc26>
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	aa32      	add	r2, sp, #200	; 0xc8
 8005fc2:	4023      	ands	r3, r4
 8005fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc6:	9212      	str	r2, [sp, #72]	; 0x48
 8005fc8:	d0bb      	beq.n	8005f42 <_svfprintf_r+0x2ca>
 8005fca:	2327      	movs	r3, #39	; 0x27
 8005fcc:	2130      	movs	r1, #48	; 0x30
 8005fce:	aa28      	add	r2, sp, #160	; 0xa0
 8005fd0:	54d1      	strb	r1, [r2, r3]
 8005fd2:	aa16      	add	r2, sp, #88	; 0x58
 8005fd4:	4694      	mov	ip, r2
 8005fd6:	3348      	adds	r3, #72	; 0x48
 8005fd8:	4463      	add	r3, ip
 8005fda:	9312      	str	r3, [sp, #72]	; 0x48
 8005fdc:	e7b1      	b.n	8005f42 <_svfprintf_r+0x2ca>
 8005fde:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe2:	4693      	mov	fp, r2
 8005fe4:	1d1d      	adds	r5, r3, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	a916      	add	r1, sp, #88	; 0x58
 8005fea:	001a      	movs	r2, r3
 8005fec:	9312      	str	r3, [sp, #72]	; 0x48
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77cb      	strb	r3, [r1, #31]
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d101      	bne.n	8005ffa <_svfprintf_r+0x382>
 8005ff6:	f000 fdaf 	bl	8006b58 <_svfprintf_r+0xee0>
 8005ffa:	4653      	mov	r3, sl
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d101      	bne.n	8006004 <_svfprintf_r+0x38c>
 8006000:	f000 fea9 	bl	8006d56 <_svfprintf_r+0x10de>
 8006004:	4652      	mov	r2, sl
 8006006:	2100      	movs	r1, #0
 8006008:	9812      	ldr	r0, [sp, #72]	; 0x48
 800600a:	f7ff f91f 	bl	800524c <memchr>
 800600e:	2800      	cmp	r0, #0
 8006010:	d101      	bne.n	8006016 <_svfprintf_r+0x39e>
 8006012:	f000 ffb2 	bl	8006f7a <_svfprintf_r+0x1302>
 8006016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006018:	1ac2      	subs	r2, r0, r3
 800601a:	ab16      	add	r3, sp, #88	; 0x58
 800601c:	7fdb      	ldrb	r3, [r3, #31]
 800601e:	920e      	str	r2, [sp, #56]	; 0x38
 8006020:	4698      	mov	r8, r3
 8006022:	43d3      	mvns	r3, r2
 8006024:	17db      	asrs	r3, r3, #31
 8006026:	401a      	ands	r2, r3
 8006028:	2300      	movs	r3, #0
 800602a:	9208      	str	r2, [sp, #32]
 800602c:	950f      	str	r5, [sp, #60]	; 0x3c
 800602e:	9409      	str	r4, [sp, #36]	; 0x24
 8006030:	469a      	mov	sl, r3
 8006032:	9315      	str	r3, [sp, #84]	; 0x54
 8006034:	e78d      	b.n	8005f52 <_svfprintf_r+0x2da>
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	08016cc8 	.word	0x08016cc8
 800603c:	08018b78 	.word	0x08018b78
 8006040:	9313      	str	r3, [sp, #76]	; 0x4c
 8006042:	4693      	mov	fp, r2
 8006044:	2900      	cmp	r1, #0
 8006046:	d001      	beq.n	800604c <_svfprintf_r+0x3d4>
 8006048:	f001 f909 	bl	800725e <_svfprintf_r+0x15e6>
 800604c:	06a3      	lsls	r3, r4, #26
 800604e:	d400      	bmi.n	8006052 <_svfprintf_r+0x3da>
 8006050:	e201      	b.n	8006456 <_svfprintf_r+0x7de>
 8006052:	2207      	movs	r2, #7
 8006054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006056:	3307      	adds	r3, #7
 8006058:	4393      	bics	r3, r2
 800605a:	3201      	adds	r2, #1
 800605c:	4694      	mov	ip, r2
 800605e:	449c      	add	ip, r3
 8006060:	4662      	mov	r2, ip
 8006062:	920f      	str	r2, [sp, #60]	; 0x3c
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	920c      	str	r2, [sp, #48]	; 0x30
 800606a:	930d      	str	r3, [sp, #52]	; 0x34
 800606c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606e:	2b00      	cmp	r3, #0
 8006070:	da01      	bge.n	8006076 <_svfprintf_r+0x3fe>
 8006072:	f000 fc7a 	bl	800696a <_svfprintf_r+0xcf2>
 8006076:	ab16      	add	r3, sp, #88	; 0x58
 8006078:	7fdb      	ldrb	r3, [r3, #31]
 800607a:	4698      	mov	r8, r3
 800607c:	4652      	mov	r2, sl
 800607e:	2301      	movs	r3, #1
 8006080:	3201      	adds	r2, #1
 8006082:	d189      	bne.n	8005f98 <_svfprintf_r+0x320>
 8006084:	9409      	str	r4, [sp, #36]	; 0x24
 8006086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006088:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800608a:	2c00      	cmp	r4, #0
 800608c:	d001      	beq.n	8006092 <_svfprintf_r+0x41a>
 800608e:	f000 fd8d 	bl	8006bac <_svfprintf_r+0xf34>
 8006092:	2b09      	cmp	r3, #9
 8006094:	d901      	bls.n	800609a <_svfprintf_r+0x422>
 8006096:	f000 fd89 	bl	8006bac <_svfprintf_r+0xf34>
 800609a:	2227      	movs	r2, #39	; 0x27
 800609c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800609e:	a928      	add	r1, sp, #160	; 0xa0
 80060a0:	3330      	adds	r3, #48	; 0x30
 80060a2:	548b      	strb	r3, [r1, r2]
 80060a4:	2301      	movs	r3, #1
 80060a6:	aa16      	add	r2, sp, #88	; 0x58
 80060a8:	4694      	mov	ip, r2
 80060aa:	930e      	str	r3, [sp, #56]	; 0x38
 80060ac:	336e      	adds	r3, #110	; 0x6e
 80060ae:	4463      	add	r3, ip
 80060b0:	9312      	str	r3, [sp, #72]	; 0x48
 80060b2:	e746      	b.n	8005f42 <_svfprintf_r+0x2ca>
 80060b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060b6:	4693      	mov	fp, r2
 80060b8:	680a      	ldr	r2, [r1, #0]
 80060ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80060bc:	ab28      	add	r3, sp, #160	; 0xa0
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	a816      	add	r0, sp, #88	; 0x58
 80060c4:	77c2      	strb	r2, [r0, #31]
 80060c6:	1d0a      	adds	r2, r1, #4
 80060c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80060ca:	2201      	movs	r2, #1
 80060cc:	9409      	str	r4, [sp, #36]	; 0x24
 80060ce:	9208      	str	r2, [sp, #32]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4690      	mov	r8, r2
 80060d4:	3201      	adds	r2, #1
 80060d6:	920e      	str	r2, [sp, #56]	; 0x38
 80060d8:	2200      	movs	r2, #0
 80060da:	4692      	mov	sl, r2
 80060dc:	9215      	str	r2, [sp, #84]	; 0x54
 80060de:	9312      	str	r3, [sp, #72]	; 0x48
 80060e0:	2302      	movs	r3, #2
 80060e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e4:	401a      	ands	r2, r3
 80060e6:	4691      	mov	r9, r2
 80060e8:	d002      	beq.n	80060f0 <_svfprintf_r+0x478>
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	3302      	adds	r3, #2
 80060ee:	9308      	str	r3, [sp, #32]
 80060f0:	2384      	movs	r3, #132	; 0x84
 80060f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f4:	68bc      	ldr	r4, [r7, #8]
 80060f6:	401a      	ands	r2, r3
 80060f8:	9211      	str	r2, [sp, #68]	; 0x44
 80060fa:	d13b      	bne.n	8006174 <_svfprintf_r+0x4fc>
 80060fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060fe:	9a08      	ldr	r2, [sp, #32]
 8006100:	1a9d      	subs	r5, r3, r2
 8006102:	2d00      	cmp	r5, #0
 8006104:	dd36      	ble.n	8006174 <_svfprintf_r+0x4fc>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2d10      	cmp	r5, #16
 800610a:	dc01      	bgt.n	8006110 <_svfprintf_r+0x498>
 800610c:	f000 fe29 	bl	8006d62 <_svfprintf_r+0x10ea>
 8006110:	2210      	movs	r2, #16
 8006112:	49d8      	ldr	r1, [pc, #864]	; (8006474 <_svfprintf_r+0x7fc>)
 8006114:	4690      	mov	r8, r2
 8006116:	9110      	str	r1, [sp, #64]	; 0x40
 8006118:	0022      	movs	r2, r4
 800611a:	000c      	movs	r4, r1
 800611c:	e003      	b.n	8006126 <_svfprintf_r+0x4ae>
 800611e:	3d10      	subs	r5, #16
 8006120:	3608      	adds	r6, #8
 8006122:	2d10      	cmp	r5, #16
 8006124:	dd16      	ble.n	8006154 <_svfprintf_r+0x4dc>
 8006126:	4641      	mov	r1, r8
 8006128:	3210      	adds	r2, #16
 800612a:	3301      	adds	r3, #1
 800612c:	6034      	str	r4, [r6, #0]
 800612e:	6071      	str	r1, [r6, #4]
 8006130:	60ba      	str	r2, [r7, #8]
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	2b07      	cmp	r3, #7
 8006136:	ddf2      	ble.n	800611e <_svfprintf_r+0x4a6>
 8006138:	003a      	movs	r2, r7
 800613a:	9906      	ldr	r1, [sp, #24]
 800613c:	9807      	ldr	r0, [sp, #28]
 800613e:	f001 fb1b 	bl	8007778 <__ssprint_r>
 8006142:	2800      	cmp	r0, #0
 8006144:	d000      	beq.n	8006148 <_svfprintf_r+0x4d0>
 8006146:	e616      	b.n	8005d76 <_svfprintf_r+0xfe>
 8006148:	3d10      	subs	r5, #16
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	ae32      	add	r6, sp, #200	; 0xc8
 8006150:	2d10      	cmp	r5, #16
 8006152:	dce8      	bgt.n	8006126 <_svfprintf_r+0x4ae>
 8006154:	0014      	movs	r4, r2
 8006156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006158:	1964      	adds	r4, r4, r5
 800615a:	3301      	adds	r3, #1
 800615c:	6032      	str	r2, [r6, #0]
 800615e:	6075      	str	r5, [r6, #4]
 8006160:	60bc      	str	r4, [r7, #8]
 8006162:	607b      	str	r3, [r7, #4]
 8006164:	2b07      	cmp	r3, #7
 8006166:	dd01      	ble.n	800616c <_svfprintf_r+0x4f4>
 8006168:	f000 fd47 	bl	8006bfa <_svfprintf_r+0xf82>
 800616c:	ab16      	add	r3, sp, #88	; 0x58
 800616e:	7fdb      	ldrb	r3, [r3, #31]
 8006170:	3608      	adds	r6, #8
 8006172:	4698      	mov	r8, r3
 8006174:	4643      	mov	r3, r8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00f      	beq.n	800619a <_svfprintf_r+0x522>
 800617a:	aa16      	add	r2, sp, #88	; 0x58
 800617c:	231f      	movs	r3, #31
 800617e:	4694      	mov	ip, r2
 8006180:	4463      	add	r3, ip
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	2301      	movs	r3, #1
 8006186:	6073      	str	r3, [r6, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3401      	adds	r4, #1
 800618c:	3301      	adds	r3, #1
 800618e:	60bc      	str	r4, [r7, #8]
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	2b07      	cmp	r3, #7
 8006194:	dd00      	ble.n	8006198 <_svfprintf_r+0x520>
 8006196:	e2c1      	b.n	800671c <_svfprintf_r+0xaa4>
 8006198:	3608      	adds	r6, #8
 800619a:	464b      	mov	r3, r9
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00c      	beq.n	80061ba <_svfprintf_r+0x542>
 80061a0:	ab1e      	add	r3, sp, #120	; 0x78
 80061a2:	6033      	str	r3, [r6, #0]
 80061a4:	2302      	movs	r3, #2
 80061a6:	6073      	str	r3, [r6, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3402      	adds	r4, #2
 80061ac:	3301      	adds	r3, #1
 80061ae:	60bc      	str	r4, [r7, #8]
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	dd00      	ble.n	80061b8 <_svfprintf_r+0x540>
 80061b6:	e2bd      	b.n	8006734 <_svfprintf_r+0xabc>
 80061b8:	3608      	adds	r6, #8
 80061ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d100      	bne.n	80061c2 <_svfprintf_r+0x54a>
 80061c0:	e20e      	b.n	80065e0 <_svfprintf_r+0x968>
 80061c2:	4653      	mov	r3, sl
 80061c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061c6:	1a9d      	subs	r5, r3, r2
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	dd33      	ble.n	8006234 <_svfprintf_r+0x5bc>
 80061cc:	4aa9      	ldr	r2, [pc, #676]	; (8006474 <_svfprintf_r+0x7fc>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	9210      	str	r2, [sp, #64]	; 0x40
 80061d2:	2d10      	cmp	r5, #16
 80061d4:	dd22      	ble.n	800621c <_svfprintf_r+0x5a4>
 80061d6:	4694      	mov	ip, r2
 80061d8:	2110      	movs	r1, #16
 80061da:	2210      	movs	r2, #16
 80061dc:	4461      	add	r1, ip
 80061de:	468a      	mov	sl, r1
 80061e0:	4691      	mov	r9, r2
 80061e2:	e003      	b.n	80061ec <_svfprintf_r+0x574>
 80061e4:	3d10      	subs	r5, #16
 80061e6:	3608      	adds	r6, #8
 80061e8:	2d10      	cmp	r5, #16
 80061ea:	dd17      	ble.n	800621c <_svfprintf_r+0x5a4>
 80061ec:	4652      	mov	r2, sl
 80061ee:	6032      	str	r2, [r6, #0]
 80061f0:	464a      	mov	r2, r9
 80061f2:	3410      	adds	r4, #16
 80061f4:	3301      	adds	r3, #1
 80061f6:	6072      	str	r2, [r6, #4]
 80061f8:	60bc      	str	r4, [r7, #8]
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	ddf1      	ble.n	80061e4 <_svfprintf_r+0x56c>
 8006200:	003a      	movs	r2, r7
 8006202:	9906      	ldr	r1, [sp, #24]
 8006204:	9807      	ldr	r0, [sp, #28]
 8006206:	f001 fab7 	bl	8007778 <__ssprint_r>
 800620a:	2800      	cmp	r0, #0
 800620c:	d000      	beq.n	8006210 <_svfprintf_r+0x598>
 800620e:	e5b2      	b.n	8005d76 <_svfprintf_r+0xfe>
 8006210:	3d10      	subs	r5, #16
 8006212:	68bc      	ldr	r4, [r7, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	ae32      	add	r6, sp, #200	; 0xc8
 8006218:	2d10      	cmp	r5, #16
 800621a:	dce7      	bgt.n	80061ec <_svfprintf_r+0x574>
 800621c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800621e:	1964      	adds	r4, r4, r5
 8006220:	3210      	adds	r2, #16
 8006222:	3301      	adds	r3, #1
 8006224:	6032      	str	r2, [r6, #0]
 8006226:	6075      	str	r5, [r6, #4]
 8006228:	60bc      	str	r4, [r7, #8]
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	2b07      	cmp	r3, #7
 800622e:	dd00      	ble.n	8006232 <_svfprintf_r+0x5ba>
 8006230:	e2aa      	b.n	8006788 <_svfprintf_r+0xb10>
 8006232:	3608      	adds	r6, #8
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	05db      	lsls	r3, r3, #23
 8006238:	d500      	bpl.n	800623c <_svfprintf_r+0x5c4>
 800623a:	e16b      	b.n	8006514 <_svfprintf_r+0x89c>
 800623c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006242:	469c      	mov	ip, r3
 8006244:	6073      	str	r3, [r6, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4464      	add	r4, ip
 800624a:	3301      	adds	r3, #1
 800624c:	60bc      	str	r4, [r7, #8]
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	2b07      	cmp	r3, #7
 8006252:	dd00      	ble.n	8006256 <_svfprintf_r+0x5de>
 8006254:	e153      	b.n	80064fe <_svfprintf_r+0x886>
 8006256:	3608      	adds	r6, #8
 8006258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	d539      	bpl.n	80062d2 <_svfprintf_r+0x65a>
 800625e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006260:	9a08      	ldr	r2, [sp, #32]
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	4698      	mov	r8, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd33      	ble.n	80062d2 <_svfprintf_r+0x65a>
 800626a:	4642      	mov	r2, r8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2a10      	cmp	r2, #16
 8006270:	dc01      	bgt.n	8006276 <_svfprintf_r+0x5fe>
 8006272:	f000 fe3a 	bl	8006eea <_svfprintf_r+0x1272>
 8006276:	4a7f      	ldr	r2, [pc, #508]	; (8006474 <_svfprintf_r+0x7fc>)
 8006278:	4645      	mov	r5, r8
 800627a:	9210      	str	r2, [sp, #64]	; 0x40
 800627c:	2210      	movs	r2, #16
 800627e:	4691      	mov	r9, r2
 8006280:	e003      	b.n	800628a <_svfprintf_r+0x612>
 8006282:	3d10      	subs	r5, #16
 8006284:	3608      	adds	r6, #8
 8006286:	2d10      	cmp	r5, #16
 8006288:	dd17      	ble.n	80062ba <_svfprintf_r+0x642>
 800628a:	4a7a      	ldr	r2, [pc, #488]	; (8006474 <_svfprintf_r+0x7fc>)
 800628c:	3410      	adds	r4, #16
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	464a      	mov	r2, r9
 8006292:	3301      	adds	r3, #1
 8006294:	6072      	str	r2, [r6, #4]
 8006296:	60bc      	str	r4, [r7, #8]
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	2b07      	cmp	r3, #7
 800629c:	ddf1      	ble.n	8006282 <_svfprintf_r+0x60a>
 800629e:	003a      	movs	r2, r7
 80062a0:	9906      	ldr	r1, [sp, #24]
 80062a2:	9807      	ldr	r0, [sp, #28]
 80062a4:	f001 fa68 	bl	8007778 <__ssprint_r>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d000      	beq.n	80062ae <_svfprintf_r+0x636>
 80062ac:	e563      	b.n	8005d76 <_svfprintf_r+0xfe>
 80062ae:	3d10      	subs	r5, #16
 80062b0:	68bc      	ldr	r4, [r7, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	ae32      	add	r6, sp, #200	; 0xc8
 80062b6:	2d10      	cmp	r5, #16
 80062b8:	dce7      	bgt.n	800628a <_svfprintf_r+0x612>
 80062ba:	46a8      	mov	r8, r5
 80062bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062be:	4444      	add	r4, r8
 80062c0:	6032      	str	r2, [r6, #0]
 80062c2:	4642      	mov	r2, r8
 80062c4:	3301      	adds	r3, #1
 80062c6:	6072      	str	r2, [r6, #4]
 80062c8:	60bc      	str	r4, [r7, #8]
 80062ca:	607b      	str	r3, [r7, #4]
 80062cc:	2b07      	cmp	r3, #7
 80062ce:	dd00      	ble.n	80062d2 <_svfprintf_r+0x65a>
 80062d0:	e333      	b.n	800693a <_svfprintf_r+0xcc2>
 80062d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d4:	9b08      	ldr	r3, [sp, #32]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	da00      	bge.n	80062dc <_svfprintf_r+0x664>
 80062da:	001a      	movs	r2, r3
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	469c      	mov	ip, r3
 80062e0:	4494      	add	ip, r2
 80062e2:	4663      	mov	r3, ip
 80062e4:	930a      	str	r3, [sp, #40]	; 0x28
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	d000      	beq.n	80062ec <_svfprintf_r+0x674>
 80062ea:	e1b5      	b.n	8006658 <_svfprintf_r+0x9e0>
 80062ec:	2300      	movs	r3, #0
 80062ee:	ae32      	add	r6, sp, #200	; 0xc8
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	e4ef      	b.n	8005cd4 <_svfprintf_r+0x5c>
 80062f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80062f6:	4693      	mov	fp, r2
 80062f8:	06a3      	lsls	r3, r4, #26
 80062fa:	d54c      	bpl.n	8006396 <_svfprintf_r+0x71e>
 80062fc:	2207      	movs	r2, #7
 80062fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006300:	3307      	adds	r3, #7
 8006302:	4393      	bics	r3, r2
 8006304:	3201      	adds	r2, #1
 8006306:	4694      	mov	ip, r2
 8006308:	449c      	add	ip, r3
 800630a:	4662      	mov	r2, ip
 800630c:	920f      	str	r2, [sp, #60]	; 0x3c
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	920c      	str	r2, [sp, #48]	; 0x30
 8006314:	930d      	str	r3, [sp, #52]	; 0x34
 8006316:	2300      	movs	r3, #0
 8006318:	e636      	b.n	8005f88 <_svfprintf_r+0x310>
 800631a:	4693      	mov	fp, r2
 800631c:	2900      	cmp	r1, #0
 800631e:	d001      	beq.n	8006324 <_svfprintf_r+0x6ac>
 8006320:	f000 ff7a 	bl	8007218 <_svfprintf_r+0x15a0>
 8006324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006326:	ca08      	ldmia	r2!, {r3}
 8006328:	920f      	str	r2, [sp, #60]	; 0x3c
 800632a:	06a2      	lsls	r2, r4, #26
 800632c:	d500      	bpl.n	8006330 <_svfprintf_r+0x6b8>
 800632e:	e329      	b.n	8006984 <_svfprintf_r+0xd0c>
 8006330:	06e2      	lsls	r2, r4, #27
 8006332:	d501      	bpl.n	8006338 <_svfprintf_r+0x6c0>
 8006334:	f000 fc5d 	bl	8006bf2 <_svfprintf_r+0xf7a>
 8006338:	0662      	lsls	r2, r4, #25
 800633a:	d401      	bmi.n	8006340 <_svfprintf_r+0x6c8>
 800633c:	f000 fc59 	bl	8006bf2 <_svfprintf_r+0xf7a>
 8006340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e4c6      	b.n	8005cd4 <_svfprintf_r+0x5c>
 8006346:	2320      	movs	r3, #32
 8006348:	431c      	orrs	r4, r3
 800634a:	7813      	ldrb	r3, [r2, #0]
 800634c:	e4f9      	b.n	8005d42 <_svfprintf_r+0xca>
 800634e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006350:	4693      	mov	fp, r2
 8006352:	680b      	ldr	r3, [r1, #0]
 8006354:	4a48      	ldr	r2, [pc, #288]	; (8006478 <_svfprintf_r+0x800>)
 8006356:	930c      	str	r3, [sp, #48]	; 0x30
 8006358:	2300      	movs	r3, #0
 800635a:	930d      	str	r3, [sp, #52]	; 0x34
 800635c:	3302      	adds	r3, #2
 800635e:	431c      	orrs	r4, r3
 8006360:	ab1e      	add	r3, sp, #120	; 0x78
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	2278      	movs	r2, #120	; 0x78
 8006366:	1d0b      	adds	r3, r1, #4
 8006368:	930f      	str	r3, [sp, #60]	; 0x3c
 800636a:	4b44      	ldr	r3, [pc, #272]	; (800647c <_svfprintf_r+0x804>)
 800636c:	9213      	str	r2, [sp, #76]	; 0x4c
 800636e:	9314      	str	r3, [sp, #80]	; 0x50
 8006370:	2302      	movs	r3, #2
 8006372:	e609      	b.n	8005f88 <_svfprintf_r+0x310>
 8006374:	7813      	ldrb	r3, [r2, #0]
 8006376:	2b6c      	cmp	r3, #108	; 0x6c
 8006378:	d100      	bne.n	800637c <_svfprintf_r+0x704>
 800637a:	e3db      	b.n	8006b34 <_svfprintf_r+0xebc>
 800637c:	2010      	movs	r0, #16
 800637e:	4304      	orrs	r4, r0
 8006380:	e4df      	b.n	8005d42 <_svfprintf_r+0xca>
 8006382:	464b      	mov	r3, r9
 8006384:	431c      	orrs	r4, r3
 8006386:	7813      	ldrb	r3, [r2, #0]
 8006388:	e4db      	b.n	8005d42 <_svfprintf_r+0xca>
 800638a:	9313      	str	r3, [sp, #76]	; 0x4c
 800638c:	2310      	movs	r3, #16
 800638e:	431c      	orrs	r4, r3
 8006390:	4693      	mov	fp, r2
 8006392:	06a3      	lsls	r3, r4, #26
 8006394:	d4b2      	bmi.n	80062fc <_svfprintf_r+0x684>
 8006396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006398:	ca08      	ldmia	r2!, {r3}
 800639a:	920f      	str	r2, [sp, #60]	; 0x3c
 800639c:	06e2      	lsls	r2, r4, #27
 800639e:	d402      	bmi.n	80063a6 <_svfprintf_r+0x72e>
 80063a0:	0662      	lsls	r2, r4, #25
 80063a2:	d500      	bpl.n	80063a6 <_svfprintf_r+0x72e>
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	930c      	str	r3, [sp, #48]	; 0x30
 80063a8:	2300      	movs	r3, #0
 80063aa:	930d      	str	r3, [sp, #52]	; 0x34
 80063ac:	e5ec      	b.n	8005f88 <_svfprintf_r+0x310>
 80063ae:	4663      	mov	r3, ip
 80063b0:	431c      	orrs	r4, r3
 80063b2:	7813      	ldrb	r3, [r2, #0]
 80063b4:	e4c5      	b.n	8005d42 <_svfprintf_r+0xca>
 80063b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80063b8:	4693      	mov	fp, r2
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d001      	beq.n	80063c2 <_svfprintf_r+0x74a>
 80063be:	f000 ff44 	bl	800724a <_svfprintf_r+0x15d2>
 80063c2:	2207      	movs	r2, #7
 80063c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c6:	3307      	adds	r3, #7
 80063c8:	4393      	bics	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	c90c      	ldmia	r1!, {r2, r3}
 80063ce:	9216      	str	r2, [sp, #88]	; 0x58
 80063d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	0015      	movs	r5, r2
 80063d8:	4698      	mov	r8, r3
 80063da:	2201      	movs	r2, #1
 80063dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80063de:	4252      	negs	r2, r2
 80063e0:	4b27      	ldr	r3, [pc, #156]	; (8006480 <_svfprintf_r+0x808>)
 80063e2:	0028      	movs	r0, r5
 80063e4:	4641      	mov	r1, r8
 80063e6:	f001 ff73 	bl	80082d0 <__aeabi_dcmpun>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d000      	beq.n	80063f0 <_svfprintf_r+0x778>
 80063ee:	e2cf      	b.n	8006990 <_svfprintf_r+0xd18>
 80063f0:	2201      	movs	r2, #1
 80063f2:	4b23      	ldr	r3, [pc, #140]	; (8006480 <_svfprintf_r+0x808>)
 80063f4:	4252      	negs	r2, r2
 80063f6:	0028      	movs	r0, r5
 80063f8:	4641      	mov	r1, r8
 80063fa:	f7fa fd73 	bl	8000ee4 <__aeabi_dcmple>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d000      	beq.n	8006404 <_svfprintf_r+0x78c>
 8006402:	e2c5      	b.n	8006990 <_svfprintf_r+0xd18>
 8006404:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006406:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006408:	2200      	movs	r2, #0
 800640a:	2300      	movs	r3, #0
 800640c:	f7fa fd60 	bl	8000ed0 <__aeabi_dcmplt>
 8006410:	2800      	cmp	r0, #0
 8006412:	d001      	beq.n	8006418 <_svfprintf_r+0x7a0>
 8006414:	f000 fd63 	bl	8006ede <_svfprintf_r+0x1266>
 8006418:	ab16      	add	r3, sp, #88	; 0x58
 800641a:	7fdb      	ldrb	r3, [r3, #31]
 800641c:	4698      	mov	r8, r3
 800641e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006420:	2b47      	cmp	r3, #71	; 0x47
 8006422:	dd01      	ble.n	8006428 <_svfprintf_r+0x7b0>
 8006424:	f000 fc93 	bl	8006d4e <_svfprintf_r+0x10d6>
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <_svfprintf_r+0x80c>)
 800642a:	9312      	str	r3, [sp, #72]	; 0x48
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	439c      	bics	r4, r3
 8006430:	3b7d      	subs	r3, #125	; 0x7d
 8006432:	9308      	str	r3, [sp, #32]
 8006434:	930e      	str	r3, [sp, #56]	; 0x38
 8006436:	2300      	movs	r3, #0
 8006438:	9409      	str	r4, [sp, #36]	; 0x24
 800643a:	469a      	mov	sl, r3
 800643c:	9315      	str	r3, [sp, #84]	; 0x54
 800643e:	e588      	b.n	8005f52 <_svfprintf_r+0x2da>
 8006440:	9313      	str	r3, [sp, #76]	; 0x4c
 8006442:	4693      	mov	fp, r2
 8006444:	2900      	cmp	r1, #0
 8006446:	d001      	beq.n	800644c <_svfprintf_r+0x7d4>
 8006448:	f000 ff04 	bl	8007254 <_svfprintf_r+0x15dc>
 800644c:	2310      	movs	r3, #16
 800644e:	431c      	orrs	r4, r3
 8006450:	06a3      	lsls	r3, r4, #26
 8006452:	d500      	bpl.n	8006456 <_svfprintf_r+0x7de>
 8006454:	e5fd      	b.n	8006052 <_svfprintf_r+0x3da>
 8006456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006458:	ca08      	ldmia	r2!, {r3}
 800645a:	920f      	str	r2, [sp, #60]	; 0x3c
 800645c:	06e2      	lsls	r2, r4, #27
 800645e:	d500      	bpl.n	8006462 <_svfprintf_r+0x7ea>
 8006460:	e27b      	b.n	800695a <_svfprintf_r+0xce2>
 8006462:	0662      	lsls	r2, r4, #25
 8006464:	d400      	bmi.n	8006468 <_svfprintf_r+0x7f0>
 8006466:	e278      	b.n	800695a <_svfprintf_r+0xce2>
 8006468:	b21b      	sxth	r3, r3
 800646a:	930c      	str	r3, [sp, #48]	; 0x30
 800646c:	17db      	asrs	r3, r3, #31
 800646e:	930d      	str	r3, [sp, #52]	; 0x34
 8006470:	e5fc      	b.n	800606c <_svfprintf_r+0x3f4>
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	08016e2c 	.word	0x08016e2c
 8006478:	00007830 	.word	0x00007830
 800647c:	08018b78 	.word	0x08018b78
 8006480:	7fefffff 	.word	0x7fefffff
 8006484:	08018b54 	.word	0x08018b54
 8006488:	9313      	str	r3, [sp, #76]	; 0x4c
 800648a:	4693      	mov	fp, r2
 800648c:	2900      	cmp	r1, #0
 800648e:	d001      	beq.n	8006494 <_svfprintf_r+0x81c>
 8006490:	f000 fec7 	bl	8007222 <_svfprintf_r+0x15aa>
 8006494:	4bc2      	ldr	r3, [pc, #776]	; (80067a0 <_svfprintf_r+0xb28>)
 8006496:	9314      	str	r3, [sp, #80]	; 0x50
 8006498:	06a3      	lsls	r3, r4, #26
 800649a:	d500      	bpl.n	800649e <_svfprintf_r+0x826>
 800649c:	e4fd      	b.n	8005e9a <_svfprintf_r+0x222>
 800649e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064a0:	ca08      	ldmia	r2!, {r3}
 80064a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80064a4:	06e2      	lsls	r2, r4, #27
 80064a6:	d500      	bpl.n	80064aa <_svfprintf_r+0x832>
 80064a8:	e252      	b.n	8006950 <_svfprintf_r+0xcd8>
 80064aa:	0662      	lsls	r2, r4, #25
 80064ac:	d400      	bmi.n	80064b0 <_svfprintf_r+0x838>
 80064ae:	e24f      	b.n	8006950 <_svfprintf_r+0xcd8>
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	930c      	str	r3, [sp, #48]	; 0x30
 80064b4:	2300      	movs	r3, #0
 80064b6:	930d      	str	r3, [sp, #52]	; 0x34
 80064b8:	e4fc      	b.n	8005eb4 <_svfprintf_r+0x23c>
 80064ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80064bc:	2310      	movs	r3, #16
 80064be:	431c      	orrs	r4, r3
 80064c0:	4693      	mov	fp, r2
 80064c2:	06a3      	lsls	r3, r4, #26
 80064c4:	d500      	bpl.n	80064c8 <_svfprintf_r+0x850>
 80064c6:	e551      	b.n	8005f6c <_svfprintf_r+0x2f4>
 80064c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064ca:	ca08      	ldmia	r2!, {r3}
 80064cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80064ce:	06e2      	lsls	r2, r4, #27
 80064d0:	d402      	bmi.n	80064d8 <_svfprintf_r+0x860>
 80064d2:	0662      	lsls	r2, r4, #25
 80064d4:	d500      	bpl.n	80064d8 <_svfprintf_r+0x860>
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	930c      	str	r3, [sp, #48]	; 0x30
 80064da:	2300      	movs	r3, #0
 80064dc:	930d      	str	r3, [sp, #52]	; 0x34
 80064de:	3301      	adds	r3, #1
 80064e0:	e552      	b.n	8005f88 <_svfprintf_r+0x310>
 80064e2:	46a0      	mov	r8, r4
 80064e4:	0014      	movs	r4, r2
 80064e6:	4642      	mov	r2, r8
 80064e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80064ea:	4444      	add	r4, r8
 80064ec:	3510      	adds	r5, #16
 80064ee:	3301      	adds	r3, #1
 80064f0:	6035      	str	r5, [r6, #0]
 80064f2:	6072      	str	r2, [r6, #4]
 80064f4:	60bc      	str	r4, [r7, #8]
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	2b07      	cmp	r3, #7
 80064fa:	dc00      	bgt.n	80064fe <_svfprintf_r+0x886>
 80064fc:	e6ab      	b.n	8006256 <_svfprintf_r+0x5de>
 80064fe:	003a      	movs	r2, r7
 8006500:	9906      	ldr	r1, [sp, #24]
 8006502:	9807      	ldr	r0, [sp, #28]
 8006504:	f001 f938 	bl	8007778 <__ssprint_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	d000      	beq.n	800650e <_svfprintf_r+0x896>
 800650c:	e433      	b.n	8005d76 <_svfprintf_r+0xfe>
 800650e:	68bc      	ldr	r4, [r7, #8]
 8006510:	ae32      	add	r6, sp, #200	; 0xc8
 8006512:	e6a1      	b.n	8006258 <_svfprintf_r+0x5e0>
 8006514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006516:	2b65      	cmp	r3, #101	; 0x65
 8006518:	dc00      	bgt.n	800651c <_svfprintf_r+0x8a4>
 800651a:	e0a7      	b.n	800666c <_svfprintf_r+0x9f4>
 800651c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800651e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	f7fa fcce 	bl	8000ec4 <__aeabi_dcmpeq>
 8006528:	2800      	cmp	r0, #0
 800652a:	d100      	bne.n	800652e <_svfprintf_r+0x8b6>
 800652c:	e13e      	b.n	80067ac <_svfprintf_r+0xb34>
 800652e:	4b9d      	ldr	r3, [pc, #628]	; (80067a4 <_svfprintf_r+0xb2c>)
 8006530:	3401      	adds	r4, #1
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	2301      	movs	r3, #1
 8006536:	6073      	str	r3, [r6, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60bc      	str	r4, [r7, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	2b07      	cmp	r3, #7
 8006542:	dd00      	ble.n	8006546 <_svfprintf_r+0x8ce>
 8006544:	e3cd      	b.n	8006ce2 <_svfprintf_r+0x106a>
 8006546:	3608      	adds	r6, #8
 8006548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800654a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800654c:	4293      	cmp	r3, r2
 800654e:	db04      	blt.n	800655a <_svfprintf_r+0x8e2>
 8006550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d401      	bmi.n	800655a <_svfprintf_r+0x8e2>
 8006556:	68bc      	ldr	r4, [r7, #8]
 8006558:	e67e      	b.n	8006258 <_svfprintf_r+0x5e0>
 800655a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006562:	469c      	mov	ip, r3
 8006564:	6073      	str	r3, [r6, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4462      	add	r2, ip
 800656a:	3301      	adds	r3, #1
 800656c:	0014      	movs	r4, r2
 800656e:	60ba      	str	r2, [r7, #8]
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	2b07      	cmp	r3, #7
 8006574:	dd00      	ble.n	8006578 <_svfprintf_r+0x900>
 8006576:	e2e3      	b.n	8006b40 <_svfprintf_r+0xec8>
 8006578:	3608      	adds	r6, #8
 800657a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800657c:	3b01      	subs	r3, #1
 800657e:	4698      	mov	r8, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc00      	bgt.n	8006586 <_svfprintf_r+0x90e>
 8006584:	e668      	b.n	8006258 <_svfprintf_r+0x5e0>
 8006586:	4642      	mov	r2, r8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2a10      	cmp	r2, #16
 800658c:	dc01      	bgt.n	8006592 <_svfprintf_r+0x91a>
 800658e:	f000 fdc0 	bl	8007112 <_svfprintf_r+0x149a>
 8006592:	4a85      	ldr	r2, [pc, #532]	; (80067a8 <_svfprintf_r+0xb30>)
 8006594:	2110      	movs	r1, #16
 8006596:	4694      	mov	ip, r2
 8006598:	9210      	str	r2, [sp, #64]	; 0x40
 800659a:	2210      	movs	r2, #16
 800659c:	4461      	add	r1, ip
 800659e:	4691      	mov	r9, r2
 80065a0:	468a      	mov	sl, r1
 80065a2:	0022      	movs	r2, r4
 80065a4:	9d07      	ldr	r5, [sp, #28]
 80065a6:	4644      	mov	r4, r8
 80065a8:	e003      	b.n	80065b2 <_svfprintf_r+0x93a>
 80065aa:	3608      	adds	r6, #8
 80065ac:	3c10      	subs	r4, #16
 80065ae:	2c10      	cmp	r4, #16
 80065b0:	dd97      	ble.n	80064e2 <_svfprintf_r+0x86a>
 80065b2:	4651      	mov	r1, sl
 80065b4:	6031      	str	r1, [r6, #0]
 80065b6:	4649      	mov	r1, r9
 80065b8:	3210      	adds	r2, #16
 80065ba:	3301      	adds	r3, #1
 80065bc:	6071      	str	r1, [r6, #4]
 80065be:	60ba      	str	r2, [r7, #8]
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	2b07      	cmp	r3, #7
 80065c4:	ddf1      	ble.n	80065aa <_svfprintf_r+0x932>
 80065c6:	003a      	movs	r2, r7
 80065c8:	9906      	ldr	r1, [sp, #24]
 80065ca:	0028      	movs	r0, r5
 80065cc:	f001 f8d4 	bl	8007778 <__ssprint_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d001      	beq.n	80065d8 <_svfprintf_r+0x960>
 80065d4:	f7ff fbcf 	bl	8005d76 <_svfprintf_r+0xfe>
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	ae32      	add	r6, sp, #200	; 0xc8
 80065de:	e7e5      	b.n	80065ac <_svfprintf_r+0x934>
 80065e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e2:	9a08      	ldr	r2, [sp, #32]
 80065e4:	1a9d      	subs	r5, r3, r2
 80065e6:	2d00      	cmp	r5, #0
 80065e8:	dc00      	bgt.n	80065ec <_svfprintf_r+0x974>
 80065ea:	e5ea      	b.n	80061c2 <_svfprintf_r+0x54a>
 80065ec:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <_svfprintf_r+0xb30>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	9210      	str	r2, [sp, #64]	; 0x40
 80065f2:	2d10      	cmp	r5, #16
 80065f4:	dd23      	ble.n	800663e <_svfprintf_r+0x9c6>
 80065f6:	4694      	mov	ip, r2
 80065f8:	2110      	movs	r1, #16
 80065fa:	2210      	movs	r2, #16
 80065fc:	4461      	add	r1, ip
 80065fe:	4688      	mov	r8, r1
 8006600:	4691      	mov	r9, r2
 8006602:	e003      	b.n	800660c <_svfprintf_r+0x994>
 8006604:	3d10      	subs	r5, #16
 8006606:	3608      	adds	r6, #8
 8006608:	2d10      	cmp	r5, #16
 800660a:	dd18      	ble.n	800663e <_svfprintf_r+0x9c6>
 800660c:	4642      	mov	r2, r8
 800660e:	6032      	str	r2, [r6, #0]
 8006610:	464a      	mov	r2, r9
 8006612:	3410      	adds	r4, #16
 8006614:	3301      	adds	r3, #1
 8006616:	6072      	str	r2, [r6, #4]
 8006618:	60bc      	str	r4, [r7, #8]
 800661a:	607b      	str	r3, [r7, #4]
 800661c:	2b07      	cmp	r3, #7
 800661e:	ddf1      	ble.n	8006604 <_svfprintf_r+0x98c>
 8006620:	003a      	movs	r2, r7
 8006622:	9906      	ldr	r1, [sp, #24]
 8006624:	9807      	ldr	r0, [sp, #28]
 8006626:	f001 f8a7 	bl	8007778 <__ssprint_r>
 800662a:	2800      	cmp	r0, #0
 800662c:	d001      	beq.n	8006632 <_svfprintf_r+0x9ba>
 800662e:	f7ff fba2 	bl	8005d76 <_svfprintf_r+0xfe>
 8006632:	3d10      	subs	r5, #16
 8006634:	68bc      	ldr	r4, [r7, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	ae32      	add	r6, sp, #200	; 0xc8
 800663a:	2d10      	cmp	r5, #16
 800663c:	dce6      	bgt.n	800660c <_svfprintf_r+0x994>
 800663e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006640:	1964      	adds	r4, r4, r5
 8006642:	3210      	adds	r2, #16
 8006644:	3301      	adds	r3, #1
 8006646:	6032      	str	r2, [r6, #0]
 8006648:	6075      	str	r5, [r6, #4]
 800664a:	60bc      	str	r4, [r7, #8]
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	2b07      	cmp	r3, #7
 8006650:	dd00      	ble.n	8006654 <_svfprintf_r+0x9dc>
 8006652:	e305      	b.n	8006c60 <_svfprintf_r+0xfe8>
 8006654:	3608      	adds	r6, #8
 8006656:	e5b4      	b.n	80061c2 <_svfprintf_r+0x54a>
 8006658:	003a      	movs	r2, r7
 800665a:	9906      	ldr	r1, [sp, #24]
 800665c:	9807      	ldr	r0, [sp, #28]
 800665e:	f001 f88b 	bl	8007778 <__ssprint_r>
 8006662:	2800      	cmp	r0, #0
 8006664:	d100      	bne.n	8006668 <_svfprintf_r+0x9f0>
 8006666:	e641      	b.n	80062ec <_svfprintf_r+0x674>
 8006668:	f7ff fb85 	bl	8005d76 <_svfprintf_r+0xfe>
 800666c:	2108      	movs	r1, #8
 800666e:	4689      	mov	r9, r1
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006674:	3401      	adds	r4, #1
 8006676:	1c53      	adds	r3, r2, #1
 8006678:	44b1      	add	r9, r6
 800667a:	2901      	cmp	r1, #1
 800667c:	dc00      	bgt.n	8006680 <_svfprintf_r+0xa08>
 800667e:	e13f      	b.n	8006900 <_svfprintf_r+0xc88>
 8006680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006682:	60bc      	str	r4, [r7, #8]
 8006684:	6032      	str	r2, [r6, #0]
 8006686:	2201      	movs	r2, #1
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	6072      	str	r2, [r6, #4]
 800668c:	2b07      	cmp	r3, #7
 800668e:	dd00      	ble.n	8006692 <_svfprintf_r+0xa1a>
 8006690:	e2c3      	b.n	8006c1a <_svfprintf_r+0xfa2>
 8006692:	464a      	mov	r2, r9
 8006694:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006696:	3301      	adds	r3, #1
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800669c:	4649      	mov	r1, r9
 800669e:	4694      	mov	ip, r2
 80066a0:	4464      	add	r4, ip
 80066a2:	604a      	str	r2, [r1, #4]
 80066a4:	60bc      	str	r4, [r7, #8]
 80066a6:	4698      	mov	r8, r3
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	2b07      	cmp	r3, #7
 80066ac:	dd00      	ble.n	80066b0 <_svfprintf_r+0xa38>
 80066ae:	e2c2      	b.n	8006c36 <_svfprintf_r+0xfbe>
 80066b0:	2308      	movs	r3, #8
 80066b2:	469c      	mov	ip, r3
 80066b4:	44e1      	add	r9, ip
 80066b6:	4643      	mov	r3, r8
 80066b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80066ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80066bc:	464e      	mov	r6, r9
 80066be:	1c5d      	adds	r5, r3, #1
 80066c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80066c2:	2200      	movs	r2, #0
 80066c4:	3b01      	subs	r3, #1
 80066c6:	469a      	mov	sl, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	950e      	str	r5, [sp, #56]	; 0x38
 80066cc:	3608      	adds	r6, #8
 80066ce:	f7fa fbf9 	bl	8000ec4 <__aeabi_dcmpeq>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d000      	beq.n	80066d8 <_svfprintf_r+0xa60>
 80066d6:	e0e8      	b.n	80068aa <_svfprintf_r+0xc32>
 80066d8:	464a      	mov	r2, r9
 80066da:	4651      	mov	r1, sl
 80066dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066de:	4454      	add	r4, sl
 80066e0:	3301      	adds	r3, #1
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e6:	6051      	str	r1, [r2, #4]
 80066e8:	60bc      	str	r4, [r7, #8]
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	dd00      	ble.n	80066f2 <_svfprintf_r+0xa7a>
 80066f0:	e20f      	b.n	8006b12 <_svfprintf_r+0xe9a>
 80066f2:	4643      	mov	r3, r8
 80066f4:	3302      	adds	r3, #2
 80066f6:	930e      	str	r3, [sp, #56]	; 0x38
 80066f8:	464b      	mov	r3, r9
 80066fa:	3310      	adds	r3, #16
 80066fc:	46b1      	mov	r9, r6
 80066fe:	001e      	movs	r6, r3
 8006700:	464a      	mov	r2, r9
 8006702:	ab21      	add	r3, sp, #132	; 0x84
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006708:	469c      	mov	ip, r3
 800670a:	6053      	str	r3, [r2, #4]
 800670c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670e:	4464      	add	r4, ip
 8006710:	60bc      	str	r4, [r7, #8]
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	2b07      	cmp	r3, #7
 8006716:	dc00      	bgt.n	800671a <_svfprintf_r+0xaa2>
 8006718:	e59e      	b.n	8006258 <_svfprintf_r+0x5e0>
 800671a:	e6f0      	b.n	80064fe <_svfprintf_r+0x886>
 800671c:	003a      	movs	r2, r7
 800671e:	9906      	ldr	r1, [sp, #24]
 8006720:	9807      	ldr	r0, [sp, #28]
 8006722:	f001 f829 	bl	8007778 <__ssprint_r>
 8006726:	2800      	cmp	r0, #0
 8006728:	d001      	beq.n	800672e <_svfprintf_r+0xab6>
 800672a:	f7ff fb24 	bl	8005d76 <_svfprintf_r+0xfe>
 800672e:	68bc      	ldr	r4, [r7, #8]
 8006730:	ae32      	add	r6, sp, #200	; 0xc8
 8006732:	e532      	b.n	800619a <_svfprintf_r+0x522>
 8006734:	003a      	movs	r2, r7
 8006736:	9906      	ldr	r1, [sp, #24]
 8006738:	9807      	ldr	r0, [sp, #28]
 800673a:	f001 f81d 	bl	8007778 <__ssprint_r>
 800673e:	2800      	cmp	r0, #0
 8006740:	d001      	beq.n	8006746 <_svfprintf_r+0xace>
 8006742:	f7ff fb18 	bl	8005d76 <_svfprintf_r+0xfe>
 8006746:	68bc      	ldr	r4, [r7, #8]
 8006748:	ae32      	add	r6, sp, #200	; 0xc8
 800674a:	e536      	b.n	80061ba <_svfprintf_r+0x542>
 800674c:	200f      	movs	r0, #15
 800674e:	46b4      	mov	ip, r6
 8006750:	ab32      	add	r3, sp, #200	; 0xc8
 8006752:	0019      	movs	r1, r3
 8006754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006758:	0004      	movs	r4, r0
 800675a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800675c:	4014      	ands	r4, r2
 800675e:	5d2c      	ldrb	r4, [r5, r4]
 8006760:	0916      	lsrs	r6, r2, #4
 8006762:	071d      	lsls	r5, r3, #28
 8006764:	3901      	subs	r1, #1
 8006766:	4335      	orrs	r5, r6
 8006768:	700c      	strb	r4, [r1, #0]
 800676a:	091c      	lsrs	r4, r3, #4
 800676c:	0023      	movs	r3, r4
 800676e:	002c      	movs	r4, r5
 8006770:	002a      	movs	r2, r5
 8006772:	431c      	orrs	r4, r3
 8006774:	d1f0      	bne.n	8006758 <_svfprintf_r+0xae0>
 8006776:	920c      	str	r2, [sp, #48]	; 0x30
 8006778:	930d      	str	r3, [sp, #52]	; 0x34
 800677a:	ab32      	add	r3, sp, #200	; 0xc8
 800677c:	1a5b      	subs	r3, r3, r1
 800677e:	9112      	str	r1, [sp, #72]	; 0x48
 8006780:	4666      	mov	r6, ip
 8006782:	930e      	str	r3, [sp, #56]	; 0x38
 8006784:	f7ff fbdd 	bl	8005f42 <_svfprintf_r+0x2ca>
 8006788:	003a      	movs	r2, r7
 800678a:	9906      	ldr	r1, [sp, #24]
 800678c:	9807      	ldr	r0, [sp, #28]
 800678e:	f000 fff3 	bl	8007778 <__ssprint_r>
 8006792:	2800      	cmp	r0, #0
 8006794:	d001      	beq.n	800679a <_svfprintf_r+0xb22>
 8006796:	f7ff faee 	bl	8005d76 <_svfprintf_r+0xfe>
 800679a:	68bc      	ldr	r4, [r7, #8]
 800679c:	ae32      	add	r6, sp, #200	; 0xc8
 800679e:	e549      	b.n	8006234 <_svfprintf_r+0x5bc>
 80067a0:	08018b64 	.word	0x08018b64
 80067a4:	08018b50 	.word	0x08018b50
 80067a8:	08016e2c 	.word	0x08016e2c
 80067ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80067ae:	2900      	cmp	r1, #0
 80067b0:	dc00      	bgt.n	80067b4 <_svfprintf_r+0xb3c>
 80067b2:	e262      	b.n	8006c7a <_svfprintf_r+0x1002>
 80067b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067b6:	001d      	movs	r5, r3
 80067b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80067ba:	429d      	cmp	r5, r3
 80067bc:	dd00      	ble.n	80067c0 <_svfprintf_r+0xb48>
 80067be:	e168      	b.n	8006a92 <_svfprintf_r+0xe1a>
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	dd0b      	ble.n	80067dc <_svfprintf_r+0xb64>
 80067c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067c6:	1964      	adds	r4, r4, r5
 80067c8:	6033      	str	r3, [r6, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6075      	str	r5, [r6, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60bc      	str	r4, [r7, #8]
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	dd00      	ble.n	80067da <_svfprintf_r+0xb62>
 80067d8:	e368      	b.n	8006eac <_svfprintf_r+0x1234>
 80067da:	3608      	adds	r6, #8
 80067dc:	43eb      	mvns	r3, r5
 80067de:	17db      	asrs	r3, r3, #31
 80067e0:	401d      	ands	r5, r3
 80067e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067e4:	1b5b      	subs	r3, r3, r5
 80067e6:	4698      	mov	r8, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dd00      	ble.n	80067ee <_svfprintf_r+0xb76>
 80067ec:	e155      	b.n	8006a9a <_svfprintf_r+0xe22>
 80067ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80067f2:	4293      	cmp	r3, r2
 80067f4:	da00      	bge.n	80067f8 <_svfprintf_r+0xb80>
 80067f6:	e1c6      	b.n	8006b86 <_svfprintf_r+0xf0e>
 80067f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067fa:	07d2      	lsls	r2, r2, #31
 80067fc:	d500      	bpl.n	8006800 <_svfprintf_r+0xb88>
 80067fe:	e1c2      	b.n	8006b86 <_svfprintf_r+0xf0e>
 8006800:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006802:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006804:	1acb      	subs	r3, r1, r3
 8006806:	1a8a      	subs	r2, r1, r2
 8006808:	001d      	movs	r5, r3
 800680a:	4293      	cmp	r3, r2
 800680c:	dd00      	ble.n	8006810 <_svfprintf_r+0xb98>
 800680e:	0015      	movs	r5, r2
 8006810:	2d00      	cmp	r5, #0
 8006812:	dd0e      	ble.n	8006832 <_svfprintf_r+0xbba>
 8006814:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006818:	468c      	mov	ip, r1
 800681a:	4462      	add	r2, ip
 800681c:	6032      	str	r2, [r6, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	1964      	adds	r4, r4, r5
 8006822:	3201      	adds	r2, #1
 8006824:	6075      	str	r5, [r6, #4]
 8006826:	60bc      	str	r4, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	2a07      	cmp	r2, #7
 800682c:	dd00      	ble.n	8006830 <_svfprintf_r+0xbb8>
 800682e:	e378      	b.n	8006f22 <_svfprintf_r+0x12aa>
 8006830:	3608      	adds	r6, #8
 8006832:	43ea      	mvns	r2, r5
 8006834:	17d2      	asrs	r2, r2, #31
 8006836:	4015      	ands	r5, r2
 8006838:	1b5b      	subs	r3, r3, r5
 800683a:	4698      	mov	r8, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc00      	bgt.n	8006842 <_svfprintf_r+0xbca>
 8006840:	e50a      	b.n	8006258 <_svfprintf_r+0x5e0>
 8006842:	4642      	mov	r2, r8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2a10      	cmp	r2, #16
 8006848:	dc01      	bgt.n	800684e <_svfprintf_r+0xbd6>
 800684a:	f000 fc62 	bl	8007112 <_svfprintf_r+0x149a>
 800684e:	4ad5      	ldr	r2, [pc, #852]	; (8006ba4 <_svfprintf_r+0xf2c>)
 8006850:	2110      	movs	r1, #16
 8006852:	4694      	mov	ip, r2
 8006854:	9210      	str	r2, [sp, #64]	; 0x40
 8006856:	2210      	movs	r2, #16
 8006858:	4461      	add	r1, ip
 800685a:	4691      	mov	r9, r2
 800685c:	468a      	mov	sl, r1
 800685e:	0022      	movs	r2, r4
 8006860:	9d07      	ldr	r5, [sp, #28]
 8006862:	4644      	mov	r4, r8
 8006864:	e004      	b.n	8006870 <_svfprintf_r+0xbf8>
 8006866:	3608      	adds	r6, #8
 8006868:	3c10      	subs	r4, #16
 800686a:	2c10      	cmp	r4, #16
 800686c:	dc00      	bgt.n	8006870 <_svfprintf_r+0xbf8>
 800686e:	e638      	b.n	80064e2 <_svfprintf_r+0x86a>
 8006870:	4651      	mov	r1, sl
 8006872:	6031      	str	r1, [r6, #0]
 8006874:	4649      	mov	r1, r9
 8006876:	3210      	adds	r2, #16
 8006878:	3301      	adds	r3, #1
 800687a:	6071      	str	r1, [r6, #4]
 800687c:	60ba      	str	r2, [r7, #8]
 800687e:	607b      	str	r3, [r7, #4]
 8006880:	2b07      	cmp	r3, #7
 8006882:	ddf0      	ble.n	8006866 <_svfprintf_r+0xbee>
 8006884:	003a      	movs	r2, r7
 8006886:	9906      	ldr	r1, [sp, #24]
 8006888:	0028      	movs	r0, r5
 800688a:	f000 ff75 	bl	8007778 <__ssprint_r>
 800688e:	2800      	cmp	r0, #0
 8006890:	d001      	beq.n	8006896 <_svfprintf_r+0xc1e>
 8006892:	f7ff fa70 	bl	8005d76 <_svfprintf_r+0xfe>
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	ae32      	add	r6, sp, #200	; 0xc8
 800689c:	e7e4      	b.n	8006868 <_svfprintf_r+0xbf0>
 800689e:	2300      	movs	r3, #0
 80068a0:	930e      	str	r3, [sp, #56]	; 0x38
 80068a2:	ab32      	add	r3, sp, #200	; 0xc8
 80068a4:	9312      	str	r3, [sp, #72]	; 0x48
 80068a6:	f7ff fb4c 	bl	8005f42 <_svfprintf_r+0x2ca>
 80068aa:	4653      	mov	r3, sl
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dc00      	bgt.n	80068b2 <_svfprintf_r+0xc3a>
 80068b0:	e726      	b.n	8006700 <_svfprintf_r+0xa88>
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	dc01      	bgt.n	80068ba <_svfprintf_r+0xc42>
 80068b6:	f000 fc66 	bl	8007186 <_svfprintf_r+0x150e>
 80068ba:	4bba      	ldr	r3, [pc, #744]	; (8006ba4 <_svfprintf_r+0xf2c>)
 80068bc:	0022      	movs	r2, r4
 80068be:	001e      	movs	r6, r3
 80068c0:	9310      	str	r3, [sp, #64]	; 0x40
 80068c2:	3610      	adds	r6, #16
 80068c4:	464b      	mov	r3, r9
 80068c6:	4654      	mov	r4, sl
 80068c8:	e005      	b.n	80068d6 <_svfprintf_r+0xc5e>
 80068ca:	3308      	adds	r3, #8
 80068cc:	3c10      	subs	r4, #16
 80068ce:	2c10      	cmp	r4, #16
 80068d0:	dc00      	bgt.n	80068d4 <_svfprintf_r+0xc5c>
 80068d2:	e211      	b.n	8006cf8 <_svfprintf_r+0x1080>
 80068d4:	3501      	adds	r5, #1
 80068d6:	2110      	movs	r1, #16
 80068d8:	3210      	adds	r2, #16
 80068da:	601e      	str	r6, [r3, #0]
 80068dc:	6059      	str	r1, [r3, #4]
 80068de:	60ba      	str	r2, [r7, #8]
 80068e0:	607d      	str	r5, [r7, #4]
 80068e2:	2d07      	cmp	r5, #7
 80068e4:	ddf1      	ble.n	80068ca <_svfprintf_r+0xc52>
 80068e6:	003a      	movs	r2, r7
 80068e8:	9906      	ldr	r1, [sp, #24]
 80068ea:	9807      	ldr	r0, [sp, #28]
 80068ec:	f000 ff44 	bl	8007778 <__ssprint_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d001      	beq.n	80068f8 <_svfprintf_r+0xc80>
 80068f4:	f7ff fa3f 	bl	8005d76 <_svfprintf_r+0xfe>
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	687d      	ldr	r5, [r7, #4]
 80068fc:	ab32      	add	r3, sp, #200	; 0xc8
 80068fe:	e7e5      	b.n	80068cc <_svfprintf_r+0xc54>
 8006900:	2101      	movs	r1, #1
 8006902:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006904:	4201      	tst	r1, r0
 8006906:	d000      	beq.n	800690a <_svfprintf_r+0xc92>
 8006908:	e6ba      	b.n	8006680 <_svfprintf_r+0xa08>
 800690a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800690c:	6071      	str	r1, [r6, #4]
 800690e:	6030      	str	r0, [r6, #0]
 8006910:	60bc      	str	r4, [r7, #8]
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	2b07      	cmp	r3, #7
 8006916:	dd00      	ble.n	800691a <_svfprintf_r+0xca2>
 8006918:	e0fb      	b.n	8006b12 <_svfprintf_r+0xe9a>
 800691a:	1c93      	adds	r3, r2, #2
 800691c:	930e      	str	r3, [sp, #56]	; 0x38
 800691e:	3610      	adds	r6, #16
 8006920:	e6ee      	b.n	8006700 <_svfprintf_r+0xa88>
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d100      	bne.n	8006928 <_svfprintf_r+0xcb0>
 8006926:	e128      	b.n	8006b7a <_svfprintf_r+0xf02>
 8006928:	2330      	movs	r3, #48	; 0x30
 800692a:	3a02      	subs	r2, #2
 800692c:	7013      	strb	r3, [r2, #0]
 800692e:	ab32      	add	r3, sp, #200	; 0xc8
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	930e      	str	r3, [sp, #56]	; 0x38
 8006934:	9212      	str	r2, [sp, #72]	; 0x48
 8006936:	f7ff fb04 	bl	8005f42 <_svfprintf_r+0x2ca>
 800693a:	003a      	movs	r2, r7
 800693c:	9906      	ldr	r1, [sp, #24]
 800693e:	9807      	ldr	r0, [sp, #28]
 8006940:	f000 ff1a 	bl	8007778 <__ssprint_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	d001      	beq.n	800694c <_svfprintf_r+0xcd4>
 8006948:	f7ff fa15 	bl	8005d76 <_svfprintf_r+0xfe>
 800694c:	68bc      	ldr	r4, [r7, #8]
 800694e:	e4c0      	b.n	80062d2 <_svfprintf_r+0x65a>
 8006950:	930c      	str	r3, [sp, #48]	; 0x30
 8006952:	2300      	movs	r3, #0
 8006954:	930d      	str	r3, [sp, #52]	; 0x34
 8006956:	f7ff faad 	bl	8005eb4 <_svfprintf_r+0x23c>
 800695a:	930c      	str	r3, [sp, #48]	; 0x30
 800695c:	17db      	asrs	r3, r3, #31
 800695e:	930d      	str	r3, [sp, #52]	; 0x34
 8006960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006962:	2b00      	cmp	r3, #0
 8006964:	db01      	blt.n	800696a <_svfprintf_r+0xcf2>
 8006966:	f7ff fb86 	bl	8006076 <_svfprintf_r+0x3fe>
 800696a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800696c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800696e:	2300      	movs	r3, #0
 8006970:	4242      	negs	r2, r0
 8006972:	418b      	sbcs	r3, r1
 8006974:	920c      	str	r2, [sp, #48]	; 0x30
 8006976:	930d      	str	r3, [sp, #52]	; 0x34
 8006978:	232d      	movs	r3, #45	; 0x2d
 800697a:	aa16      	add	r2, sp, #88	; 0x58
 800697c:	77d3      	strb	r3, [r2, #31]
 800697e:	4698      	mov	r8, r3
 8006980:	f7ff fb7c 	bl	800607c <_svfprintf_r+0x404>
 8006984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	17d2      	asrs	r2, r2, #31
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	f7ff f9a2 	bl	8005cd4 <_svfprintf_r+0x5c>
 8006990:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006992:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006994:	0002      	movs	r2, r0
 8006996:	000b      	movs	r3, r1
 8006998:	f001 fc9a 	bl	80082d0 <__aeabi_dcmpun>
 800699c:	2800      	cmp	r0, #0
 800699e:	d000      	beq.n	80069a2 <_svfprintf_r+0xd2a>
 80069a0:	e3c5      	b.n	800712e <_svfprintf_r+0x14b6>
 80069a2:	2320      	movs	r3, #32
 80069a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069a6:	439a      	bics	r2, r3
 80069a8:	4653      	mov	r3, sl
 80069aa:	4691      	mov	r9, r2
 80069ac:	3301      	adds	r3, #1
 80069ae:	d100      	bne.n	80069b2 <_svfprintf_r+0xd3a>
 80069b0:	e2e0      	b.n	8006f74 <_svfprintf_r+0x12fc>
 80069b2:	2a47      	cmp	r2, #71	; 0x47
 80069b4:	d100      	bne.n	80069b8 <_svfprintf_r+0xd40>
 80069b6:	e1e1      	b.n	8006d7c <_svfprintf_r+0x1104>
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4323      	orrs	r3, r4
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	da00      	bge.n	80069c8 <_svfprintf_r+0xd50>
 80069c6:	e294      	b.n	8006ef2 <_svfprintf_r+0x127a>
 80069c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069ca:	9508      	str	r5, [sp, #32]
 80069cc:	4698      	mov	r8, r3
 80069ce:	2300      	movs	r3, #0
 80069d0:	9310      	str	r3, [sp, #64]	; 0x40
 80069d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d4:	2b66      	cmp	r3, #102	; 0x66
 80069d6:	d100      	bne.n	80069da <_svfprintf_r+0xd62>
 80069d8:	e2b2      	b.n	8006f40 <_svfprintf_r+0x12c8>
 80069da:	2b46      	cmp	r3, #70	; 0x46
 80069dc:	d100      	bne.n	80069e0 <_svfprintf_r+0xd68>
 80069de:	e302      	b.n	8006fe6 <_svfprintf_r+0x136e>
 80069e0:	464b      	mov	r3, r9
 80069e2:	2b45      	cmp	r3, #69	; 0x45
 80069e4:	d100      	bne.n	80069e8 <_svfprintf_r+0xd70>
 80069e6:	e1d0      	b.n	8006d8a <_svfprintf_r+0x1112>
 80069e8:	ab23      	add	r3, sp, #140	; 0x8c
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	ab20      	add	r3, sp, #128	; 0x80
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	ab1f      	add	r3, sp, #124	; 0x7c
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	4653      	mov	r3, sl
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2302      	movs	r3, #2
 80069fa:	4642      	mov	r2, r8
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	9807      	ldr	r0, [sp, #28]
 8006a00:	9b08      	ldr	r3, [sp, #32]
 8006a02:	f7fd f9ef 	bl	8003de4 <_dtoa_r>
 8006a06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a08:	9012      	str	r0, [sp, #72]	; 0x48
 8006a0a:	2b67      	cmp	r3, #103	; 0x67
 8006a0c:	d001      	beq.n	8006a12 <_svfprintf_r+0xd9a>
 8006a0e:	f000 fc12 	bl	8007236 <_svfprintf_r+0x15be>
 8006a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a14:	001a      	movs	r2, r3
 8006a16:	4452      	add	r2, sl
 8006a18:	0015      	movs	r5, r2
 8006a1a:	07e2      	lsls	r2, r4, #31
 8006a1c:	d400      	bmi.n	8006a20 <_svfprintf_r+0xda8>
 8006a1e:	e1eb      	b.n	8006df8 <_svfprintf_r+0x1180>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2200      	movs	r2, #0
 8006a24:	4640      	mov	r0, r8
 8006a26:	9908      	ldr	r1, [sp, #32]
 8006a28:	f7fa fa4c 	bl	8000ec4 <__aeabi_dcmpeq>
 8006a2c:	002b      	movs	r3, r5
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d109      	bne.n	8006a46 <_svfprintf_r+0xdce>
 8006a32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a34:	2130      	movs	r1, #48	; 0x30
 8006a36:	42ab      	cmp	r3, r5
 8006a38:	d205      	bcs.n	8006a46 <_svfprintf_r+0xdce>
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	9223      	str	r2, [sp, #140]	; 0x8c
 8006a3e:	7019      	strb	r1, [r3, #0]
 8006a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a42:	429d      	cmp	r5, r3
 8006a44:	d8f9      	bhi.n	8006a3a <_svfprintf_r+0xdc2>
 8006a46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	9318      	str	r3, [sp, #96]	; 0x60
 8006a4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a4e:	9315      	str	r3, [sp, #84]	; 0x54
 8006a50:	464b      	mov	r3, r9
 8006a52:	2b47      	cmp	r3, #71	; 0x47
 8006a54:	d100      	bne.n	8006a58 <_svfprintf_r+0xde0>
 8006a56:	e1d7      	b.n	8006e08 <_svfprintf_r+0x1190>
 8006a58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a5a:	2b66      	cmp	r3, #102	; 0x66
 8006a5c:	d000      	beq.n	8006a60 <_svfprintf_r+0xde8>
 8006a5e:	e1db      	b.n	8006e18 <_svfprintf_r+0x11a0>
 8006a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc00      	bgt.n	8006a68 <_svfprintf_r+0xdf0>
 8006a66:	e392      	b.n	800718e <_svfprintf_r+0x1516>
 8006a68:	4653      	mov	r3, sl
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d000      	beq.n	8006a70 <_svfprintf_r+0xdf8>
 8006a6e:	e36b      	b.n	8007148 <_svfprintf_r+0x14d0>
 8006a70:	07e3      	lsls	r3, r4, #31
 8006a72:	d500      	bpl.n	8006a76 <_svfprintf_r+0xdfe>
 8006a74:	e368      	b.n	8007148 <_svfprintf_r+0x14d0>
 8006a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d000      	beq.n	8006a84 <_svfprintf_r+0xe0c>
 8006a82:	e1f7      	b.n	8006e74 <_svfprintf_r+0x11fc>
 8006a84:	ab16      	add	r3, sp, #88	; 0x58
 8006a86:	7fdb      	ldrb	r3, [r3, #31]
 8006a88:	4698      	mov	r8, r3
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	469a      	mov	sl, r3
 8006a8e:	f7ff fa60 	bl	8005f52 <_svfprintf_r+0x2da>
 8006a92:	1e1d      	subs	r5, r3, #0
 8006a94:	dd00      	ble.n	8006a98 <_svfprintf_r+0xe20>
 8006a96:	e695      	b.n	80067c4 <_svfprintf_r+0xb4c>
 8006a98:	e6a0      	b.n	80067dc <_svfprintf_r+0xb64>
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2a10      	cmp	r2, #16
 8006aa0:	dc00      	bgt.n	8006aa4 <_svfprintf_r+0xe2c>
 8006aa2:	e37d      	b.n	80071a0 <_svfprintf_r+0x1528>
 8006aa4:	4a3f      	ldr	r2, [pc, #252]	; (8006ba4 <_svfprintf_r+0xf2c>)
 8006aa6:	2110      	movs	r1, #16
 8006aa8:	4694      	mov	ip, r2
 8006aaa:	9210      	str	r2, [sp, #64]	; 0x40
 8006aac:	2210      	movs	r2, #16
 8006aae:	4461      	add	r1, ip
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	468a      	mov	sl, r1
 8006ab4:	0022      	movs	r2, r4
 8006ab6:	9d07      	ldr	r5, [sp, #28]
 8006ab8:	4644      	mov	r4, r8
 8006aba:	e004      	b.n	8006ac6 <_svfprintf_r+0xe4e>
 8006abc:	3608      	adds	r6, #8
 8006abe:	3c10      	subs	r4, #16
 8006ac0:	2c10      	cmp	r4, #16
 8006ac2:	dc00      	bgt.n	8006ac6 <_svfprintf_r+0xe4e>
 8006ac4:	e133      	b.n	8006d2e <_svfprintf_r+0x10b6>
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	6031      	str	r1, [r6, #0]
 8006aca:	4649      	mov	r1, r9
 8006acc:	3210      	adds	r2, #16
 8006ace:	3301      	adds	r3, #1
 8006ad0:	6071      	str	r1, [r6, #4]
 8006ad2:	60ba      	str	r2, [r7, #8]
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	2b07      	cmp	r3, #7
 8006ad8:	ddf0      	ble.n	8006abc <_svfprintf_r+0xe44>
 8006ada:	003a      	movs	r2, r7
 8006adc:	9906      	ldr	r1, [sp, #24]
 8006ade:	0028      	movs	r0, r5
 8006ae0:	f000 fe4a 	bl	8007778 <__ssprint_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d001      	beq.n	8006aec <_svfprintf_r+0xe74>
 8006ae8:	f7ff f945 	bl	8005d76 <_svfprintf_r+0xfe>
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	ae32      	add	r6, sp, #200	; 0xc8
 8006af2:	e7e4      	b.n	8006abe <_svfprintf_r+0xe46>
 8006af4:	2140      	movs	r1, #64	; 0x40
 8006af6:	9807      	ldr	r0, [sp, #28]
 8006af8:	f7fc fc80 	bl	80033fc <_malloc_r>
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	6018      	str	r0, [r3, #0]
 8006b00:	6118      	str	r0, [r3, #16]
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d100      	bne.n	8006b08 <_svfprintf_r+0xe90>
 8006b06:	e399      	b.n	800723c <_svfprintf_r+0x15c4>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	9a06      	ldr	r2, [sp, #24]
 8006b0c:	6153      	str	r3, [r2, #20]
 8006b0e:	f7ff f8d0 	bl	8005cb2 <_svfprintf_r+0x3a>
 8006b12:	003a      	movs	r2, r7
 8006b14:	9906      	ldr	r1, [sp, #24]
 8006b16:	9807      	ldr	r0, [sp, #28]
 8006b18:	f000 fe2e 	bl	8007778 <__ssprint_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d001      	beq.n	8006b24 <_svfprintf_r+0xeac>
 8006b20:	f7ff f929 	bl	8005d76 <_svfprintf_r+0xfe>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68bc      	ldr	r4, [r7, #8]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b2c:	ab32      	add	r3, sp, #200	; 0xc8
 8006b2e:	ae34      	add	r6, sp, #208	; 0xd0
 8006b30:	4699      	mov	r9, r3
 8006b32:	e5e5      	b.n	8006700 <_svfprintf_r+0xa88>
 8006b34:	3b4c      	subs	r3, #76	; 0x4c
 8006b36:	431c      	orrs	r4, r3
 8006b38:	3201      	adds	r2, #1
 8006b3a:	7813      	ldrb	r3, [r2, #0]
 8006b3c:	f7ff f901 	bl	8005d42 <_svfprintf_r+0xca>
 8006b40:	003a      	movs	r2, r7
 8006b42:	9906      	ldr	r1, [sp, #24]
 8006b44:	9807      	ldr	r0, [sp, #28]
 8006b46:	f000 fe17 	bl	8007778 <__ssprint_r>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d001      	beq.n	8006b52 <_svfprintf_r+0xeda>
 8006b4e:	f7ff f912 	bl	8005d76 <_svfprintf_r+0xfe>
 8006b52:	68bc      	ldr	r4, [r7, #8]
 8006b54:	ae32      	add	r6, sp, #200	; 0xc8
 8006b56:	e510      	b.n	800657a <_svfprintf_r+0x902>
 8006b58:	4653      	mov	r3, sl
 8006b5a:	9308      	str	r3, [sp, #32]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d900      	bls.n	8006b62 <_svfprintf_r+0xeea>
 8006b60:	e103      	b.n	8006d6a <_svfprintf_r+0x10f2>
 8006b62:	9b08      	ldr	r3, [sp, #32]
 8006b64:	950f      	str	r5, [sp, #60]	; 0x3c
 8006b66:	930e      	str	r3, [sp, #56]	; 0x38
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	469a      	mov	sl, r3
 8006b6e:	9315      	str	r3, [sp, #84]	; 0x54
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <_svfprintf_r+0xf30>)
 8006b72:	9409      	str	r4, [sp, #36]	; 0x24
 8006b74:	9312      	str	r3, [sp, #72]	; 0x48
 8006b76:	f7ff fab3 	bl	80060e0 <_svfprintf_r+0x468>
 8006b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b7c:	ab32      	add	r3, sp, #200	; 0xc8
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	930e      	str	r3, [sp, #56]	; 0x38
 8006b82:	f7ff f9de 	bl	8005f42 <_svfprintf_r+0x2ca>
 8006b86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b88:	6032      	str	r2, [r6, #0]
 8006b8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	6072      	str	r2, [r6, #4]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4464      	add	r4, ip
 8006b94:	3201      	adds	r2, #1
 8006b96:	60bc      	str	r4, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	2a07      	cmp	r2, #7
 8006b9c:	dd00      	ble.n	8006ba0 <_svfprintf_r+0xf28>
 8006b9e:	e191      	b.n	8006ec4 <_svfprintf_r+0x124c>
 8006ba0:	3608      	adds	r6, #8
 8006ba2:	e62d      	b.n	8006800 <_svfprintf_r+0xb88>
 8006ba4:	08016e2c 	.word	0x08016e2c
 8006ba8:	08018b8c 	.word	0x08018b8c
 8006bac:	ab32      	add	r3, sp, #200	; 0xc8
 8006bae:	46b1      	mov	r9, r6
 8006bb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006bb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006bb4:	001e      	movs	r6, r3
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	0029      	movs	r1, r5
 8006bba:	220a      	movs	r2, #10
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f7fa f9af 	bl	8000f20 <__aeabi_uldivmod>
 8006bc2:	3e01      	subs	r6, #1
 8006bc4:	3230      	adds	r2, #48	; 0x30
 8006bc6:	7032      	strb	r2, [r6, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	0020      	movs	r0, r4
 8006bcc:	0029      	movs	r1, r5
 8006bce:	220a      	movs	r2, #10
 8006bd0:	f7fa f9a6 	bl	8000f20 <__aeabi_uldivmod>
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	0004      	movs	r4, r0
 8006bd8:	000d      	movs	r5, r1
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	d1eb      	bne.n	8006bb6 <_svfprintf_r+0xf3e>
 8006bde:	0032      	movs	r2, r6
 8006be0:	ab32      	add	r3, sp, #200	; 0xc8
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	9612      	str	r6, [sp, #72]	; 0x48
 8006be6:	940c      	str	r4, [sp, #48]	; 0x30
 8006be8:	950d      	str	r5, [sp, #52]	; 0x34
 8006bea:	464e      	mov	r6, r9
 8006bec:	930e      	str	r3, [sp, #56]	; 0x38
 8006bee:	f7ff f9a8 	bl	8005f42 <_svfprintf_r+0x2ca>
 8006bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	f7ff f86d 	bl	8005cd4 <_svfprintf_r+0x5c>
 8006bfa:	003a      	movs	r2, r7
 8006bfc:	9906      	ldr	r1, [sp, #24]
 8006bfe:	9807      	ldr	r0, [sp, #28]
 8006c00:	f000 fdba 	bl	8007778 <__ssprint_r>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d001      	beq.n	8006c0c <_svfprintf_r+0xf94>
 8006c08:	f7ff f8b5 	bl	8005d76 <_svfprintf_r+0xfe>
 8006c0c:	ab16      	add	r3, sp, #88	; 0x58
 8006c0e:	7fdb      	ldrb	r3, [r3, #31]
 8006c10:	68bc      	ldr	r4, [r7, #8]
 8006c12:	4698      	mov	r8, r3
 8006c14:	ae32      	add	r6, sp, #200	; 0xc8
 8006c16:	f7ff faad 	bl	8006174 <_svfprintf_r+0x4fc>
 8006c1a:	003a      	movs	r2, r7
 8006c1c:	9906      	ldr	r1, [sp, #24]
 8006c1e:	9807      	ldr	r0, [sp, #28]
 8006c20:	f000 fdaa 	bl	8007778 <__ssprint_r>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d001      	beq.n	8006c2c <_svfprintf_r+0xfb4>
 8006c28:	f7ff f8a5 	bl	8005d76 <_svfprintf_r+0xfe>
 8006c2c:	aa32      	add	r2, sp, #200	; 0xc8
 8006c2e:	68bc      	ldr	r4, [r7, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4691      	mov	r9, r2
 8006c34:	e52d      	b.n	8006692 <_svfprintf_r+0xa1a>
 8006c36:	003a      	movs	r2, r7
 8006c38:	9906      	ldr	r1, [sp, #24]
 8006c3a:	9807      	ldr	r0, [sp, #28]
 8006c3c:	f000 fd9c 	bl	8007778 <__ssprint_r>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d001      	beq.n	8006c48 <_svfprintf_r+0xfd0>
 8006c44:	f7ff f897 	bl	8005d76 <_svfprintf_r+0xfe>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68bc      	ldr	r4, [r7, #8]
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	ab32      	add	r3, sp, #200	; 0xc8
 8006c50:	4699      	mov	r9, r3
 8006c52:	e530      	b.n	80066b6 <_svfprintf_r+0xa3e>
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <_svfprintf_r+0xfe4>
 8006c58:	f7ff f946 	bl	8005ee8 <_svfprintf_r+0x270>
 8006c5c:	f7ff fa1d 	bl	800609a <_svfprintf_r+0x422>
 8006c60:	003a      	movs	r2, r7
 8006c62:	9906      	ldr	r1, [sp, #24]
 8006c64:	9807      	ldr	r0, [sp, #28]
 8006c66:	f000 fd87 	bl	8007778 <__ssprint_r>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d001      	beq.n	8006c72 <_svfprintf_r+0xffa>
 8006c6e:	f7ff f882 	bl	8005d76 <_svfprintf_r+0xfe>
 8006c72:	68bc      	ldr	r4, [r7, #8]
 8006c74:	ae32      	add	r6, sp, #200	; 0xc8
 8006c76:	f7ff faa4 	bl	80061c2 <_svfprintf_r+0x54a>
 8006c7a:	4be4      	ldr	r3, [pc, #912]	; (800700c <_svfprintf_r+0x1394>)
 8006c7c:	3401      	adds	r4, #1
 8006c7e:	6033      	str	r3, [r6, #0]
 8006c80:	2301      	movs	r3, #1
 8006c82:	6073      	str	r3, [r6, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60bc      	str	r4, [r7, #8]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	dd00      	ble.n	8006c92 <_svfprintf_r+0x101a>
 8006c90:	e13a      	b.n	8006f08 <_svfprintf_r+0x1290>
 8006c92:	3608      	adds	r6, #8
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d102      	bne.n	8006c9e <_svfprintf_r+0x1026>
 8006c98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d068      	beq.n	8006d70 <_svfprintf_r+0x10f8>
 8006c9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ca4:	469c      	mov	ip, r3
 8006ca6:	6073      	str	r3, [r6, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4464      	add	r4, ip
 8006cac:	3301      	adds	r3, #1
 8006cae:	60bc      	str	r4, [r7, #8]
 8006cb0:	607b      	str	r3, [r7, #4]
 8006cb2:	2b07      	cmp	r3, #7
 8006cb4:	dd00      	ble.n	8006cb8 <_svfprintf_r+0x1040>
 8006cb6:	e16d      	b.n	8006f94 <_svfprintf_r+0x131c>
 8006cb8:	0032      	movs	r2, r6
 8006cba:	3208      	adds	r2, #8
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	da00      	bge.n	8006cc2 <_svfprintf_r+0x104a>
 8006cc0:	e1aa      	b.n	8007018 <_svfprintf_r+0x13a0>
 8006cc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	6011      	str	r1, [r2, #0]
 8006cc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	468c      	mov	ip, r1
 8006cce:	4464      	add	r4, ip
 8006cd0:	6051      	str	r1, [r2, #4]
 8006cd2:	60bc      	str	r4, [r7, #8]
 8006cd4:	2b07      	cmp	r3, #7
 8006cd6:	dd00      	ble.n	8006cda <_svfprintf_r+0x1062>
 8006cd8:	e411      	b.n	80064fe <_svfprintf_r+0x886>
 8006cda:	3208      	adds	r2, #8
 8006cdc:	0016      	movs	r6, r2
 8006cde:	f7ff fabb 	bl	8006258 <_svfprintf_r+0x5e0>
 8006ce2:	003a      	movs	r2, r7
 8006ce4:	9906      	ldr	r1, [sp, #24]
 8006ce6:	9807      	ldr	r0, [sp, #28]
 8006ce8:	f000 fd46 	bl	8007778 <__ssprint_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d001      	beq.n	8006cf4 <_svfprintf_r+0x107c>
 8006cf0:	f7ff f841 	bl	8005d76 <_svfprintf_r+0xfe>
 8006cf4:	ae32      	add	r6, sp, #200	; 0xc8
 8006cf6:	e427      	b.n	8006548 <_svfprintf_r+0x8d0>
 8006cf8:	4699      	mov	r9, r3
 8006cfa:	002b      	movs	r3, r5
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	930e      	str	r3, [sp, #56]	; 0x38
 8006d00:	464b      	mov	r3, r9
 8006d02:	46a2      	mov	sl, r4
 8006d04:	0014      	movs	r4, r2
 8006d06:	3308      	adds	r3, #8
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d0e:	6051      	str	r1, [r2, #4]
 8006d10:	3510      	adds	r5, #16
 8006d12:	6015      	str	r5, [r2, #0]
 8006d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d16:	4454      	add	r4, sl
 8006d18:	60bc      	str	r4, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	2a07      	cmp	r2, #7
 8006d1e:	dd00      	ble.n	8006d22 <_svfprintf_r+0x10aa>
 8006d20:	e6f7      	b.n	8006b12 <_svfprintf_r+0xe9a>
 8006d22:	001e      	movs	r6, r3
 8006d24:	3201      	adds	r2, #1
 8006d26:	920e      	str	r2, [sp, #56]	; 0x38
 8006d28:	3608      	adds	r6, #8
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	e4e8      	b.n	8006700 <_svfprintf_r+0xa88>
 8006d2e:	46a0      	mov	r8, r4
 8006d30:	0014      	movs	r4, r2
 8006d32:	4642      	mov	r2, r8
 8006d34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d36:	4444      	add	r4, r8
 8006d38:	3510      	adds	r5, #16
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6035      	str	r5, [r6, #0]
 8006d3e:	6072      	str	r2, [r6, #4]
 8006d40:	60bc      	str	r4, [r7, #8]
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	2b07      	cmp	r3, #7
 8006d46:	dd00      	ble.n	8006d4a <_svfprintf_r+0x10d2>
 8006d48:	e140      	b.n	8006fcc <_svfprintf_r+0x1354>
 8006d4a:	3608      	adds	r6, #8
 8006d4c:	e54f      	b.n	80067ee <_svfprintf_r+0xb76>
 8006d4e:	4bb0      	ldr	r3, [pc, #704]	; (8007010 <_svfprintf_r+0x1398>)
 8006d50:	9312      	str	r3, [sp, #72]	; 0x48
 8006d52:	f7ff fb6b 	bl	800642c <_svfprintf_r+0x7b4>
 8006d56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006d58:	f7fc feb2 	bl	8003ac0 <strlen>
 8006d5c:	0002      	movs	r2, r0
 8006d5e:	f7ff f95c 	bl	800601a <_svfprintf_r+0x3a2>
 8006d62:	4aac      	ldr	r2, [pc, #688]	; (8007014 <_svfprintf_r+0x139c>)
 8006d64:	9210      	str	r2, [sp, #64]	; 0x40
 8006d66:	f7ff f9f6 	bl	8006156 <_svfprintf_r+0x4de>
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	e6f8      	b.n	8006b62 <_svfprintf_r+0xeea>
 8006d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d401      	bmi.n	8006d7a <_svfprintf_r+0x1102>
 8006d76:	f7ff fa6f 	bl	8006258 <_svfprintf_r+0x5e0>
 8006d7a:	e790      	b.n	8006c9e <_svfprintf_r+0x1026>
 8006d7c:	4653      	mov	r3, sl
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d000      	beq.n	8006d84 <_svfprintf_r+0x110c>
 8006d82:	e619      	b.n	80069b8 <_svfprintf_r+0xd40>
 8006d84:	2301      	movs	r3, #1
 8006d86:	469a      	mov	sl, r3
 8006d88:	e616      	b.n	80069b8 <_svfprintf_r+0xd40>
 8006d8a:	4653      	mov	r3, sl
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	ab23      	add	r3, sp, #140	; 0x8c
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	ab20      	add	r3, sp, #128	; 0x80
 8006d94:	9303      	str	r3, [sp, #12]
 8006d96:	ab1f      	add	r3, sp, #124	; 0x7c
 8006d98:	9302      	str	r3, [sp, #8]
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	920e      	str	r2, [sp, #56]	; 0x38
 8006d9e:	9201      	str	r2, [sp, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4642      	mov	r2, r8
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	9807      	ldr	r0, [sp, #28]
 8006da8:	f7fd f81c 	bl	8003de4 <_dtoa_r>
 8006dac:	9012      	str	r0, [sp, #72]	; 0x48
 8006dae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db0:	2b47      	cmp	r3, #71	; 0x47
 8006db2:	d000      	beq.n	8006db6 <_svfprintf_r+0x113e>
 8006db4:	e20a      	b.n	80071cc <_svfprintf_r+0x1554>
 8006db6:	07e3      	lsls	r3, r4, #31
 8006db8:	d400      	bmi.n	8006dbc <_svfprintf_r+0x1144>
 8006dba:	e200      	b.n	80071be <_svfprintf_r+0x1546>
 8006dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dc0:	4694      	mov	ip, r2
 8006dc2:	4463      	add	r3, ip
 8006dc4:	001d      	movs	r5, r3
 8006dc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc8:	2b46      	cmp	r3, #70	; 0x46
 8006dca:	d000      	beq.n	8006dce <_svfprintf_r+0x1156>
 8006dcc:	e628      	b.n	8006a20 <_svfprintf_r+0xda8>
 8006dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b30      	cmp	r3, #48	; 0x30
 8006dd4:	d002      	beq.n	8006ddc <_svfprintf_r+0x1164>
 8006dd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dd8:	18ed      	adds	r5, r5, r3
 8006dda:	e621      	b.n	8006a20 <_svfprintf_r+0xda8>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4640      	mov	r0, r8
 8006de2:	9908      	ldr	r1, [sp, #32]
 8006de4:	f7fa f86e 	bl	8000ec4 <__aeabi_dcmpeq>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1f4      	bne.n	8006dd6 <_svfprintf_r+0x115e>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	931f      	str	r3, [sp, #124]	; 0x7c
 8006df4:	18ed      	adds	r5, r5, r3
 8006df6:	e613      	b.n	8006a20 <_svfprintf_r+0xda8>
 8006df8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	9318      	str	r3, [sp, #96]	; 0x60
 8006dfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e00:	9315      	str	r3, [sp, #84]	; 0x54
 8006e02:	464b      	mov	r3, r9
 8006e04:	2b47      	cmp	r3, #71	; 0x47
 8006e06:	d107      	bne.n	8006e18 <_svfprintf_r+0x11a0>
 8006e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e0a:	1cda      	adds	r2, r3, #3
 8006e0c:	db01      	blt.n	8006e12 <_svfprintf_r+0x119a>
 8006e0e:	459a      	cmp	sl, r3
 8006e10:	da38      	bge.n	8006e84 <_svfprintf_r+0x120c>
 8006e12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e14:	3b02      	subs	r3, #2
 8006e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e1c:	1e5d      	subs	r5, r3, #1
 8006e1e:	ab21      	add	r3, sp, #132	; 0x84
 8006e20:	951f      	str	r5, [sp, #124]	; 0x7c
 8006e22:	4699      	mov	r9, r3
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	da00      	bge.n	8006e2c <_svfprintf_r+0x11b4>
 8006e2a:	e1a5      	b.n	8007178 <_svfprintf_r+0x1500>
 8006e2c:	232b      	movs	r3, #43	; 0x2b
 8006e2e:	464a      	mov	r2, r9
 8006e30:	7053      	strb	r3, [r2, #1]
 8006e32:	2d09      	cmp	r5, #9
 8006e34:	dd00      	ble.n	8006e38 <_svfprintf_r+0x11c0>
 8006e36:	e12a      	b.n	800708e <_svfprintf_r+0x1416>
 8006e38:	2330      	movs	r3, #48	; 0x30
 8006e3a:	464a      	mov	r2, r9
 8006e3c:	7093      	strb	r3, [r2, #2]
 8006e3e:	002b      	movs	r3, r5
 8006e40:	3330      	adds	r3, #48	; 0x30
 8006e42:	70d3      	strb	r3, [r2, #3]
 8006e44:	ab22      	add	r3, sp, #136	; 0x88
 8006e46:	464a      	mov	r2, r9
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e4c:	469c      	mov	ip, r3
 8006e4e:	0011      	movs	r1, r2
 8006e50:	4461      	add	r1, ip
 8006e52:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e54:	910e      	str	r1, [sp, #56]	; 0x38
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	dc00      	bgt.n	8006e5c <_svfprintf_r+0x11e4>
 8006e5a:	e182      	b.n	8007162 <_svfprintf_r+0x14ea>
 8006e5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e60:	469c      	mov	ip, r3
 8006e62:	4462      	add	r2, ip
 8006e64:	43d3      	mvns	r3, r2
 8006e66:	17db      	asrs	r3, r3, #31
 8006e68:	920e      	str	r2, [sp, #56]	; 0x38
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9208      	str	r2, [sp, #32]
 8006e70:	9315      	str	r3, [sp, #84]	; 0x54
 8006e72:	e603      	b.n	8006a7c <_svfprintf_r+0xe04>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	aa16      	add	r2, sp, #88	; 0x58
 8006e78:	77d3      	strb	r3, [r2, #31]
 8006e7a:	4698      	mov	r8, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	469a      	mov	sl, r3
 8006e80:	f7ff f86b 	bl	8005f5a <_svfprintf_r+0x2e2>
 8006e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	da00      	bge.n	8006e8e <_svfprintf_r+0x1216>
 8006e8c:	e090      	b.n	8006fb0 <_svfprintf_r+0x1338>
 8006e8e:	07e2      	lsls	r2, r4, #31
 8006e90:	d400      	bmi.n	8006e94 <_svfprintf_r+0x121c>
 8006e92:	e142      	b.n	800711a <_svfprintf_r+0x14a2>
 8006e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e98:	469c      	mov	ip, r3
 8006e9a:	4462      	add	r2, ip
 8006e9c:	920e      	str	r2, [sp, #56]	; 0x38
 8006e9e:	43d3      	mvns	r3, r2
 8006ea0:	17db      	asrs	r3, r3, #31
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	2367      	movs	r3, #103	; 0x67
 8006ea6:	9208      	str	r2, [sp, #32]
 8006ea8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eaa:	e5e7      	b.n	8006a7c <_svfprintf_r+0xe04>
 8006eac:	003a      	movs	r2, r7
 8006eae:	9906      	ldr	r1, [sp, #24]
 8006eb0:	9807      	ldr	r0, [sp, #28]
 8006eb2:	f000 fc61 	bl	8007778 <__ssprint_r>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d001      	beq.n	8006ebe <_svfprintf_r+0x1246>
 8006eba:	f7fe ff5c 	bl	8005d76 <_svfprintf_r+0xfe>
 8006ebe:	68bc      	ldr	r4, [r7, #8]
 8006ec0:	ae32      	add	r6, sp, #200	; 0xc8
 8006ec2:	e48b      	b.n	80067dc <_svfprintf_r+0xb64>
 8006ec4:	003a      	movs	r2, r7
 8006ec6:	9906      	ldr	r1, [sp, #24]
 8006ec8:	9807      	ldr	r0, [sp, #28]
 8006eca:	f000 fc55 	bl	8007778 <__ssprint_r>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d001      	beq.n	8006ed6 <_svfprintf_r+0x125e>
 8006ed2:	f7fe ff50 	bl	8005d76 <_svfprintf_r+0xfe>
 8006ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ed8:	68bc      	ldr	r4, [r7, #8]
 8006eda:	ae32      	add	r6, sp, #200	; 0xc8
 8006edc:	e490      	b.n	8006800 <_svfprintf_r+0xb88>
 8006ede:	232d      	movs	r3, #45	; 0x2d
 8006ee0:	aa16      	add	r2, sp, #88	; 0x58
 8006ee2:	77d3      	strb	r3, [r2, #31]
 8006ee4:	4698      	mov	r8, r3
 8006ee6:	f7ff fa9a 	bl	800641e <_svfprintf_r+0x7a6>
 8006eea:	4a4a      	ldr	r2, [pc, #296]	; (8007014 <_svfprintf_r+0x139c>)
 8006eec:	9210      	str	r2, [sp, #64]	; 0x40
 8006eee:	f7ff f9e5 	bl	80062bc <_svfprintf_r+0x644>
 8006ef2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef6:	4690      	mov	r8, r2
 8006ef8:	2280      	movs	r2, #128	; 0x80
 8006efa:	0612      	lsls	r2, r2, #24
 8006efc:	4694      	mov	ip, r2
 8006efe:	4463      	add	r3, ip
 8006f00:	9308      	str	r3, [sp, #32]
 8006f02:	232d      	movs	r3, #45	; 0x2d
 8006f04:	9310      	str	r3, [sp, #64]	; 0x40
 8006f06:	e564      	b.n	80069d2 <_svfprintf_r+0xd5a>
 8006f08:	003a      	movs	r2, r7
 8006f0a:	9906      	ldr	r1, [sp, #24]
 8006f0c:	9807      	ldr	r0, [sp, #28]
 8006f0e:	f000 fc33 	bl	8007778 <__ssprint_r>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d001      	beq.n	8006f1a <_svfprintf_r+0x12a2>
 8006f16:	f7fe ff2e 	bl	8005d76 <_svfprintf_r+0xfe>
 8006f1a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8006f1c:	68bc      	ldr	r4, [r7, #8]
 8006f1e:	ae32      	add	r6, sp, #200	; 0xc8
 8006f20:	e6b8      	b.n	8006c94 <_svfprintf_r+0x101c>
 8006f22:	003a      	movs	r2, r7
 8006f24:	9906      	ldr	r1, [sp, #24]
 8006f26:	9807      	ldr	r0, [sp, #28]
 8006f28:	f000 fc26 	bl	8007778 <__ssprint_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d001      	beq.n	8006f34 <_svfprintf_r+0x12bc>
 8006f30:	f7fe ff21 	bl	8005d76 <_svfprintf_r+0xfe>
 8006f34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006f36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f38:	68bc      	ldr	r4, [r7, #8]
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	ae32      	add	r6, sp, #200	; 0xc8
 8006f3e:	e478      	b.n	8006832 <_svfprintf_r+0xbba>
 8006f40:	ab23      	add	r3, sp, #140	; 0x8c
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	ab20      	add	r3, sp, #128	; 0x80
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	ab1f      	add	r3, sp, #124	; 0x7c
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	4653      	mov	r3, sl
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	2303      	movs	r3, #3
 8006f52:	4642      	mov	r2, r8
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	9807      	ldr	r0, [sp, #28]
 8006f58:	9b08      	ldr	r3, [sp, #32]
 8006f5a:	f7fc ff43 	bl	8003de4 <_dtoa_r>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	4453      	add	r3, sl
 8006f62:	001d      	movs	r5, r3
 8006f64:	4653      	mov	r3, sl
 8006f66:	9012      	str	r0, [sp, #72]	; 0x48
 8006f68:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6a:	e730      	b.n	8006dce <_svfprintf_r+0x1156>
 8006f6c:	46ab      	mov	fp, r5
 8006f6e:	465a      	mov	r2, fp
 8006f70:	f7fe ff26 	bl	8005dc0 <_svfprintf_r+0x148>
 8006f74:	2306      	movs	r3, #6
 8006f76:	469a      	mov	sl, r3
 8006f78:	e51e      	b.n	80069b8 <_svfprintf_r+0xd40>
 8006f7a:	ab16      	add	r3, sp, #88	; 0x58
 8006f7c:	7fdb      	ldrb	r3, [r3, #31]
 8006f7e:	950f      	str	r5, [sp, #60]	; 0x3c
 8006f80:	4698      	mov	r8, r3
 8006f82:	4653      	mov	r3, sl
 8006f84:	9308      	str	r3, [sp, #32]
 8006f86:	930e      	str	r3, [sp, #56]	; 0x38
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9409      	str	r4, [sp, #36]	; 0x24
 8006f8c:	469a      	mov	sl, r3
 8006f8e:	9315      	str	r3, [sp, #84]	; 0x54
 8006f90:	f7fe ffdf 	bl	8005f52 <_svfprintf_r+0x2da>
 8006f94:	003a      	movs	r2, r7
 8006f96:	9906      	ldr	r1, [sp, #24]
 8006f98:	9807      	ldr	r0, [sp, #28]
 8006f9a:	f000 fbed 	bl	8007778 <__ssprint_r>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d001      	beq.n	8006fa6 <_svfprintf_r+0x132e>
 8006fa2:	f7fe fee8 	bl	8005d76 <_svfprintf_r+0xfe>
 8006fa6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8006fa8:	68bc      	ldr	r4, [r7, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	aa32      	add	r2, sp, #200	; 0xc8
 8006fae:	e685      	b.n	8006cbc <_svfprintf_r+0x1044>
 8006fb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fb4:	469c      	mov	ip, r3
 8006fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fb8:	4462      	add	r2, ip
 8006fba:	920e      	str	r2, [sp, #56]	; 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd00      	ble.n	8006fc2 <_svfprintf_r+0x134a>
 8006fc0:	e76d      	b.n	8006e9e <_svfprintf_r+0x1226>
 8006fc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc6:	1a98      	subs	r0, r3, r2
 8006fc8:	1c42      	adds	r2, r0, #1
 8006fca:	e767      	b.n	8006e9c <_svfprintf_r+0x1224>
 8006fcc:	003a      	movs	r2, r7
 8006fce:	9906      	ldr	r1, [sp, #24]
 8006fd0:	9807      	ldr	r0, [sp, #28]
 8006fd2:	f000 fbd1 	bl	8007778 <__ssprint_r>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d001      	beq.n	8006fde <_svfprintf_r+0x1366>
 8006fda:	f7fe fecc 	bl	8005d76 <_svfprintf_r+0xfe>
 8006fde:	68bc      	ldr	r4, [r7, #8]
 8006fe0:	ae32      	add	r6, sp, #200	; 0xc8
 8006fe2:	f7ff fc04 	bl	80067ee <_svfprintf_r+0xb76>
 8006fe6:	ab23      	add	r3, sp, #140	; 0x8c
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	ab20      	add	r3, sp, #128	; 0x80
 8006fec:	9303      	str	r3, [sp, #12]
 8006fee:	ab1f      	add	r3, sp, #124	; 0x7c
 8006ff0:	9302      	str	r3, [sp, #8]
 8006ff2:	4653      	mov	r3, sl
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	9807      	ldr	r0, [sp, #28]
 8006ffe:	9b08      	ldr	r3, [sp, #32]
 8007000:	f7fc fef0 	bl	8003de4 <_dtoa_r>
 8007004:	4653      	mov	r3, sl
 8007006:	9012      	str	r0, [sp, #72]	; 0x48
 8007008:	930e      	str	r3, [sp, #56]	; 0x38
 800700a:	e6d7      	b.n	8006dbc <_svfprintf_r+0x1144>
 800700c:	08018b50 	.word	0x08018b50
 8007010:	08018b58 	.word	0x08018b58
 8007014:	08016e2c 	.word	0x08016e2c
 8007018:	424e      	negs	r6, r1
 800701a:	3110      	adds	r1, #16
 800701c:	da28      	bge.n	8007070 <_svfprintf_r+0x13f8>
 800701e:	4995      	ldr	r1, [pc, #596]	; (8007274 <_svfprintf_r+0x15fc>)
 8007020:	2010      	movs	r0, #16
 8007022:	468c      	mov	ip, r1
 8007024:	9110      	str	r1, [sp, #64]	; 0x40
 8007026:	2110      	movs	r1, #16
 8007028:	4460      	add	r0, ip
 800702a:	4680      	mov	r8, r0
 800702c:	4689      	mov	r9, r1
 800702e:	e003      	b.n	8007038 <_svfprintf_r+0x13c0>
 8007030:	3208      	adds	r2, #8
 8007032:	3e10      	subs	r6, #16
 8007034:	2e10      	cmp	r6, #16
 8007036:	dd1d      	ble.n	8007074 <_svfprintf_r+0x13fc>
 8007038:	4641      	mov	r1, r8
 800703a:	6011      	str	r1, [r2, #0]
 800703c:	4649      	mov	r1, r9
 800703e:	3410      	adds	r4, #16
 8007040:	3301      	adds	r3, #1
 8007042:	6051      	str	r1, [r2, #4]
 8007044:	60bc      	str	r4, [r7, #8]
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	2b07      	cmp	r3, #7
 800704a:	ddf1      	ble.n	8007030 <_svfprintf_r+0x13b8>
 800704c:	003a      	movs	r2, r7
 800704e:	9906      	ldr	r1, [sp, #24]
 8007050:	9807      	ldr	r0, [sp, #28]
 8007052:	f000 fb91 	bl	8007778 <__ssprint_r>
 8007056:	2800      	cmp	r0, #0
 8007058:	d001      	beq.n	800705e <_svfprintf_r+0x13e6>
 800705a:	f7fe fe8c 	bl	8005d76 <_svfprintf_r+0xfe>
 800705e:	68bc      	ldr	r4, [r7, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	aa32      	add	r2, sp, #200	; 0xc8
 8007064:	e7e5      	b.n	8007032 <_svfprintf_r+0x13ba>
 8007066:	2301      	movs	r3, #1
 8007068:	425b      	negs	r3, r3
 800706a:	930a      	str	r3, [sp, #40]	; 0x28
 800706c:	f7fe fe89 	bl	8005d82 <_svfprintf_r+0x10a>
 8007070:	4980      	ldr	r1, [pc, #512]	; (8007274 <_svfprintf_r+0x15fc>)
 8007072:	9110      	str	r1, [sp, #64]	; 0x40
 8007074:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007076:	19a4      	adds	r4, r4, r6
 8007078:	3510      	adds	r5, #16
 800707a:	3301      	adds	r3, #1
 800707c:	6015      	str	r5, [r2, #0]
 800707e:	6056      	str	r6, [r2, #4]
 8007080:	60bc      	str	r4, [r7, #8]
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	2b07      	cmp	r3, #7
 8007086:	dd00      	ble.n	800708a <_svfprintf_r+0x1412>
 8007088:	e0a6      	b.n	80071d8 <_svfprintf_r+0x1560>
 800708a:	3208      	adds	r2, #8
 800708c:	e619      	b.n	8006cc2 <_svfprintf_r+0x104a>
 800708e:	aa16      	add	r2, sp, #88	; 0x58
 8007090:	233b      	movs	r3, #59	; 0x3b
 8007092:	4694      	mov	ip, r2
 8007094:	4463      	add	r3, ip
 8007096:	46b2      	mov	sl, r6
 8007098:	46a0      	mov	r8, r4
 800709a:	001e      	movs	r6, r3
 800709c:	e000      	b.n	80070a0 <_svfprintf_r+0x1428>
 800709e:	0026      	movs	r6, r4
 80070a0:	0028      	movs	r0, r5
 80070a2:	210a      	movs	r1, #10
 80070a4:	f7f9 fef8 	bl	8000e98 <__aeabi_idivmod>
 80070a8:	1e74      	subs	r4, r6, #1
 80070aa:	3130      	adds	r1, #48	; 0x30
 80070ac:	7021      	strb	r1, [r4, #0]
 80070ae:	0028      	movs	r0, r5
 80070b0:	210a      	movs	r1, #10
 80070b2:	f7f9 fe0b 	bl	8000ccc <__divsi3>
 80070b6:	0005      	movs	r5, r0
 80070b8:	2809      	cmp	r0, #9
 80070ba:	dcf0      	bgt.n	800709e <_svfprintf_r+0x1426>
 80070bc:	0023      	movs	r3, r4
 80070be:	4644      	mov	r4, r8
 80070c0:	4698      	mov	r8, r3
 80070c2:	0003      	movs	r3, r0
 80070c4:	0032      	movs	r2, r6
 80070c6:	3330      	adds	r3, #48	; 0x30
 80070c8:	a916      	add	r1, sp, #88	; 0x58
 80070ca:	b2d8      	uxtb	r0, r3
 80070cc:	4656      	mov	r6, sl
 80070ce:	0013      	movs	r3, r2
 80070d0:	4692      	mov	sl, r2
 80070d2:	468c      	mov	ip, r1
 80070d4:	223b      	movs	r2, #59	; 0x3b
 80070d6:	3b02      	subs	r3, #2
 80070d8:	4462      	add	r2, ip
 80070da:	7018      	strb	r0, [r3, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d800      	bhi.n	80070e2 <_svfprintf_r+0x146a>
 80070e0:	e095      	b.n	800720e <_svfprintf_r+0x1596>
 80070e2:	233b      	movs	r3, #59	; 0x3b
 80070e4:	4652      	mov	r2, sl
 80070e6:	4463      	add	r3, ip
 80070e8:	1a9a      	subs	r2, r3, r2
 80070ea:	2301      	movs	r3, #1
 80070ec:	4655      	mov	r5, sl
 80070ee:	425b      	negs	r3, r3
 80070f0:	e001      	b.n	80070f6 <_svfprintf_r+0x147e>
 80070f2:	5ce8      	ldrb	r0, [r5, r3]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4649      	mov	r1, r9
 80070f8:	18c9      	adds	r1, r1, r3
 80070fa:	70c8      	strb	r0, [r1, #3]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d1f8      	bne.n	80070f2 <_svfprintf_r+0x147a>
 8007100:	a916      	add	r1, sp, #88	; 0x58
 8007102:	468c      	mov	ip, r1
 8007104:	222e      	movs	r2, #46	; 0x2e
 8007106:	4643      	mov	r3, r8
 8007108:	4462      	add	r2, ip
 800710a:	4694      	mov	ip, r2
 800710c:	1afb      	subs	r3, r7, r3
 800710e:	4463      	add	r3, ip
 8007110:	e699      	b.n	8006e46 <_svfprintf_r+0x11ce>
 8007112:	4a58      	ldr	r2, [pc, #352]	; (8007274 <_svfprintf_r+0x15fc>)
 8007114:	9210      	str	r2, [sp, #64]	; 0x40
 8007116:	f7ff f9e6 	bl	80064e6 <_svfprintf_r+0x86e>
 800711a:	001a      	movs	r2, r3
 800711c:	43db      	mvns	r3, r3
 800711e:	0011      	movs	r1, r2
 8007120:	17db      	asrs	r3, r3, #31
 8007122:	4019      	ands	r1, r3
 8007124:	2367      	movs	r3, #103	; 0x67
 8007126:	9108      	str	r1, [sp, #32]
 8007128:	920e      	str	r2, [sp, #56]	; 0x38
 800712a:	9313      	str	r3, [sp, #76]	; 0x4c
 800712c:	e4a6      	b.n	8006a7c <_svfprintf_r+0xe04>
 800712e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007130:	2b00      	cmp	r3, #0
 8007132:	db3f      	blt.n	80071b4 <_svfprintf_r+0x153c>
 8007134:	ab16      	add	r3, sp, #88	; 0x58
 8007136:	7fdb      	ldrb	r3, [r3, #31]
 8007138:	4698      	mov	r8, r3
 800713a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800713c:	2b47      	cmp	r3, #71	; 0x47
 800713e:	dc35      	bgt.n	80071ac <_svfprintf_r+0x1534>
 8007140:	4b4d      	ldr	r3, [pc, #308]	; (8007278 <_svfprintf_r+0x1600>)
 8007142:	9312      	str	r3, [sp, #72]	; 0x48
 8007144:	f7ff f972 	bl	800642c <_svfprintf_r+0x7b4>
 8007148:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800714a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800714c:	4694      	mov	ip, r2
 800714e:	4463      	add	r3, ip
 8007150:	0018      	movs	r0, r3
 8007152:	0002      	movs	r2, r0
 8007154:	4452      	add	r2, sl
 8007156:	43d3      	mvns	r3, r2
 8007158:	17db      	asrs	r3, r3, #31
 800715a:	920e      	str	r2, [sp, #56]	; 0x38
 800715c:	401a      	ands	r2, r3
 800715e:	9208      	str	r2, [sp, #32]
 8007160:	e48c      	b.n	8006a7c <_svfprintf_r+0xe04>
 8007162:	2301      	movs	r3, #1
 8007164:	4023      	ands	r3, r4
 8007166:	9315      	str	r3, [sp, #84]	; 0x54
 8007168:	d000      	beq.n	800716c <_svfprintf_r+0x14f4>
 800716a:	e677      	b.n	8006e5c <_svfprintf_r+0x11e4>
 800716c:	43cb      	mvns	r3, r1
 800716e:	000a      	movs	r2, r1
 8007170:	17db      	asrs	r3, r3, #31
 8007172:	401a      	ands	r2, r3
 8007174:	9208      	str	r2, [sp, #32]
 8007176:	e481      	b.n	8006a7c <_svfprintf_r+0xe04>
 8007178:	2301      	movs	r3, #1
 800717a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800717c:	1a9d      	subs	r5, r3, r2
 800717e:	464a      	mov	r2, r9
 8007180:	332c      	adds	r3, #44	; 0x2c
 8007182:	7053      	strb	r3, [r2, #1]
 8007184:	e655      	b.n	8006e32 <_svfprintf_r+0x11ba>
 8007186:	4a3b      	ldr	r2, [pc, #236]	; (8007274 <_svfprintf_r+0x15fc>)
 8007188:	0033      	movs	r3, r6
 800718a:	9210      	str	r2, [sp, #64]	; 0x40
 800718c:	e5bc      	b.n	8006d08 <_svfprintf_r+0x1090>
 800718e:	4653      	mov	r3, sl
 8007190:	2b00      	cmp	r3, #0
 8007192:	d108      	bne.n	80071a6 <_svfprintf_r+0x152e>
 8007194:	07e3      	lsls	r3, r4, #31
 8007196:	d406      	bmi.n	80071a6 <_svfprintf_r+0x152e>
 8007198:	2301      	movs	r3, #1
 800719a:	9308      	str	r3, [sp, #32]
 800719c:	930e      	str	r3, [sp, #56]	; 0x38
 800719e:	e46d      	b.n	8006a7c <_svfprintf_r+0xe04>
 80071a0:	4a34      	ldr	r2, [pc, #208]	; (8007274 <_svfprintf_r+0x15fc>)
 80071a2:	9210      	str	r2, [sp, #64]	; 0x40
 80071a4:	e5c5      	b.n	8006d32 <_svfprintf_r+0x10ba>
 80071a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071a8:	1c58      	adds	r0, r3, #1
 80071aa:	e7d2      	b.n	8007152 <_svfprintf_r+0x14da>
 80071ac:	4b33      	ldr	r3, [pc, #204]	; (800727c <_svfprintf_r+0x1604>)
 80071ae:	9312      	str	r3, [sp, #72]	; 0x48
 80071b0:	f7ff f93c 	bl	800642c <_svfprintf_r+0x7b4>
 80071b4:	232d      	movs	r3, #45	; 0x2d
 80071b6:	aa16      	add	r2, sp, #88	; 0x58
 80071b8:	77d3      	strb	r3, [r2, #31]
 80071ba:	4698      	mov	r8, r3
 80071bc:	e7bd      	b.n	800713a <_svfprintf_r+0x14c2>
 80071be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	9318      	str	r3, [sp, #96]	; 0x60
 80071c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071c8:	9315      	str	r3, [sp, #84]	; 0x54
 80071ca:	e61d      	b.n	8006e08 <_svfprintf_r+0x1190>
 80071cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d0:	4694      	mov	ip, r2
 80071d2:	4463      	add	r3, ip
 80071d4:	001d      	movs	r5, r3
 80071d6:	e423      	b.n	8006a20 <_svfprintf_r+0xda8>
 80071d8:	003a      	movs	r2, r7
 80071da:	9906      	ldr	r1, [sp, #24]
 80071dc:	9807      	ldr	r0, [sp, #28]
 80071de:	f000 facb 	bl	8007778 <__ssprint_r>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d001      	beq.n	80071ea <_svfprintf_r+0x1572>
 80071e6:	f7fe fdc6 	bl	8005d76 <_svfprintf_r+0xfe>
 80071ea:	68bc      	ldr	r4, [r7, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	aa32      	add	r2, sp, #200	; 0xc8
 80071f0:	e567      	b.n	8006cc2 <_svfprintf_r+0x104a>
 80071f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071f4:	1d18      	adds	r0, r3, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	469a      	mov	sl, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da02      	bge.n	8007204 <_svfprintf_r+0x158c>
 80071fe:	2301      	movs	r3, #1
 8007200:	425b      	negs	r3, r3
 8007202:	469a      	mov	sl, r3
 8007204:	7853      	ldrb	r3, [r2, #1]
 8007206:	900f      	str	r0, [sp, #60]	; 0x3c
 8007208:	002a      	movs	r2, r5
 800720a:	f7fe fd9a 	bl	8005d42 <_svfprintf_r+0xca>
 800720e:	aa16      	add	r2, sp, #88	; 0x58
 8007210:	232e      	movs	r3, #46	; 0x2e
 8007212:	4694      	mov	ip, r2
 8007214:	4463      	add	r3, ip
 8007216:	e616      	b.n	8006e46 <_svfprintf_r+0x11ce>
 8007218:	4642      	mov	r2, r8
 800721a:	ab16      	add	r3, sp, #88	; 0x58
 800721c:	77da      	strb	r2, [r3, #31]
 800721e:	f7ff f881 	bl	8006324 <_svfprintf_r+0x6ac>
 8007222:	4642      	mov	r2, r8
 8007224:	ab16      	add	r3, sp, #88	; 0x58
 8007226:	77da      	strb	r2, [r3, #31]
 8007228:	f7ff f934 	bl	8006494 <_svfprintf_r+0x81c>
 800722c:	4642      	mov	r2, r8
 800722e:	ab16      	add	r3, sp, #88	; 0x58
 8007230:	77da      	strb	r2, [r3, #31]
 8007232:	f7fe fdcf 	bl	8005dd4 <_svfprintf_r+0x15c>
 8007236:	4653      	mov	r3, sl
 8007238:	930e      	str	r3, [sp, #56]	; 0x38
 800723a:	e5b8      	b.n	8006dae <_svfprintf_r+0x1136>
 800723c:	230c      	movs	r3, #12
 800723e:	9a07      	ldr	r2, [sp, #28]
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	3b0d      	subs	r3, #13
 8007244:	930a      	str	r3, [sp, #40]	; 0x28
 8007246:	f7fe fd9c 	bl	8005d82 <_svfprintf_r+0x10a>
 800724a:	4642      	mov	r2, r8
 800724c:	ab16      	add	r3, sp, #88	; 0x58
 800724e:	77da      	strb	r2, [r3, #31]
 8007250:	f7ff f8b7 	bl	80063c2 <_svfprintf_r+0x74a>
 8007254:	4642      	mov	r2, r8
 8007256:	ab16      	add	r3, sp, #88	; 0x58
 8007258:	77da      	strb	r2, [r3, #31]
 800725a:	f7ff f8f7 	bl	800644c <_svfprintf_r+0x7d4>
 800725e:	4642      	mov	r2, r8
 8007260:	ab16      	add	r3, sp, #88	; 0x58
 8007262:	77da      	strb	r2, [r3, #31]
 8007264:	f7fe fef2 	bl	800604c <_svfprintf_r+0x3d4>
 8007268:	4642      	mov	r2, r8
 800726a:	ab16      	add	r3, sp, #88	; 0x58
 800726c:	77da      	strb	r2, [r3, #31]
 800726e:	f7fe fe0f 	bl	8005e90 <_svfprintf_r+0x218>
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	08016e2c 	.word	0x08016e2c
 8007278:	08018b5c 	.word	0x08018b5c
 800727c:	08018b60 	.word	0x08018b60

08007280 <_calloc_r>:
 8007280:	b510      	push	{r4, lr}
 8007282:	4351      	muls	r1, r2
 8007284:	f7fc f8ba 	bl	80033fc <_malloc_r>
 8007288:	1e04      	subs	r4, r0, #0
 800728a:	d01c      	beq.n	80072c6 <_calloc_r+0x46>
 800728c:	0003      	movs	r3, r0
 800728e:	3b08      	subs	r3, #8
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	2303      	movs	r3, #3
 8007294:	439a      	bics	r2, r3
 8007296:	3a04      	subs	r2, #4
 8007298:	2a24      	cmp	r2, #36	; 0x24
 800729a:	d816      	bhi.n	80072ca <_calloc_r+0x4a>
 800729c:	0003      	movs	r3, r0
 800729e:	2a13      	cmp	r2, #19
 80072a0:	d90d      	bls.n	80072be <_calloc_r+0x3e>
 80072a2:	2100      	movs	r1, #0
 80072a4:	3308      	adds	r3, #8
 80072a6:	6001      	str	r1, [r0, #0]
 80072a8:	6041      	str	r1, [r0, #4]
 80072aa:	2a1b      	cmp	r2, #27
 80072ac:	d907      	bls.n	80072be <_calloc_r+0x3e>
 80072ae:	6081      	str	r1, [r0, #8]
 80072b0:	60c1      	str	r1, [r0, #12]
 80072b2:	2a24      	cmp	r2, #36	; 0x24
 80072b4:	d10d      	bne.n	80072d2 <_calloc_r+0x52>
 80072b6:	0003      	movs	r3, r0
 80072b8:	6101      	str	r1, [r0, #16]
 80072ba:	3318      	adds	r3, #24
 80072bc:	6141      	str	r1, [r0, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	605a      	str	r2, [r3, #4]
 80072c4:	609a      	str	r2, [r3, #8]
 80072c6:	0020      	movs	r0, r4
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	2100      	movs	r1, #0
 80072cc:	f7f8 ff98 	bl	8000200 <memset>
 80072d0:	e7f9      	b.n	80072c6 <_calloc_r+0x46>
 80072d2:	0003      	movs	r3, r0
 80072d4:	3310      	adds	r3, #16
 80072d6:	e7f2      	b.n	80072be <_calloc_r+0x3e>

080072d8 <_mbtowc_r>:
 80072d8:	b530      	push	{r4, r5, lr}
 80072da:	4c07      	ldr	r4, [pc, #28]	; (80072f8 <_mbtowc_r+0x20>)
 80072dc:	b083      	sub	sp, #12
 80072de:	6824      	ldr	r4, [r4, #0]
 80072e0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d100      	bne.n	80072e8 <_mbtowc_r+0x10>
 80072e6:	4c05      	ldr	r4, [pc, #20]	; (80072fc <_mbtowc_r+0x24>)
 80072e8:	9d06      	ldr	r5, [sp, #24]
 80072ea:	9500      	str	r5, [sp, #0]
 80072ec:	25e4      	movs	r5, #228	; 0xe4
 80072ee:	5964      	ldr	r4, [r4, r5]
 80072f0:	47a0      	blx	r4
 80072f2:	b003      	add	sp, #12
 80072f4:	bd30      	pop	{r4, r5, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20000000 	.word	0x20000000
 80072fc:	2000084c 	.word	0x2000084c

08007300 <__ascii_mbtowc>:
 8007300:	b082      	sub	sp, #8
 8007302:	2900      	cmp	r1, #0
 8007304:	d00a      	beq.n	800731c <__ascii_mbtowc+0x1c>
 8007306:	2a00      	cmp	r2, #0
 8007308:	d00b      	beq.n	8007322 <__ascii_mbtowc+0x22>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <__ascii_mbtowc+0x26>
 800730e:	7813      	ldrb	r3, [r2, #0]
 8007310:	600b      	str	r3, [r1, #0]
 8007312:	7810      	ldrb	r0, [r2, #0]
 8007314:	1e43      	subs	r3, r0, #1
 8007316:	4198      	sbcs	r0, r3
 8007318:	b002      	add	sp, #8
 800731a:	4770      	bx	lr
 800731c:	a901      	add	r1, sp, #4
 800731e:	2a00      	cmp	r2, #0
 8007320:	d1f3      	bne.n	800730a <__ascii_mbtowc+0xa>
 8007322:	2000      	movs	r0, #0
 8007324:	e7f8      	b.n	8007318 <__ascii_mbtowc+0x18>
 8007326:	2002      	movs	r0, #2
 8007328:	4240      	negs	r0, r0
 800732a:	e7f5      	b.n	8007318 <__ascii_mbtowc+0x18>

0800732c <memmove>:
 800732c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800732e:	4288      	cmp	r0, r1
 8007330:	d90a      	bls.n	8007348 <memmove+0x1c>
 8007332:	188b      	adds	r3, r1, r2
 8007334:	4298      	cmp	r0, r3
 8007336:	d207      	bcs.n	8007348 <memmove+0x1c>
 8007338:	1e53      	subs	r3, r2, #1
 800733a:	2a00      	cmp	r2, #0
 800733c:	d003      	beq.n	8007346 <memmove+0x1a>
 800733e:	5cca      	ldrb	r2, [r1, r3]
 8007340:	54c2      	strb	r2, [r0, r3]
 8007342:	3b01      	subs	r3, #1
 8007344:	d2fb      	bcs.n	800733e <memmove+0x12>
 8007346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007348:	2a0f      	cmp	r2, #15
 800734a:	d809      	bhi.n	8007360 <memmove+0x34>
 800734c:	0005      	movs	r5, r0
 800734e:	2a00      	cmp	r2, #0
 8007350:	d0f9      	beq.n	8007346 <memmove+0x1a>
 8007352:	2300      	movs	r3, #0
 8007354:	5ccc      	ldrb	r4, [r1, r3]
 8007356:	54ec      	strb	r4, [r5, r3]
 8007358:	3301      	adds	r3, #1
 800735a:	4293      	cmp	r3, r2
 800735c:	d1fa      	bne.n	8007354 <memmove+0x28>
 800735e:	e7f2      	b.n	8007346 <memmove+0x1a>
 8007360:	000d      	movs	r5, r1
 8007362:	4305      	orrs	r5, r0
 8007364:	000c      	movs	r4, r1
 8007366:	0003      	movs	r3, r0
 8007368:	07ad      	lsls	r5, r5, #30
 800736a:	d129      	bne.n	80073c0 <memmove+0x94>
 800736c:	0015      	movs	r5, r2
 800736e:	3d10      	subs	r5, #16
 8007370:	092d      	lsrs	r5, r5, #4
 8007372:	012f      	lsls	r7, r5, #4
 8007374:	183f      	adds	r7, r7, r0
 8007376:	3710      	adds	r7, #16
 8007378:	6826      	ldr	r6, [r4, #0]
 800737a:	601e      	str	r6, [r3, #0]
 800737c:	6866      	ldr	r6, [r4, #4]
 800737e:	605e      	str	r6, [r3, #4]
 8007380:	68a6      	ldr	r6, [r4, #8]
 8007382:	609e      	str	r6, [r3, #8]
 8007384:	68e6      	ldr	r6, [r4, #12]
 8007386:	3410      	adds	r4, #16
 8007388:	60de      	str	r6, [r3, #12]
 800738a:	3310      	adds	r3, #16
 800738c:	42bb      	cmp	r3, r7
 800738e:	d1f3      	bne.n	8007378 <memmove+0x4c>
 8007390:	240f      	movs	r4, #15
 8007392:	3501      	adds	r5, #1
 8007394:	012d      	lsls	r5, r5, #4
 8007396:	1949      	adds	r1, r1, r5
 8007398:	4014      	ands	r4, r2
 800739a:	1945      	adds	r5, r0, r5
 800739c:	2c03      	cmp	r4, #3
 800739e:	d911      	bls.n	80073c4 <memmove+0x98>
 80073a0:	2300      	movs	r3, #0
 80073a2:	58ce      	ldr	r6, [r1, r3]
 80073a4:	50ee      	str	r6, [r5, r3]
 80073a6:	3304      	adds	r3, #4
 80073a8:	1ae6      	subs	r6, r4, r3
 80073aa:	2e03      	cmp	r6, #3
 80073ac:	d8f9      	bhi.n	80073a2 <memmove+0x76>
 80073ae:	2303      	movs	r3, #3
 80073b0:	3c04      	subs	r4, #4
 80073b2:	08a4      	lsrs	r4, r4, #2
 80073b4:	3401      	adds	r4, #1
 80073b6:	00a4      	lsls	r4, r4, #2
 80073b8:	192d      	adds	r5, r5, r4
 80073ba:	1909      	adds	r1, r1, r4
 80073bc:	401a      	ands	r2, r3
 80073be:	e7c6      	b.n	800734e <memmove+0x22>
 80073c0:	0005      	movs	r5, r0
 80073c2:	e7c6      	b.n	8007352 <memmove+0x26>
 80073c4:	0022      	movs	r2, r4
 80073c6:	e7c2      	b.n	800734e <memmove+0x22>

080073c8 <_realloc_r>:
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	46de      	mov	lr, fp
 80073cc:	4657      	mov	r7, sl
 80073ce:	4645      	mov	r5, r8
 80073d0:	464e      	mov	r6, r9
 80073d2:	b5e0      	push	{r5, r6, r7, lr}
 80073d4:	4693      	mov	fp, r2
 80073d6:	b085      	sub	sp, #20
 80073d8:	0007      	movs	r7, r0
 80073da:	1e0d      	subs	r5, r1, #0
 80073dc:	d100      	bne.n	80073e0 <_realloc_r+0x18>
 80073de:	e0a9      	b.n	8007534 <_realloc_r+0x16c>
 80073e0:	002e      	movs	r6, r5
 80073e2:	3e08      	subs	r6, #8
 80073e4:	f7fc fb06 	bl	80039f4 <__malloc_lock>
 80073e8:	6873      	ldr	r3, [r6, #4]
 80073ea:	2203      	movs	r2, #3
 80073ec:	001c      	movs	r4, r3
 80073ee:	4394      	bics	r4, r2
 80073f0:	465a      	mov	r2, fp
 80073f2:	320b      	adds	r2, #11
 80073f4:	46b1      	mov	r9, r6
 80073f6:	2a16      	cmp	r2, #22
 80073f8:	d843      	bhi.n	8007482 <_realloc_r+0xba>
 80073fa:	2210      	movs	r2, #16
 80073fc:	4692      	mov	sl, r2
 80073fe:	9200      	str	r2, [sp, #0]
 8007400:	45d3      	cmp	fp, sl
 8007402:	d843      	bhi.n	800748c <_realloc_r+0xc4>
 8007404:	9a00      	ldr	r2, [sp, #0]
 8007406:	1931      	adds	r1, r6, r4
 8007408:	4688      	mov	r8, r1
 800740a:	4294      	cmp	r4, r2
 800740c:	da76      	bge.n	80074fc <_realloc_r+0x134>
 800740e:	4ad4      	ldr	r2, [pc, #848]	; (8007760 <_realloc_r+0x398>)
 8007410:	6891      	ldr	r1, [r2, #8]
 8007412:	4541      	cmp	r1, r8
 8007414:	d100      	bne.n	8007418 <_realloc_r+0x50>
 8007416:	e0b6      	b.n	8007586 <_realloc_r+0x1be>
 8007418:	4642      	mov	r2, r8
 800741a:	6850      	ldr	r0, [r2, #4]
 800741c:	2101      	movs	r1, #1
 800741e:	0002      	movs	r2, r0
 8007420:	438a      	bics	r2, r1
 8007422:	4694      	mov	ip, r2
 8007424:	44c4      	add	ip, r8
 8007426:	4662      	mov	r2, ip
 8007428:	6852      	ldr	r2, [r2, #4]
 800742a:	420a      	tst	r2, r1
 800742c:	d100      	bne.n	8007430 <_realloc_r+0x68>
 800742e:	e086      	b.n	800753e <_realloc_r+0x176>
 8007430:	4219      	tst	r1, r3
 8007432:	d030      	beq.n	8007496 <_realloc_r+0xce>
 8007434:	4659      	mov	r1, fp
 8007436:	0038      	movs	r0, r7
 8007438:	f7fb ffe0 	bl	80033fc <_malloc_r>
 800743c:	4680      	mov	r8, r0
 800743e:	2800      	cmp	r0, #0
 8007440:	d01b      	beq.n	800747a <_realloc_r+0xb2>
 8007442:	2301      	movs	r3, #1
 8007444:	6872      	ldr	r2, [r6, #4]
 8007446:	439a      	bics	r2, r3
 8007448:	18b3      	adds	r3, r6, r2
 800744a:	0002      	movs	r2, r0
 800744c:	3a08      	subs	r2, #8
 800744e:	4293      	cmp	r3, r2
 8007450:	d100      	bne.n	8007454 <_realloc_r+0x8c>
 8007452:	e125      	b.n	80076a0 <_realloc_r+0x2d8>
 8007454:	1f22      	subs	r2, r4, #4
 8007456:	2a24      	cmp	r2, #36	; 0x24
 8007458:	d900      	bls.n	800745c <_realloc_r+0x94>
 800745a:	e131      	b.n	80076c0 <_realloc_r+0x2f8>
 800745c:	6829      	ldr	r1, [r5, #0]
 800745e:	0003      	movs	r3, r0
 8007460:	2a13      	cmp	r2, #19
 8007462:	d900      	bls.n	8007466 <_realloc_r+0x9e>
 8007464:	e112      	b.n	800768c <_realloc_r+0x2c4>
 8007466:	002a      	movs	r2, r5
 8007468:	6019      	str	r1, [r3, #0]
 800746a:	6851      	ldr	r1, [r2, #4]
 800746c:	6059      	str	r1, [r3, #4]
 800746e:	6892      	ldr	r2, [r2, #8]
 8007470:	609a      	str	r2, [r3, #8]
 8007472:	0029      	movs	r1, r5
 8007474:	0038      	movs	r0, r7
 8007476:	f7fd fdd1 	bl	800501c <_free_r>
 800747a:	0038      	movs	r0, r7
 800747c:	f7fc fabc 	bl	80039f8 <__malloc_unlock>
 8007480:	e050      	b.n	8007524 <_realloc_r+0x15c>
 8007482:	2107      	movs	r1, #7
 8007484:	438a      	bics	r2, r1
 8007486:	4692      	mov	sl, r2
 8007488:	9200      	str	r2, [sp, #0]
 800748a:	d5b9      	bpl.n	8007400 <_realloc_r+0x38>
 800748c:	230c      	movs	r3, #12
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	4698      	mov	r8, r3
 8007494:	e046      	b.n	8007524 <_realloc_r+0x15c>
 8007496:	6833      	ldr	r3, [r6, #0]
 8007498:	1af3      	subs	r3, r6, r3
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	9302      	str	r3, [sp, #8]
 80074a0:	2303      	movs	r3, #3
 80074a2:	9a02      	ldr	r2, [sp, #8]
 80074a4:	439a      	bics	r2, r3
 80074a6:	0013      	movs	r3, r2
 80074a8:	9a00      	ldr	r2, [sp, #0]
 80074aa:	18e1      	adds	r1, r4, r3
 80074ac:	9102      	str	r1, [sp, #8]
 80074ae:	4291      	cmp	r1, r2
 80074b0:	dbc0      	blt.n	8007434 <_realloc_r+0x6c>
 80074b2:	9801      	ldr	r0, [sp, #4]
 80074b4:	4684      	mov	ip, r0
 80074b6:	0006      	movs	r6, r0
 80074b8:	6882      	ldr	r2, [r0, #8]
 80074ba:	68c3      	ldr	r3, [r0, #12]
 80074bc:	4461      	add	r1, ip
 80074be:	60d3      	str	r3, [r2, #12]
 80074c0:	609a      	str	r2, [r3, #8]
 80074c2:	1f22      	subs	r2, r4, #4
 80074c4:	3608      	adds	r6, #8
 80074c6:	4688      	mov	r8, r1
 80074c8:	2a24      	cmp	r2, #36	; 0x24
 80074ca:	d900      	bls.n	80074ce <_realloc_r+0x106>
 80074cc:	e0ef      	b.n	80076ae <_realloc_r+0x2e6>
 80074ce:	6829      	ldr	r1, [r5, #0]
 80074d0:	0033      	movs	r3, r6
 80074d2:	2a13      	cmp	r2, #19
 80074d4:	d909      	bls.n	80074ea <_realloc_r+0x122>
 80074d6:	6081      	str	r1, [r0, #8]
 80074d8:	686b      	ldr	r3, [r5, #4]
 80074da:	60c3      	str	r3, [r0, #12]
 80074dc:	2a1b      	cmp	r2, #27
 80074de:	d900      	bls.n	80074e2 <_realloc_r+0x11a>
 80074e0:	e104      	b.n	80076ec <_realloc_r+0x324>
 80074e2:	3010      	adds	r0, #16
 80074e4:	0003      	movs	r3, r0
 80074e6:	68a9      	ldr	r1, [r5, #8]
 80074e8:	3508      	adds	r5, #8
 80074ea:	6019      	str	r1, [r3, #0]
 80074ec:	686a      	ldr	r2, [r5, #4]
 80074ee:	9c02      	ldr	r4, [sp, #8]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	68aa      	ldr	r2, [r5, #8]
 80074f4:	0035      	movs	r5, r6
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	4699      	mov	r9, r3
 80074fc:	4653      	mov	r3, sl
 80074fe:	464a      	mov	r2, r9
 8007500:	1ae0      	subs	r0, r4, r3
 8007502:	2301      	movs	r3, #1
 8007504:	6852      	ldr	r2, [r2, #4]
 8007506:	401a      	ands	r2, r3
 8007508:	280f      	cmp	r0, #15
 800750a:	d82a      	bhi.n	8007562 <_realloc_r+0x19a>
 800750c:	4649      	mov	r1, r9
 800750e:	4322      	orrs	r2, r4
 8007510:	604a      	str	r2, [r1, #4]
 8007512:	4642      	mov	r2, r8
 8007514:	6852      	ldr	r2, [r2, #4]
 8007516:	4313      	orrs	r3, r2
 8007518:	4642      	mov	r2, r8
 800751a:	6053      	str	r3, [r2, #4]
 800751c:	0038      	movs	r0, r7
 800751e:	f7fc fa6b 	bl	80039f8 <__malloc_unlock>
 8007522:	46a8      	mov	r8, r5
 8007524:	4640      	mov	r0, r8
 8007526:	b005      	add	sp, #20
 8007528:	bc3c      	pop	{r2, r3, r4, r5}
 800752a:	4690      	mov	r8, r2
 800752c:	4699      	mov	r9, r3
 800752e:	46a2      	mov	sl, r4
 8007530:	46ab      	mov	fp, r5
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	0011      	movs	r1, r2
 8007536:	f7fb ff61 	bl	80033fc <_malloc_r>
 800753a:	4680      	mov	r8, r0
 800753c:	e7f2      	b.n	8007524 <_realloc_r+0x15c>
 800753e:	2203      	movs	r2, #3
 8007540:	4390      	bics	r0, r2
 8007542:	4694      	mov	ip, r2
 8007544:	9a00      	ldr	r2, [sp, #0]
 8007546:	9002      	str	r0, [sp, #8]
 8007548:	1820      	adds	r0, r4, r0
 800754a:	4290      	cmp	r0, r2
 800754c:	db69      	blt.n	8007622 <_realloc_r+0x25a>
 800754e:	4643      	mov	r3, r8
 8007550:	4642      	mov	r2, r8
 8007552:	46b0      	mov	r8, r6
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	6892      	ldr	r2, [r2, #8]
 8007558:	4480      	add	r8, r0
 800755a:	60d3      	str	r3, [r2, #12]
 800755c:	0004      	movs	r4, r0
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	e7cc      	b.n	80074fc <_realloc_r+0x134>
 8007562:	4654      	mov	r4, sl
 8007564:	4322      	orrs	r2, r4
 8007566:	464c      	mov	r4, r9
 8007568:	4649      	mov	r1, r9
 800756a:	6062      	str	r2, [r4, #4]
 800756c:	4642      	mov	r2, r8
 800756e:	4451      	add	r1, sl
 8007570:	4318      	orrs	r0, r3
 8007572:	6048      	str	r0, [r1, #4]
 8007574:	6852      	ldr	r2, [r2, #4]
 8007576:	3108      	adds	r1, #8
 8007578:	4313      	orrs	r3, r2
 800757a:	4642      	mov	r2, r8
 800757c:	0038      	movs	r0, r7
 800757e:	6053      	str	r3, [r2, #4]
 8007580:	f7fd fd4c 	bl	800501c <_free_r>
 8007584:	e7ca      	b.n	800751c <_realloc_r+0x154>
 8007586:	2203      	movs	r2, #3
 8007588:	4650      	mov	r0, sl
 800758a:	6849      	ldr	r1, [r1, #4]
 800758c:	3010      	adds	r0, #16
 800758e:	4391      	bics	r1, r2
 8007590:	1909      	adds	r1, r1, r4
 8007592:	4694      	mov	ip, r2
 8007594:	4281      	cmp	r1, r0
 8007596:	db00      	blt.n	800759a <_realloc_r+0x1d2>
 8007598:	e096      	b.n	80076c8 <_realloc_r+0x300>
 800759a:	07db      	lsls	r3, r3, #31
 800759c:	d500      	bpl.n	80075a0 <_realloc_r+0x1d8>
 800759e:	e749      	b.n	8007434 <_realloc_r+0x6c>
 80075a0:	4662      	mov	r2, ip
 80075a2:	6833      	ldr	r3, [r6, #0]
 80075a4:	1af3      	subs	r3, r6, r3
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4393      	bics	r3, r2
 80075ac:	18ca      	adds	r2, r1, r3
 80075ae:	9202      	str	r2, [sp, #8]
 80075b0:	4290      	cmp	r0, r2
 80075b2:	dd00      	ble.n	80075b6 <_realloc_r+0x1ee>
 80075b4:	e778      	b.n	80074a8 <_realloc_r+0xe0>
 80075b6:	9801      	ldr	r0, [sp, #4]
 80075b8:	6882      	ldr	r2, [r0, #8]
 80075ba:	68c3      	ldr	r3, [r0, #12]
 80075bc:	4684      	mov	ip, r0
 80075be:	60d3      	str	r3, [r2, #12]
 80075c0:	609a      	str	r2, [r3, #8]
 80075c2:	2208      	movs	r2, #8
 80075c4:	4462      	add	r2, ip
 80075c6:	4690      	mov	r8, r2
 80075c8:	1f22      	subs	r2, r4, #4
 80075ca:	2a24      	cmp	r2, #36	; 0x24
 80075cc:	d900      	bls.n	80075d0 <_realloc_r+0x208>
 80075ce:	e0b7      	b.n	8007740 <_realloc_r+0x378>
 80075d0:	6829      	ldr	r1, [r5, #0]
 80075d2:	4643      	mov	r3, r8
 80075d4:	2a13      	cmp	r2, #19
 80075d6:	d909      	bls.n	80075ec <_realloc_r+0x224>
 80075d8:	6081      	str	r1, [r0, #8]
 80075da:	686b      	ldr	r3, [r5, #4]
 80075dc:	60c3      	str	r3, [r0, #12]
 80075de:	2a1b      	cmp	r2, #27
 80075e0:	d900      	bls.n	80075e4 <_realloc_r+0x21c>
 80075e2:	e0b2      	b.n	800774a <_realloc_r+0x382>
 80075e4:	0003      	movs	r3, r0
 80075e6:	68a9      	ldr	r1, [r5, #8]
 80075e8:	3310      	adds	r3, #16
 80075ea:	3508      	adds	r5, #8
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	686a      	ldr	r2, [r5, #4]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	68aa      	ldr	r2, [r5, #8]
 80075f4:	609a      	str	r2, [r3, #8]
 80075f6:	9801      	ldr	r0, [sp, #4]
 80075f8:	4b59      	ldr	r3, [pc, #356]	; (8007760 <_realloc_r+0x398>)
 80075fa:	0002      	movs	r2, r0
 80075fc:	4452      	add	r2, sl
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	0011      	movs	r1, r2
 8007602:	4652      	mov	r2, sl
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	1a9a      	subs	r2, r3, r2
 8007608:	2301      	movs	r3, #1
 800760a:	431a      	orrs	r2, r3
 800760c:	604a      	str	r2, [r1, #4]
 800760e:	6841      	ldr	r1, [r0, #4]
 8007610:	9100      	str	r1, [sp, #0]
 8007612:	400b      	ands	r3, r1
 8007614:	4651      	mov	r1, sl
 8007616:	430b      	orrs	r3, r1
 8007618:	6043      	str	r3, [r0, #4]
 800761a:	0038      	movs	r0, r7
 800761c:	f7fc f9ec 	bl	80039f8 <__malloc_unlock>
 8007620:	e780      	b.n	8007524 <_realloc_r+0x15c>
 8007622:	4219      	tst	r1, r3
 8007624:	d000      	beq.n	8007628 <_realloc_r+0x260>
 8007626:	e705      	b.n	8007434 <_realloc_r+0x6c>
 8007628:	4662      	mov	r2, ip
 800762a:	6833      	ldr	r3, [r6, #0]
 800762c:	1af3      	subs	r3, r6, r3
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	4393      	bics	r3, r2
 8007636:	9a02      	ldr	r2, [sp, #8]
 8007638:	18d1      	adds	r1, r2, r3
 800763a:	190a      	adds	r2, r1, r4
 800763c:	9900      	ldr	r1, [sp, #0]
 800763e:	9202      	str	r2, [sp, #8]
 8007640:	428a      	cmp	r2, r1
 8007642:	da00      	bge.n	8007646 <_realloc_r+0x27e>
 8007644:	e730      	b.n	80074a8 <_realloc_r+0xe0>
 8007646:	4643      	mov	r3, r8
 8007648:	4642      	mov	r2, r8
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	6892      	ldr	r2, [r2, #8]
 800764e:	9801      	ldr	r0, [sp, #4]
 8007650:	60d3      	str	r3, [r2, #12]
 8007652:	609a      	str	r2, [r3, #8]
 8007654:	6882      	ldr	r2, [r0, #8]
 8007656:	68c3      	ldr	r3, [r0, #12]
 8007658:	0006      	movs	r6, r0
 800765a:	60d3      	str	r3, [r2, #12]
 800765c:	609a      	str	r2, [r3, #8]
 800765e:	9b02      	ldr	r3, [sp, #8]
 8007660:	4684      	mov	ip, r0
 8007662:	4698      	mov	r8, r3
 8007664:	1f22      	subs	r2, r4, #4
 8007666:	3608      	adds	r6, #8
 8007668:	44e0      	add	r8, ip
 800766a:	2a24      	cmp	r2, #36	; 0x24
 800766c:	d81f      	bhi.n	80076ae <_realloc_r+0x2e6>
 800766e:	6829      	ldr	r1, [r5, #0]
 8007670:	0033      	movs	r3, r6
 8007672:	2a13      	cmp	r2, #19
 8007674:	d800      	bhi.n	8007678 <_realloc_r+0x2b0>
 8007676:	e738      	b.n	80074ea <_realloc_r+0x122>
 8007678:	6081      	str	r1, [r0, #8]
 800767a:	686b      	ldr	r3, [r5, #4]
 800767c:	60c3      	str	r3, [r0, #12]
 800767e:	2a1b      	cmp	r2, #27
 8007680:	d834      	bhi.n	80076ec <_realloc_r+0x324>
 8007682:	0003      	movs	r3, r0
 8007684:	68a9      	ldr	r1, [r5, #8]
 8007686:	3310      	adds	r3, #16
 8007688:	3508      	adds	r5, #8
 800768a:	e72e      	b.n	80074ea <_realloc_r+0x122>
 800768c:	6001      	str	r1, [r0, #0]
 800768e:	6869      	ldr	r1, [r5, #4]
 8007690:	6041      	str	r1, [r0, #4]
 8007692:	2a1b      	cmp	r2, #27
 8007694:	d835      	bhi.n	8007702 <_realloc_r+0x33a>
 8007696:	002a      	movs	r2, r5
 8007698:	3308      	adds	r3, #8
 800769a:	3208      	adds	r2, #8
 800769c:	68a9      	ldr	r1, [r5, #8]
 800769e:	e6e3      	b.n	8007468 <_realloc_r+0xa0>
 80076a0:	2203      	movs	r2, #3
 80076a2:	46b0      	mov	r8, r6
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4393      	bics	r3, r2
 80076a8:	18e4      	adds	r4, r4, r3
 80076aa:	44a0      	add	r8, r4
 80076ac:	e726      	b.n	80074fc <_realloc_r+0x134>
 80076ae:	0029      	movs	r1, r5
 80076b0:	0030      	movs	r0, r6
 80076b2:	f7ff fe3b 	bl	800732c <memmove>
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	0035      	movs	r5, r6
 80076ba:	9c02      	ldr	r4, [sp, #8]
 80076bc:	4699      	mov	r9, r3
 80076be:	e71d      	b.n	80074fc <_realloc_r+0x134>
 80076c0:	0029      	movs	r1, r5
 80076c2:	f7ff fe33 	bl	800732c <memmove>
 80076c6:	e6d4      	b.n	8007472 <_realloc_r+0xaa>
 80076c8:	4653      	mov	r3, sl
 80076ca:	4a25      	ldr	r2, [pc, #148]	; (8007760 <_realloc_r+0x398>)
 80076cc:	18f3      	adds	r3, r6, r3
 80076ce:	6093      	str	r3, [r2, #8]
 80076d0:	4652      	mov	r2, sl
 80076d2:	2401      	movs	r4, #1
 80076d4:	1a89      	subs	r1, r1, r2
 80076d6:	4321      	orrs	r1, r4
 80076d8:	6059      	str	r1, [r3, #4]
 80076da:	6873      	ldr	r3, [r6, #4]
 80076dc:	0038      	movs	r0, r7
 80076de:	401c      	ands	r4, r3
 80076e0:	4314      	orrs	r4, r2
 80076e2:	6074      	str	r4, [r6, #4]
 80076e4:	f7fc f988 	bl	80039f8 <__malloc_unlock>
 80076e8:	46a8      	mov	r8, r5
 80076ea:	e71b      	b.n	8007524 <_realloc_r+0x15c>
 80076ec:	68a9      	ldr	r1, [r5, #8]
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	6119      	str	r1, [r3, #16]
 80076f2:	68e9      	ldr	r1, [r5, #12]
 80076f4:	6159      	str	r1, [r3, #20]
 80076f6:	2a24      	cmp	r2, #36	; 0x24
 80076f8:	d00e      	beq.n	8007718 <_realloc_r+0x350>
 80076fa:	6929      	ldr	r1, [r5, #16]
 80076fc:	3318      	adds	r3, #24
 80076fe:	3510      	adds	r5, #16
 8007700:	e6f3      	b.n	80074ea <_realloc_r+0x122>
 8007702:	68a9      	ldr	r1, [r5, #8]
 8007704:	6081      	str	r1, [r0, #8]
 8007706:	68e9      	ldr	r1, [r5, #12]
 8007708:	60c1      	str	r1, [r0, #12]
 800770a:	2a24      	cmp	r2, #36	; 0x24
 800770c:	d00e      	beq.n	800772c <_realloc_r+0x364>
 800770e:	002a      	movs	r2, r5
 8007710:	3310      	adds	r3, #16
 8007712:	3210      	adds	r2, #16
 8007714:	6929      	ldr	r1, [r5, #16]
 8007716:	e6a7      	b.n	8007468 <_realloc_r+0xa0>
 8007718:	692b      	ldr	r3, [r5, #16]
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	6193      	str	r3, [r2, #24]
 800771e:	0013      	movs	r3, r2
 8007720:	6969      	ldr	r1, [r5, #20]
 8007722:	3320      	adds	r3, #32
 8007724:	61d1      	str	r1, [r2, #28]
 8007726:	69a9      	ldr	r1, [r5, #24]
 8007728:	3518      	adds	r5, #24
 800772a:	e6de      	b.n	80074ea <_realloc_r+0x122>
 800772c:	692a      	ldr	r2, [r5, #16]
 800772e:	0001      	movs	r1, r0
 8007730:	6102      	str	r2, [r0, #16]
 8007732:	002a      	movs	r2, r5
 8007734:	6968      	ldr	r0, [r5, #20]
 8007736:	3218      	adds	r2, #24
 8007738:	6148      	str	r0, [r1, #20]
 800773a:	3318      	adds	r3, #24
 800773c:	69a9      	ldr	r1, [r5, #24]
 800773e:	e693      	b.n	8007468 <_realloc_r+0xa0>
 8007740:	0029      	movs	r1, r5
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fdf2 	bl	800732c <memmove>
 8007748:	e755      	b.n	80075f6 <_realloc_r+0x22e>
 800774a:	68a9      	ldr	r1, [r5, #8]
 800774c:	9b01      	ldr	r3, [sp, #4]
 800774e:	6119      	str	r1, [r3, #16]
 8007750:	68e9      	ldr	r1, [r5, #12]
 8007752:	6159      	str	r1, [r3, #20]
 8007754:	2a24      	cmp	r2, #36	; 0x24
 8007756:	d005      	beq.n	8007764 <_realloc_r+0x39c>
 8007758:	6929      	ldr	r1, [r5, #16]
 800775a:	3318      	adds	r3, #24
 800775c:	3510      	adds	r5, #16
 800775e:	e745      	b.n	80075ec <_realloc_r+0x224>
 8007760:	20000444 	.word	0x20000444
 8007764:	692b      	ldr	r3, [r5, #16]
 8007766:	9a01      	ldr	r2, [sp, #4]
 8007768:	6193      	str	r3, [r2, #24]
 800776a:	0013      	movs	r3, r2
 800776c:	6969      	ldr	r1, [r5, #20]
 800776e:	3320      	adds	r3, #32
 8007770:	61d1      	str	r1, [r2, #28]
 8007772:	69a9      	ldr	r1, [r5, #24]
 8007774:	3518      	adds	r5, #24
 8007776:	e739      	b.n	80075ec <_realloc_r+0x224>

08007778 <__ssprint_r>:
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	4657      	mov	r7, sl
 800777c:	464e      	mov	r6, r9
 800777e:	46de      	mov	lr, fp
 8007780:	4645      	mov	r5, r8
 8007782:	b5e0      	push	{r5, r6, r7, lr}
 8007784:	6893      	ldr	r3, [r2, #8]
 8007786:	b083      	sub	sp, #12
 8007788:	9001      	str	r0, [sp, #4]
 800778a:	000e      	movs	r6, r1
 800778c:	4692      	mov	sl, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d06c      	beq.n	800786c <__ssprint_r+0xf4>
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	688d      	ldr	r5, [r1, #8]
 8007798:	001f      	movs	r7, r3
 800779a:	e044      	b.n	8007826 <__ssprint_r+0xae>
 800779c:	2290      	movs	r2, #144	; 0x90
 800779e:	89b3      	ldrh	r3, [r6, #12]
 80077a0:	00d2      	lsls	r2, r2, #3
 80077a2:	4213      	tst	r3, r2
 80077a4:	d02e      	beq.n	8007804 <__ssprint_r+0x8c>
 80077a6:	6931      	ldr	r1, [r6, #16]
 80077a8:	1a42      	subs	r2, r0, r1
 80077aa:	4693      	mov	fp, r2
 80077ac:	6970      	ldr	r0, [r6, #20]
 80077ae:	0042      	lsls	r2, r0, #1
 80077b0:	1812      	adds	r2, r2, r0
 80077b2:	0fd0      	lsrs	r0, r2, #31
 80077b4:	1882      	adds	r2, r0, r2
 80077b6:	1c60      	adds	r0, r4, #1
 80077b8:	1052      	asrs	r2, r2, #1
 80077ba:	4458      	add	r0, fp
 80077bc:	4690      	mov	r8, r2
 80077be:	4290      	cmp	r0, r2
 80077c0:	d901      	bls.n	80077c6 <__ssprint_r+0x4e>
 80077c2:	4680      	mov	r8, r0
 80077c4:	0002      	movs	r2, r0
 80077c6:	2080      	movs	r0, #128	; 0x80
 80077c8:	00c0      	lsls	r0, r0, #3
 80077ca:	4203      	tst	r3, r0
 80077cc:	d037      	beq.n	800783e <__ssprint_r+0xc6>
 80077ce:	0011      	movs	r1, r2
 80077d0:	9801      	ldr	r0, [sp, #4]
 80077d2:	f7fb fe13 	bl	80033fc <_malloc_r>
 80077d6:	1e05      	subs	r5, r0, #0
 80077d8:	d053      	beq.n	8007882 <__ssprint_r+0x10a>
 80077da:	465a      	mov	r2, fp
 80077dc:	6931      	ldr	r1, [r6, #16]
 80077de:	f7fc f8c5 	bl	800396c <memcpy>
 80077e2:	89b3      	ldrh	r3, [r6, #12]
 80077e4:	4a29      	ldr	r2, [pc, #164]	; (800788c <__ssprint_r+0x114>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	4313      	orrs	r3, r2
 80077ec:	81b3      	strh	r3, [r6, #12]
 80077ee:	4643      	mov	r3, r8
 80077f0:	0028      	movs	r0, r5
 80077f2:	465a      	mov	r2, fp
 80077f4:	6135      	str	r5, [r6, #16]
 80077f6:	46a0      	mov	r8, r4
 80077f8:	0025      	movs	r5, r4
 80077fa:	4458      	add	r0, fp
 80077fc:	6173      	str	r3, [r6, #20]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	6030      	str	r0, [r6, #0]
 8007802:	60b3      	str	r3, [r6, #8]
 8007804:	4642      	mov	r2, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7ff fd90 	bl	800732c <memmove>
 800780c:	68b3      	ldr	r3, [r6, #8]
 800780e:	1b5d      	subs	r5, r3, r5
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	60b5      	str	r5, [r6, #8]
 8007814:	4443      	add	r3, r8
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	0018      	movs	r0, r3
 800781a:	4653      	mov	r3, sl
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	1b1c      	subs	r4, r3, r4
 8007820:	4653      	mov	r3, sl
 8007822:	609c      	str	r4, [r3, #8]
 8007824:	d022      	beq.n	800786c <__ssprint_r+0xf4>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	687c      	ldr	r4, [r7, #4]
 800782a:	4699      	mov	r9, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46a8      	mov	r8, r5
 8007830:	2c00      	cmp	r4, #0
 8007832:	d0f8      	beq.n	8007826 <__ssprint_r+0xae>
 8007834:	42ac      	cmp	r4, r5
 8007836:	d2b1      	bcs.n	800779c <__ssprint_r+0x24>
 8007838:	0025      	movs	r5, r4
 800783a:	46a0      	mov	r8, r4
 800783c:	e7e2      	b.n	8007804 <__ssprint_r+0x8c>
 800783e:	9801      	ldr	r0, [sp, #4]
 8007840:	f7ff fdc2 	bl	80073c8 <_realloc_r>
 8007844:	1e05      	subs	r5, r0, #0
 8007846:	d1d2      	bne.n	80077ee <__ssprint_r+0x76>
 8007848:	9c01      	ldr	r4, [sp, #4]
 800784a:	6931      	ldr	r1, [r6, #16]
 800784c:	0020      	movs	r0, r4
 800784e:	f7fd fbe5 	bl	800501c <_free_r>
 8007852:	230c      	movs	r3, #12
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	89b3      	ldrh	r3, [r6, #12]
 800785a:	2001      	movs	r0, #1
 800785c:	4313      	orrs	r3, r2
 800785e:	81b3      	strh	r3, [r6, #12]
 8007860:	4652      	mov	r2, sl
 8007862:	2300      	movs	r3, #0
 8007864:	4240      	negs	r0, r0
 8007866:	6093      	str	r3, [r2, #8]
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	e003      	b.n	8007874 <__ssprint_r+0xfc>
 800786c:	2300      	movs	r3, #0
 800786e:	4652      	mov	r2, sl
 8007870:	2000      	movs	r0, #0
 8007872:	6053      	str	r3, [r2, #4]
 8007874:	b003      	add	sp, #12
 8007876:	bc3c      	pop	{r2, r3, r4, r5}
 8007878:	4690      	mov	r8, r2
 800787a:	4699      	mov	r9, r3
 800787c:	46a2      	mov	sl, r4
 800787e:	46ab      	mov	fp, r5
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007882:	230c      	movs	r3, #12
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e7e5      	b.n	8007856 <__ssprint_r+0xde>
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	fffffb7f 	.word	0xfffffb7f

08007890 <_svfiprintf_r>:
 8007890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007892:	4645      	mov	r5, r8
 8007894:	46de      	mov	lr, fp
 8007896:	4657      	mov	r7, sl
 8007898:	464e      	mov	r6, r9
 800789a:	b5e0      	push	{r5, r6, r7, lr}
 800789c:	b0ad      	sub	sp, #180	; 0xb4
 800789e:	9001      	str	r0, [sp, #4]
 80078a0:	9100      	str	r1, [sp, #0]
 80078a2:	9309      	str	r3, [sp, #36]	; 0x24
 80078a4:	898b      	ldrh	r3, [r1, #12]
 80078a6:	4690      	mov	r8, r2
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	d505      	bpl.n	80078b8 <_svfiprintf_r+0x28>
 80078ac:	690b      	ldr	r3, [r1, #16]
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <_svfiprintf_r+0x28>
 80078b4:	f000 fc49 	bl	800814a <_svfiprintf_r+0x8ba>
 80078b8:	ab1c      	add	r3, sp, #112	; 0x70
 80078ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80078bc:	2300      	movs	r3, #0
 80078be:	4644      	mov	r4, r8
 80078c0:	9311      	str	r3, [sp, #68]	; 0x44
 80078c2:	9310      	str	r3, [sp, #64]	; 0x40
 80078c4:	ae1c      	add	r6, sp, #112	; 0x70
 80078c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c8:	9308      	str	r3, [sp, #32]
 80078ca:	7823      	ldrb	r3, [r4, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d100      	bne.n	80078d2 <_svfiprintf_r+0x42>
 80078d0:	e0d8      	b.n	8007a84 <_svfiprintf_r+0x1f4>
 80078d2:	0025      	movs	r5, r4
 80078d4:	2b25      	cmp	r3, #37	; 0x25
 80078d6:	d102      	bne.n	80078de <_svfiprintf_r+0x4e>
 80078d8:	e01d      	b.n	8007916 <_svfiprintf_r+0x86>
 80078da:	2b25      	cmp	r3, #37	; 0x25
 80078dc:	d003      	beq.n	80078e6 <_svfiprintf_r+0x56>
 80078de:	3501      	adds	r5, #1
 80078e0:	782b      	ldrb	r3, [r5, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f9      	bne.n	80078da <_svfiprintf_r+0x4a>
 80078e6:	1b2f      	subs	r7, r5, r4
 80078e8:	d011      	beq.n	800790e <_svfiprintf_r+0x7e>
 80078ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078ec:	6034      	str	r4, [r6, #0]
 80078ee:	19db      	adds	r3, r3, r7
 80078f0:	9311      	str	r3, [sp, #68]	; 0x44
 80078f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f4:	6077      	str	r7, [r6, #4]
 80078f6:	9302      	str	r3, [sp, #8]
 80078f8:	3301      	adds	r3, #1
 80078fa:	9310      	str	r3, [sp, #64]	; 0x40
 80078fc:	2b07      	cmp	r3, #7
 80078fe:	dd00      	ble.n	8007902 <_svfiprintf_r+0x72>
 8007900:	e0b7      	b.n	8007a72 <_svfiprintf_r+0x1e2>
 8007902:	3608      	adds	r6, #8
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	469c      	mov	ip, r3
 8007908:	44bc      	add	ip, r7
 800790a:	4663      	mov	r3, ip
 800790c:	9308      	str	r3, [sp, #32]
 800790e:	782b      	ldrb	r3, [r5, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d100      	bne.n	8007916 <_svfiprintf_r+0x86>
 8007914:	e0b6      	b.n	8007a84 <_svfiprintf_r+0x1f4>
 8007916:	2300      	movs	r3, #0
 8007918:	aa0c      	add	r2, sp, #48	; 0x30
 800791a:	71d3      	strb	r3, [r2, #7]
 800791c:	2200      	movs	r2, #0
 800791e:	4694      	mov	ip, r2
 8007920:	3a01      	subs	r2, #1
 8007922:	4693      	mov	fp, r2
 8007924:	2200      	movs	r2, #0
 8007926:	9205      	str	r2, [sp, #20]
 8007928:	3220      	adds	r2, #32
 800792a:	4690      	mov	r8, r2
 800792c:	3220      	adds	r2, #32
 800792e:	4692      	mov	sl, r2
 8007930:	3240      	adds	r2, #64	; 0x40
 8007932:	2000      	movs	r0, #0
 8007934:	2700      	movs	r7, #0
 8007936:	4691      	mov	r9, r2
 8007938:	786b      	ldrb	r3, [r5, #1]
 800793a:	1c6c      	adds	r4, r5, #1
 800793c:	001a      	movs	r2, r3
 800793e:	3a20      	subs	r2, #32
 8007940:	3401      	adds	r4, #1
 8007942:	2a58      	cmp	r2, #88	; 0x58
 8007944:	d900      	bls.n	8007948 <_svfiprintf_r+0xb8>
 8007946:	e0c8      	b.n	8007ada <_svfiprintf_r+0x24a>
 8007948:	49c6      	ldr	r1, [pc, #792]	; (8007c64 <_svfiprintf_r+0x3d4>)
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	588a      	ldr	r2, [r1, r2]
 800794e:	4697      	mov	pc, r2
 8007950:	2310      	movs	r3, #16
 8007952:	431f      	orrs	r7, r3
 8007954:	06bb      	lsls	r3, r7, #26
 8007956:	d400      	bmi.n	800795a <_svfiprintf_r+0xca>
 8007958:	e2da      	b.n	8007f10 <_svfiprintf_r+0x680>
 800795a:	2207      	movs	r2, #7
 800795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795e:	a90c      	add	r1, sp, #48	; 0x30
 8007960:	3307      	adds	r3, #7
 8007962:	4393      	bics	r3, r2
 8007964:	3201      	adds	r2, #1
 8007966:	4694      	mov	ip, r2
 8007968:	449c      	add	ip, r3
 800796a:	4662      	mov	r2, ip
 800796c:	9209      	str	r2, [sp, #36]	; 0x24
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	9206      	str	r2, [sp, #24]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	2300      	movs	r3, #0
 8007978:	71cb      	strb	r3, [r1, #7]
 800797a:	465b      	mov	r3, fp
 800797c:	2201      	movs	r2, #1
 800797e:	3301      	adds	r3, #1
 8007980:	d155      	bne.n	8007a2e <_svfiprintf_r+0x19e>
 8007982:	2300      	movs	r3, #0
 8007984:	4698      	mov	r8, r3
 8007986:	9702      	str	r7, [sp, #8]
 8007988:	2a01      	cmp	r2, #1
 800798a:	d100      	bne.n	800798e <_svfiprintf_r+0xfe>
 800798c:	e12b      	b.n	8007be6 <_svfiprintf_r+0x356>
 800798e:	2a02      	cmp	r2, #2
 8007990:	d100      	bne.n	8007994 <_svfiprintf_r+0x104>
 8007992:	e2f5      	b.n	8007f80 <_svfiprintf_r+0x6f0>
 8007994:	9806      	ldr	r0, [sp, #24]
 8007996:	9907      	ldr	r1, [sp, #28]
 8007998:	2307      	movs	r3, #7
 800799a:	aa1c      	add	r2, sp, #112	; 0x70
 800799c:	46a1      	mov	r9, r4
 800799e:	469c      	mov	ip, r3
 80079a0:	46b2      	mov	sl, r6
 80079a2:	0014      	movs	r4, r2
 80079a4:	e000      	b.n	80079a8 <_svfiprintf_r+0x118>
 80079a6:	002c      	movs	r4, r5
 80079a8:	074e      	lsls	r6, r1, #29
 80079aa:	08c2      	lsrs	r2, r0, #3
 80079ac:	4663      	mov	r3, ip
 80079ae:	08cf      	lsrs	r7, r1, #3
 80079b0:	4316      	orrs	r6, r2
 80079b2:	0039      	movs	r1, r7
 80079b4:	0037      	movs	r7, r6
 80079b6:	4003      	ands	r3, r0
 80079b8:	1e65      	subs	r5, r4, #1
 80079ba:	3330      	adds	r3, #48	; 0x30
 80079bc:	702b      	strb	r3, [r5, #0]
 80079be:	0030      	movs	r0, r6
 80079c0:	430f      	orrs	r7, r1
 80079c2:	d1f0      	bne.n	80079a6 <_svfiprintf_r+0x116>
 80079c4:	9006      	str	r0, [sp, #24]
 80079c6:	9107      	str	r1, [sp, #28]
 80079c8:	9902      	ldr	r1, [sp, #8]
 80079ca:	0022      	movs	r2, r4
 80079cc:	4656      	mov	r6, sl
 80079ce:	464c      	mov	r4, r9
 80079d0:	07c9      	lsls	r1, r1, #31
 80079d2:	d400      	bmi.n	80079d6 <_svfiprintf_r+0x146>
 80079d4:	e2ed      	b.n	8007fb2 <_svfiprintf_r+0x722>
 80079d6:	2b30      	cmp	r3, #48	; 0x30
 80079d8:	d100      	bne.n	80079dc <_svfiprintf_r+0x14c>
 80079da:	e2ea      	b.n	8007fb2 <_svfiprintf_r+0x722>
 80079dc:	2330      	movs	r3, #48	; 0x30
 80079de:	1e95      	subs	r5, r2, #2
 80079e0:	702b      	strb	r3, [r5, #0]
 80079e2:	ab1c      	add	r3, sp, #112	; 0x70
 80079e4:	1b5b      	subs	r3, r3, r5
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	46da      	mov	sl, fp
 80079ec:	459b      	cmp	fp, r3
 80079ee:	da00      	bge.n	80079f2 <_svfiprintf_r+0x162>
 80079f0:	469a      	mov	sl, r3
 80079f2:	4643      	mov	r3, r8
 80079f4:	1e5a      	subs	r2, r3, #1
 80079f6:	4193      	sbcs	r3, r2
 80079f8:	449a      	add	sl, r3
 80079fa:	e118      	b.n	8007c2e <_svfiprintf_r+0x39e>
 80079fc:	2310      	movs	r3, #16
 80079fe:	431f      	orrs	r7, r3
 8007a00:	06bb      	lsls	r3, r7, #26
 8007a02:	d400      	bmi.n	8007a06 <_svfiprintf_r+0x176>
 8007a04:	e0b7      	b.n	8007b76 <_svfiprintf_r+0x2e6>
 8007a06:	2207      	movs	r2, #7
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	3201      	adds	r2, #1
 8007a10:	4694      	mov	ip, r2
 8007a12:	449c      	add	ip, r3
 8007a14:	4662      	mov	r2, ip
 8007a16:	9209      	str	r2, [sp, #36]	; 0x24
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	9206      	str	r2, [sp, #24]
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2300      	movs	r3, #0
 8007a24:	a90c      	add	r1, sp, #48	; 0x30
 8007a26:	71cb      	strb	r3, [r1, #7]
 8007a28:	465b      	mov	r3, fp
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	d0a9      	beq.n	8007982 <_svfiprintf_r+0xf2>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4698      	mov	r8, r3
 8007a32:	2380      	movs	r3, #128	; 0x80
 8007a34:	0039      	movs	r1, r7
 8007a36:	4399      	bics	r1, r3
 8007a38:	9102      	str	r1, [sp, #8]
 8007a3a:	9806      	ldr	r0, [sp, #24]
 8007a3c:	9907      	ldr	r1, [sp, #28]
 8007a3e:	0003      	movs	r3, r0
 8007a40:	430b      	orrs	r3, r1
 8007a42:	d1a1      	bne.n	8007988 <_svfiprintf_r+0xf8>
 8007a44:	465b      	mov	r3, fp
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d000      	beq.n	8007a4c <_svfiprintf_r+0x1bc>
 8007a4a:	e3b7      	b.n	80081bc <_svfiprintf_r+0x92c>
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	d000      	beq.n	8007a52 <_svfiprintf_r+0x1c2>
 8007a50:	e33d      	b.n	80080ce <_svfiprintf_r+0x83e>
 8007a52:	2001      	movs	r0, #1
 8007a54:	0003      	movs	r3, r0
 8007a56:	403b      	ands	r3, r7
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	ad1c      	add	r5, sp, #112	; 0x70
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0c3      	beq.n	80079e8 <_svfiprintf_r+0x158>
 8007a60:	2327      	movs	r3, #39	; 0x27
 8007a62:	2130      	movs	r1, #48	; 0x30
 8007a64:	aa12      	add	r2, sp, #72	; 0x48
 8007a66:	54d1      	strb	r1, [r2, r3]
 8007a68:	ab0c      	add	r3, sp, #48	; 0x30
 8007a6a:	253f      	movs	r5, #63	; 0x3f
 8007a6c:	469c      	mov	ip, r3
 8007a6e:	4465      	add	r5, ip
 8007a70:	e7ba      	b.n	80079e8 <_svfiprintf_r+0x158>
 8007a72:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a74:	9900      	ldr	r1, [sp, #0]
 8007a76:	9801      	ldr	r0, [sp, #4]
 8007a78:	f7ff fe7e 	bl	8007778 <__ssprint_r>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d10a      	bne.n	8007a96 <_svfiprintf_r+0x206>
 8007a80:	ae1c      	add	r6, sp, #112	; 0x70
 8007a82:	e73f      	b.n	8007904 <_svfiprintf_r+0x74>
 8007a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <_svfiprintf_r+0x206>
 8007a8c:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a8e:	9900      	ldr	r1, [sp, #0]
 8007a90:	9801      	ldr	r0, [sp, #4]
 8007a92:	f7ff fe71 	bl	8007778 <__ssprint_r>
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	899b      	ldrh	r3, [r3, #12]
 8007a9a:	065b      	lsls	r3, r3, #25
 8007a9c:	d500      	bpl.n	8007aa0 <_svfiprintf_r+0x210>
 8007a9e:	e3c3      	b.n	8008228 <_svfiprintf_r+0x998>
 8007aa0:	9808      	ldr	r0, [sp, #32]
 8007aa2:	b02d      	add	sp, #180	; 0xb4
 8007aa4:	bc3c      	pop	{r2, r3, r4, r5}
 8007aa6:	4690      	mov	r8, r2
 8007aa8:	4699      	mov	r9, r3
 8007aaa:	46a2      	mov	sl, r4
 8007aac:	46ab      	mov	fp, r5
 8007aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab0:	3b30      	subs	r3, #48	; 0x30
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	008b      	lsls	r3, r1, #2
 8007ab8:	185b      	adds	r3, r3, r1
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	18d1      	adds	r1, r2, r3
 8007abe:	7823      	ldrb	r3, [r4, #0]
 8007ac0:	1c65      	adds	r5, r4, #1
 8007ac2:	001a      	movs	r2, r3
 8007ac4:	3a30      	subs	r2, #48	; 0x30
 8007ac6:	002c      	movs	r4, r5
 8007ac8:	2a09      	cmp	r2, #9
 8007aca:	d9f4      	bls.n	8007ab6 <_svfiprintf_r+0x226>
 8007acc:	9105      	str	r1, [sp, #20]
 8007ace:	002c      	movs	r4, r5
 8007ad0:	001a      	movs	r2, r3
 8007ad2:	3a20      	subs	r2, #32
 8007ad4:	2a58      	cmp	r2, #88	; 0x58
 8007ad6:	d800      	bhi.n	8007ada <_svfiprintf_r+0x24a>
 8007ad8:	e736      	b.n	8007948 <_svfiprintf_r+0xb8>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d000      	beq.n	8007ae0 <_svfiprintf_r+0x250>
 8007ade:	e3c0      	b.n	8008262 <_svfiprintf_r+0x9d2>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0cf      	beq.n	8007a84 <_svfiprintf_r+0x1f4>
 8007ae4:	ad12      	add	r5, sp, #72	; 0x48
 8007ae6:	702b      	strb	r3, [r5, #0]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	aa0c      	add	r2, sp, #48	; 0x30
 8007aec:	71d3      	strb	r3, [r2, #7]
 8007aee:	3301      	adds	r3, #1
 8007af0:	469a      	mov	sl, r3
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	e098      	b.n	8007c28 <_svfiprintf_r+0x398>
 8007af6:	464b      	mov	r3, r9
 8007af8:	431f      	orrs	r7, r3
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	e71e      	b.n	800793c <_svfiprintf_r+0xac>
 8007afe:	7823      	ldrb	r3, [r4, #0]
 8007b00:	1c61      	adds	r1, r4, #1
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d100      	bne.n	8007b08 <_svfiprintf_r+0x278>
 8007b06:	e393      	b.n	8008230 <_svfiprintf_r+0x9a0>
 8007b08:	001a      	movs	r2, r3
 8007b0a:	2400      	movs	r4, #0
 8007b0c:	3a30      	subs	r2, #48	; 0x30
 8007b0e:	46a3      	mov	fp, r4
 8007b10:	000d      	movs	r5, r1
 8007b12:	2a09      	cmp	r2, #9
 8007b14:	d8db      	bhi.n	8007ace <_svfiprintf_r+0x23e>
 8007b16:	00a3      	lsls	r3, r4, #2
 8007b18:	191b      	adds	r3, r3, r4
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	189c      	adds	r4, r3, r2
 8007b1e:	780b      	ldrb	r3, [r1, #0]
 8007b20:	1c4d      	adds	r5, r1, #1
 8007b22:	001a      	movs	r2, r3
 8007b24:	3a30      	subs	r2, #48	; 0x30
 8007b26:	0029      	movs	r1, r5
 8007b28:	2a09      	cmp	r2, #9
 8007b2a:	d9f4      	bls.n	8007b16 <_svfiprintf_r+0x286>
 8007b2c:	46a3      	mov	fp, r4
 8007b2e:	002c      	movs	r4, r5
 8007b30:	e7ce      	b.n	8007ad0 <_svfiprintf_r+0x240>
 8007b32:	7823      	ldrb	r3, [r4, #0]
 8007b34:	2204      	movs	r2, #4
 8007b36:	4317      	orrs	r7, r2
 8007b38:	e700      	b.n	800793c <_svfiprintf_r+0xac>
 8007b3a:	222b      	movs	r2, #43	; 0x2b
 8007b3c:	7823      	ldrb	r3, [r4, #0]
 8007b3e:	2001      	movs	r0, #1
 8007b40:	4694      	mov	ip, r2
 8007b42:	e6fb      	b.n	800793c <_svfiprintf_r+0xac>
 8007b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b46:	7823      	ldrb	r3, [r4, #0]
 8007b48:	6811      	ldr	r1, [r2, #0]
 8007b4a:	3204      	adds	r2, #4
 8007b4c:	9105      	str	r1, [sp, #20]
 8007b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b50:	2900      	cmp	r1, #0
 8007b52:	db00      	blt.n	8007b56 <_svfiprintf_r+0x2c6>
 8007b54:	e6f2      	b.n	800793c <_svfiprintf_r+0xac>
 8007b56:	424a      	negs	r2, r1
 8007b58:	9205      	str	r2, [sp, #20]
 8007b5a:	e7eb      	b.n	8007b34 <_svfiprintf_r+0x2a4>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	431f      	orrs	r7, r3
 8007b60:	7823      	ldrb	r3, [r4, #0]
 8007b62:	e6eb      	b.n	800793c <_svfiprintf_r+0xac>
 8007b64:	4662      	mov	r2, ip
 8007b66:	7823      	ldrb	r3, [r4, #0]
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	d000      	beq.n	8007b6e <_svfiprintf_r+0x2de>
 8007b6c:	e6e6      	b.n	800793c <_svfiprintf_r+0xac>
 8007b6e:	3220      	adds	r2, #32
 8007b70:	2001      	movs	r0, #1
 8007b72:	4694      	mov	ip, r2
 8007b74:	e6e2      	b.n	800793c <_svfiprintf_r+0xac>
 8007b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b78:	ca08      	ldmia	r2!, {r3}
 8007b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7c:	06fa      	lsls	r2, r7, #27
 8007b7e:	d402      	bmi.n	8007b86 <_svfiprintf_r+0x2f6>
 8007b80:	067a      	lsls	r2, r7, #25
 8007b82:	d500      	bpl.n	8007b86 <_svfiprintf_r+0x2f6>
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	9306      	str	r3, [sp, #24]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	9307      	str	r3, [sp, #28]
 8007b8e:	e748      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007b90:	7823      	ldrb	r3, [r4, #0]
 8007b92:	2b6c      	cmp	r3, #108	; 0x6c
 8007b94:	d100      	bne.n	8007b98 <_svfiprintf_r+0x308>
 8007b96:	e2d2      	b.n	800813e <_svfiprintf_r+0x8ae>
 8007b98:	2210      	movs	r2, #16
 8007b9a:	4317      	orrs	r7, r2
 8007b9c:	e6ce      	b.n	800793c <_svfiprintf_r+0xac>
 8007b9e:	4653      	mov	r3, sl
 8007ba0:	431f      	orrs	r7, r3
 8007ba2:	7823      	ldrb	r3, [r4, #0]
 8007ba4:	e6ca      	b.n	800793c <_svfiprintf_r+0xac>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d000      	beq.n	8007bac <_svfiprintf_r+0x31c>
 8007baa:	e366      	b.n	800827a <_svfiprintf_r+0x9ea>
 8007bac:	06bb      	lsls	r3, r7, #26
 8007bae:	d400      	bmi.n	8007bb2 <_svfiprintf_r+0x322>
 8007bb0:	e1d8      	b.n	8007f64 <_svfiprintf_r+0x6d4>
 8007bb2:	2207      	movs	r2, #7
 8007bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	4393      	bics	r3, r2
 8007bba:	3201      	adds	r2, #1
 8007bbc:	4694      	mov	ip, r2
 8007bbe:	449c      	add	ip, r3
 8007bc0:	4662      	mov	r2, ip
 8007bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	9206      	str	r2, [sp, #24]
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	9b07      	ldr	r3, [sp, #28]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da00      	bge.n	8007bd4 <_svfiprintf_r+0x344>
 8007bd2:	e28b      	b.n	80080ec <_svfiprintf_r+0x85c>
 8007bd4:	ab0c      	add	r3, sp, #48	; 0x30
 8007bd6:	79db      	ldrb	r3, [r3, #7]
 8007bd8:	4698      	mov	r8, r3
 8007bda:	465b      	mov	r3, fp
 8007bdc:	2201      	movs	r2, #1
 8007bde:	3301      	adds	r3, #1
 8007be0:	d000      	beq.n	8007be4 <_svfiprintf_r+0x354>
 8007be2:	e726      	b.n	8007a32 <_svfiprintf_r+0x1a2>
 8007be4:	9702      	str	r7, [sp, #8]
 8007be6:	9a06      	ldr	r2, [sp, #24]
 8007be8:	9b07      	ldr	r3, [sp, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d000      	beq.n	8007bf0 <_svfiprintf_r+0x360>
 8007bee:	e2be      	b.n	800816e <_svfiprintf_r+0x8de>
 8007bf0:	2a09      	cmp	r2, #9
 8007bf2:	d900      	bls.n	8007bf6 <_svfiprintf_r+0x366>
 8007bf4:	e2bb      	b.n	800816e <_svfiprintf_r+0x8de>
 8007bf6:	2227      	movs	r2, #39	; 0x27
 8007bf8:	9b06      	ldr	r3, [sp, #24]
 8007bfa:	a912      	add	r1, sp, #72	; 0x48
 8007bfc:	3330      	adds	r3, #48	; 0x30
 8007bfe:	548b      	strb	r3, [r1, r2]
 8007c00:	2301      	movs	r3, #1
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	ab0c      	add	r3, sp, #48	; 0x30
 8007c06:	253f      	movs	r5, #63	; 0x3f
 8007c08:	469c      	mov	ip, r3
 8007c0a:	4465      	add	r5, ip
 8007c0c:	e6ec      	b.n	80079e8 <_svfiprintf_r+0x158>
 8007c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c10:	ad12      	add	r5, sp, #72	; 0x48
 8007c12:	6813      	ldr	r3, [r2, #0]
 8007c14:	a90c      	add	r1, sp, #48	; 0x30
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	702b      	strb	r3, [r5, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	71cb      	strb	r3, [r1, #7]
 8007c1e:	1d13      	adds	r3, r2, #4
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	2301      	movs	r3, #1
 8007c24:	469a      	mov	sl, r3
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	469b      	mov	fp, r3
 8007c2c:	9702      	str	r7, [sp, #8]
 8007c2e:	2302      	movs	r3, #2
 8007c30:	9a02      	ldr	r2, [sp, #8]
 8007c32:	401a      	ands	r2, r3
 8007c34:	4691      	mov	r9, r2
 8007c36:	d002      	beq.n	8007c3e <_svfiprintf_r+0x3ae>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	469c      	mov	ip, r3
 8007c3c:	44e2      	add	sl, ip
 8007c3e:	2384      	movs	r3, #132	; 0x84
 8007c40:	9a02      	ldr	r2, [sp, #8]
 8007c42:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007c44:	401a      	ands	r2, r3
 8007c46:	920a      	str	r2, [sp, #40]	; 0x28
 8007c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4a:	d138      	bne.n	8007cbe <_svfiprintf_r+0x42e>
 8007c4c:	4651      	mov	r1, sl
 8007c4e:	9a05      	ldr	r2, [sp, #20]
 8007c50:	1a57      	subs	r7, r2, r1
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	dd33      	ble.n	8007cbe <_svfiprintf_r+0x42e>
 8007c56:	4a04      	ldr	r2, [pc, #16]	; (8007c68 <_svfiprintf_r+0x3d8>)
 8007c58:	4690      	mov	r8, r2
 8007c5a:	2f10      	cmp	r7, #16
 8007c5c:	dd24      	ble.n	8007ca8 <_svfiprintf_r+0x418>
 8007c5e:	46a0      	mov	r8, r4
 8007c60:	0014      	movs	r4, r2
 8007c62:	e007      	b.n	8007c74 <_svfiprintf_r+0x3e4>
 8007c64:	08016e4c 	.word	0x08016e4c
 8007c68:	08016fb0 	.word	0x08016fb0
 8007c6c:	3f10      	subs	r7, #16
 8007c6e:	3608      	adds	r6, #8
 8007c70:	2f10      	cmp	r7, #16
 8007c72:	dd16      	ble.n	8007ca2 <_svfiprintf_r+0x412>
 8007c74:	2210      	movs	r2, #16
 8007c76:	3010      	adds	r0, #16
 8007c78:	3301      	adds	r3, #1
 8007c7a:	6034      	str	r4, [r6, #0]
 8007c7c:	6072      	str	r2, [r6, #4]
 8007c7e:	9011      	str	r0, [sp, #68]	; 0x44
 8007c80:	9310      	str	r3, [sp, #64]	; 0x40
 8007c82:	2b07      	cmp	r3, #7
 8007c84:	ddf2      	ble.n	8007c6c <_svfiprintf_r+0x3dc>
 8007c86:	aa0f      	add	r2, sp, #60	; 0x3c
 8007c88:	9900      	ldr	r1, [sp, #0]
 8007c8a:	9801      	ldr	r0, [sp, #4]
 8007c8c:	f7ff fd74 	bl	8007778 <__ssprint_r>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d000      	beq.n	8007c96 <_svfiprintf_r+0x406>
 8007c94:	e6ff      	b.n	8007a96 <_svfiprintf_r+0x206>
 8007c96:	3f10      	subs	r7, #16
 8007c98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c9c:	ae1c      	add	r6, sp, #112	; 0x70
 8007c9e:	2f10      	cmp	r7, #16
 8007ca0:	dce8      	bgt.n	8007c74 <_svfiprintf_r+0x3e4>
 8007ca2:	0022      	movs	r2, r4
 8007ca4:	4644      	mov	r4, r8
 8007ca6:	4690      	mov	r8, r2
 8007ca8:	4642      	mov	r2, r8
 8007caa:	19c0      	adds	r0, r0, r7
 8007cac:	3301      	adds	r3, #1
 8007cae:	6032      	str	r2, [r6, #0]
 8007cb0:	6077      	str	r7, [r6, #4]
 8007cb2:	9011      	str	r0, [sp, #68]	; 0x44
 8007cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8007cb6:	2b07      	cmp	r3, #7
 8007cb8:	dd00      	ble.n	8007cbc <_svfiprintf_r+0x42c>
 8007cba:	e223      	b.n	8008104 <_svfiprintf_r+0x874>
 8007cbc:	3608      	adds	r6, #8
 8007cbe:	0032      	movs	r2, r6
 8007cc0:	af0c      	add	r7, sp, #48	; 0x30
 8007cc2:	79ff      	ldrb	r7, [r7, #7]
 8007cc4:	3208      	adds	r2, #8
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	9203      	str	r2, [sp, #12]
 8007cca:	2f00      	cmp	r7, #0
 8007ccc:	d012      	beq.n	8007cf4 <_svfiprintf_r+0x464>
 8007cce:	2701      	movs	r7, #1
 8007cd0:	aa0c      	add	r2, sp, #48	; 0x30
 8007cd2:	3207      	adds	r2, #7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	6032      	str	r2, [r6, #0]
 8007cd8:	6077      	str	r7, [r6, #4]
 8007cda:	9011      	str	r0, [sp, #68]	; 0x44
 8007cdc:	9110      	str	r1, [sp, #64]	; 0x40
 8007cde:	2907      	cmp	r1, #7
 8007ce0:	dd00      	ble.n	8007ce4 <_svfiprintf_r+0x454>
 8007ce2:	e1c7      	b.n	8008074 <_svfiprintf_r+0x7e4>
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	469c      	mov	ip, r3
 8007ce8:	3610      	adds	r6, #16
 8007cea:	0037      	movs	r7, r6
 8007cec:	000b      	movs	r3, r1
 8007cee:	4661      	mov	r1, ip
 8007cf0:	9e03      	ldr	r6, [sp, #12]
 8007cf2:	9703      	str	r7, [sp, #12]
 8007cf4:	464f      	mov	r7, r9
 8007cf6:	2f00      	cmp	r7, #0
 8007cf8:	d00f      	beq.n	8007d1a <_svfiprintf_r+0x48a>
 8007cfa:	ab0e      	add	r3, sp, #56	; 0x38
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	2302      	movs	r3, #2
 8007d00:	3002      	adds	r0, #2
 8007d02:	6073      	str	r3, [r6, #4]
 8007d04:	9011      	str	r0, [sp, #68]	; 0x44
 8007d06:	9110      	str	r1, [sp, #64]	; 0x40
 8007d08:	2907      	cmp	r1, #7
 8007d0a:	dd00      	ble.n	8007d0e <_svfiprintf_r+0x47e>
 8007d0c:	e1c1      	b.n	8008092 <_svfiprintf_r+0x802>
 8007d0e:	9a03      	ldr	r2, [sp, #12]
 8007d10:	000b      	movs	r3, r1
 8007d12:	0016      	movs	r6, r2
 8007d14:	3208      	adds	r2, #8
 8007d16:	3101      	adds	r1, #1
 8007d18:	9203      	str	r2, [sp, #12]
 8007d1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007d1c:	2f80      	cmp	r7, #128	; 0x80
 8007d1e:	d100      	bne.n	8007d22 <_svfiprintf_r+0x492>
 8007d20:	e14b      	b.n	8007fba <_svfiprintf_r+0x72a>
 8007d22:	465f      	mov	r7, fp
 8007d24:	9a04      	ldr	r2, [sp, #16]
 8007d26:	1abf      	subs	r7, r7, r2
 8007d28:	2f00      	cmp	r7, #0
 8007d2a:	dd34      	ble.n	8007d96 <_svfiprintf_r+0x506>
 8007d2c:	2f10      	cmp	r7, #16
 8007d2e:	dc00      	bgt.n	8007d32 <_svfiprintf_r+0x4a2>
 8007d30:	e258      	b.n	80081e4 <_svfiprintf_r+0x954>
 8007d32:	4acb      	ldr	r2, [pc, #812]	; (8008060 <_svfiprintf_r+0x7d0>)
 8007d34:	4690      	mov	r8, r2
 8007d36:	2210      	movs	r2, #16
 8007d38:	4691      	mov	r9, r2
 8007d3a:	e003      	b.n	8007d44 <_svfiprintf_r+0x4b4>
 8007d3c:	3f10      	subs	r7, #16
 8007d3e:	3608      	adds	r6, #8
 8007d40:	2f10      	cmp	r7, #16
 8007d42:	dd17      	ble.n	8007d74 <_svfiprintf_r+0x4e4>
 8007d44:	4ac7      	ldr	r2, [pc, #796]	; (8008064 <_svfiprintf_r+0x7d4>)
 8007d46:	3010      	adds	r0, #16
 8007d48:	6032      	str	r2, [r6, #0]
 8007d4a:	464a      	mov	r2, r9
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	6072      	str	r2, [r6, #4]
 8007d50:	9011      	str	r0, [sp, #68]	; 0x44
 8007d52:	9310      	str	r3, [sp, #64]	; 0x40
 8007d54:	2b07      	cmp	r3, #7
 8007d56:	ddf1      	ble.n	8007d3c <_svfiprintf_r+0x4ac>
 8007d58:	aa0f      	add	r2, sp, #60	; 0x3c
 8007d5a:	9900      	ldr	r1, [sp, #0]
 8007d5c:	9801      	ldr	r0, [sp, #4]
 8007d5e:	f7ff fd0b 	bl	8007778 <__ssprint_r>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d000      	beq.n	8007d68 <_svfiprintf_r+0x4d8>
 8007d66:	e696      	b.n	8007a96 <_svfiprintf_r+0x206>
 8007d68:	3f10      	subs	r7, #16
 8007d6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d6e:	ae1c      	add	r6, sp, #112	; 0x70
 8007d70:	2f10      	cmp	r7, #16
 8007d72:	dce7      	bgt.n	8007d44 <_svfiprintf_r+0x4b4>
 8007d74:	1c59      	adds	r1, r3, #1
 8007d76:	0033      	movs	r3, r6
 8007d78:	3308      	adds	r3, #8
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	19c0      	adds	r0, r0, r7
 8007d7e:	3210      	adds	r2, #16
 8007d80:	c684      	stmia	r6!, {r2, r7}
 8007d82:	9011      	str	r0, [sp, #68]	; 0x44
 8007d84:	9110      	str	r1, [sp, #64]	; 0x40
 8007d86:	2907      	cmp	r1, #7
 8007d88:	dd00      	ble.n	8007d8c <_svfiprintf_r+0x4fc>
 8007d8a:	e191      	b.n	80080b0 <_svfiprintf_r+0x820>
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	001e      	movs	r6, r3
 8007d90:	3208      	adds	r2, #8
 8007d92:	3101      	adds	r1, #1
 8007d94:	9203      	str	r2, [sp, #12]
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	6035      	str	r5, [r6, #0]
 8007d9a:	469c      	mov	ip, r3
 8007d9c:	4460      	add	r0, ip
 8007d9e:	6073      	str	r3, [r6, #4]
 8007da0:	9011      	str	r0, [sp, #68]	; 0x44
 8007da2:	9110      	str	r1, [sp, #64]	; 0x40
 8007da4:	2907      	cmp	r1, #7
 8007da6:	dd00      	ble.n	8007daa <_svfiprintf_r+0x51a>
 8007da8:	e144      	b.n	8008034 <_svfiprintf_r+0x7a4>
 8007daa:	9b02      	ldr	r3, [sp, #8]
 8007dac:	075b      	lsls	r3, r3, #29
 8007dae:	d533      	bpl.n	8007e18 <_svfiprintf_r+0x588>
 8007db0:	4652      	mov	r2, sl
 8007db2:	9b05      	ldr	r3, [sp, #20]
 8007db4:	1a9d      	subs	r5, r3, r2
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	dd2e      	ble.n	8007e18 <_svfiprintf_r+0x588>
 8007dba:	4aa9      	ldr	r2, [pc, #676]	; (8008060 <_svfiprintf_r+0x7d0>)
 8007dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dbe:	4690      	mov	r8, r2
 8007dc0:	2d10      	cmp	r5, #16
 8007dc2:	dd1e      	ble.n	8007e02 <_svfiprintf_r+0x572>
 8007dc4:	2610      	movs	r6, #16
 8007dc6:	9a03      	ldr	r2, [sp, #12]
 8007dc8:	e003      	b.n	8007dd2 <_svfiprintf_r+0x542>
 8007dca:	3d10      	subs	r5, #16
 8007dcc:	3208      	adds	r2, #8
 8007dce:	2d10      	cmp	r5, #16
 8007dd0:	dd16      	ble.n	8007e00 <_svfiprintf_r+0x570>
 8007dd2:	49a3      	ldr	r1, [pc, #652]	; (8008060 <_svfiprintf_r+0x7d0>)
 8007dd4:	3010      	adds	r0, #16
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	6011      	str	r1, [r2, #0]
 8007dda:	6056      	str	r6, [r2, #4]
 8007ddc:	9011      	str	r0, [sp, #68]	; 0x44
 8007dde:	9310      	str	r3, [sp, #64]	; 0x40
 8007de0:	2b07      	cmp	r3, #7
 8007de2:	ddf2      	ble.n	8007dca <_svfiprintf_r+0x53a>
 8007de4:	aa0f      	add	r2, sp, #60	; 0x3c
 8007de6:	9900      	ldr	r1, [sp, #0]
 8007de8:	9801      	ldr	r0, [sp, #4]
 8007dea:	f7ff fcc5 	bl	8007778 <__ssprint_r>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d000      	beq.n	8007df4 <_svfiprintf_r+0x564>
 8007df2:	e650      	b.n	8007a96 <_svfiprintf_r+0x206>
 8007df4:	3d10      	subs	r5, #16
 8007df6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dfa:	aa1c      	add	r2, sp, #112	; 0x70
 8007dfc:	2d10      	cmp	r5, #16
 8007dfe:	dce8      	bgt.n	8007dd2 <_svfiprintf_r+0x542>
 8007e00:	9203      	str	r2, [sp, #12]
 8007e02:	4642      	mov	r2, r8
 8007e04:	9903      	ldr	r1, [sp, #12]
 8007e06:	1940      	adds	r0, r0, r5
 8007e08:	3301      	adds	r3, #1
 8007e0a:	600a      	str	r2, [r1, #0]
 8007e0c:	604d      	str	r5, [r1, #4]
 8007e0e:	9011      	str	r0, [sp, #68]	; 0x44
 8007e10:	9310      	str	r3, [sp, #64]	; 0x40
 8007e12:	2b07      	cmp	r3, #7
 8007e14:	dd00      	ble.n	8007e18 <_svfiprintf_r+0x588>
 8007e16:	e181      	b.n	800811c <_svfiprintf_r+0x88c>
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	4553      	cmp	r3, sl
 8007e1c:	da00      	bge.n	8007e20 <_svfiprintf_r+0x590>
 8007e1e:	4653      	mov	r3, sl
 8007e20:	9a08      	ldr	r2, [sp, #32]
 8007e22:	4694      	mov	ip, r2
 8007e24:	449c      	add	ip, r3
 8007e26:	4663      	mov	r3, ip
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d000      	beq.n	8007e30 <_svfiprintf_r+0x5a0>
 8007e2e:	e10d      	b.n	800804c <_svfiprintf_r+0x7bc>
 8007e30:	2300      	movs	r3, #0
 8007e32:	ae1c      	add	r6, sp, #112	; 0x70
 8007e34:	9310      	str	r3, [sp, #64]	; 0x40
 8007e36:	e548      	b.n	80078ca <_svfiprintf_r+0x3a>
 8007e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	681d      	ldr	r5, [r3, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4691      	mov	r9, r2
 8007e42:	aa0c      	add	r2, sp, #48	; 0x30
 8007e44:	71d3      	strb	r3, [r2, #7]
 8007e46:	465b      	mov	r3, fp
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	d100      	bne.n	8007e4e <_svfiprintf_r+0x5be>
 8007e4c:	e1ce      	b.n	80081ec <_svfiprintf_r+0x95c>
 8007e4e:	3301      	adds	r3, #1
 8007e50:	d100      	bne.n	8007e54 <_svfiprintf_r+0x5c4>
 8007e52:	e187      	b.n	8008164 <_svfiprintf_r+0x8d4>
 8007e54:	465a      	mov	r2, fp
 8007e56:	2100      	movs	r1, #0
 8007e58:	0028      	movs	r0, r5
 8007e5a:	f7fd f9f7 	bl	800524c <memchr>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d100      	bne.n	8007e64 <_svfiprintf_r+0x5d4>
 8007e62:	e1d5      	b.n	8008210 <_svfiprintf_r+0x980>
 8007e64:	1b43      	subs	r3, r0, r5
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	ab0c      	add	r3, sp, #48	; 0x30
 8007e6a:	79db      	ldrb	r3, [r3, #7]
 8007e6c:	9702      	str	r7, [sp, #8]
 8007e6e:	4698      	mov	r8, r3
 8007e70:	464b      	mov	r3, r9
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	2300      	movs	r3, #0
 8007e76:	469b      	mov	fp, r3
 8007e78:	e5b6      	b.n	80079e8 <_svfiprintf_r+0x158>
 8007e7a:	4643      	mov	r3, r8
 8007e7c:	431f      	orrs	r7, r3
 8007e7e:	7823      	ldrb	r3, [r4, #0]
 8007e80:	e55c      	b.n	800793c <_svfiprintf_r+0xac>
 8007e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e84:	4a78      	ldr	r2, [pc, #480]	; (8008068 <_svfiprintf_r+0x7d8>)
 8007e86:	680b      	ldr	r3, [r1, #0]
 8007e88:	9306      	str	r3, [sp, #24]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	431f      	orrs	r7, r3
 8007e92:	ab0e      	add	r3, sp, #56	; 0x38
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	1d0b      	adds	r3, r1, #4
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	4b74      	ldr	r3, [pc, #464]	; (800806c <_svfiprintf_r+0x7dc>)
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ea0:	e5bf      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d000      	beq.n	8007ea8 <_svfiprintf_r+0x618>
 8007ea6:	e1ec      	b.n	8008282 <_svfiprintf_r+0x9f2>
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	1d1a      	adds	r2, r3, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	06b9      	lsls	r1, r7, #26
 8007eb0:	d500      	bpl.n	8007eb4 <_svfiprintf_r+0x624>
 8007eb2:	e13d      	b.n	8008130 <_svfiprintf_r+0x8a0>
 8007eb4:	06f9      	lsls	r1, r7, #27
 8007eb6:	d500      	bpl.n	8007eba <_svfiprintf_r+0x62a>
 8007eb8:	e17b      	b.n	80081b2 <_svfiprintf_r+0x922>
 8007eba:	0679      	lsls	r1, r7, #25
 8007ebc:	d400      	bmi.n	8007ec0 <_svfiprintf_r+0x630>
 8007ebe:	e178      	b.n	80081b2 <_svfiprintf_r+0x922>
 8007ec0:	9908      	ldr	r1, [sp, #32]
 8007ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec4:	8019      	strh	r1, [r3, #0]
 8007ec6:	e500      	b.n	80078ca <_svfiprintf_r+0x3a>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d000      	beq.n	8007ece <_svfiprintf_r+0x63e>
 8007ecc:	e1d1      	b.n	8008272 <_svfiprintf_r+0x9e2>
 8007ece:	4a67      	ldr	r2, [pc, #412]	; (800806c <_svfiprintf_r+0x7dc>)
 8007ed0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ed2:	06ba      	lsls	r2, r7, #26
 8007ed4:	d530      	bpl.n	8007f38 <_svfiprintf_r+0x6a8>
 8007ed6:	2107      	movs	r1, #7
 8007ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eda:	3207      	adds	r2, #7
 8007edc:	438a      	bics	r2, r1
 8007ede:	3101      	adds	r1, #1
 8007ee0:	468c      	mov	ip, r1
 8007ee2:	4494      	add	ip, r2
 8007ee4:	4661      	mov	r1, ip
 8007ee6:	9109      	str	r1, [sp, #36]	; 0x24
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	6852      	ldr	r2, [r2, #4]
 8007eec:	9106      	str	r1, [sp, #24]
 8007eee:	9207      	str	r2, [sp, #28]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	07f9      	lsls	r1, r7, #31
 8007ef4:	d400      	bmi.n	8007ef8 <_svfiprintf_r+0x668>
 8007ef6:	e594      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007ef8:	9806      	ldr	r0, [sp, #24]
 8007efa:	9907      	ldr	r1, [sp, #28]
 8007efc:	0005      	movs	r5, r0
 8007efe:	430d      	orrs	r5, r1
 8007f00:	d100      	bne.n	8007f04 <_svfiprintf_r+0x674>
 8007f02:	e58e      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007f04:	2030      	movs	r0, #48	; 0x30
 8007f06:	a90e      	add	r1, sp, #56	; 0x38
 8007f08:	7008      	strb	r0, [r1, #0]
 8007f0a:	704b      	strb	r3, [r1, #1]
 8007f0c:	4317      	orrs	r7, r2
 8007f0e:	e588      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f12:	ca08      	ldmia	r2!, {r3}
 8007f14:	9209      	str	r2, [sp, #36]	; 0x24
 8007f16:	06fa      	lsls	r2, r7, #27
 8007f18:	d402      	bmi.n	8007f20 <_svfiprintf_r+0x690>
 8007f1a:	067a      	lsls	r2, r7, #25
 8007f1c:	d500      	bpl.n	8007f20 <_svfiprintf_r+0x690>
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	2300      	movs	r3, #0
 8007f24:	2201      	movs	r2, #1
 8007f26:	9307      	str	r3, [sp, #28]
 8007f28:	e57b      	b.n	8007a22 <_svfiprintf_r+0x192>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d000      	beq.n	8007f30 <_svfiprintf_r+0x6a0>
 8007f2e:	e19c      	b.n	800826a <_svfiprintf_r+0x9da>
 8007f30:	4a4f      	ldr	r2, [pc, #316]	; (8008070 <_svfiprintf_r+0x7e0>)
 8007f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f34:	06ba      	lsls	r2, r7, #26
 8007f36:	d4ce      	bmi.n	8007ed6 <_svfiprintf_r+0x646>
 8007f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f3a:	c904      	ldmia	r1!, {r2}
 8007f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f3e:	06f9      	lsls	r1, r7, #27
 8007f40:	d500      	bpl.n	8007f44 <_svfiprintf_r+0x6b4>
 8007f42:	e0c8      	b.n	80080d6 <_svfiprintf_r+0x846>
 8007f44:	0679      	lsls	r1, r7, #25
 8007f46:	d400      	bmi.n	8007f4a <_svfiprintf_r+0x6ba>
 8007f48:	e0c5      	b.n	80080d6 <_svfiprintf_r+0x846>
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	9206      	str	r2, [sp, #24]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	9207      	str	r2, [sp, #28]
 8007f52:	e7cd      	b.n	8007ef0 <_svfiprintf_r+0x660>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d000      	beq.n	8007f5a <_svfiprintf_r+0x6ca>
 8007f58:	e17f      	b.n	800825a <_svfiprintf_r+0x9ca>
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	431f      	orrs	r7, r3
 8007f5e:	06bb      	lsls	r3, r7, #26
 8007f60:	d500      	bpl.n	8007f64 <_svfiprintf_r+0x6d4>
 8007f62:	e626      	b.n	8007bb2 <_svfiprintf_r+0x322>
 8007f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f66:	ca08      	ldmia	r2!, {r3}
 8007f68:	9209      	str	r2, [sp, #36]	; 0x24
 8007f6a:	06fa      	lsls	r2, r7, #27
 8007f6c:	d500      	bpl.n	8007f70 <_svfiprintf_r+0x6e0>
 8007f6e:	e0b6      	b.n	80080de <_svfiprintf_r+0x84e>
 8007f70:	067a      	lsls	r2, r7, #25
 8007f72:	d400      	bmi.n	8007f76 <_svfiprintf_r+0x6e6>
 8007f74:	e0b3      	b.n	80080de <_svfiprintf_r+0x84e>
 8007f76:	b21b      	sxth	r3, r3
 8007f78:	9306      	str	r3, [sp, #24]
 8007f7a:	17db      	asrs	r3, r3, #31
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	e625      	b.n	8007bcc <_svfiprintf_r+0x33c>
 8007f80:	200f      	movs	r0, #15
 8007f82:	9a06      	ldr	r2, [sp, #24]
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	46b4      	mov	ip, r6
 8007f88:	46a1      	mov	r9, r4
 8007f8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f8c:	ad1c      	add	r5, sp, #112	; 0x70
 8007f8e:	0001      	movs	r1, r0
 8007f90:	4011      	ands	r1, r2
 8007f92:	5c61      	ldrb	r1, [r4, r1]
 8007f94:	071e      	lsls	r6, r3, #28
 8007f96:	0917      	lsrs	r7, r2, #4
 8007f98:	3d01      	subs	r5, #1
 8007f9a:	433e      	orrs	r6, r7
 8007f9c:	7029      	strb	r1, [r5, #0]
 8007f9e:	0919      	lsrs	r1, r3, #4
 8007fa0:	000b      	movs	r3, r1
 8007fa2:	0031      	movs	r1, r6
 8007fa4:	0032      	movs	r2, r6
 8007fa6:	4319      	orrs	r1, r3
 8007fa8:	d1f1      	bne.n	8007f8e <_svfiprintf_r+0x6fe>
 8007faa:	4666      	mov	r6, ip
 8007fac:	464c      	mov	r4, r9
 8007fae:	9206      	str	r2, [sp, #24]
 8007fb0:	9307      	str	r3, [sp, #28]
 8007fb2:	ab1c      	add	r3, sp, #112	; 0x70
 8007fb4:	1b5b      	subs	r3, r3, r5
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	e516      	b.n	80079e8 <_svfiprintf_r+0x158>
 8007fba:	4657      	mov	r7, sl
 8007fbc:	9a05      	ldr	r2, [sp, #20]
 8007fbe:	1bd7      	subs	r7, r2, r7
 8007fc0:	2f00      	cmp	r7, #0
 8007fc2:	dc00      	bgt.n	8007fc6 <_svfiprintf_r+0x736>
 8007fc4:	e6ad      	b.n	8007d22 <_svfiprintf_r+0x492>
 8007fc6:	2f10      	cmp	r7, #16
 8007fc8:	dc00      	bgt.n	8007fcc <_svfiprintf_r+0x73c>
 8007fca:	e11b      	b.n	8008204 <_svfiprintf_r+0x974>
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <_svfiprintf_r+0x7d0>)
 8007fce:	4690      	mov	r8, r2
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	4691      	mov	r9, r2
 8007fd4:	e003      	b.n	8007fde <_svfiprintf_r+0x74e>
 8007fd6:	3f10      	subs	r7, #16
 8007fd8:	3608      	adds	r6, #8
 8007fda:	2f10      	cmp	r7, #16
 8007fdc:	dd17      	ble.n	800800e <_svfiprintf_r+0x77e>
 8007fde:	4a21      	ldr	r2, [pc, #132]	; (8008064 <_svfiprintf_r+0x7d4>)
 8007fe0:	3010      	adds	r0, #16
 8007fe2:	6032      	str	r2, [r6, #0]
 8007fe4:	464a      	mov	r2, r9
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	6072      	str	r2, [r6, #4]
 8007fea:	9011      	str	r0, [sp, #68]	; 0x44
 8007fec:	9310      	str	r3, [sp, #64]	; 0x40
 8007fee:	2b07      	cmp	r3, #7
 8007ff0:	ddf1      	ble.n	8007fd6 <_svfiprintf_r+0x746>
 8007ff2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ff4:	9900      	ldr	r1, [sp, #0]
 8007ff6:	9801      	ldr	r0, [sp, #4]
 8007ff8:	f7ff fbbe 	bl	8007778 <__ssprint_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d000      	beq.n	8008002 <_svfiprintf_r+0x772>
 8008000:	e549      	b.n	8007a96 <_svfiprintf_r+0x206>
 8008002:	3f10      	subs	r7, #16
 8008004:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008008:	ae1c      	add	r6, sp, #112	; 0x70
 800800a:	2f10      	cmp	r7, #16
 800800c:	dce7      	bgt.n	8007fde <_svfiprintf_r+0x74e>
 800800e:	2208      	movs	r2, #8
 8008010:	4694      	mov	ip, r2
 8008012:	3301      	adds	r3, #1
 8008014:	44b4      	add	ip, r6
 8008016:	4642      	mov	r2, r8
 8008018:	19c0      	adds	r0, r0, r7
 800801a:	3210      	adds	r2, #16
 800801c:	c684      	stmia	r6!, {r2, r7}
 800801e:	9011      	str	r0, [sp, #68]	; 0x44
 8008020:	9310      	str	r3, [sp, #64]	; 0x40
 8008022:	2b07      	cmp	r3, #7
 8008024:	dd00      	ble.n	8008028 <_svfiprintf_r+0x798>
 8008026:	e0ce      	b.n	80081c6 <_svfiprintf_r+0x936>
 8008028:	4662      	mov	r2, ip
 800802a:	3208      	adds	r2, #8
 800802c:	1c59      	adds	r1, r3, #1
 800802e:	9203      	str	r2, [sp, #12]
 8008030:	4666      	mov	r6, ip
 8008032:	e676      	b.n	8007d22 <_svfiprintf_r+0x492>
 8008034:	aa0f      	add	r2, sp, #60	; 0x3c
 8008036:	9900      	ldr	r1, [sp, #0]
 8008038:	9801      	ldr	r0, [sp, #4]
 800803a:	f7ff fb9d 	bl	8007778 <__ssprint_r>
 800803e:	2800      	cmp	r0, #0
 8008040:	d000      	beq.n	8008044 <_svfiprintf_r+0x7b4>
 8008042:	e528      	b.n	8007a96 <_svfiprintf_r+0x206>
 8008044:	aa1c      	add	r2, sp, #112	; 0x70
 8008046:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008048:	9203      	str	r2, [sp, #12]
 800804a:	e6ae      	b.n	8007daa <_svfiprintf_r+0x51a>
 800804c:	aa0f      	add	r2, sp, #60	; 0x3c
 800804e:	9900      	ldr	r1, [sp, #0]
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	f7ff fb91 	bl	8007778 <__ssprint_r>
 8008056:	2800      	cmp	r0, #0
 8008058:	d100      	bne.n	800805c <_svfiprintf_r+0x7cc>
 800805a:	e6e9      	b.n	8007e30 <_svfiprintf_r+0x5a0>
 800805c:	e51b      	b.n	8007a96 <_svfiprintf_r+0x206>
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	08016fb0 	.word	0x08016fb0
 8008064:	08016fc0 	.word	0x08016fc0
 8008068:	00007830 	.word	0x00007830
 800806c:	08018b78 	.word	0x08018b78
 8008070:	08018b64 	.word	0x08018b64
 8008074:	aa0f      	add	r2, sp, #60	; 0x3c
 8008076:	9900      	ldr	r1, [sp, #0]
 8008078:	9801      	ldr	r0, [sp, #4]
 800807a:	f7ff fb7d 	bl	8007778 <__ssprint_r>
 800807e:	2800      	cmp	r0, #0
 8008080:	d000      	beq.n	8008084 <_svfiprintf_r+0x7f4>
 8008082:	e508      	b.n	8007a96 <_svfiprintf_r+0x206>
 8008084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008086:	aa1e      	add	r2, sp, #120	; 0x78
 8008088:	9811      	ldr	r0, [sp, #68]	; 0x44
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	9203      	str	r2, [sp, #12]
 800808e:	ae1c      	add	r6, sp, #112	; 0x70
 8008090:	e630      	b.n	8007cf4 <_svfiprintf_r+0x464>
 8008092:	aa0f      	add	r2, sp, #60	; 0x3c
 8008094:	9900      	ldr	r1, [sp, #0]
 8008096:	9801      	ldr	r0, [sp, #4]
 8008098:	f7ff fb6e 	bl	8007778 <__ssprint_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	d000      	beq.n	80080a2 <_svfiprintf_r+0x812>
 80080a0:	e4f9      	b.n	8007a96 <_svfiprintf_r+0x206>
 80080a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a4:	aa1e      	add	r2, sp, #120	; 0x78
 80080a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80080a8:	1c59      	adds	r1, r3, #1
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	ae1c      	add	r6, sp, #112	; 0x70
 80080ae:	e634      	b.n	8007d1a <_svfiprintf_r+0x48a>
 80080b0:	aa0f      	add	r2, sp, #60	; 0x3c
 80080b2:	9900      	ldr	r1, [sp, #0]
 80080b4:	9801      	ldr	r0, [sp, #4]
 80080b6:	f7ff fb5f 	bl	8007778 <__ssprint_r>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d000      	beq.n	80080c0 <_svfiprintf_r+0x830>
 80080be:	e4ea      	b.n	8007a96 <_svfiprintf_r+0x206>
 80080c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80080c4:	1c59      	adds	r1, r3, #1
 80080c6:	ab1e      	add	r3, sp, #120	; 0x78
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	ae1c      	add	r6, sp, #112	; 0x70
 80080cc:	e663      	b.n	8007d96 <_svfiprintf_r+0x506>
 80080ce:	2300      	movs	r3, #0
 80080d0:	ad1c      	add	r5, sp, #112	; 0x70
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	e488      	b.n	80079e8 <_svfiprintf_r+0x158>
 80080d6:	9206      	str	r2, [sp, #24]
 80080d8:	2200      	movs	r2, #0
 80080da:	9207      	str	r2, [sp, #28]
 80080dc:	e708      	b.n	8007ef0 <_svfiprintf_r+0x660>
 80080de:	9306      	str	r3, [sp, #24]
 80080e0:	17db      	asrs	r3, r3, #31
 80080e2:	9307      	str	r3, [sp, #28]
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	db00      	blt.n	80080ec <_svfiprintf_r+0x85c>
 80080ea:	e573      	b.n	8007bd4 <_svfiprintf_r+0x344>
 80080ec:	9806      	ldr	r0, [sp, #24]
 80080ee:	9907      	ldr	r1, [sp, #28]
 80080f0:	2300      	movs	r3, #0
 80080f2:	4242      	negs	r2, r0
 80080f4:	418b      	sbcs	r3, r1
 80080f6:	9206      	str	r2, [sp, #24]
 80080f8:	9307      	str	r3, [sp, #28]
 80080fa:	232d      	movs	r3, #45	; 0x2d
 80080fc:	aa0c      	add	r2, sp, #48	; 0x30
 80080fe:	71d3      	strb	r3, [r2, #7]
 8008100:	4698      	mov	r8, r3
 8008102:	e56a      	b.n	8007bda <_svfiprintf_r+0x34a>
 8008104:	aa0f      	add	r2, sp, #60	; 0x3c
 8008106:	9900      	ldr	r1, [sp, #0]
 8008108:	9801      	ldr	r0, [sp, #4]
 800810a:	f7ff fb35 	bl	8007778 <__ssprint_r>
 800810e:	2800      	cmp	r0, #0
 8008110:	d000      	beq.n	8008114 <_svfiprintf_r+0x884>
 8008112:	e4c0      	b.n	8007a96 <_svfiprintf_r+0x206>
 8008114:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008118:	ae1c      	add	r6, sp, #112	; 0x70
 800811a:	e5d0      	b.n	8007cbe <_svfiprintf_r+0x42e>
 800811c:	aa0f      	add	r2, sp, #60	; 0x3c
 800811e:	9900      	ldr	r1, [sp, #0]
 8008120:	9801      	ldr	r0, [sp, #4]
 8008122:	f7ff fb29 	bl	8007778 <__ssprint_r>
 8008126:	2800      	cmp	r0, #0
 8008128:	d000      	beq.n	800812c <_svfiprintf_r+0x89c>
 800812a:	e4b4      	b.n	8007a96 <_svfiprintf_r+0x206>
 800812c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800812e:	e673      	b.n	8007e18 <_svfiprintf_r+0x588>
 8008130:	9908      	ldr	r1, [sp, #32]
 8008132:	9209      	str	r2, [sp, #36]	; 0x24
 8008134:	6019      	str	r1, [r3, #0]
 8008136:	17c9      	asrs	r1, r1, #31
 8008138:	6059      	str	r1, [r3, #4]
 800813a:	f7ff fbc6 	bl	80078ca <_svfiprintf_r+0x3a>
 800813e:	4643      	mov	r3, r8
 8008140:	3401      	adds	r4, #1
 8008142:	431f      	orrs	r7, r3
 8008144:	7823      	ldrb	r3, [r4, #0]
 8008146:	f7ff fbf9 	bl	800793c <_svfiprintf_r+0xac>
 800814a:	2140      	movs	r1, #64	; 0x40
 800814c:	f7fb f956 	bl	80033fc <_malloc_r>
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	6018      	str	r0, [r3, #0]
 8008154:	6118      	str	r0, [r3, #16]
 8008156:	2800      	cmp	r0, #0
 8008158:	d078      	beq.n	800824c <_svfiprintf_r+0x9bc>
 800815a:	2340      	movs	r3, #64	; 0x40
 800815c:	9a00      	ldr	r2, [sp, #0]
 800815e:	6153      	str	r3, [r2, #20]
 8008160:	f7ff fbaa 	bl	80078b8 <_svfiprintf_r+0x28>
 8008164:	0028      	movs	r0, r5
 8008166:	f7fb fcab 	bl	8003ac0 <strlen>
 800816a:	9004      	str	r0, [sp, #16]
 800816c:	e67c      	b.n	8007e68 <_svfiprintf_r+0x5d8>
 800816e:	ad1c      	add	r5, sp, #112	; 0x70
 8008170:	002f      	movs	r7, r5
 8008172:	46a1      	mov	r9, r4
 8008174:	9c06      	ldr	r4, [sp, #24]
 8008176:	9d07      	ldr	r5, [sp, #28]
 8008178:	0020      	movs	r0, r4
 800817a:	0029      	movs	r1, r5
 800817c:	220a      	movs	r2, #10
 800817e:	2300      	movs	r3, #0
 8008180:	f7f8 fece 	bl	8000f20 <__aeabi_uldivmod>
 8008184:	3f01      	subs	r7, #1
 8008186:	3230      	adds	r2, #48	; 0x30
 8008188:	703a      	strb	r2, [r7, #0]
 800818a:	2300      	movs	r3, #0
 800818c:	0020      	movs	r0, r4
 800818e:	0029      	movs	r1, r5
 8008190:	220a      	movs	r2, #10
 8008192:	f7f8 fec5 	bl	8000f20 <__aeabi_uldivmod>
 8008196:	0003      	movs	r3, r0
 8008198:	0004      	movs	r4, r0
 800819a:	000d      	movs	r5, r1
 800819c:	430b      	orrs	r3, r1
 800819e:	d1eb      	bne.n	8008178 <_svfiprintf_r+0x8e8>
 80081a0:	ab1c      	add	r3, sp, #112	; 0x70
 80081a2:	1bdb      	subs	r3, r3, r7
 80081a4:	9406      	str	r4, [sp, #24]
 80081a6:	9507      	str	r5, [sp, #28]
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	003d      	movs	r5, r7
 80081ac:	464c      	mov	r4, r9
 80081ae:	f7ff fc1b 	bl	80079e8 <_svfiprintf_r+0x158>
 80081b2:	9908      	ldr	r1, [sp, #32]
 80081b4:	6019      	str	r1, [r3, #0]
 80081b6:	9209      	str	r2, [sp, #36]	; 0x24
 80081b8:	f7ff fb87 	bl	80078ca <_svfiprintf_r+0x3a>
 80081bc:	2a01      	cmp	r2, #1
 80081be:	d001      	beq.n	80081c4 <_svfiprintf_r+0x934>
 80081c0:	f7ff fbe5 	bl	800798e <_svfiprintf_r+0xfe>
 80081c4:	e517      	b.n	8007bf6 <_svfiprintf_r+0x366>
 80081c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80081c8:	9900      	ldr	r1, [sp, #0]
 80081ca:	9801      	ldr	r0, [sp, #4]
 80081cc:	f7ff fad4 	bl	8007778 <__ssprint_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d000      	beq.n	80081d6 <_svfiprintf_r+0x946>
 80081d4:	e45f      	b.n	8007a96 <_svfiprintf_r+0x206>
 80081d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081d8:	aa1e      	add	r2, sp, #120	; 0x78
 80081da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80081dc:	1c59      	adds	r1, r3, #1
 80081de:	9203      	str	r2, [sp, #12]
 80081e0:	ae1c      	add	r6, sp, #112	; 0x70
 80081e2:	e59e      	b.n	8007d22 <_svfiprintf_r+0x492>
 80081e4:	4a29      	ldr	r2, [pc, #164]	; (800828c <_svfiprintf_r+0x9fc>)
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	4690      	mov	r8, r2
 80081ea:	e5c6      	b.n	8007d7a <_svfiprintf_r+0x4ea>
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	2b06      	cmp	r3, #6
 80081f0:	d805      	bhi.n	80081fe <_svfiprintf_r+0x96e>
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	4d26      	ldr	r5, [pc, #152]	; (8008290 <_svfiprintf_r+0xa00>)
 80081f6:	469a      	mov	sl, r3
 80081f8:	464b      	mov	r3, r9
 80081fa:	9309      	str	r3, [sp, #36]	; 0x24
 80081fc:	e514      	b.n	8007c28 <_svfiprintf_r+0x398>
 80081fe:	2306      	movs	r3, #6
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	e7f6      	b.n	80081f2 <_svfiprintf_r+0x962>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	4a21      	ldr	r2, [pc, #132]	; (800828c <_svfiprintf_r+0x9fc>)
 8008208:	469c      	mov	ip, r3
 800820a:	4690      	mov	r8, r2
 800820c:	000b      	movs	r3, r1
 800820e:	e702      	b.n	8008016 <_svfiprintf_r+0x786>
 8008210:	ab0c      	add	r3, sp, #48	; 0x30
 8008212:	79db      	ldrb	r3, [r3, #7]
 8008214:	9702      	str	r7, [sp, #8]
 8008216:	4698      	mov	r8, r3
 8008218:	464b      	mov	r3, r9
 800821a:	9309      	str	r3, [sp, #36]	; 0x24
 800821c:	465b      	mov	r3, fp
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	2300      	movs	r3, #0
 8008222:	469b      	mov	fp, r3
 8008224:	f7ff fbe0 	bl	80079e8 <_svfiprintf_r+0x158>
 8008228:	2301      	movs	r3, #1
 800822a:	425b      	negs	r3, r3
 800822c:	9308      	str	r3, [sp, #32]
 800822e:	e437      	b.n	8007aa0 <_svfiprintf_r+0x210>
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	1d1a      	adds	r2, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	469b      	mov	fp, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	da02      	bge.n	8008242 <_svfiprintf_r+0x9b2>
 800823c:	2301      	movs	r3, #1
 800823e:	425b      	negs	r3, r3
 8008240:	469b      	mov	fp, r3
 8008242:	7863      	ldrb	r3, [r4, #1]
 8008244:	9209      	str	r2, [sp, #36]	; 0x24
 8008246:	000c      	movs	r4, r1
 8008248:	f7ff fb78 	bl	800793c <_svfiprintf_r+0xac>
 800824c:	230c      	movs	r3, #12
 800824e:	9a01      	ldr	r2, [sp, #4]
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	3b0d      	subs	r3, #13
 8008254:	9308      	str	r3, [sp, #32]
 8008256:	f7ff fc23 	bl	8007aa0 <_svfiprintf_r+0x210>
 800825a:	4662      	mov	r2, ip
 800825c:	ab0c      	add	r3, sp, #48	; 0x30
 800825e:	71da      	strb	r2, [r3, #7]
 8008260:	e67b      	b.n	8007f5a <_svfiprintf_r+0x6ca>
 8008262:	4661      	mov	r1, ip
 8008264:	aa0c      	add	r2, sp, #48	; 0x30
 8008266:	71d1      	strb	r1, [r2, #7]
 8008268:	e43a      	b.n	8007ae0 <_svfiprintf_r+0x250>
 800826a:	4661      	mov	r1, ip
 800826c:	aa0c      	add	r2, sp, #48	; 0x30
 800826e:	71d1      	strb	r1, [r2, #7]
 8008270:	e65e      	b.n	8007f30 <_svfiprintf_r+0x6a0>
 8008272:	4661      	mov	r1, ip
 8008274:	aa0c      	add	r2, sp, #48	; 0x30
 8008276:	71d1      	strb	r1, [r2, #7]
 8008278:	e629      	b.n	8007ece <_svfiprintf_r+0x63e>
 800827a:	4662      	mov	r2, ip
 800827c:	ab0c      	add	r3, sp, #48	; 0x30
 800827e:	71da      	strb	r2, [r3, #7]
 8008280:	e494      	b.n	8007bac <_svfiprintf_r+0x31c>
 8008282:	4662      	mov	r2, ip
 8008284:	ab0c      	add	r3, sp, #48	; 0x30
 8008286:	71da      	strb	r2, [r3, #7]
 8008288:	e60e      	b.n	8007ea8 <_svfiprintf_r+0x618>
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	08016fb0 	.word	0x08016fb0
 8008290:	08018b8c 	.word	0x08018b8c

08008294 <_wctomb_r>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4c05      	ldr	r4, [pc, #20]	; (80082ac <_wctomb_r+0x18>)
 8008298:	6824      	ldr	r4, [r4, #0]
 800829a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800829c:	2c00      	cmp	r4, #0
 800829e:	d100      	bne.n	80082a2 <_wctomb_r+0xe>
 80082a0:	4c03      	ldr	r4, [pc, #12]	; (80082b0 <_wctomb_r+0x1c>)
 80082a2:	25e0      	movs	r5, #224	; 0xe0
 80082a4:	5964      	ldr	r4, [r4, r5]
 80082a6:	47a0      	blx	r4
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	20000000 	.word	0x20000000
 80082b0:	2000084c 	.word	0x2000084c

080082b4 <__ascii_wctomb>:
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d004      	beq.n	80082c2 <__ascii_wctomb+0xe>
 80082b8:	2aff      	cmp	r2, #255	; 0xff
 80082ba:	d804      	bhi.n	80082c6 <__ascii_wctomb+0x12>
 80082bc:	2001      	movs	r0, #1
 80082be:	700a      	strb	r2, [r1, #0]
 80082c0:	4770      	bx	lr
 80082c2:	2000      	movs	r0, #0
 80082c4:	e7fc      	b.n	80082c0 <__ascii_wctomb+0xc>
 80082c6:	238a      	movs	r3, #138	; 0x8a
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	2001      	movs	r0, #1
 80082cc:	4240      	negs	r0, r0
 80082ce:	e7f7      	b.n	80082c0 <__ascii_wctomb+0xc>

080082d0 <__aeabi_dcmpun>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4e0e      	ldr	r6, [pc, #56]	; (800830c <__aeabi_dcmpun+0x3c>)
 80082d4:	030d      	lsls	r5, r1, #12
 80082d6:	031c      	lsls	r4, r3, #12
 80082d8:	0049      	lsls	r1, r1, #1
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	0b2d      	lsrs	r5, r5, #12
 80082de:	0d49      	lsrs	r1, r1, #21
 80082e0:	0b24      	lsrs	r4, r4, #12
 80082e2:	0d5b      	lsrs	r3, r3, #21
 80082e4:	42b1      	cmp	r1, r6
 80082e6:	d004      	beq.n	80082f2 <__aeabi_dcmpun+0x22>
 80082e8:	4908      	ldr	r1, [pc, #32]	; (800830c <__aeabi_dcmpun+0x3c>)
 80082ea:	2000      	movs	r0, #0
 80082ec:	428b      	cmp	r3, r1
 80082ee:	d008      	beq.n	8008302 <__aeabi_dcmpun+0x32>
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	4305      	orrs	r5, r0
 80082f4:	2001      	movs	r0, #1
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	d1fa      	bne.n	80082f0 <__aeabi_dcmpun+0x20>
 80082fa:	4904      	ldr	r1, [pc, #16]	; (800830c <__aeabi_dcmpun+0x3c>)
 80082fc:	2000      	movs	r0, #0
 80082fe:	428b      	cmp	r3, r1
 8008300:	d1f6      	bne.n	80082f0 <__aeabi_dcmpun+0x20>
 8008302:	4314      	orrs	r4, r2
 8008304:	0020      	movs	r0, r4
 8008306:	1e44      	subs	r4, r0, #1
 8008308:	41a0      	sbcs	r0, r4
 800830a:	e7f1      	b.n	80082f0 <__aeabi_dcmpun+0x20>
 800830c:	000007ff 	.word	0x000007ff

08008310 <ceil>:
 8008310:	4a43      	ldr	r2, [pc, #268]	; (8008420 <ceil+0x110>)
 8008312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008314:	464f      	mov	r7, r9
 8008316:	4691      	mov	r9, r2
 8008318:	004b      	lsls	r3, r1, #1
 800831a:	0d5b      	lsrs	r3, r3, #21
 800831c:	4499      	add	r9, r3
 800831e:	4646      	mov	r6, r8
 8008320:	46d6      	mov	lr, sl
 8008322:	464a      	mov	r2, r9
 8008324:	b5c0      	push	{r6, r7, lr}
 8008326:	0005      	movs	r5, r0
 8008328:	000c      	movs	r4, r1
 800832a:	000e      	movs	r6, r1
 800832c:	4688      	mov	r8, r1
 800832e:	0007      	movs	r7, r0
 8008330:	2a13      	cmp	r2, #19
 8008332:	dc25      	bgt.n	8008380 <ceil+0x70>
 8008334:	2a00      	cmp	r2, #0
 8008336:	db56      	blt.n	80083e6 <ceil+0xd6>
 8008338:	4b3a      	ldr	r3, [pc, #232]	; (8008424 <ceil+0x114>)
 800833a:	4113      	asrs	r3, r2
 800833c:	469a      	mov	sl, r3
 800833e:	000b      	movs	r3, r1
 8008340:	4652      	mov	r2, sl
 8008342:	4013      	ands	r3, r2
 8008344:	4303      	orrs	r3, r0
 8008346:	d016      	beq.n	8008376 <ceil+0x66>
 8008348:	4a37      	ldr	r2, [pc, #220]	; (8008428 <ceil+0x118>)
 800834a:	4b38      	ldr	r3, [pc, #224]	; (800842c <ceil+0x11c>)
 800834c:	f7f9 f8f2 	bl	8001534 <__aeabi_dadd>
 8008350:	2200      	movs	r2, #0
 8008352:	2300      	movs	r3, #0
 8008354:	f7f8 fdd0 	bl	8000ef8 <__aeabi_dcmpgt>
 8008358:	2800      	cmp	r0, #0
 800835a:	d00a      	beq.n	8008372 <ceil+0x62>
 800835c:	2c00      	cmp	r4, #0
 800835e:	dd04      	ble.n	800836a <ceil+0x5a>
 8008360:	2380      	movs	r3, #128	; 0x80
 8008362:	464a      	mov	r2, r9
 8008364:	035b      	lsls	r3, r3, #13
 8008366:	4113      	asrs	r3, r2
 8008368:	4498      	add	r8, r3
 800836a:	4646      	mov	r6, r8
 800836c:	4653      	mov	r3, sl
 800836e:	2700      	movs	r7, #0
 8008370:	439e      	bics	r6, r3
 8008372:	0038      	movs	r0, r7
 8008374:	0031      	movs	r1, r6
 8008376:	bc1c      	pop	{r2, r3, r4}
 8008378:	4690      	mov	r8, r2
 800837a:	4699      	mov	r9, r3
 800837c:	46a2      	mov	sl, r4
 800837e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008380:	2a33      	cmp	r2, #51	; 0x33
 8008382:	dd08      	ble.n	8008396 <ceil+0x86>
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4599      	cmp	r9, r3
 800838a:	d1f4      	bne.n	8008376 <ceil+0x66>
 800838c:	0002      	movs	r2, r0
 800838e:	000b      	movs	r3, r1
 8008390:	f7f9 f8d0 	bl	8001534 <__aeabi_dadd>
 8008394:	e7ef      	b.n	8008376 <ceil+0x66>
 8008396:	4a26      	ldr	r2, [pc, #152]	; (8008430 <ceil+0x120>)
 8008398:	4694      	mov	ip, r2
 800839a:	2201      	movs	r2, #1
 800839c:	4463      	add	r3, ip
 800839e:	4252      	negs	r2, r2
 80083a0:	40da      	lsrs	r2, r3
 80083a2:	4692      	mov	sl, r2
 80083a4:	4202      	tst	r2, r0
 80083a6:	d0e6      	beq.n	8008376 <ceil+0x66>
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <ceil+0x118>)
 80083aa:	4b20      	ldr	r3, [pc, #128]	; (800842c <ceil+0x11c>)
 80083ac:	f7f9 f8c2 	bl	8001534 <__aeabi_dadd>
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 fda0 	bl	8000ef8 <__aeabi_dcmpgt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d0da      	beq.n	8008372 <ceil+0x62>
 80083bc:	2c00      	cmp	r4, #0
 80083be:	dd0e      	ble.n	80083de <ceil+0xce>
 80083c0:	464b      	mov	r3, r9
 80083c2:	2b14      	cmp	r3, #20
 80083c4:	d022      	beq.n	800840c <ceil+0xfc>
 80083c6:	2334      	movs	r3, #52	; 0x34
 80083c8:	464a      	mov	r2, r9
 80083ca:	2401      	movs	r4, #1
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	409c      	lsls	r4, r3
 80083d0:	1965      	adds	r5, r4, r5
 80083d2:	42bd      	cmp	r5, r7
 80083d4:	d222      	bcs.n	800841c <ceil+0x10c>
 80083d6:	2301      	movs	r3, #1
 80083d8:	469c      	mov	ip, r3
 80083da:	002f      	movs	r7, r5
 80083dc:	44e0      	add	r8, ip
 80083de:	4653      	mov	r3, sl
 80083e0:	4646      	mov	r6, r8
 80083e2:	439f      	bics	r7, r3
 80083e4:	e7c5      	b.n	8008372 <ceil+0x62>
 80083e6:	4a10      	ldr	r2, [pc, #64]	; (8008428 <ceil+0x118>)
 80083e8:	4b10      	ldr	r3, [pc, #64]	; (800842c <ceil+0x11c>)
 80083ea:	f7f9 f8a3 	bl	8001534 <__aeabi_dadd>
 80083ee:	2200      	movs	r2, #0
 80083f0:	2300      	movs	r3, #0
 80083f2:	f7f8 fd81 	bl	8000ef8 <__aeabi_dcmpgt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0bb      	beq.n	8008372 <ceil+0x62>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	db0a      	blt.n	8008414 <ceil+0x104>
 80083fe:	432c      	orrs	r4, r5
 8008400:	2700      	movs	r7, #0
 8008402:	2600      	movs	r6, #0
 8008404:	2c00      	cmp	r4, #0
 8008406:	d0b4      	beq.n	8008372 <ceil+0x62>
 8008408:	4e0a      	ldr	r6, [pc, #40]	; (8008434 <ceil+0x124>)
 800840a:	e7b2      	b.n	8008372 <ceil+0x62>
 800840c:	3b13      	subs	r3, #19
 800840e:	469c      	mov	ip, r3
 8008410:	44e0      	add	r8, ip
 8008412:	e7e4      	b.n	80083de <ceil+0xce>
 8008414:	2680      	movs	r6, #128	; 0x80
 8008416:	2700      	movs	r7, #0
 8008418:	0636      	lsls	r6, r6, #24
 800841a:	e7aa      	b.n	8008372 <ceil+0x62>
 800841c:	002f      	movs	r7, r5
 800841e:	e7de      	b.n	80083de <ceil+0xce>
 8008420:	fffffc01 	.word	0xfffffc01
 8008424:	000fffff 	.word	0x000fffff
 8008428:	8800759c 	.word	0x8800759c
 800842c:	7e37e43c 	.word	0x7e37e43c
 8008430:	fffffbed 	.word	0xfffffbed
 8008434:	3ff00000 	.word	0x3ff00000

08008438 <floor>:
 8008438:	4a47      	ldr	r2, [pc, #284]	; (8008558 <floor+0x120>)
 800843a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843c:	464f      	mov	r7, r9
 800843e:	4691      	mov	r9, r2
 8008440:	004b      	lsls	r3, r1, #1
 8008442:	0d5b      	lsrs	r3, r3, #21
 8008444:	4499      	add	r9, r3
 8008446:	4646      	mov	r6, r8
 8008448:	46d6      	mov	lr, sl
 800844a:	464a      	mov	r2, r9
 800844c:	b5c0      	push	{r6, r7, lr}
 800844e:	0005      	movs	r5, r0
 8008450:	000c      	movs	r4, r1
 8008452:	000e      	movs	r6, r1
 8008454:	4688      	mov	r8, r1
 8008456:	0007      	movs	r7, r0
 8008458:	2a13      	cmp	r2, #19
 800845a:	dc27      	bgt.n	80084ac <floor+0x74>
 800845c:	2a00      	cmp	r2, #0
 800845e:	db4b      	blt.n	80084f8 <floor+0xc0>
 8008460:	4b3e      	ldr	r3, [pc, #248]	; (800855c <floor+0x124>)
 8008462:	4113      	asrs	r3, r2
 8008464:	469a      	mov	sl, r3
 8008466:	000b      	movs	r3, r1
 8008468:	4652      	mov	r2, sl
 800846a:	4013      	ands	r3, r2
 800846c:	4303      	orrs	r3, r0
 800846e:	d018      	beq.n	80084a2 <floor+0x6a>
 8008470:	4a3b      	ldr	r2, [pc, #236]	; (8008560 <floor+0x128>)
 8008472:	4b3c      	ldr	r3, [pc, #240]	; (8008564 <floor+0x12c>)
 8008474:	0028      	movs	r0, r5
 8008476:	0021      	movs	r1, r4
 8008478:	f7f9 f85c 	bl	8001534 <__aeabi_dadd>
 800847c:	2200      	movs	r2, #0
 800847e:	2300      	movs	r3, #0
 8008480:	f7f8 fd3a 	bl	8000ef8 <__aeabi_dcmpgt>
 8008484:	2800      	cmp	r0, #0
 8008486:	d047      	beq.n	8008518 <floor+0xe0>
 8008488:	2c00      	cmp	r4, #0
 800848a:	da04      	bge.n	8008496 <floor+0x5e>
 800848c:	2380      	movs	r3, #128	; 0x80
 800848e:	464a      	mov	r2, r9
 8008490:	035b      	lsls	r3, r3, #13
 8008492:	4113      	asrs	r3, r2
 8008494:	4498      	add	r8, r3
 8008496:	4646      	mov	r6, r8
 8008498:	4653      	mov	r3, sl
 800849a:	2700      	movs	r7, #0
 800849c:	439e      	bics	r6, r3
 800849e:	0038      	movs	r0, r7
 80084a0:	0031      	movs	r1, r6
 80084a2:	bc1c      	pop	{r2, r3, r4}
 80084a4:	4690      	mov	r8, r2
 80084a6:	4699      	mov	r9, r3
 80084a8:	46a2      	mov	sl, r4
 80084aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ac:	2a33      	cmp	r2, #51	; 0x33
 80084ae:	dd08      	ble.n	80084c2 <floor+0x8a>
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4599      	cmp	r9, r3
 80084b6:	d1f4      	bne.n	80084a2 <floor+0x6a>
 80084b8:	0002      	movs	r2, r0
 80084ba:	000b      	movs	r3, r1
 80084bc:	f7f9 f83a 	bl	8001534 <__aeabi_dadd>
 80084c0:	e7ef      	b.n	80084a2 <floor+0x6a>
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <floor+0x130>)
 80084c4:	4694      	mov	ip, r2
 80084c6:	2201      	movs	r2, #1
 80084c8:	4463      	add	r3, ip
 80084ca:	4252      	negs	r2, r2
 80084cc:	40da      	lsrs	r2, r3
 80084ce:	4692      	mov	sl, r2
 80084d0:	4202      	tst	r2, r0
 80084d2:	d0e6      	beq.n	80084a2 <floor+0x6a>
 80084d4:	4a22      	ldr	r2, [pc, #136]	; (8008560 <floor+0x128>)
 80084d6:	4b23      	ldr	r3, [pc, #140]	; (8008564 <floor+0x12c>)
 80084d8:	0028      	movs	r0, r5
 80084da:	0021      	movs	r1, r4
 80084dc:	f7f9 f82a 	bl	8001534 <__aeabi_dadd>
 80084e0:	2200      	movs	r2, #0
 80084e2:	2300      	movs	r3, #0
 80084e4:	f7f8 fd08 	bl	8000ef8 <__aeabi_dcmpgt>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d015      	beq.n	8008518 <floor+0xe0>
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	db1e      	blt.n	800852e <floor+0xf6>
 80084f0:	4653      	mov	r3, sl
 80084f2:	4646      	mov	r6, r8
 80084f4:	439f      	bics	r7, r3
 80084f6:	e00f      	b.n	8008518 <floor+0xe0>
 80084f8:	4a19      	ldr	r2, [pc, #100]	; (8008560 <floor+0x128>)
 80084fa:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <floor+0x12c>)
 80084fc:	0028      	movs	r0, r5
 80084fe:	0021      	movs	r1, r4
 8008500:	f7f9 f818 	bl	8001534 <__aeabi_dadd>
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	f7f8 fcf6 	bl	8000ef8 <__aeabi_dcmpgt>
 800850c:	2800      	cmp	r0, #0
 800850e:	d003      	beq.n	8008518 <floor+0xe0>
 8008510:	2c00      	cmp	r4, #0
 8008512:	db04      	blt.n	800851e <floor+0xe6>
 8008514:	2700      	movs	r7, #0
 8008516:	2600      	movs	r6, #0
 8008518:	0038      	movs	r0, r7
 800851a:	0031      	movs	r1, r6
 800851c:	e7c1      	b.n	80084a2 <floor+0x6a>
 800851e:	0064      	lsls	r4, r4, #1
 8008520:	0864      	lsrs	r4, r4, #1
 8008522:	4325      	orrs	r5, r4
 8008524:	2700      	movs	r7, #0
 8008526:	2d00      	cmp	r5, #0
 8008528:	d0f6      	beq.n	8008518 <floor+0xe0>
 800852a:	4e10      	ldr	r6, [pc, #64]	; (800856c <floor+0x134>)
 800852c:	e7f4      	b.n	8008518 <floor+0xe0>
 800852e:	464b      	mov	r3, r9
 8008530:	2b14      	cmp	r3, #20
 8008532:	d00b      	beq.n	800854c <floor+0x114>
 8008534:	2234      	movs	r2, #52	; 0x34
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	2301      	movs	r3, #1
 800853a:	4093      	lsls	r3, r2
 800853c:	195d      	adds	r5, r3, r5
 800853e:	42bd      	cmp	r5, r7
 8008540:	d208      	bcs.n	8008554 <floor+0x11c>
 8008542:	2301      	movs	r3, #1
 8008544:	469c      	mov	ip, r3
 8008546:	002f      	movs	r7, r5
 8008548:	44e0      	add	r8, ip
 800854a:	e7d1      	b.n	80084f0 <floor+0xb8>
 800854c:	3b13      	subs	r3, #19
 800854e:	469c      	mov	ip, r3
 8008550:	44e0      	add	r8, ip
 8008552:	e7cd      	b.n	80084f0 <floor+0xb8>
 8008554:	002f      	movs	r7, r5
 8008556:	e7cb      	b.n	80084f0 <floor+0xb8>
 8008558:	fffffc01 	.word	0xfffffc01
 800855c:	000fffff 	.word	0x000fffff
 8008560:	8800759c 	.word	0x8800759c
 8008564:	7e37e43c 	.word	0x7e37e43c
 8008568:	fffffbed 	.word	0xfffffbed
 800856c:	bff00000 	.word	0xbff00000

08008570 <round>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	4a27      	ldr	r2, [pc, #156]	; (8008610 <round+0xa0>)
 8008574:	004b      	lsls	r3, r1, #1
 8008576:	0d5b      	lsrs	r3, r3, #21
 8008578:	189a      	adds	r2, r3, r2
 800857a:	000c      	movs	r4, r1
 800857c:	0007      	movs	r7, r0
 800857e:	2a13      	cmp	r2, #19
 8008580:	dc10      	bgt.n	80085a4 <round+0x34>
 8008582:	2a00      	cmp	r2, #0
 8008584:	db36      	blt.n	80085f4 <round+0x84>
 8008586:	4b23      	ldr	r3, [pc, #140]	; (8008614 <round+0xa4>)
 8008588:	4113      	asrs	r3, r2
 800858a:	420b      	tst	r3, r1
 800858c:	d03a      	beq.n	8008604 <round+0x94>
 800858e:	2480      	movs	r4, #128	; 0x80
 8008590:	0324      	lsls	r4, r4, #12
 8008592:	4114      	asrs	r4, r2
 8008594:	2000      	movs	r0, #0
 8008596:	1864      	adds	r4, r4, r1
 8008598:	439c      	bics	r4, r3
 800859a:	0006      	movs	r6, r0
 800859c:	0025      	movs	r5, r4
 800859e:	0030      	movs	r0, r6
 80085a0:	0029      	movs	r1, r5
 80085a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a4:	2a33      	cmp	r2, #51	; 0x33
 80085a6:	dd0e      	ble.n	80085c6 <round+0x56>
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	0006      	movs	r6, r0
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	000d      	movs	r5, r1
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d1f4      	bne.n	800859e <round+0x2e>
 80085b4:	0002      	movs	r2, r0
 80085b6:	000b      	movs	r3, r1
 80085b8:	0038      	movs	r0, r7
 80085ba:	0021      	movs	r1, r4
 80085bc:	f7f8 ffba 	bl	8001534 <__aeabi_dadd>
 80085c0:	0006      	movs	r6, r0
 80085c2:	000d      	movs	r5, r1
 80085c4:	e7eb      	b.n	800859e <round+0x2e>
 80085c6:	4d14      	ldr	r5, [pc, #80]	; (8008618 <round+0xa8>)
 80085c8:	0006      	movs	r6, r0
 80085ca:	46ac      	mov	ip, r5
 80085cc:	2501      	movs	r5, #1
 80085ce:	4463      	add	r3, ip
 80085d0:	426d      	negs	r5, r5
 80085d2:	40dd      	lsrs	r5, r3
 80085d4:	46ac      	mov	ip, r5
 80085d6:	4663      	mov	r3, ip
 80085d8:	000d      	movs	r5, r1
 80085da:	4203      	tst	r3, r0
 80085dc:	d0df      	beq.n	800859e <round+0x2e>
 80085de:	2333      	movs	r3, #51	; 0x33
 80085e0:	1a9a      	subs	r2, r3, r2
 80085e2:	3b32      	subs	r3, #50	; 0x32
 80085e4:	4093      	lsls	r3, r2
 80085e6:	1818      	adds	r0, r3, r0
 80085e8:	4287      	cmp	r7, r0
 80085ea:	d900      	bls.n	80085ee <round+0x7e>
 80085ec:	1c4c      	adds	r4, r1, #1
 80085ee:	4663      	mov	r3, ip
 80085f0:	4398      	bics	r0, r3
 80085f2:	e7d2      	b.n	800859a <round+0x2a>
 80085f4:	0fc9      	lsrs	r1, r1, #31
 80085f6:	07cc      	lsls	r4, r1, #31
 80085f8:	2000      	movs	r0, #0
 80085fa:	1c53      	adds	r3, r2, #1
 80085fc:	d1cd      	bne.n	800859a <round+0x2a>
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <round+0xac>)
 8008600:	431c      	orrs	r4, r3
 8008602:	e7ca      	b.n	800859a <round+0x2a>
 8008604:	0006      	movs	r6, r0
 8008606:	000d      	movs	r5, r1
 8008608:	2800      	cmp	r0, #0
 800860a:	d1c0      	bne.n	800858e <round+0x1e>
 800860c:	e7c7      	b.n	800859e <round+0x2e>
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	fffffc01 	.word	0xfffffc01
 8008614:	000fffff 	.word	0x000fffff
 8008618:	fffffbed 	.word	0xfffffbed
 800861c:	3ff00000 	.word	0x3ff00000

08008620 <log>:
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	46c6      	mov	lr, r8
 8008624:	b500      	push	{lr}
 8008626:	b08c      	sub	sp, #48	; 0x30
 8008628:	0004      	movs	r4, r0
 800862a:	000d      	movs	r5, r1
 800862c:	f000 f880 	bl	8008730 <__ieee754_log>
 8008630:	4b3a      	ldr	r3, [pc, #232]	; (800871c <log+0xfc>)
 8008632:	0006      	movs	r6, r0
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	000f      	movs	r7, r1
 8008638:	b25b      	sxtb	r3, r3
 800863a:	4698      	mov	r8, r3
 800863c:	3301      	adds	r3, #1
 800863e:	d00f      	beq.n	8008660 <log+0x40>
 8008640:	0022      	movs	r2, r4
 8008642:	002b      	movs	r3, r5
 8008644:	0020      	movs	r0, r4
 8008646:	0029      	movs	r1, r5
 8008648:	f7ff fe42 	bl	80082d0 <__aeabi_dcmpun>
 800864c:	2800      	cmp	r0, #0
 800864e:	d107      	bne.n	8008660 <log+0x40>
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	0020      	movs	r0, r4
 8008656:	0029      	movs	r1, r5
 8008658:	f7f8 fc4e 	bl	8000ef8 <__aeabi_dcmpgt>
 800865c:	2800      	cmp	r0, #0
 800865e:	d005      	beq.n	800866c <log+0x4c>
 8008660:	0030      	movs	r0, r6
 8008662:	0039      	movs	r1, r7
 8008664:	b00c      	add	sp, #48	; 0x30
 8008666:	bc04      	pop	{r2}
 8008668:	4690      	mov	r8, r2
 800866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800866c:	4b2c      	ldr	r3, [pc, #176]	; (8008720 <log+0x100>)
 800866e:	900a      	str	r0, [sp, #40]	; 0x28
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	4643      	mov	r3, r8
 8008674:	9404      	str	r4, [sp, #16]
 8008676:	9505      	str	r5, [sp, #20]
 8008678:	9406      	str	r4, [sp, #24]
 800867a:	9507      	str	r5, [sp, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11a      	bne.n	80086b6 <log+0x96>
 8008680:	22e0      	movs	r2, #224	; 0xe0
 8008682:	4b28      	ldr	r3, [pc, #160]	; (8008724 <log+0x104>)
 8008684:	0612      	lsls	r2, r2, #24
 8008686:	9208      	str	r2, [sp, #32]
 8008688:	9309      	str	r3, [sp, #36]	; 0x24
 800868a:	0020      	movs	r0, r4
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	0029      	movs	r1, r5
 8008692:	f7f8 fc17 	bl	8000ec4 <__aeabi_dcmpeq>
 8008696:	2800      	cmp	r0, #0
 8008698:	d038      	beq.n	800870c <log+0xec>
 800869a:	2302      	movs	r3, #2
 800869c:	9302      	str	r3, [sp, #8]
 800869e:	a802      	add	r0, sp, #8
 80086a0:	f000 fa1c 	bl	8008adc <matherr>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d017      	beq.n	80086d8 <log+0xb8>
 80086a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d118      	bne.n	80086e2 <log+0xc2>
 80086b0:	9e08      	ldr	r6, [sp, #32]
 80086b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086b4:	e7d4      	b.n	8008660 <log+0x40>
 80086b6:	2200      	movs	r2, #0
 80086b8:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <log+0x108>)
 80086ba:	0020      	movs	r0, r4
 80086bc:	9208      	str	r2, [sp, #32]
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	0029      	movs	r1, r5
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	f7f8 fbfd 	bl	8000ec4 <__aeabi_dcmpeq>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d00f      	beq.n	80086ee <log+0xce>
 80086ce:	2302      	movs	r3, #2
 80086d0:	9302      	str	r3, [sp, #8]
 80086d2:	4643      	mov	r3, r8
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d1e2      	bne.n	800869e <log+0x7e>
 80086d8:	f7fa fd30 	bl	800313c <__errno>
 80086dc:	2322      	movs	r3, #34	; 0x22
 80086de:	6003      	str	r3, [r0, #0]
 80086e0:	e7e2      	b.n	80086a8 <log+0x88>
 80086e2:	f7fa fd2b 	bl	800313c <__errno>
 80086e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	6003      	str	r3, [r0, #0]
 80086ec:	e7e0      	b.n	80086b0 <log+0x90>
 80086ee:	2301      	movs	r3, #1
 80086f0:	9302      	str	r3, [sp, #8]
 80086f2:	4643      	mov	r3, r8
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d10b      	bne.n	8008710 <log+0xf0>
 80086f8:	f7fa fd20 	bl	800313c <__errno>
 80086fc:	2321      	movs	r3, #33	; 0x21
 80086fe:	6003      	str	r3, [r0, #0]
 8008700:	480a      	ldr	r0, [pc, #40]	; (800872c <log+0x10c>)
 8008702:	f000 f9ed 	bl	8008ae0 <nan>
 8008706:	9008      	str	r0, [sp, #32]
 8008708:	9109      	str	r1, [sp, #36]	; 0x24
 800870a:	e7cd      	b.n	80086a8 <log+0x88>
 800870c:	2301      	movs	r3, #1
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	a802      	add	r0, sp, #8
 8008712:	f000 f9e3 	bl	8008adc <matherr>
 8008716:	2800      	cmp	r0, #0
 8008718:	d1f2      	bne.n	8008700 <log+0xe0>
 800871a:	e7ed      	b.n	80086f8 <log+0xd8>
 800871c:	200009b8 	.word	0x200009b8
 8008720:	08018ba4 	.word	0x08018ba4
 8008724:	c7efffff 	.word	0xc7efffff
 8008728:	fff00000 	.word	0xfff00000
 800872c:	08018b74 	.word	0x08018b74

08008730 <__ieee754_log>:
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	46d6      	mov	lr, sl
 8008734:	464f      	mov	r7, r9
 8008736:	4646      	mov	r6, r8
 8008738:	b5c0      	push	{r6, r7, lr}
 800873a:	4aca      	ldr	r2, [pc, #808]	; (8008a64 <__ieee754_log+0x334>)
 800873c:	b086      	sub	sp, #24
 800873e:	000b      	movs	r3, r1
 8008740:	4291      	cmp	r1, r2
 8008742:	dd00      	ble.n	8008746 <__ieee754_log+0x16>
 8008744:	e0cc      	b.n	80088e0 <__ieee754_log+0x1b0>
 8008746:	004a      	lsls	r2, r1, #1
 8008748:	0852      	lsrs	r2, r2, #1
 800874a:	4302      	orrs	r2, r0
 800874c:	d100      	bne.n	8008750 <__ieee754_log+0x20>
 800874e:	e0d6      	b.n	80088fe <__ieee754_log+0x1ce>
 8008750:	2900      	cmp	r1, #0
 8008752:	da00      	bge.n	8008756 <__ieee754_log+0x26>
 8008754:	e0e6      	b.n	8008924 <__ieee754_log+0x1f4>
 8008756:	4bc4      	ldr	r3, [pc, #784]	; (8008a68 <__ieee754_log+0x338>)
 8008758:	2200      	movs	r2, #0
 800875a:	f7f9 fe2f 	bl	80023bc <__aeabi_dmul>
 800875e:	2536      	movs	r5, #54	; 0x36
 8008760:	4cc2      	ldr	r4, [pc, #776]	; (8008a6c <__ieee754_log+0x33c>)
 8008762:	000b      	movs	r3, r1
 8008764:	426d      	negs	r5, r5
 8008766:	42a3      	cmp	r3, r4
 8008768:	dd00      	ble.n	800876c <__ieee754_log+0x3c>
 800876a:	e0be      	b.n	80088ea <__ieee754_log+0x1ba>
 800876c:	151a      	asrs	r2, r3, #20
 800876e:	4cc0      	ldr	r4, [pc, #768]	; (8008a70 <__ieee754_log+0x340>)
 8008770:	031b      	lsls	r3, r3, #12
 8008772:	0b1b      	lsrs	r3, r3, #12
 8008774:	4698      	mov	r8, r3
 8008776:	46a4      	mov	ip, r4
 8008778:	2480      	movs	r4, #128	; 0x80
 800877a:	4bbe      	ldr	r3, [pc, #760]	; (8008a74 <__ieee754_log+0x344>)
 800877c:	0364      	lsls	r4, r4, #13
 800877e:	4443      	add	r3, r8
 8008780:	4023      	ands	r3, r4
 8008782:	4cbd      	ldr	r4, [pc, #756]	; (8008a78 <__ieee754_log+0x348>)
 8008784:	4462      	add	r2, ip
 8008786:	1952      	adds	r2, r2, r5
 8008788:	405c      	eors	r4, r3
 800878a:	4645      	mov	r5, r8
 800878c:	151b      	asrs	r3, r3, #20
 800878e:	4699      	mov	r9, r3
 8008790:	4325      	orrs	r5, r4
 8008792:	4bb9      	ldr	r3, [pc, #740]	; (8008a78 <__ieee754_log+0x348>)
 8008794:	0029      	movs	r1, r5
 8008796:	4491      	add	r9, r2
 8008798:	2200      	movs	r2, #0
 800879a:	f7fa f88f 	bl	80028bc <__aeabi_dsub>
 800879e:	4643      	mov	r3, r8
 80087a0:	3302      	adds	r3, #2
 80087a2:	031b      	lsls	r3, r3, #12
 80087a4:	0006      	movs	r6, r0
 80087a6:	000f      	movs	r7, r1
 80087a8:	0b1b      	lsrs	r3, r3, #12
 80087aa:	2200      	movs	r2, #0
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	dc00      	bgt.n	80087b2 <__ieee754_log+0x82>
 80087b0:	e0ac      	b.n	800890c <__ieee754_log+0x1dc>
 80087b2:	2380      	movs	r3, #128	; 0x80
 80087b4:	05db      	lsls	r3, r3, #23
 80087b6:	f7f8 febd 	bl	8001534 <__aeabi_dadd>
 80087ba:	0002      	movs	r2, r0
 80087bc:	000b      	movs	r3, r1
 80087be:	0030      	movs	r0, r6
 80087c0:	0039      	movs	r1, r7
 80087c2:	f7f9 f9c7 	bl	8001b54 <__aeabi_ddiv>
 80087c6:	0004      	movs	r4, r0
 80087c8:	4648      	mov	r0, r9
 80087ca:	000d      	movs	r5, r1
 80087cc:	f7fa fbc0 	bl	8002f50 <__aeabi_i2d>
 80087d0:	0022      	movs	r2, r4
 80087d2:	9000      	str	r0, [sp, #0]
 80087d4:	9101      	str	r1, [sp, #4]
 80087d6:	002b      	movs	r3, r5
 80087d8:	0020      	movs	r0, r4
 80087da:	0029      	movs	r1, r5
 80087dc:	9404      	str	r4, [sp, #16]
 80087de:	9505      	str	r5, [sp, #20]
 80087e0:	f7f9 fdec 	bl	80023bc <__aeabi_dmul>
 80087e4:	000d      	movs	r5, r1
 80087e6:	0004      	movs	r4, r0
 80087e8:	49a4      	ldr	r1, [pc, #656]	; (8008a7c <__ieee754_log+0x34c>)
 80087ea:	0022      	movs	r2, r4
 80087ec:	4441      	add	r1, r8
 80087ee:	002b      	movs	r3, r5
 80087f0:	468a      	mov	sl, r1
 80087f2:	0020      	movs	r0, r4
 80087f4:	0029      	movs	r1, r5
 80087f6:	9402      	str	r4, [sp, #8]
 80087f8:	9503      	str	r5, [sp, #12]
 80087fa:	f7f9 fddf 	bl	80023bc <__aeabi_dmul>
 80087fe:	0004      	movs	r4, r0
 8008800:	000d      	movs	r5, r1
 8008802:	4a9f      	ldr	r2, [pc, #636]	; (8008a80 <__ieee754_log+0x350>)
 8008804:	4b9f      	ldr	r3, [pc, #636]	; (8008a84 <__ieee754_log+0x354>)
 8008806:	f7f9 fdd9 	bl	80023bc <__aeabi_dmul>
 800880a:	4a9f      	ldr	r2, [pc, #636]	; (8008a88 <__ieee754_log+0x358>)
 800880c:	4b9f      	ldr	r3, [pc, #636]	; (8008a8c <__ieee754_log+0x35c>)
 800880e:	f7f8 fe91 	bl	8001534 <__aeabi_dadd>
 8008812:	0022      	movs	r2, r4
 8008814:	002b      	movs	r3, r5
 8008816:	f7f9 fdd1 	bl	80023bc <__aeabi_dmul>
 800881a:	4a9d      	ldr	r2, [pc, #628]	; (8008a90 <__ieee754_log+0x360>)
 800881c:	4b9d      	ldr	r3, [pc, #628]	; (8008a94 <__ieee754_log+0x364>)
 800881e:	f7f8 fe89 	bl	8001534 <__aeabi_dadd>
 8008822:	0022      	movs	r2, r4
 8008824:	002b      	movs	r3, r5
 8008826:	f7f9 fdc9 	bl	80023bc <__aeabi_dmul>
 800882a:	4a9b      	ldr	r2, [pc, #620]	; (8008a98 <__ieee754_log+0x368>)
 800882c:	4b9b      	ldr	r3, [pc, #620]	; (8008a9c <__ieee754_log+0x36c>)
 800882e:	f7f8 fe81 	bl	8001534 <__aeabi_dadd>
 8008832:	9a02      	ldr	r2, [sp, #8]
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	f7f9 fdc1 	bl	80023bc <__aeabi_dmul>
 800883a:	4a99      	ldr	r2, [pc, #612]	; (8008aa0 <__ieee754_log+0x370>)
 800883c:	9002      	str	r0, [sp, #8]
 800883e:	9103      	str	r1, [sp, #12]
 8008840:	4b98      	ldr	r3, [pc, #608]	; (8008aa4 <__ieee754_log+0x374>)
 8008842:	0020      	movs	r0, r4
 8008844:	0029      	movs	r1, r5
 8008846:	f7f9 fdb9 	bl	80023bc <__aeabi_dmul>
 800884a:	4a97      	ldr	r2, [pc, #604]	; (8008aa8 <__ieee754_log+0x378>)
 800884c:	4b97      	ldr	r3, [pc, #604]	; (8008aac <__ieee754_log+0x37c>)
 800884e:	f7f8 fe71 	bl	8001534 <__aeabi_dadd>
 8008852:	0022      	movs	r2, r4
 8008854:	002b      	movs	r3, r5
 8008856:	f7f9 fdb1 	bl	80023bc <__aeabi_dmul>
 800885a:	4a95      	ldr	r2, [pc, #596]	; (8008ab0 <__ieee754_log+0x380>)
 800885c:	4b95      	ldr	r3, [pc, #596]	; (8008ab4 <__ieee754_log+0x384>)
 800885e:	f7f8 fe69 	bl	8001534 <__aeabi_dadd>
 8008862:	0022      	movs	r2, r4
 8008864:	002b      	movs	r3, r5
 8008866:	f7f9 fda9 	bl	80023bc <__aeabi_dmul>
 800886a:	000b      	movs	r3, r1
 800886c:	0002      	movs	r2, r0
 800886e:	9802      	ldr	r0, [sp, #8]
 8008870:	9903      	ldr	r1, [sp, #12]
 8008872:	f7f8 fe5f 	bl	8001534 <__aeabi_dadd>
 8008876:	000d      	movs	r5, r1
 8008878:	4641      	mov	r1, r8
 800887a:	4b8f      	ldr	r3, [pc, #572]	; (8008ab8 <__ieee754_log+0x388>)
 800887c:	0004      	movs	r4, r0
 800887e:	1a5b      	subs	r3, r3, r1
 8008880:	4651      	mov	r1, sl
 8008882:	430b      	orrs	r3, r1
 8008884:	2b00      	cmp	r3, #0
 8008886:	dc00      	bgt.n	800888a <__ieee754_log+0x15a>
 8008888:	e095      	b.n	80089b6 <__ieee754_log+0x286>
 800888a:	2200      	movs	r2, #0
 800888c:	4b8b      	ldr	r3, [pc, #556]	; (8008abc <__ieee754_log+0x38c>)
 800888e:	0030      	movs	r0, r6
 8008890:	0039      	movs	r1, r7
 8008892:	f7f9 fd93 	bl	80023bc <__aeabi_dmul>
 8008896:	0032      	movs	r2, r6
 8008898:	003b      	movs	r3, r7
 800889a:	f7f9 fd8f 	bl	80023bc <__aeabi_dmul>
 800889e:	000a      	movs	r2, r1
 80088a0:	0001      	movs	r1, r0
 80088a2:	0013      	movs	r3, r2
 80088a4:	9102      	str	r1, [sp, #8]
 80088a6:	9203      	str	r2, [sp, #12]
 80088a8:	0002      	movs	r2, r0
 80088aa:	0029      	movs	r1, r5
 80088ac:	0020      	movs	r0, r4
 80088ae:	f7f8 fe41 	bl	8001534 <__aeabi_dadd>
 80088b2:	9a04      	ldr	r2, [sp, #16]
 80088b4:	9b05      	ldr	r3, [sp, #20]
 80088b6:	f7f9 fd81 	bl	80023bc <__aeabi_dmul>
 80088ba:	464b      	mov	r3, r9
 80088bc:	0004      	movs	r4, r0
 80088be:	000d      	movs	r5, r1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d000      	beq.n	80088c6 <__ieee754_log+0x196>
 80088c4:	e08d      	b.n	80089e2 <__ieee754_log+0x2b2>
 80088c6:	0002      	movs	r2, r0
 80088c8:	000b      	movs	r3, r1
 80088ca:	9802      	ldr	r0, [sp, #8]
 80088cc:	9903      	ldr	r1, [sp, #12]
 80088ce:	f7f9 fff5 	bl	80028bc <__aeabi_dsub>
 80088d2:	0002      	movs	r2, r0
 80088d4:	000b      	movs	r3, r1
 80088d6:	0030      	movs	r0, r6
 80088d8:	0039      	movs	r1, r7
 80088da:	f7f9 ffef 	bl	80028bc <__aeabi_dsub>
 80088de:	e008      	b.n	80088f2 <__ieee754_log+0x1c2>
 80088e0:	4c62      	ldr	r4, [pc, #392]	; (8008a6c <__ieee754_log+0x33c>)
 80088e2:	2500      	movs	r5, #0
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	dc00      	bgt.n	80088ea <__ieee754_log+0x1ba>
 80088e8:	e740      	b.n	800876c <__ieee754_log+0x3c>
 80088ea:	0002      	movs	r2, r0
 80088ec:	000b      	movs	r3, r1
 80088ee:	f7f8 fe21 	bl	8001534 <__aeabi_dadd>
 80088f2:	b006      	add	sp, #24
 80088f4:	bc1c      	pop	{r2, r3, r4}
 80088f6:	4690      	mov	r8, r2
 80088f8:	4699      	mov	r9, r3
 80088fa:	46a2      	mov	sl, r4
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fe:	2200      	movs	r2, #0
 8008900:	2300      	movs	r3, #0
 8008902:	2000      	movs	r0, #0
 8008904:	496e      	ldr	r1, [pc, #440]	; (8008ac0 <__ieee754_log+0x390>)
 8008906:	f7f9 f925 	bl	8001b54 <__aeabi_ddiv>
 800890a:	e7f2      	b.n	80088f2 <__ieee754_log+0x1c2>
 800890c:	2300      	movs	r3, #0
 800890e:	f7f8 fad9 	bl	8000ec4 <__aeabi_dcmpeq>
 8008912:	2800      	cmp	r0, #0
 8008914:	d00e      	beq.n	8008934 <__ieee754_log+0x204>
 8008916:	464b      	mov	r3, r9
 8008918:	2b00      	cmp	r3, #0
 800891a:	d000      	beq.n	800891e <__ieee754_log+0x1ee>
 800891c:	e084      	b.n	8008a28 <__ieee754_log+0x2f8>
 800891e:	2000      	movs	r0, #0
 8008920:	2100      	movs	r1, #0
 8008922:	e7e6      	b.n	80088f2 <__ieee754_log+0x1c2>
 8008924:	0002      	movs	r2, r0
 8008926:	f7f9 ffc9 	bl	80028bc <__aeabi_dsub>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	f7f9 f911 	bl	8001b54 <__aeabi_ddiv>
 8008932:	e7de      	b.n	80088f2 <__ieee754_log+0x1c2>
 8008934:	4a63      	ldr	r2, [pc, #396]	; (8008ac4 <__ieee754_log+0x394>)
 8008936:	4b64      	ldr	r3, [pc, #400]	; (8008ac8 <__ieee754_log+0x398>)
 8008938:	0030      	movs	r0, r6
 800893a:	0039      	movs	r1, r7
 800893c:	f7f9 fd3e 	bl	80023bc <__aeabi_dmul>
 8008940:	0002      	movs	r2, r0
 8008942:	000b      	movs	r3, r1
 8008944:	2000      	movs	r0, #0
 8008946:	495d      	ldr	r1, [pc, #372]	; (8008abc <__ieee754_log+0x38c>)
 8008948:	f7f9 ffb8 	bl	80028bc <__aeabi_dsub>
 800894c:	0032      	movs	r2, r6
 800894e:	0004      	movs	r4, r0
 8008950:	000d      	movs	r5, r1
 8008952:	003b      	movs	r3, r7
 8008954:	0030      	movs	r0, r6
 8008956:	0039      	movs	r1, r7
 8008958:	f7f9 fd30 	bl	80023bc <__aeabi_dmul>
 800895c:	000b      	movs	r3, r1
 800895e:	0002      	movs	r2, r0
 8008960:	0029      	movs	r1, r5
 8008962:	0020      	movs	r0, r4
 8008964:	f7f9 fd2a 	bl	80023bc <__aeabi_dmul>
 8008968:	464b      	mov	r3, r9
 800896a:	0004      	movs	r4, r0
 800896c:	000d      	movs	r5, r1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d030      	beq.n	80089d4 <__ieee754_log+0x2a4>
 8008972:	4648      	mov	r0, r9
 8008974:	f7fa faec 	bl	8002f50 <__aeabi_i2d>
 8008978:	9000      	str	r0, [sp, #0]
 800897a:	9101      	str	r1, [sp, #4]
 800897c:	4a53      	ldr	r2, [pc, #332]	; (8008acc <__ieee754_log+0x39c>)
 800897e:	4b54      	ldr	r3, [pc, #336]	; (8008ad0 <__ieee754_log+0x3a0>)
 8008980:	f7f9 fd1c 	bl	80023bc <__aeabi_dmul>
 8008984:	4a53      	ldr	r2, [pc, #332]	; (8008ad4 <__ieee754_log+0x3a4>)
 8008986:	9002      	str	r0, [sp, #8]
 8008988:	9103      	str	r1, [sp, #12]
 800898a:	9800      	ldr	r0, [sp, #0]
 800898c:	9901      	ldr	r1, [sp, #4]
 800898e:	4b52      	ldr	r3, [pc, #328]	; (8008ad8 <__ieee754_log+0x3a8>)
 8008990:	f7f9 fd14 	bl	80023bc <__aeabi_dmul>
 8008994:	0002      	movs	r2, r0
 8008996:	000b      	movs	r3, r1
 8008998:	0020      	movs	r0, r4
 800899a:	0029      	movs	r1, r5
 800899c:	f7f9 ff8e 	bl	80028bc <__aeabi_dsub>
 80089a0:	0032      	movs	r2, r6
 80089a2:	003b      	movs	r3, r7
 80089a4:	f7f9 ff8a 	bl	80028bc <__aeabi_dsub>
 80089a8:	0002      	movs	r2, r0
 80089aa:	000b      	movs	r3, r1
 80089ac:	9802      	ldr	r0, [sp, #8]
 80089ae:	9903      	ldr	r1, [sp, #12]
 80089b0:	f7f9 ff84 	bl	80028bc <__aeabi_dsub>
 80089b4:	e79d      	b.n	80088f2 <__ieee754_log+0x1c2>
 80089b6:	0022      	movs	r2, r4
 80089b8:	002b      	movs	r3, r5
 80089ba:	0030      	movs	r0, r6
 80089bc:	0039      	movs	r1, r7
 80089be:	f7f9 ff7d 	bl	80028bc <__aeabi_dsub>
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	9b05      	ldr	r3, [sp, #20]
 80089c6:	f7f9 fcf9 	bl	80023bc <__aeabi_dmul>
 80089ca:	464b      	mov	r3, r9
 80089cc:	0004      	movs	r4, r0
 80089ce:	000d      	movs	r5, r1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d141      	bne.n	8008a58 <__ieee754_log+0x328>
 80089d4:	0022      	movs	r2, r4
 80089d6:	002b      	movs	r3, r5
 80089d8:	0030      	movs	r0, r6
 80089da:	0039      	movs	r1, r7
 80089dc:	f7f9 ff6e 	bl	80028bc <__aeabi_dsub>
 80089e0:	e787      	b.n	80088f2 <__ieee754_log+0x1c2>
 80089e2:	4a3a      	ldr	r2, [pc, #232]	; (8008acc <__ieee754_log+0x39c>)
 80089e4:	4b3a      	ldr	r3, [pc, #232]	; (8008ad0 <__ieee754_log+0x3a0>)
 80089e6:	9800      	ldr	r0, [sp, #0]
 80089e8:	9901      	ldr	r1, [sp, #4]
 80089ea:	f7f9 fce7 	bl	80023bc <__aeabi_dmul>
 80089ee:	4a39      	ldr	r2, [pc, #228]	; (8008ad4 <__ieee754_log+0x3a4>)
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	9105      	str	r1, [sp, #20]
 80089f4:	9800      	ldr	r0, [sp, #0]
 80089f6:	9901      	ldr	r1, [sp, #4]
 80089f8:	4b37      	ldr	r3, [pc, #220]	; (8008ad8 <__ieee754_log+0x3a8>)
 80089fa:	f7f9 fcdf 	bl	80023bc <__aeabi_dmul>
 80089fe:	0022      	movs	r2, r4
 8008a00:	002b      	movs	r3, r5
 8008a02:	f7f8 fd97 	bl	8001534 <__aeabi_dadd>
 8008a06:	0002      	movs	r2, r0
 8008a08:	000b      	movs	r3, r1
 8008a0a:	9802      	ldr	r0, [sp, #8]
 8008a0c:	9903      	ldr	r1, [sp, #12]
 8008a0e:	f7f9 ff55 	bl	80028bc <__aeabi_dsub>
 8008a12:	0032      	movs	r2, r6
 8008a14:	003b      	movs	r3, r7
 8008a16:	f7f9 ff51 	bl	80028bc <__aeabi_dsub>
 8008a1a:	0002      	movs	r2, r0
 8008a1c:	000b      	movs	r3, r1
 8008a1e:	9804      	ldr	r0, [sp, #16]
 8008a20:	9905      	ldr	r1, [sp, #20]
 8008a22:	f7f9 ff4b 	bl	80028bc <__aeabi_dsub>
 8008a26:	e764      	b.n	80088f2 <__ieee754_log+0x1c2>
 8008a28:	4648      	mov	r0, r9
 8008a2a:	f7fa fa91 	bl	8002f50 <__aeabi_i2d>
 8008a2e:	4a27      	ldr	r2, [pc, #156]	; (8008acc <__ieee754_log+0x39c>)
 8008a30:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <__ieee754_log+0x3a0>)
 8008a32:	0004      	movs	r4, r0
 8008a34:	000d      	movs	r5, r1
 8008a36:	f7f9 fcc1 	bl	80023bc <__aeabi_dmul>
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <__ieee754_log+0x3a4>)
 8008a3c:	0006      	movs	r6, r0
 8008a3e:	000f      	movs	r7, r1
 8008a40:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <__ieee754_log+0x3a8>)
 8008a42:	0020      	movs	r0, r4
 8008a44:	0029      	movs	r1, r5
 8008a46:	f7f9 fcb9 	bl	80023bc <__aeabi_dmul>
 8008a4a:	0002      	movs	r2, r0
 8008a4c:	000b      	movs	r3, r1
 8008a4e:	0030      	movs	r0, r6
 8008a50:	0039      	movs	r1, r7
 8008a52:	f7f8 fd6f 	bl	8001534 <__aeabi_dadd>
 8008a56:	e74c      	b.n	80088f2 <__ieee754_log+0x1c2>
 8008a58:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <__ieee754_log+0x39c>)
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <__ieee754_log+0x3a0>)
 8008a5c:	9800      	ldr	r0, [sp, #0]
 8008a5e:	9901      	ldr	r1, [sp, #4]
 8008a60:	e78e      	b.n	8008980 <__ieee754_log+0x250>
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	000fffff 	.word	0x000fffff
 8008a68:	43500000 	.word	0x43500000
 8008a6c:	7fefffff 	.word	0x7fefffff
 8008a70:	fffffc01 	.word	0xfffffc01
 8008a74:	00095f64 	.word	0x00095f64
 8008a78:	3ff00000 	.word	0x3ff00000
 8008a7c:	fff9eb86 	.word	0xfff9eb86
 8008a80:	df3e5244 	.word	0xdf3e5244
 8008a84:	3fc2f112 	.word	0x3fc2f112
 8008a88:	96cb03de 	.word	0x96cb03de
 8008a8c:	3fc74664 	.word	0x3fc74664
 8008a90:	94229359 	.word	0x94229359
 8008a94:	3fd24924 	.word	0x3fd24924
 8008a98:	55555593 	.word	0x55555593
 8008a9c:	3fe55555 	.word	0x3fe55555
 8008aa0:	d078c69f 	.word	0xd078c69f
 8008aa4:	3fc39a09 	.word	0x3fc39a09
 8008aa8:	1d8e78af 	.word	0x1d8e78af
 8008aac:	3fcc71c5 	.word	0x3fcc71c5
 8008ab0:	9997fa04 	.word	0x9997fa04
 8008ab4:	3fd99999 	.word	0x3fd99999
 8008ab8:	0006b851 	.word	0x0006b851
 8008abc:	3fe00000 	.word	0x3fe00000
 8008ac0:	c3500000 	.word	0xc3500000
 8008ac4:	55555555 	.word	0x55555555
 8008ac8:	3fd55555 	.word	0x3fd55555
 8008acc:	fee00000 	.word	0xfee00000
 8008ad0:	3fe62e42 	.word	0x3fe62e42
 8008ad4:	35793c76 	.word	0x35793c76
 8008ad8:	3dea39ef 	.word	0x3dea39ef

08008adc <matherr>:
 8008adc:	2000      	movs	r0, #0
 8008ade:	4770      	bx	lr

08008ae0 <nan>:
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4901      	ldr	r1, [pc, #4]	; (8008ae8 <nan+0x8>)
 8008ae4:	4770      	bx	lr
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	7ff80000 	.word	0x7ff80000

08008aec <register_fini>:
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <register_fini+0x10>)
 8008aee:	b510      	push	{r4, lr}
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <register_fini+0xe>
 8008af4:	4802      	ldr	r0, [pc, #8]	; (8008b00 <register_fini+0x14>)
 8008af6:	f7f7 fb3d 	bl	8000174 <atexit>
 8008afa:	bd10      	pop	{r4, pc}
 8008afc:	00000000 	.word	0x00000000
 8008b00:	08000185 	.word	0x08000185

08008b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008b04:	480d      	ldr	r0, [pc, #52]	; (8008b3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b0a:	e003      	b.n	8008b14 <LoopCopyDataInit>

08008b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b12:	3104      	adds	r1, #4

08008b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b14:	480b      	ldr	r0, [pc, #44]	; (8008b44 <LoopForever+0xa>)
  ldr  r3, =_edata
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b1c:	d3f6      	bcc.n	8008b0c <CopyDataInit>
  ldr  r2, =_sbss
 8008b1e:	4a0b      	ldr	r2, [pc, #44]	; (8008b4c <LoopForever+0x12>)
  b  LoopFillZerobss
 8008b20:	e002      	b.n	8008b28 <LoopFillZerobss>

08008b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008b22:	2300      	movs	r3, #0
  str  r3, [r2]
 8008b24:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b26:	3204      	adds	r2, #4

08008b28 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008b28:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <LoopForever+0x16>)
  cmp  r2, r3
 8008b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b2c:	d3f9      	bcc.n	8008b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008b2e:	f000 f8c7 	bl	8008cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b32:	f7f7 fb41 	bl	80001b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b36:	f000 f837 	bl	8008ba8 <main>

08008b3a <LoopForever>:

LoopForever:
    b LoopForever
 8008b3a:	e7fe      	b.n	8008b3a <LoopForever>
   ldr   r0, =_estack
 8008b3c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8008b40:	08018bbc 	.word	0x08018bbc
  ldr  r0, =_sdata
 8008b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b48:	20000b14 	.word	0x20000b14
  ldr  r2, =_sbss
 8008b4c:	20000b14 	.word	0x20000b14
  ldr  r3, = _ebss
 8008b50:	20002354 	.word	0x20002354

08008b54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b54:	e7fe      	b.n	8008b54 <ADC1_COMP_IRQHandler>
	...

08008b58 <LORA_ConfirmClass>:

static void LORA_HasJoined(void) {
   PRINTF("JOINED\n\r");
}

static void LORA_ConfirmClass(DeviceClass_t Class) {
 8008b58:	b510      	push	{r4, lr}
   PRINTF("switch to class %c done\n\r","ABC"[Class] );
 8008b5a:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <LORA_ConfirmClass+0x10>)
 8008b5c:	5c19      	ldrb	r1, [r3, r0]
 8008b5e:	4803      	ldr	r0, [pc, #12]	; (8008b6c <LORA_ConfirmClass+0x14>)
 8008b60:	f00b fd7c 	bl	801465c <TraceSend>
}
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	0801710a 	.word	0x0801710a
 8008b6c:	080170f0 	.word	0x080170f0

08008b70 <LORA_HasJoined>:
static void LORA_HasJoined(void) {
 8008b70:	b510      	push	{r4, lr}
   PRINTF("JOINED\n\r");
 8008b72:	4802      	ldr	r0, [pc, #8]	; (8008b7c <LORA_HasJoined+0xc>)
 8008b74:	f00b fd72 	bl	801465c <TraceSend>
}
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	0801710e 	.word	0x0801710e

08008b80 <LORA_TxNeeded>:
 //  PRINTF("Network Server is asking for an uplink transmission\n\r");

   static uint8_t AppDataBuff[1];
   static lora_AppData_t AppData = {AppDataBuff, 0, 0};

   AppData.BuffSize = 0;
 8008b80:	2100      	movs	r1, #0
   AppData.Port = 2;
 8008b82:	2302      	movs	r3, #2
static void LORA_TxNeeded(void) {
 8008b84:	b510      	push	{r4, lr}
   AppData.BuffSize = 0;
 8008b86:	4803      	ldr	r0, [pc, #12]	; (8008b94 <LORA_TxNeeded+0x14>)
 8008b88:	7101      	strb	r1, [r0, #4]
   AppData.Port = 2;
 8008b8a:	7143      	strb	r3, [r0, #5]

   LORA_send( &AppData, LORAWAN_UNCONFIRMED_MSG);
 8008b8c:	f002 f8bc 	bl	800ad08 <LORA_send>
}
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	200009bc 	.word	0x200009bc

08008b98 <LoraRxData>:
static void LoraRxData(lora_AppData_t *AppData) {
 8008b98:	0003      	movs	r3, r0
 8008b9a:	b510      	push	{r4, lr}
   set_at_receive(AppData->Port, AppData->Buff, AppData->BuffSize);
 8008b9c:	6819      	ldr	r1, [r3, #0]
 8008b9e:	7902      	ldrb	r2, [r0, #4]
 8008ba0:	7940      	ldrb	r0, [r0, #5]
 8008ba2:	f000 fb0f 	bl	80091c4 <set_at_receive>
}
 8008ba6:	bd10      	pop	{r4, pc}

08008ba8 <main>:
int main(void) {
 8008ba8:	b570      	push	{r4, r5, r6, lr}
   HAL_Init();
 8008baa:	f005 f83d 	bl	800dc28 <HAL_Init>
   SystemClock_Config();
 8008bae:	f000 f90f 	bl	8008dd0 <SystemClock_Config>
   HW_Init();
 8008bb2:	f000 f9bf 	bl	8008f34 <HW_Init>
   CMD_Init();
 8008bb6:	f001 fadf 	bl	800a178 <CMD_Init>
   PPRINTF("ATtention command interface\n\r");
 8008bba:	4818      	ldr	r0, [pc, #96]	; (8008c1c <main+0x74>)
 8008bbc:	f00b fd4e 	bl	801465c <TraceSend>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1fa      	bne.n	8008bba <main+0x12>
   update_flag();
 8008bc4:	f002 f80c 	bl	800abe0 <update_flag>
   flag = readEEPROMByte(ADR_ADDRESS_FLAG);
 8008bc8:	201c      	movs	r0, #28
 8008bca:	f003 f92f 	bl	800be2c <readEEPROMByte>
   if(flag == FLAG_CODE) {
 8008bce:	4d14      	ldr	r5, [pc, #80]	; (8008c20 <main+0x78>)
 8008bd0:	4c14      	ldr	r4, [pc, #80]	; (8008c24 <main+0x7c>)
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	d105      	bne.n	8008be4 <main+0x3c>
       LoRaParamInit.AdrEnable = readEEPROMByte(ADR_ADDRESS);
 8008bd8:	201b      	movs	r0, #27
 8008bda:	f003 f927 	bl	800be2c <readEEPROMByte>
 8008bde:	1e43      	subs	r3, r0, #1
 8008be0:	4198      	sbcs	r0, r3
 8008be2:	7020      	strb	r0, [r4, #0]
   flag = readEEPROMByte(PUBLIC_NWK_FLAG);
 8008be4:	2022      	movs	r0, #34	; 0x22
 8008be6:	f003 f921 	bl	800be2c <readEEPROMByte>
   if(flag == FLAG_CODE) {
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	4298      	cmp	r0, r3
 8008bee:	d105      	bne.n	8008bfc <main+0x54>
       LoRaParamInit.EnablePublicNetwork = readEEPROMByte(PUBLIC_NWK);
 8008bf0:	2021      	movs	r0, #33	; 0x21
 8008bf2:	f003 f91b 	bl	800be2c <readEEPROMByte>
 8008bf6:	1e43      	subs	r3, r0, #1
 8008bf8:	4198      	sbcs	r0, r3
 8008bfa:	70a0      	strb	r0, [r4, #2]
   LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 8008bfc:	0021      	movs	r1, r4
 8008bfe:	480a      	ldr	r0, [pc, #40]	; (8008c28 <main+0x80>)
 8008c00:	f002 fc8e 	bl	800b520 <LORA_Init>
       int is_char_received = CMD_Process();
 8008c04:	f001 fac4 	bl	800a190 <CMD_Process>
 8008c08:	0004      	movs	r4, r0
       LoRaMacProcess();
 8008c0a:	f007 fa07 	bl	801001c <LoRaMacProcess>
       if(is_char_received == 0) {
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d1f8      	bne.n	8008c04 <main+0x5c>
          LPM_EnterOffMode();
 8008c12:	f00b f967 	bl	8013ee4 <LPM_EnterOffMode>
          LPM_ExitOffMode();
 8008c16:	f00b f966 	bl	8013ee6 <LPM_ExitOffMode>
 8008c1a:	e7f3      	b.n	8008c04 <main+0x5c>
 8008c1c:	08017117 	.word	0x08017117
 8008c20:	200009f4 	.word	0x200009f4
 8008c24:	200009e4 	.word	0x200009e4
 8008c28:	200009c4 	.word	0x200009c4

08008c2c <RTC_IRQHandler>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	f001 fd2b 	bl	800a688 <HW_RTC_IrqHandler>
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <EXTI0_1_IRQHandler>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	2001      	movs	r0, #1
 8008c38:	f005 f902 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c3c:	2002      	movs	r0, #2
 8008c3e:	f005 f8ff 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <EXTI2_3_IRQHandler>:
 8008c44:	b510      	push	{r4, lr}
 8008c46:	2004      	movs	r0, #4
 8008c48:	f005 f8fa 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c4c:	2008      	movs	r0, #8
 8008c4e:	f005 f8f7 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c52:	bd10      	pop	{r4, pc}

08008c54 <EXTI4_15_IRQHandler>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	2010      	movs	r0, #16
 8008c58:	f005 f8f2 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c5c:	2020      	movs	r0, #32
 8008c5e:	f005 f8ef 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c62:	2040      	movs	r0, #64	; 0x40
 8008c64:	f005 f8ec 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c68:	2080      	movs	r0, #128	; 0x80
 8008c6a:	f005 f8e9 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c6e:	2080      	movs	r0, #128	; 0x80
 8008c70:	0040      	lsls	r0, r0, #1
 8008c72:	f005 f8e5 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c76:	2080      	movs	r0, #128	; 0x80
 8008c78:	0080      	lsls	r0, r0, #2
 8008c7a:	f005 f8e1 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c7e:	2080      	movs	r0, #128	; 0x80
 8008c80:	00c0      	lsls	r0, r0, #3
 8008c82:	f005 f8dd 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c86:	2080      	movs	r0, #128	; 0x80
 8008c88:	0100      	lsls	r0, r0, #4
 8008c8a:	f005 f8d9 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c8e:	2080      	movs	r0, #128	; 0x80
 8008c90:	0140      	lsls	r0, r0, #5
 8008c92:	f005 f8d5 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c96:	2080      	movs	r0, #128	; 0x80
 8008c98:	0180      	lsls	r0, r0, #6
 8008c9a:	f005 f8d1 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008c9e:	2080      	movs	r0, #128	; 0x80
 8008ca0:	01c0      	lsls	r0, r0, #7
 8008ca2:	f005 f8cd 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008ca6:	2080      	movs	r0, #128	; 0x80
 8008ca8:	0200      	lsls	r0, r0, #8
 8008caa:	f005 f8c9 	bl	800de40 <HAL_GPIO_EXTI_IRQHandler>
 8008cae:	bd10      	pop	{r4, pc}

08008cb0 <RNG_LPUART1_IRQHandler>:
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	f001 fe8f 	bl	800a9d4 <vcom_IRQHandler>
 8008cb6:	bd10      	pop	{r4, pc}

08008cb8 <DMA1_Channel4_5_6_7_IRQHandler>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	f001 fe83 	bl	800a9c4 <vcom_DMA_TX_IRQHandler>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8008cc0:	2280      	movs	r2, #128	; 0x80
 8008cc2:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <SystemInit+0x44>)
 8008cc4:	0052      	lsls	r2, r2, #1
 8008cc6:	6819      	ldr	r1, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	490e      	ldr	r1, [pc, #56]	; (8008d08 <SystemInit+0x48>)
 8008cd0:	400a      	ands	r2, r1
 8008cd2:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	490d      	ldr	r1, [pc, #52]	; (8008d0c <SystemInit+0x4c>)
 8008cd8:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008cda:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8008cdc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	438a      	bics	r2, r1
 8008ce2:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	490a      	ldr	r1, [pc, #40]	; (8008d10 <SystemInit+0x50>)
 8008ce8:	400a      	ands	r2, r1
 8008cea:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <SystemInit+0x54>)
 8008cf0:	400a      	ands	r2, r1
 8008cf2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008cf8:	2280      	movs	r2, #128	; 0x80
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <SystemInit+0x58>)
 8008cfc:	0512      	lsls	r2, r2, #20
 8008cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8008d00:	4770      	bx	lr
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	40021000 	.word	0x40021000
 8008d08:	88ff400c 	.word	0x88ff400c
 8008d0c:	fef6fff6 	.word	0xfef6fff6
 8008d10:	fffbffff 	.word	0xfffbffff
 8008d14:	ff02ffff 	.word	0xff02ffff
 8008d18:	e000ed00 	.word	0xe000ed00

08008d1c <HW_GpioInit>:
 8008d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1e:	2701      	movs	r7, #1
 8008d20:	2602      	movs	r6, #2
 8008d22:	2504      	movs	r5, #4
 8008d24:	b08b      	sub	sp, #44	; 0x2c
 8008d26:	2214      	movs	r2, #20
 8008d28:	2100      	movs	r1, #0
 8008d2a:	a805      	add	r0, sp, #20
 8008d2c:	f7f7 fa68 	bl	8000200 <memset>
 8008d30:	2280      	movs	r2, #128	; 0x80
 8008d32:	4c21      	ldr	r4, [pc, #132]	; (8008db8 <HW_GpioInit+0x9c>)
 8008d34:	20a0      	movs	r0, #160	; 0xa0
 8008d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d38:	a905      	add	r1, sp, #20
 8008d3a:	433b      	orrs	r3, r7
 8008d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d40:	05c0      	lsls	r0, r0, #23
 8008d42:	403b      	ands	r3, r7
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d4a:	4333      	orrs	r3, r6
 8008d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d50:	4033      	ands	r3, r6
 8008d52:	9302      	str	r3, [sp, #8]
 8008d54:	9b02      	ldr	r3, [sp, #8]
 8008d56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d58:	432b      	orrs	r3, r5
 8008d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d5e:	402b      	ands	r3, r5
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d66:	4313      	orrs	r3, r2
 8008d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	2303      	movs	r3, #3
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <HW_GpioInit+0xa0>)
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	f004 ff9f 	bl	800dcbc <HAL_GPIO_Init>
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <HW_GpioInit+0xa4>)
 8008d80:	a905      	add	r1, sp, #20
 8008d82:	4810      	ldr	r0, [pc, #64]	; (8008dc4 <HW_GpioInit+0xa8>)
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	f004 ff99 	bl	800dcbc <HAL_GPIO_Init>
 8008d8a:	a905      	add	r1, sp, #20
 8008d8c:	480e      	ldr	r0, [pc, #56]	; (8008dc8 <HW_GpioInit+0xac>)
 8008d8e:	f004 ff95 	bl	800dcbc <HAL_GPIO_Init>
 8008d92:	a905      	add	r1, sp, #20
 8008d94:	480d      	ldr	r0, [pc, #52]	; (8008dcc <HW_GpioInit+0xb0>)
 8008d96:	f004 ff91 	bl	800dcbc <HAL_GPIO_Init>
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d9e:	43bb      	bics	r3, r7
 8008da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008da4:	43b3      	bics	r3, r6
 8008da6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008da8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008daa:	43ab      	bics	r3, r5
 8008dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008db0:	4393      	bics	r3, r2
 8008db2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008db4:	b00b      	add	sp, #44	; 0x2c
 8008db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	00009fff 	.word	0x00009fff
 8008dc0:	0000ffff 	.word	0x0000ffff
 8008dc4:	50000400 	.word	0x50000400
 8008dc8:	50000800 	.word	0x50000800
 8008dcc:	50001c00 	.word	0x50001c00

08008dd0 <SystemClock_Config>:
 8008dd0:	b500      	push	{lr}
 8008dd2:	b095      	sub	sp, #84	; 0x54
 8008dd4:	2214      	movs	r2, #20
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	a801      	add	r0, sp, #4
 8008dda:	f7f7 fa11 	bl	8000200 <memset>
 8008dde:	2238      	movs	r2, #56	; 0x38
 8008de0:	2100      	movs	r1, #0
 8008de2:	a806      	add	r0, sp, #24
 8008de4:	f7f7 fa0c 	bl	8000200 <memset>
 8008de8:	2302      	movs	r3, #2
 8008dea:	9306      	str	r3, [sp, #24]
 8008dec:	9310      	str	r3, [sp, #64]	; 0x40
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	031b      	lsls	r3, r3, #12
 8008df2:	2201      	movs	r2, #1
 8008df4:	9312      	str	r3, [sp, #72]	; 0x48
 8008df6:	2380      	movs	r3, #128	; 0x80
 8008df8:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	320f      	adds	r2, #15
 8008dfe:	a806      	add	r0, sp, #24
 8008e00:	920a      	str	r2, [sp, #40]	; 0x28
 8008e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e04:	f004 f9b6 	bl	800d174 <HAL_RCC_OscConfig>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d001      	beq.n	8008e10 <SystemClock_Config+0x40>
 8008e0c:	f001 fa62 	bl	800a2d4 <Error_Handler>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	4a11      	ldr	r2, [pc, #68]	; (8008e58 <SystemClock_Config+0x88>)
 8008e14:	055b      	lsls	r3, r3, #21
 8008e16:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6393      	str	r3, [r2, #56]	; 0x38
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <SystemClock_Config+0x8c>)
 8008e1e:	4910      	ldr	r1, [pc, #64]	; (8008e60 <SystemClock_Config+0x90>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4011      	ands	r1, r2
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	0112      	lsls	r2, r2, #4
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	2110      	movs	r1, #16
 8008e2e:	001a      	movs	r2, r3
 8008e30:	6853      	ldr	r3, [r2, #4]
 8008e32:	400b      	ands	r3, r1
 8008e34:	d1fc      	bne.n	8008e30 <SystemClock_Config+0x60>
 8008e36:	220f      	movs	r2, #15
 8008e38:	2101      	movs	r1, #1
 8008e3a:	9201      	str	r2, [sp, #4]
 8008e3c:	a801      	add	r0, sp, #4
 8008e3e:	3a0c      	subs	r2, #12
 8008e40:	9202      	str	r2, [sp, #8]
 8008e42:	9303      	str	r3, [sp, #12]
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	f004 fc44 	bl	800d6d4 <HAL_RCC_ClockConfig>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d001      	beq.n	8008e54 <SystemClock_Config+0x84>
 8008e50:	f001 fa40 	bl	800a2d4 <Error_Handler>
 8008e54:	b015      	add	sp, #84	; 0x54
 8008e56:	bd00      	pop	{pc}
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	40007000 	.word	0x40007000
 8008e60:	ffffe7ff 	.word	0xffffe7ff

08008e64 <HW_GetRandomSeed>:
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <HW_GetRandomSeed+0x14>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <HW_GetRandomSeed+0x18>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4058      	eors	r0, r3
 8008e6e:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <HW_GetRandomSeed+0x1c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4058      	eors	r0, r3
 8008e74:	4770      	bx	lr
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	1ff80050 	.word	0x1ff80050
 8008e7c:	1ff80054 	.word	0x1ff80054
 8008e80:	1ff80064 	.word	0x1ff80064

08008e84 <HW_GetUniqueId>:
 8008e84:	4911      	ldr	r1, [pc, #68]	; (8008ecc <HW_GetUniqueId+0x48>)
 8008e86:	4a12      	ldr	r2, [pc, #72]	; (8008ed0 <HW_GetUniqueId+0x4c>)
 8008e88:	680b      	ldr	r3, [r1, #0]
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	6814      	ldr	r4, [r2, #0]
 8008e8e:	191b      	adds	r3, r3, r4
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	71c3      	strb	r3, [r0, #7]
 8008e94:	6814      	ldr	r4, [r2, #0]
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	191b      	adds	r3, r3, r4
 8008e9a:	0c1b      	lsrs	r3, r3, #16
 8008e9c:	7183      	strb	r3, [r0, #6]
 8008e9e:	6814      	ldr	r4, [r2, #0]
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	191b      	adds	r3, r3, r4
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	7143      	strb	r3, [r0, #5]
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	680b      	ldr	r3, [r1, #0]
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	7103      	strb	r3, [r0, #4]
 8008eb0:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <HW_GetUniqueId+0x50>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	0e12      	lsrs	r2, r2, #24
 8008eb6:	70c2      	strb	r2, [r0, #3]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	0c12      	lsrs	r2, r2, #16
 8008ebc:	7082      	strb	r2, [r0, #2]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	0a12      	lsrs	r2, r2, #8
 8008ec2:	7042      	strb	r2, [r0, #1]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	7003      	strb	r3, [r0, #0]
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	1ff80050 	.word	0x1ff80050
 8008ed0:	1ff80064 	.word	0x1ff80064
 8008ed4:	1ff80054 	.word	0x1ff80054

08008ed8 <HW_AdcInit>:
 8008ed8:	4912      	ldr	r1, [pc, #72]	; (8008f24 <HW_AdcInit+0x4c>)
 8008eda:	b510      	push	{r4, lr}
 8008edc:	780b      	ldrb	r3, [r1, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d11e      	bne.n	8008f20 <HW_AdcInit+0x48>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4810      	ldr	r0, [pc, #64]	; (8008f28 <HW_AdcInit+0x50>)
 8008ee6:	700a      	strb	r2, [r1, #0]
 8008ee8:	4910      	ldr	r1, [pc, #64]	; (8008f2c <HW_AdcInit+0x54>)
 8008eea:	6403      	str	r3, [r0, #64]	; 0x40
 8008eec:	6001      	str	r1, [r0, #0]
 8008eee:	2180      	movs	r1, #128	; 0x80
 8008ef0:	0609      	lsls	r1, r1, #24
 8008ef2:	6041      	str	r1, [r0, #4]
 8008ef4:	2107      	movs	r1, #7
 8008ef6:	61c3      	str	r3, [r0, #28]
 8008ef8:	6183      	str	r3, [r0, #24]
 8008efa:	6083      	str	r3, [r0, #8]
 8008efc:	60c3      	str	r3, [r0, #12]
 8008efe:	6203      	str	r3, [r0, #32]
 8008f00:	6243      	str	r3, [r0, #36]	; 0x24
 8008f02:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008f04:	6303      	str	r3, [r0, #48]	; 0x30
 8008f06:	2380      	movs	r3, #128	; 0x80
 8008f08:	6382      	str	r2, [r0, #56]	; 0x38
 8008f0a:	6102      	str	r2, [r0, #16]
 8008f0c:	3203      	adds	r2, #3
 8008f0e:	6142      	str	r2, [r0, #20]
 8008f10:	4a07      	ldr	r2, [pc, #28]	; (8008f30 <HW_AdcInit+0x58>)
 8008f12:	63c1      	str	r1, [r0, #60]	; 0x3c
 8008f14:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	6353      	str	r3, [r2, #52]	; 0x34
 8008f1c:	f003 feea 	bl	800ccf4 <HAL_ADC_Init>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	20000c15 	.word	0x20000c15
 8008f28:	20000c18 	.word	0x20000c18
 8008f2c:	40012400 	.word	0x40012400
 8008f30:	40021000 	.word	0x40021000

08008f34 <HW_Init>:
 8008f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f36:	4c0f      	ldr	r4, [pc, #60]	; (8008f74 <HW_Init+0x40>)
 8008f38:	7825      	ldrb	r5, [r4, #0]
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	d119      	bne.n	8008f72 <HW_Init+0x3e>
 8008f3e:	f7ff ffcb 	bl	8008ed8 <HW_AdcInit>
 8008f42:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <HW_Init+0x44>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	4798      	blx	r3
 8008f4a:	f001 fc85 	bl	800a858 <HW_SPI_Init>
 8008f4e:	f001 fbdb 	bl	800a708 <HW_RTC_Init>
 8008f52:	f00b fb6f 	bl	8014634 <TraceInit>
 8008f56:	0028      	movs	r0, r5
 8008f58:	f00d fbf4 	bl	8016744 <BSP_LED_Init>
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	f00d fbf1 	bl	8016744 <BSP_LED_Init>
 8008f62:	2002      	movs	r0, #2
 8008f64:	f00d fbee 	bl	8016744 <BSP_LED_Init>
 8008f68:	2003      	movs	r0, #3
 8008f6a:	f00d fbeb 	bl	8016744 <BSP_LED_Init>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	7023      	strb	r3, [r4, #0]
 8008f72:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8008f74:	20000c16 	.word	0x20000c16
 8008f78:	08018acc 	.word	0x08018acc

08008f7c <HW_AdcReadChannel>:
 8008f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f7e:	0006      	movs	r6, r0
 8008f80:	2000      	movs	r0, #0
 8008f82:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <HW_AdcReadChannel+0x80>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4283      	cmp	r3, r0
 8008f88:	d036      	beq.n	8008ff8 <HW_AdcReadChannel+0x7c>
 8008f8a:	2308      	movs	r3, #8
 8008f8c:	491c      	ldr	r1, [pc, #112]	; (8009000 <HW_AdcReadChannel+0x84>)
 8008f8e:	684a      	ldr	r2, [r1, #4]
 8008f90:	421a      	tst	r2, r3
 8008f92:	d0fc      	beq.n	8008f8e <HW_AdcReadChannel+0x12>
 8008f94:	2380      	movs	r3, #128	; 0x80
 8008f96:	4d1b      	ldr	r5, [pc, #108]	; (8009004 <HW_AdcReadChannel+0x88>)
 8008f98:	4c1b      	ldr	r4, [pc, #108]	; (8009008 <HW_AdcReadChannel+0x8c>)
 8008f9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	636b      	str	r3, [r5, #52]	; 0x34
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	f004 f85b 	bl	800d060 <HAL_ADCEx_Calibration_Start>
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <HW_AdcReadChannel+0x90>)
 8008fac:	4669      	mov	r1, sp
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4b17      	ldr	r3, [pc, #92]	; (8009010 <HW_AdcReadChannel+0x94>)
 8008fb2:	0020      	movs	r0, r4
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	f003 ffff 	bl	800cfb8 <HAL_ADC_ConfigChannel>
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	4669      	mov	r1, sp
 8008fbe:	015b      	lsls	r3, r3, #5
 8008fc0:	0020      	movs	r0, r4
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	9600      	str	r6, [sp, #0]
 8008fc6:	f003 fff7 	bl	800cfb8 <HAL_ADC_ConfigChannel>
 8008fca:	0020      	movs	r0, r4
 8008fcc:	f003 ff66 	bl	800ce9c <HAL_ADC_Start>
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	0020      	movs	r0, r4
 8008fd4:	4249      	negs	r1, r1
 8008fd6:	f003 ff8d 	bl	800cef4 <HAL_ADC_PollForConversion>
 8008fda:	0020      	movs	r0, r4
 8008fdc:	f003 ffe8 	bl	800cfb0 <HAL_ADC_GetValue>
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	b280      	uxth	r0, r0
 8008fe6:	6899      	ldr	r1, [r3, #8]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	2203      	movs	r2, #3
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008ff2:	4a08      	ldr	r2, [pc, #32]	; (8009014 <HW_AdcReadChannel+0x98>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	636b      	str	r3, [r5, #52]	; 0x34
 8008ff8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	20000c15 	.word	0x20000c15
 8009000:	40007000 	.word	0x40007000
 8009004:	40021000 	.word	0x40021000
 8009008:	20000c18 	.word	0x20000c18
 800900c:	0007ffff 	.word	0x0007ffff
 8009010:	00001001 	.word	0x00001001
 8009014:	fffffdff 	.word	0xfffffdff

08009018 <HW_GetTemperatureLevel>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	4812      	ldr	r0, [pc, #72]	; (8009064 <HW_GetTemperatureLevel+0x4c>)
 800901c:	f7ff ffae 	bl	8008f7c <HW_AdcReadChannel>
 8009020:	2500      	movs	r5, #0
 8009022:	0001      	movs	r1, r0
 8009024:	42a8      	cmp	r0, r5
 8009026:	d006      	beq.n	8009036 <HW_GetTemperatureLevel+0x1e>
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <HW_GetTemperatureLevel+0x50>)
 800902a:	8818      	ldrh	r0, [r3, #0]
 800902c:	4b0f      	ldr	r3, [pc, #60]	; (800906c <HW_GetTemperatureLevel+0x54>)
 800902e:	4358      	muls	r0, r3
 8009030:	f7f7 fdc2 	bl	8000bb8 <__udivsi3>
 8009034:	0005      	movs	r5, r0
 8009036:	480e      	ldr	r0, [pc, #56]	; (8009070 <HW_GetTemperatureLevel+0x58>)
 8009038:	f7ff ffa0 	bl	8008f7c <HW_AdcReadChannel>
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <HW_GetTemperatureLevel+0x5c>)
 800903e:	4368      	muls	r0, r5
 8009040:	490a      	ldr	r1, [pc, #40]	; (800906c <HW_GetTemperatureLevel+0x54>)
 8009042:	881c      	ldrh	r4, [r3, #0]
 8009044:	f7f7 fdb8 	bl	8000bb8 <__udivsi3>
 8009048:	1b03      	subs	r3, r0, r4
 800904a:	2050      	movs	r0, #80	; 0x50
 800904c:	4358      	muls	r0, r3
 800904e:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <HW_GetTemperatureLevel+0x60>)
 8009050:	0200      	lsls	r0, r0, #8
 8009052:	8819      	ldrh	r1, [r3, #0]
 8009054:	1b09      	subs	r1, r1, r4
 8009056:	f7f7 fe39 	bl	8000ccc <__divsi3>
 800905a:	23f0      	movs	r3, #240	; 0xf0
 800905c:	015b      	lsls	r3, r3, #5
 800905e:	18c0      	adds	r0, r0, r3
 8009060:	b280      	uxth	r0, r0
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	44020000 	.word	0x44020000
 8009068:	1ff80078 	.word	0x1ff80078
 800906c:	00000bb8 	.word	0x00000bb8
 8009070:	48040000 	.word	0x48040000
 8009074:	1ff8007a 	.word	0x1ff8007a
 8009078:	1ff8007e 	.word	0x1ff8007e

0800907c <HW_GetBatteryLevel>:
 800907c:	b510      	push	{r4, lr}
 800907e:	480f      	ldr	r0, [pc, #60]	; (80090bc <HW_GetBatteryLevel+0x40>)
 8009080:	f7ff ff7c 	bl	8008f7c <HW_AdcReadChannel>
 8009084:	0001      	movs	r1, r0
 8009086:	2000      	movs	r0, #0
 8009088:	4281      	cmp	r1, r0
 800908a:	d016      	beq.n	80090ba <HW_GetBatteryLevel+0x3e>
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <HW_GetBatteryLevel+0x44>)
 800908e:	4c0d      	ldr	r4, [pc, #52]	; (80090c4 <HW_GetBatteryLevel+0x48>)
 8009090:	8818      	ldrh	r0, [r3, #0]
 8009092:	4360      	muls	r0, r4
 8009094:	f7f7 fd90 	bl	8000bb8 <__udivsi3>
 8009098:	0002      	movs	r2, r0
 800909a:	20fe      	movs	r0, #254	; 0xfe
 800909c:	42a2      	cmp	r2, r4
 800909e:	d80c      	bhi.n	80090ba <HW_GetBatteryLevel+0x3e>
 80090a0:	4909      	ldr	r1, [pc, #36]	; (80090c8 <HW_GetBatteryLevel+0x4c>)
 80090a2:	2000      	movs	r0, #0
 80090a4:	428a      	cmp	r2, r1
 80090a6:	d908      	bls.n	80090ba <HW_GetBatteryLevel+0x3e>
 80090a8:	2196      	movs	r1, #150	; 0x96
 80090aa:	30fe      	adds	r0, #254	; 0xfe
 80090ac:	4350      	muls	r0, r2
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <HW_GetBatteryLevel+0x50>)
 80090b0:	00c9      	lsls	r1, r1, #3
 80090b2:	18c0      	adds	r0, r0, r3
 80090b4:	f7f7 fd80 	bl	8000bb8 <__udivsi3>
 80090b8:	b2c0      	uxtb	r0, r0
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	44020000 	.word	0x44020000
 80090c0:	1ff80078 	.word	0x1ff80078
 80090c4:	00000bb8 	.word	0x00000bb8
 80090c8:	00000707 	.word	0x00000707
 80090cc:	fff90610 	.word	0xfff90610

080090d0 <print_8_02x>:
            (unsigned)((unsigned char *)(&value))[1],
            (unsigned)((unsigned char *)(&value))[0]);
}

static void print_8_02x(uint8_t *pt)
{
 80090d0:	b510      	push	{r4, lr}
  AT_PRINTF("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 80090d2:	79c4      	ldrb	r4, [r0, #7]
{
 80090d4:	b086      	sub	sp, #24
  AT_PRINTF("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 80090d6:	7883      	ldrb	r3, [r0, #2]
 80090d8:	7842      	ldrb	r2, [r0, #1]
 80090da:	7801      	ldrb	r1, [r0, #0]
 80090dc:	9404      	str	r4, [sp, #16]
 80090de:	7984      	ldrb	r4, [r0, #6]
 80090e0:	9403      	str	r4, [sp, #12]
 80090e2:	7944      	ldrb	r4, [r0, #5]
 80090e4:	9402      	str	r4, [sp, #8]
 80090e6:	7904      	ldrb	r4, [r0, #4]
 80090e8:	9401      	str	r4, [sp, #4]
 80090ea:	78c0      	ldrb	r0, [r0, #3]
 80090ec:	9000      	str	r0, [sp, #0]
 80090ee:	4802      	ldr	r0, [pc, #8]	; (80090f8 <print_8_02x+0x28>)
 80090f0:	f00b fab4 	bl	801465c <TraceSend>
            pt[0], pt[1], pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
}
 80090f4:	b006      	add	sp, #24
 80090f6:	bd10      	pop	{r4, pc}
 80090f8:	080172d8 	.word	0x080172d8

080090fc <print_16_02x>:
{
 80090fc:	b510      	push	{r4, lr}
  AT_PRINTF("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 80090fe:	7bc4      	ldrb	r4, [r0, #15]
{
 8009100:	b08e      	sub	sp, #56	; 0x38
  AT_PRINTF("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8009102:	7883      	ldrb	r3, [r0, #2]
 8009104:	7842      	ldrb	r2, [r0, #1]
 8009106:	7801      	ldrb	r1, [r0, #0]
 8009108:	940c      	str	r4, [sp, #48]	; 0x30
 800910a:	7b84      	ldrb	r4, [r0, #14]
 800910c:	940b      	str	r4, [sp, #44]	; 0x2c
 800910e:	7b44      	ldrb	r4, [r0, #13]
 8009110:	940a      	str	r4, [sp, #40]	; 0x28
 8009112:	7b04      	ldrb	r4, [r0, #12]
 8009114:	9409      	str	r4, [sp, #36]	; 0x24
 8009116:	7ac4      	ldrb	r4, [r0, #11]
 8009118:	9408      	str	r4, [sp, #32]
 800911a:	7a84      	ldrb	r4, [r0, #10]
 800911c:	9407      	str	r4, [sp, #28]
 800911e:	7a44      	ldrb	r4, [r0, #9]
 8009120:	9406      	str	r4, [sp, #24]
 8009122:	7a04      	ldrb	r4, [r0, #8]
 8009124:	9405      	str	r4, [sp, #20]
 8009126:	79c4      	ldrb	r4, [r0, #7]
 8009128:	9404      	str	r4, [sp, #16]
 800912a:	7984      	ldrb	r4, [r0, #6]
 800912c:	9403      	str	r4, [sp, #12]
 800912e:	7944      	ldrb	r4, [r0, #5]
 8009130:	9402      	str	r4, [sp, #8]
 8009132:	7904      	ldrb	r4, [r0, #4]
 8009134:	9401      	str	r4, [sp, #4]
 8009136:	78c0      	ldrb	r0, [r0, #3]
 8009138:	9000      	str	r0, [sp, #0]
 800913a:	4802      	ldr	r0, [pc, #8]	; (8009144 <print_16_02x+0x48>)
 800913c:	f00b fa8e 	bl	801465c <TraceSend>
}
 8009140:	b00e      	add	sp, #56	; 0x38
 8009142:	bd10      	pop	{r4, pc}
 8009144:	080172b0 	.word	0x080172b0

08009148 <print_d>:

static void print_d(int value)
{
 8009148:	b510      	push	{r4, lr}
 800914a:	0001      	movs	r1, r0
  AT_PRINTF("%d\r\n", value);
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <print_d+0xc>)
 800914e:	f00b fa85 	bl	801465c <TraceSend>
}
 8009152:	bd10      	pop	{r4, pc}
 8009154:	08017302 	.word	0x08017302

08009158 <sscanf_16_hhx>:
{
 8009158:	000a      	movs	r2, r1
 800915a:	b500      	push	{lr}
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800915c:	1c4b      	adds	r3, r1, #1
{
 800915e:	b08f      	sub	sp, #60	; 0x3c
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009160:	310f      	adds	r1, #15
 8009162:	910d      	str	r1, [sp, #52]	; 0x34
 8009164:	3901      	subs	r1, #1
 8009166:	910c      	str	r1, [sp, #48]	; 0x30
 8009168:	3901      	subs	r1, #1
 800916a:	910b      	str	r1, [sp, #44]	; 0x2c
 800916c:	3901      	subs	r1, #1
 800916e:	910a      	str	r1, [sp, #40]	; 0x28
 8009170:	3901      	subs	r1, #1
 8009172:	9109      	str	r1, [sp, #36]	; 0x24
 8009174:	3901      	subs	r1, #1
 8009176:	9108      	str	r1, [sp, #32]
 8009178:	3901      	subs	r1, #1
 800917a:	9107      	str	r1, [sp, #28]
 800917c:	3901      	subs	r1, #1
 800917e:	9106      	str	r1, [sp, #24]
 8009180:	1dd1      	adds	r1, r2, #7
 8009182:	9105      	str	r1, [sp, #20]
 8009184:	1d91      	adds	r1, r2, #6
 8009186:	9104      	str	r1, [sp, #16]
 8009188:	1d51      	adds	r1, r2, #5
 800918a:	9103      	str	r1, [sp, #12]
 800918c:	1d11      	adds	r1, r2, #4
 800918e:	9102      	str	r1, [sp, #8]
 8009190:	1cd1      	adds	r1, r2, #3
 8009192:	9101      	str	r1, [sp, #4]
 8009194:	1c91      	adds	r1, r2, #2
 8009196:	9100      	str	r1, [sp, #0]
 8009198:	4902      	ldr	r1, [pc, #8]	; (80091a4 <sscanf_16_hhx+0x4c>)
 800919a:	f002 fe29 	bl	800bdf0 <tiny_sscanf>
}
 800919e:	b00f      	add	sp, #60	; 0x3c
 80091a0:	bd00      	pop	{pc}
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	08017307 	.word	0x08017307

080091a8 <translate_status>:
    return AT_BUSY_ERROR;
 80091a8:	2303      	movs	r3, #3
  if (status == LORAMAC_STATUS_BUSY)
 80091aa:	2801      	cmp	r0, #1
 80091ac:	d008      	beq.n	80091c0 <translate_status+0x18>
    return AT_PARAM_ERROR;
 80091ae:	3b01      	subs	r3, #1
  if (status == LORAMAC_STATUS_PARAMETER_INVALID)
 80091b0:	2803      	cmp	r0, #3
 80091b2:	d005      	beq.n	80091c0 <translate_status+0x18>
    return AT_NO_NET_JOINED;
 80091b4:	3303      	adds	r3, #3
  if (status == LORAMAC_STATUS_NO_NETWORK_JOINED)
 80091b6:	2807      	cmp	r0, #7
 80091b8:	d002      	beq.n	80091c0 <translate_status+0x18>
  if (status != LORAMAC_STATUS_OK)
 80091ba:	1e43      	subs	r3, r0, #1
 80091bc:	4198      	sbcs	r0, r3
    return AT_BUSY_ERROR;
 80091be:	b2c3      	uxtb	r3, r0
}
 80091c0:	0018      	movs	r0, r3
 80091c2:	4770      	bx	lr

080091c4 <set_at_receive>:
{
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	000f      	movs	r7, r1
 80091c8:	0014      	movs	r4, r2
 80091ca:	0006      	movs	r6, r0
  memcpy1((uint8_t *)ReceivedData, (uint8_t *)' ', sizeof(ReceivedData));
 80091cc:	4d07      	ldr	r5, [pc, #28]	; (80091ec <set_at_receive+0x28>)
 80091ce:	22ff      	movs	r2, #255	; 0xff
 80091d0:	0028      	movs	r0, r5
 80091d2:	2120      	movs	r1, #32
 80091d4:	f00a ff9d 	bl	8014112 <memcpy1>
  memcpy1((uint8_t *)ReceivedData, Buff, BuffSize);
 80091d8:	0039      	movs	r1, r7
 80091da:	0028      	movs	r0, r5
 80091dc:	b2a2      	uxth	r2, r4
 80091de:	f00a ff98 	bl	8014112 <memcpy1>
  ReceivedDataSize = BuffSize;
 80091e2:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <set_at_receive+0x2c>)
 80091e4:	601c      	str	r4, [r3, #0]
  ReceivedDataPort = AppPort;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <set_at_receive+0x30>)
 80091e8:	701e      	strb	r6, [r3, #0]
}
 80091ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ec:	20000cb8 	.word	0x20000cb8
 80091f0:	20000db8 	.word	0x20000db8
 80091f4:	20000db7 	.word	0x20000db7

080091f8 <at_return_error>:
}
 80091f8:	2001      	movs	r0, #1
 80091fa:	4770      	bx	lr

080091fc <at_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091fc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009200:	4a03      	ldr	r2, [pc, #12]	; (8009210 <at_reset+0x14>)
 8009202:	4b04      	ldr	r3, [pc, #16]	; (8009214 <at_reset+0x18>)
 8009204:	60da      	str	r2, [r3, #12]
 8009206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	e7fd      	b.n	800920a <at_reset+0xe>
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	05fa0004 	.word	0x05fa0004
 8009214:	e000ed00 	.word	0xe000ed00

08009218 <at_DevEUI_get>:
{
 8009218:	b510      	push	{r4, lr}
  print_8_02x(lora_config_deveui_get());
 800921a:	f001 ff97 	bl	800b14c <lora_config_deveui_get>
 800921e:	f7ff ff57 	bl	80090d0 <print_8_02x>
}
 8009222:	2000      	movs	r0, #0
 8009224:	bd10      	pop	{r4, pc}
	...

08009228 <at_DevEUI_set>:
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009228:	231f      	movs	r3, #31
{
 800922a:	b510      	push	{r4, lr}
 800922c:	b088      	sub	sp, #32
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800922e:	446b      	add	r3, sp
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	231e      	movs	r3, #30
 8009234:	446b      	add	r3, sp
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	231d      	movs	r3, #29
 800923a:	446b      	add	r3, sp
 800923c:	9303      	str	r3, [sp, #12]
 800923e:	ab07      	add	r3, sp, #28
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	231b      	movs	r3, #27
 8009244:	446b      	add	r3, sp
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	231a      	movs	r3, #26
 800924a:	446b      	add	r3, sp
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	2319      	movs	r3, #25
 8009250:	aa06      	add	r2, sp, #24
 8009252:	446b      	add	r3, sp
 8009254:	490e      	ldr	r1, [pc, #56]	; (8009290 <at_DevEUI_set+0x68>)
 8009256:	f002 fdcb 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 800925a:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800925c:	2808      	cmp	r0, #8
 800925e:	d113      	bne.n	8009288 <at_DevEUI_set+0x60>
  lora_config_deveui_set(DevEui);
 8009260:	a806      	add	r0, sp, #24
 8009262:	f001 ff79 	bl	800b158 <lora_config_deveui_set>
 8009266:	9b06      	ldr	r3, [sp, #24]
  writeEEPROMByte(DEV_EUI_0, data1);
 8009268:	2004      	movs	r0, #4
 800926a:	ba19      	rev	r1, r3
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	ba1c      	rev	r4, r3
 8009270:	f002 fdca 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(DEV_EUI_1, data2);
 8009274:	0021      	movs	r1, r4
 8009276:	2005      	movs	r0, #5
 8009278:	f002 fdc6 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(DEV_EUI_FLAG, FLAG_CODE);
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <at_DevEUI_set+0x6c>)
 800927e:	2006      	movs	r0, #6
 8009280:	6819      	ldr	r1, [r3, #0]
 8009282:	f002 fdc1 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	0018      	movs	r0, r3
 800928a:	b008      	add	sp, #32
 800928c:	bd10      	pop	{r4, pc}
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	0801732f 	.word	0x0801732f
 8009294:	200009f4 	.word	0x200009f4

08009298 <at_JoinEUI_get>:
{
 8009298:	b510      	push	{r4, lr}
  print_8_02x(lora_config_joineui_get());
 800929a:	f001 ff67 	bl	800b16c <lora_config_joineui_get>
 800929e:	f7ff ff17 	bl	80090d0 <print_8_02x>
}
 80092a2:	2000      	movs	r0, #0
 80092a4:	bd10      	pop	{r4, pc}
	...

080092a8 <at_JoinEUI_set>:
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 80092a8:	231f      	movs	r3, #31
{
 80092aa:	b530      	push	{r4, r5, lr}
 80092ac:	b089      	sub	sp, #36	; 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 80092ae:	446b      	add	r3, sp
 80092b0:	9305      	str	r3, [sp, #20]
 80092b2:	231e      	movs	r3, #30
 80092b4:	446b      	add	r3, sp
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	231d      	movs	r3, #29
 80092ba:	446b      	add	r3, sp
 80092bc:	9303      	str	r3, [sp, #12]
 80092be:	ab07      	add	r3, sp, #28
 80092c0:	9302      	str	r3, [sp, #8]
 80092c2:	231b      	movs	r3, #27
 80092c4:	446b      	add	r3, sp
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	231a      	movs	r3, #26
 80092ca:	446b      	add	r3, sp
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	2319      	movs	r3, #25
 80092d0:	aa06      	add	r2, sp, #24
 80092d2:	446b      	add	r3, sp
 80092d4:	490e      	ldr	r1, [pc, #56]	; (8009310 <at_JoinEUI_set+0x68>)
 80092d6:	f002 fd8b 	bl	800bdf0 <tiny_sscanf>
 80092da:	0005      	movs	r5, r0
    return AT_PARAM_ERROR;
 80092dc:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 80092de:	2d08      	cmp	r5, #8
 80092e0:	d113      	bne.n	800930a <at_JoinEUI_set+0x62>
  lora_config_joineui_set(JoinEui);
 80092e2:	a806      	add	r0, sp, #24
 80092e4:	f001 ff48 	bl	800b178 <lora_config_joineui_set>
 80092e8:	9b06      	ldr	r3, [sp, #24]
  writeEEPROMByte(JOIN_EUI_0, data1);
 80092ea:	2007      	movs	r0, #7
 80092ec:	ba19      	rev	r1, r3
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	ba1c      	rev	r4, r3
 80092f2:	f002 fd89 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(JOIN_EUI_1, data2);
 80092f6:	0021      	movs	r1, r4
 80092f8:	0028      	movs	r0, r5
 80092fa:	f002 fd85 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(JOIN_EUI_FLAG, FLAG_CODE);
 80092fe:	4b05      	ldr	r3, [pc, #20]	; (8009314 <at_JoinEUI_set+0x6c>)
 8009300:	2009      	movs	r0, #9
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	f002 fd80 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009308:	2000      	movs	r0, #0
}
 800930a:	b009      	add	sp, #36	; 0x24
 800930c:	bd30      	pop	{r4, r5, pc}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	0801732f 	.word	0x0801732f
 8009314:	200009f4 	.word	0x200009f4

08009318 <at_DevAddr_set>:
  mib.Type = MIB_DEV_ADDR;
 8009318:	2304      	movs	r3, #4
{
 800931a:	b570      	push	{r4, r5, r6, lr}
 800931c:	b08a      	sub	sp, #40	; 0x28
  mib.Type = MIB_DEV_ADDR;
 800931e:	ac04      	add	r4, sp, #16
 8009320:	7023      	strb	r3, [r4, #0]
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 8009322:	ab05      	add	r3, sp, #20
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	2315      	movs	r3, #21
 8009328:	446b      	add	r3, sp
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2217      	movs	r2, #23
 800932e:	2316      	movs	r3, #22
 8009330:	4e16      	ldr	r6, [pc, #88]	; (800938c <at_DevAddr_set+0x74>)
 8009332:	446b      	add	r3, sp
 8009334:	446a      	add	r2, sp
 8009336:	0031      	movs	r1, r6
{
 8009338:	0005      	movs	r5, r0
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 800933a:	f002 fd59 	bl	800bdf0 <tiny_sscanf>
  if (sscanf_uint32_as_hhx(param, &mib.Param.DevAddr) != 4)
 800933e:	2804      	cmp	r0, #4
 8009340:	d003      	beq.n	800934a <at_DevAddr_set+0x32>
    return AT_PARAM_ERROR;
 8009342:	2402      	movs	r4, #2
}
 8009344:	0020      	movs	r0, r4
 8009346:	b00a      	add	sp, #40	; 0x28
 8009348:	bd70      	pop	{r4, r5, r6, pc}
  status = LoRaMacMibSetRequestConfirm(&mib);
 800934a:	0020      	movs	r0, r4
 800934c:	f007 fe94 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009350:	f7ff ff2a 	bl	80091a8 <translate_status>
 8009354:	1e04      	subs	r4, r0, #0
 8009356:	d1f5      	bne.n	8009344 <at_DevAddr_set+0x2c>
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx", &DevAddress[0], &DevAddress[1], &DevAddress[2], &DevAddress[3]) != 4) {
 8009358:	230f      	movs	r3, #15
 800935a:	446b      	add	r3, sp
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	230e      	movs	r3, #14
 8009360:	446b      	add	r3, sp
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	230d      	movs	r3, #13
 8009366:	aa03      	add	r2, sp, #12
 8009368:	446b      	add	r3, sp
 800936a:	0031      	movs	r1, r6
 800936c:	0028      	movs	r0, r5
 800936e:	f002 fd3f 	bl	800bdf0 <tiny_sscanf>
 8009372:	2804      	cmp	r0, #4
 8009374:	d1e5      	bne.n	8009342 <at_DevAddr_set+0x2a>
 8009376:	9b03      	ldr	r3, [sp, #12]
  writeEEPROMByte(DEV_ADR, data);
 8009378:	3802      	subs	r0, #2
 800937a:	ba19      	rev	r1, r3
 800937c:	f002 fd44 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(DEV_ADR_FLAG, FLAG_CODE);
 8009380:	4b03      	ldr	r3, [pc, #12]	; (8009390 <at_DevAddr_set+0x78>)
 8009382:	2003      	movs	r0, #3
 8009384:	6819      	ldr	r1, [r3, #0]
 8009386:	f002 fd3f 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 800938a:	e7db      	b.n	8009344 <at_DevAddr_set+0x2c>
 800938c:	08017343 	.word	0x08017343
 8009390:	200009f4 	.word	0x200009f4

08009394 <at_DevAddr_get>:
  mib.Type = MIB_DEV_ADDR;
 8009394:	2304      	movs	r3, #4
{
 8009396:	b530      	push	{r4, r5, lr}
 8009398:	b08b      	sub	sp, #44	; 0x2c
  mib.Type = MIB_DEV_ADDR;
 800939a:	ad04      	add	r5, sp, #16
  status = LoRaMacMibGetRequestConfirm(&mib);
 800939c:	0028      	movs	r0, r5
  mib.Type = MIB_DEV_ADDR;
 800939e:	702b      	strb	r3, [r5, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 80093a0:	f007 fd94 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 80093a4:	f7ff ff00 	bl	80091a8 <translate_status>
 80093a8:	1e04      	subs	r4, r0, #0
 80093aa:	d10b      	bne.n	80093c4 <at_DevAddr_get+0x30>
 80093ac:	6868      	ldr	r0, [r5, #4]
 80093ae:	0a03      	lsrs	r3, r0, #8
 80093b0:	0c02      	lsrs	r2, r0, #16
 80093b2:	9003      	str	r0, [sp, #12]
  AT_PRINTF("%02x:%02x:%02x:%02x\r\n",
 80093b4:	0e01      	lsrs	r1, r0, #24
 80093b6:	b2c0      	uxtb	r0, r0
 80093b8:	9000      	str	r0, [sp, #0]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	4803      	ldr	r0, [pc, #12]	; (80093cc <at_DevAddr_get+0x38>)
 80093c0:	f00b f94c 	bl	801465c <TraceSend>
}
 80093c4:	0020      	movs	r0, r4
 80093c6:	b00b      	add	sp, #44	; 0x2c
 80093c8:	bd30      	pop	{r4, r5, pc}
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	080172ec 	.word	0x080172ec

080093d0 <at_AppKey_get>:
{
 80093d0:	b510      	push	{r4, lr}
  print_16_02x(lora_config_appkey_get());
 80093d2:	f001 fedb 	bl	800b18c <lora_config_appkey_get>
 80093d6:	f7ff fe91 	bl	80090fc <print_16_02x>
}
 80093da:	2000      	movs	r0, #0
 80093dc:	bd10      	pop	{r4, pc}
	...

080093e0 <at_AppKey_set>:
{
 80093e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e2:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, AppKey) != 16)
 80093e4:	4669      	mov	r1, sp
 80093e6:	f7ff feb7 	bl	8009158 <sscanf_16_hhx>
 80093ea:	0007      	movs	r7, r0
    return AT_PARAM_ERROR;
 80093ec:	2002      	movs	r0, #2
  if (sscanf_16_hhx(param, AppKey) != 16)
 80093ee:	2f10      	cmp	r7, #16
 80093f0:	d11f      	bne.n	8009432 <at_AppKey_set+0x52>
  lora_config_appkey_set(AppKey);
 80093f2:	4668      	mov	r0, sp
 80093f4:	f001 fed0 	bl	800b198 <lora_config_appkey_set>
 80093f8:	9b00      	ldr	r3, [sp, #0]
  writeEEPROMByte(APP_KEY_0, data1);
 80093fa:	200f      	movs	r0, #15
 80093fc:	ba19      	rev	r1, r3
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	ba1e      	rev	r6, r3
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	ba1d      	rev	r5, r3
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	ba1c      	rev	r4, r3
 800940a:	f002 fcfd 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_KEY_1, data2);
 800940e:	0031      	movs	r1, r6
 8009410:	0038      	movs	r0, r7
 8009412:	f002 fcf9 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_KEY_2, data3);
 8009416:	0029      	movs	r1, r5
 8009418:	2011      	movs	r0, #17
 800941a:	f002 fcf5 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_KEY_3, data4);
 800941e:	0021      	movs	r1, r4
 8009420:	2012      	movs	r0, #18
 8009422:	f002 fcf1 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_KEY_FLAG, FLAG_CODE);
 8009426:	4b04      	ldr	r3, [pc, #16]	; (8009438 <at_AppKey_set+0x58>)
 8009428:	2013      	movs	r0, #19
 800942a:	6819      	ldr	r1, [r3, #0]
 800942c:	f002 fcec 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009430:	2000      	movs	r0, #0
}
 8009432:	b005      	add	sp, #20
 8009434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	200009f4 	.word	0x200009f4

0800943c <at_NwkSKey_get>:
{
 800943c:	b510      	push	{r4, lr}
 800943e:	b086      	sub	sp, #24
  mib.Type = MIB_NWK_S_ENC_KEY;
 8009440:	230b      	movs	r3, #11
 8009442:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009444:	4668      	mov	r0, sp
  mib.Type = MIB_NWK_S_ENC_KEY;
 8009446:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009448:	f007 fd40 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 800944c:	f7ff feac 	bl	80091a8 <translate_status>
 8009450:	1e04      	subs	r4, r0, #0
 8009452:	d102      	bne.n	800945a <at_NwkSKey_get+0x1e>
  print_16_02x(mib.Param.NwkSEncKey);
 8009454:	9801      	ldr	r0, [sp, #4]
 8009456:	f7ff fe51 	bl	80090fc <print_16_02x>
}
 800945a:	0020      	movs	r0, r4
 800945c:	b006      	add	sp, #24
 800945e:	bd10      	pop	{r4, pc}

08009460 <at_NwkSKey_set>:
{
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
  mib.Type = MIB_NWK_S_ENC_KEY;
 8009462:	270b      	movs	r7, #11
{
 8009464:	b08d      	sub	sp, #52	; 0x34
  mib.Type = MIB_NWK_S_ENC_KEY;
 8009466:	ad06      	add	r5, sp, #24
  if (sscanf_16_hhx(param, NwkSKey) != 16)
 8009468:	a902      	add	r1, sp, #8
  mib.Type = MIB_NWK_S_ENC_KEY;
 800946a:	702f      	strb	r7, [r5, #0]
  if (sscanf_16_hhx(param, NwkSKey) != 16)
 800946c:	f7ff fe74 	bl	8009158 <sscanf_16_hhx>
    return AT_PARAM_ERROR;
 8009470:	2402      	movs	r4, #2
  if (sscanf_16_hhx(param, NwkSKey) != 16)
 8009472:	2810      	cmp	r0, #16
 8009474:	d125      	bne.n	80094c2 <at_NwkSKey_set+0x62>
  mib.Param.NwkSEncKey = NwkSKey;
 8009476:	ab02      	add	r3, sp, #8
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009478:	0028      	movs	r0, r5
  mib.Param.NwkSEncKey = NwkSKey;
 800947a:	606b      	str	r3, [r5, #4]
  status = LoRaMacMibSetRequestConfirm(&mib);
 800947c:	f007 fdfc 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009480:	f7ff fe92 	bl	80091a8 <translate_status>
 8009484:	1e04      	subs	r4, r0, #0
 8009486:	d11c      	bne.n	80094c2 <at_NwkSKey_set+0x62>
 8009488:	9b02      	ldr	r3, [sp, #8]
  writeEEPROMByte(NWK_SKEY_0, data1);
 800948a:	200a      	movs	r0, #10
 800948c:	ba19      	rev	r1, r3
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	ba1e      	rev	r6, r3
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	ba1b      	rev	r3, r3
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	ba1d      	rev	r5, r3
 800949c:	f002 fcb4 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(NWK_SKEY_1, data2);
 80094a0:	0031      	movs	r1, r6
 80094a2:	0038      	movs	r0, r7
 80094a4:	f002 fcb0 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(NWK_SKEY_2, data3);
 80094a8:	9901      	ldr	r1, [sp, #4]
 80094aa:	200c      	movs	r0, #12
 80094ac:	f002 fcac 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(NWK_SKEY_3, data4);
 80094b0:	0029      	movs	r1, r5
 80094b2:	200d      	movs	r0, #13
 80094b4:	f002 fca8 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(NWK_SKEY_FLAG, FLAG_CODE);
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <at_NwkSKey_set+0x68>)
 80094ba:	200e      	movs	r0, #14
 80094bc:	6819      	ldr	r1, [r3, #0]
 80094be:	f002 fca3 	bl	800be08 <writeEEPROMByte>
}
 80094c2:	0020      	movs	r0, r4
 80094c4:	b00d      	add	sp, #52	; 0x34
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	200009f4 	.word	0x200009f4

080094cc <at_AppSKey_get>:
{
 80094cc:	b510      	push	{r4, lr}
 80094ce:	b086      	sub	sp, #24
  mib.Type = MIB_APP_S_KEY;
 80094d0:	230c      	movs	r3, #12
 80094d2:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 80094d4:	4668      	mov	r0, sp
  mib.Type = MIB_APP_S_KEY;
 80094d6:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 80094d8:	f007 fcf8 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 80094dc:	f7ff fe64 	bl	80091a8 <translate_status>
 80094e0:	1e04      	subs	r4, r0, #0
 80094e2:	d102      	bne.n	80094ea <at_AppSKey_get+0x1e>
  print_16_02x(mib.Param.AppSKey);
 80094e4:	9801      	ldr	r0, [sp, #4]
 80094e6:	f7ff fe09 	bl	80090fc <print_16_02x>
}
 80094ea:	0020      	movs	r0, r4
 80094ec:	b006      	add	sp, #24
 80094ee:	bd10      	pop	{r4, pc}

080094f0 <at_AppSKey_set>:
  mib.Type = MIB_APP_S_KEY;
 80094f0:	230c      	movs	r3, #12
{
 80094f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f4:	b08b      	sub	sp, #44	; 0x2c
  mib.Type = MIB_APP_S_KEY;
 80094f6:	ad04      	add	r5, sp, #16
  if (sscanf_16_hhx(param, AppSKey) != 16)
 80094f8:	4669      	mov	r1, sp
  mib.Type = MIB_APP_S_KEY;
 80094fa:	702b      	strb	r3, [r5, #0]
  if (sscanf_16_hhx(param, AppSKey) != 16)
 80094fc:	f7ff fe2c 	bl	8009158 <sscanf_16_hhx>
    return AT_PARAM_ERROR;
 8009500:	2402      	movs	r4, #2
  if (sscanf_16_hhx(param, AppSKey) != 16)
 8009502:	2810      	cmp	r0, #16
 8009504:	d124      	bne.n	8009550 <at_AppSKey_set+0x60>
  mib.Param.AppSKey = AppSKey;
 8009506:	466b      	mov	r3, sp
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009508:	0028      	movs	r0, r5
  mib.Param.AppSKey = AppSKey;
 800950a:	606b      	str	r3, [r5, #4]
  status = LoRaMacMibSetRequestConfirm(&mib);
 800950c:	f007 fdb4 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009510:	f7ff fe4a 	bl	80091a8 <translate_status>
 8009514:	1e04      	subs	r4, r0, #0
 8009516:	d11b      	bne.n	8009550 <at_AppSKey_set+0x60>
 8009518:	9b00      	ldr	r3, [sp, #0]
  writeEEPROMByte(APP_SKEY_0, data1);
 800951a:	2014      	movs	r0, #20
 800951c:	ba19      	rev	r1, r3
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	ba1f      	rev	r7, r3
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	ba1e      	rev	r6, r3
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	ba1d      	rev	r5, r3
 800952a:	f002 fc6d 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_SKEY_1, data2);
 800952e:	0039      	movs	r1, r7
 8009530:	2015      	movs	r0, #21
 8009532:	f002 fc69 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_SKEY_2, data3);
 8009536:	0031      	movs	r1, r6
 8009538:	2016      	movs	r0, #22
 800953a:	f002 fc65 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_SKEY_3, data4);
 800953e:	0029      	movs	r1, r5
 8009540:	2017      	movs	r0, #23
 8009542:	f002 fc61 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(APP_SKEY_FLAG, FLAG_CODE);
 8009546:	4b04      	ldr	r3, [pc, #16]	; (8009558 <at_AppSKey_set+0x68>)
 8009548:	2018      	movs	r0, #24
 800954a:	6819      	ldr	r1, [r3, #0]
 800954c:	f002 fc5c 	bl	800be08 <writeEEPROMByte>
}
 8009550:	0020      	movs	r0, r4
 8009552:	b00b      	add	sp, #44	; 0x2c
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	200009f4 	.word	0x200009f4

0800955c <at_Certif>:
{
 800955c:	b510      	push	{r4, lr}
  lora_wan_certif( );
 800955e:	f002 f8d3 	bl	800b708 <lora_wan_certif>
}
 8009562:	2000      	movs	r0, #0
 8009564:	bd10      	pop	{r4, pc}

08009566 <at_ADR_get>:
{
 8009566:	b510      	push	{r4, lr}
 8009568:	b086      	sub	sp, #24
  mib.Type = MIB_ADR;
 800956a:	2302      	movs	r3, #2
 800956c:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 800956e:	4668      	mov	r0, sp
  mib.Type = MIB_ADR;
 8009570:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009572:	f007 fcab 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009576:	f7ff fe17 	bl	80091a8 <translate_status>
 800957a:	1e04      	subs	r4, r0, #0
 800957c:	d103      	bne.n	8009586 <at_ADR_get+0x20>
  print_d(mib.Param.AdrEnable);
 800957e:	466b      	mov	r3, sp
 8009580:	7918      	ldrb	r0, [r3, #4]
 8009582:	f7ff fde1 	bl	8009148 <print_d>
}
 8009586:	0020      	movs	r0, r4
 8009588:	b006      	add	sp, #24
 800958a:	bd10      	pop	{r4, pc}

0800958c <at_ADR_set>:
{
 800958c:	b510      	push	{r4, lr}
 800958e:	b086      	sub	sp, #24
  mib.Type = MIB_ADR;
 8009590:	466b      	mov	r3, sp
 8009592:	2402      	movs	r4, #2
 8009594:	701c      	strb	r4, [r3, #0]
  switch (param[0])
 8009596:	7803      	ldrb	r3, [r0, #0]
 8009598:	3b30      	subs	r3, #48	; 0x30
 800959a:	b2da      	uxtb	r2, r3
 800959c:	2a01      	cmp	r2, #1
 800959e:	d814      	bhi.n	80095ca <at_ADR_set+0x3e>
      mib.Param.AdrEnable = param[0] - '0';
 80095a0:	1e5a      	subs	r2, r3, #1
 80095a2:	4193      	sbcs	r3, r2
 80095a4:	466a      	mov	r2, sp
      status = LoRaMacMibSetRequestConfirm(&mib);
 80095a6:	4668      	mov	r0, sp
      mib.Param.AdrEnable = param[0] - '0';
 80095a8:	7113      	strb	r3, [r2, #4]
      status = LoRaMacMibSetRequestConfirm(&mib);
 80095aa:	f007 fd65 	bl	8011078 <LoRaMacMibSetRequestConfirm>
      CHECK_STATUS(status);
 80095ae:	f7ff fdfb 	bl	80091a8 <translate_status>
 80095b2:	1e04      	subs	r4, r0, #0
 80095b4:	d109      	bne.n	80095ca <at_ADR_set+0x3e>
      writeEEPROMByte(ADR_ADDRESS, mib.Param.AdrEnable);
 80095b6:	466b      	mov	r3, sp
 80095b8:	201b      	movs	r0, #27
 80095ba:	7919      	ldrb	r1, [r3, #4]
 80095bc:	f002 fc24 	bl	800be08 <writeEEPROMByte>
      writeEEPROMByte(ADR_ADDRESS_FLAG, FLAG_CODE);
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <at_ADR_set+0x44>)
 80095c2:	201c      	movs	r0, #28
 80095c4:	6819      	ldr	r1, [r3, #0]
 80095c6:	f002 fc1f 	bl	800be08 <writeEEPROMByte>
}
 80095ca:	0020      	movs	r0, r4
 80095cc:	b006      	add	sp, #24
 80095ce:	bd10      	pop	{r4, pc}
 80095d0:	200009f4 	.word	0x200009f4

080095d4 <at_TransmitPower_get>:
{
 80095d4:	b510      	push	{r4, lr}
 80095d6:	b086      	sub	sp, #24
  mib.Type = MIB_CHANNELS_TX_POWER;
 80095d8:	2329      	movs	r3, #41	; 0x29
 80095da:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 80095dc:	4668      	mov	r0, sp
  mib.Type = MIB_CHANNELS_TX_POWER;
 80095de:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 80095e0:	f007 fc74 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 80095e4:	f7ff fde0 	bl	80091a8 <translate_status>
 80095e8:	1e04      	subs	r4, r0, #0
 80095ea:	d104      	bne.n	80095f6 <at_TransmitPower_get+0x22>
  print_d(mib.Param.ChannelsTxPower);
 80095ec:	466b      	mov	r3, sp
 80095ee:	2004      	movs	r0, #4
 80095f0:	5618      	ldrsb	r0, [r3, r0]
 80095f2:	f7ff fda9 	bl	8009148 <print_d>
}
 80095f6:	0020      	movs	r0, r4
 80095f8:	b006      	add	sp, #24
 80095fa:	bd10      	pop	{r4, pc}

080095fc <at_TransmitPower_set>:
{
 80095fc:	b510      	push	{r4, lr}
 80095fe:	b086      	sub	sp, #24
  mib.Type = MIB_CHANNELS_TX_POWER;
 8009600:	2329      	movs	r3, #41	; 0x29
 8009602:	466a      	mov	r2, sp
  if (tiny_sscanf(param, "%hhu", &mib.Param.ChannelsTxPower) != 1)
 8009604:	490e      	ldr	r1, [pc, #56]	; (8009640 <at_TransmitPower_set+0x44>)
  mib.Type = MIB_CHANNELS_TX_POWER;
 8009606:	7013      	strb	r3, [r2, #0]
  if (tiny_sscanf(param, "%hhu", &mib.Param.ChannelsTxPower) != 1)
 8009608:	aa01      	add	r2, sp, #4
 800960a:	f002 fbf1 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 800960e:	2402      	movs	r4, #2
  if (tiny_sscanf(param, "%hhu", &mib.Param.ChannelsTxPower) != 1)
 8009610:	2801      	cmp	r0, #1
 8009612:	d111      	bne.n	8009638 <at_TransmitPower_set+0x3c>
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009614:	4668      	mov	r0, sp
 8009616:	f007 fd2f 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 800961a:	f7ff fdc5 	bl	80091a8 <translate_status>
 800961e:	1e04      	subs	r4, r0, #0
 8009620:	d10a      	bne.n	8009638 <at_TransmitPower_set+0x3c>
  writeEEPROMByte(TX_POWER, mib.Param.ChannelsTxPower);
 8009622:	466b      	mov	r3, sp
 8009624:	2104      	movs	r1, #4
 8009626:	201d      	movs	r0, #29
 8009628:	5659      	ldrsb	r1, [r3, r1]
 800962a:	f002 fbed 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(TX_POWER_FLAG, FLAG_CODE);
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <at_TransmitPower_set+0x48>)
 8009630:	201e      	movs	r0, #30
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	f002 fbe8 	bl	800be08 <writeEEPROMByte>
}
 8009638:	0020      	movs	r0, r4
 800963a:	b006      	add	sp, #24
 800963c:	bd10      	pop	{r4, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	0801719d 	.word	0x0801719d
 8009644:	200009f4 	.word	0x200009f4

08009648 <at_DataRate_get>:
{
 8009648:	b510      	push	{r4, lr}
 800964a:	b086      	sub	sp, #24
  mib.Type = MIB_ADR;
 800964c:	2302      	movs	r3, #2
 800964e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009650:	4668      	mov	r0, sp
  mib.Type = MIB_ADR;
 8009652:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009654:	f007 fc3a 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009658:	f7ff fda6 	bl	80091a8 <translate_status>
 800965c:	1e04      	subs	r4, r0, #0
 800965e:	d107      	bne.n	8009670 <at_DataRate_get+0x28>
  if(adr == 0) {
 8009660:	466b      	mov	r3, sp
 8009662:	791b      	ldrb	r3, [r3, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <at_DataRate_get+0x2e>
    print_d(lora_config_tx_datarate_get() );
 8009668:	f002 f840 	bl	800b6ec <lora_config_tx_datarate_get>
    print_d(mib.Param.ChannelsDatarate);
 800966c:	f7ff fd6c 	bl	8009148 <print_d>
}
 8009670:	0020      	movs	r0, r4
 8009672:	b006      	add	sp, #24
 8009674:	bd10      	pop	{r4, pc}
    mib.Type = MIB_CHANNELS_DATARATE;
 8009676:	2328      	movs	r3, #40	; 0x28
 8009678:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm(&mib);
 800967a:	4668      	mov	r0, sp
    mib.Type = MIB_CHANNELS_DATARATE;
 800967c:	7013      	strb	r3, [r2, #0]
    status = LoRaMacMibGetRequestConfirm(&mib);
 800967e:	f007 fc25 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
    CHECK_STATUS(status);
 8009682:	f7ff fd91 	bl	80091a8 <translate_status>
 8009686:	1e04      	subs	r4, r0, #0
 8009688:	d1f2      	bne.n	8009670 <at_DataRate_get+0x28>
    print_d(mib.Param.ChannelsDatarate);
 800968a:	466b      	mov	r3, sp
 800968c:	2004      	movs	r0, #4
 800968e:	5618      	ldrsb	r0, [r3, r0]
 8009690:	e7ec      	b.n	800966c <at_DataRate_get+0x24>
	...

08009694 <at_DataRate_set>:
{
 8009694:	b513      	push	{r0, r1, r4, lr}
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 8009696:	466b      	mov	r3, sp
 8009698:	1ddc      	adds	r4, r3, #7
 800969a:	0022      	movs	r2, r4
 800969c:	490b      	ldr	r1, [pc, #44]	; (80096cc <at_DataRate_set+0x38>)
 800969e:	f002 fba7 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 80096a2:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 80096a4:	2801      	cmp	r0, #1
 80096a6:	d10e      	bne.n	80096c6 <at_DataRate_set+0x32>
  lora_config_tx_datarate_set(datarate);
 80096a8:	2000      	movs	r0, #0
 80096aa:	5620      	ldrsb	r0, [r4, r0]
 80096ac:	f002 f818 	bl	800b6e0 <lora_config_tx_datarate_set>
  writeEEPROMByte(DATARATE, datarate);
 80096b0:	2100      	movs	r1, #0
 80096b2:	201f      	movs	r0, #31
 80096b4:	5661      	ldrsb	r1, [r4, r1]
 80096b6:	f002 fba7 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(DATARATE_FLAG, FLAG_CODE);
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <at_DataRate_set+0x3c>)
 80096bc:	2020      	movs	r0, #32
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	f002 fba2 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	0018      	movs	r0, r3
 80096c8:	bd16      	pop	{r1, r2, r4, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	0801719d 	.word	0x0801719d
 80096d0:	200009f4 	.word	0x200009f4

080096d4 <at_DutyCycle_set>:
{
 80096d4:	b510      	push	{r4, lr}
  switch (param[0])
 80096d6:	7803      	ldrb	r3, [r0, #0]
 80096d8:	2b30      	cmp	r3, #48	; 0x30
 80096da:	d003      	beq.n	80096e4 <at_DutyCycle_set+0x10>
 80096dc:	2b31      	cmp	r3, #49	; 0x31
 80096de:	d006      	beq.n	80096ee <at_DutyCycle_set+0x1a>
      return AT_PARAM_ERROR;
 80096e0:	2002      	movs	r0, #2
 80096e2:	e003      	b.n	80096ec <at_DutyCycle_set+0x18>
      lora_config_duty_cycle_set(LORA_DISABLE);
 80096e4:	2000      	movs	r0, #0
      lora_config_duty_cycle_set(LORA_ENABLE);
 80096e6:	f001 fd1f 	bl	800b128 <lora_config_duty_cycle_set>
  return AT_OK;
 80096ea:	2000      	movs	r0, #0
}
 80096ec:	bd10      	pop	{r4, pc}
      lora_config_duty_cycle_set(LORA_ENABLE);
 80096ee:	2001      	movs	r0, #1
 80096f0:	e7f9      	b.n	80096e6 <at_DutyCycle_set+0x12>
	...

080096f4 <at_DutyCycle_get>:
{
 80096f4:	b510      	push	{r4, lr}
  if (lora_config_duty_cycle_get() == LORA_ENABLE)
 80096f6:	f001 fd23 	bl	800b140 <lora_config_duty_cycle_get>
 80096fa:	2801      	cmp	r0, #1
 80096fc:	d104      	bne.n	8009708 <at_DutyCycle_get+0x14>
    AT_PRINTF("1\r\n");
 80096fe:	4803      	ldr	r0, [pc, #12]	; (800970c <at_DutyCycle_get+0x18>)
    AT_PRINTF("0\r\n");
 8009700:	f00a ffac 	bl	801465c <TraceSend>
}
 8009704:	2000      	movs	r0, #0
 8009706:	bd10      	pop	{r4, pc}
    AT_PRINTF("0\r\n");
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <at_DutyCycle_get+0x1c>)
 800970a:	e7f9      	b.n	8009700 <at_DutyCycle_get+0xc>
 800970c:	0801715b 	.word	0x0801715b
 8009710:	080172ac 	.word	0x080172ac

08009714 <at_PublicNetwork_get>:
{
 8009714:	b510      	push	{r4, lr}
 8009716:	b086      	sub	sp, #24
  mib.Type = MIB_PUBLIC_NETWORK;
 8009718:	231a      	movs	r3, #26
 800971a:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 800971c:	4668      	mov	r0, sp
  mib.Type = MIB_PUBLIC_NETWORK;
 800971e:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009720:	f007 fbd4 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009724:	f7ff fd40 	bl	80091a8 <translate_status>
 8009728:	1e04      	subs	r4, r0, #0
 800972a:	d103      	bne.n	8009734 <at_PublicNetwork_get+0x20>
  print_d(mib.Param.EnablePublicNetwork);
 800972c:	466b      	mov	r3, sp
 800972e:	7918      	ldrb	r0, [r3, #4]
 8009730:	f7ff fd0a 	bl	8009148 <print_d>
}
 8009734:	0020      	movs	r0, r4
 8009736:	b006      	add	sp, #24
 8009738:	bd10      	pop	{r4, pc}
	...

0800973c <at_PublicNetwork_set>:
{
 800973c:	b510      	push	{r4, lr}
 800973e:	b086      	sub	sp, #24
  mib.Type = MIB_PUBLIC_NETWORK;
 8009740:	231a      	movs	r3, #26
 8009742:	466a      	mov	r2, sp
 8009744:	7013      	strb	r3, [r2, #0]
  switch (param[0])
 8009746:	7803      	ldrb	r3, [r0, #0]
      return AT_PARAM_ERROR;
 8009748:	2402      	movs	r4, #2
  switch (param[0])
 800974a:	3b30      	subs	r3, #48	; 0x30
 800974c:	b2da      	uxtb	r2, r3
 800974e:	2a01      	cmp	r2, #1
 8009750:	d814      	bhi.n	800977c <at_PublicNetwork_set+0x40>
      mib.Param.EnablePublicNetwork = param[0] - '0';
 8009752:	1e5a      	subs	r2, r3, #1
 8009754:	4193      	sbcs	r3, r2
 8009756:	466a      	mov	r2, sp
      status = LoRaMacMibSetRequestConfirm(&mib);
 8009758:	4668      	mov	r0, sp
      mib.Param.EnablePublicNetwork = param[0] - '0';
 800975a:	7113      	strb	r3, [r2, #4]
      status = LoRaMacMibSetRequestConfirm(&mib);
 800975c:	f007 fc8c 	bl	8011078 <LoRaMacMibSetRequestConfirm>
      CHECK_STATUS(status);
 8009760:	f7ff fd22 	bl	80091a8 <translate_status>
 8009764:	1e04      	subs	r4, r0, #0
 8009766:	d109      	bne.n	800977c <at_PublicNetwork_set+0x40>
      writeEEPROMByte(PUBLIC_NWK, mib.Param.EnablePublicNetwork);
 8009768:	466b      	mov	r3, sp
 800976a:	2021      	movs	r0, #33	; 0x21
 800976c:	7919      	ldrb	r1, [r3, #4]
 800976e:	f002 fb4b 	bl	800be08 <writeEEPROMByte>
      writeEEPROMByte(PUBLIC_NWK_FLAG, FLAG_CODE);
 8009772:	4b04      	ldr	r3, [pc, #16]	; (8009784 <at_PublicNetwork_set+0x48>)
 8009774:	2022      	movs	r0, #34	; 0x22
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	f002 fb46 	bl	800be08 <writeEEPROMByte>
}
 800977c:	0020      	movs	r0, r4
 800977e:	b006      	add	sp, #24
 8009780:	bd10      	pop	{r4, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	200009f4 	.word	0x200009f4

08009788 <at_Rx2Frequency_get>:
{
 8009788:	b510      	push	{r4, lr}
 800978a:	b086      	sub	sp, #24
  mib.Type = MIB_RX2_CHANNEL;
 800978c:	231d      	movs	r3, #29
 800978e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009790:	4668      	mov	r0, sp
  mib.Type = MIB_RX2_CHANNEL;
 8009792:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009794:	f007 fb9a 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009798:	f7ff fd06 	bl	80091a8 <translate_status>
 800979c:	1e04      	subs	r4, r0, #0
 800979e:	d102      	bne.n	80097a6 <at_Rx2Frequency_get+0x1e>
  print_d(mib.Param.Rx2Channel.Frequency);
 80097a0:	9801      	ldr	r0, [sp, #4]
 80097a2:	f7ff fcd1 	bl	8009148 <print_d>
}
 80097a6:	0020      	movs	r0, r4
 80097a8:	b006      	add	sp, #24
 80097aa:	bd10      	pop	{r4, pc}

080097ac <at_Rx2Frequency_set>:
{
 80097ac:	b530      	push	{r4, r5, lr}
 80097ae:	b087      	sub	sp, #28
  mib.Type = MIB_RX2_CHANNEL;
 80097b0:	231d      	movs	r3, #29
 80097b2:	466a      	mov	r2, sp
{
 80097b4:	0005      	movs	r5, r0
  status = LoRaMacMibGetRequestConfirm(&mib);
 80097b6:	4668      	mov	r0, sp
  mib.Type = MIB_RX2_CHANNEL;
 80097b8:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 80097ba:	f007 fb87 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 80097be:	f7ff fcf3 	bl	80091a8 <translate_status>
 80097c2:	1e04      	subs	r4, r0, #0
 80097c4:	d117      	bne.n	80097f6 <at_Rx2Frequency_set+0x4a>
  if (tiny_sscanf(param, "%lu", &mib.Param.Rx2Channel.Frequency) != 1)
 80097c6:	aa01      	add	r2, sp, #4
 80097c8:	490c      	ldr	r1, [pc, #48]	; (80097fc <at_Rx2Frequency_set+0x50>)
 80097ca:	0028      	movs	r0, r5
 80097cc:	f002 fb10 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 80097d0:	3402      	adds	r4, #2
  if (tiny_sscanf(param, "%lu", &mib.Param.Rx2Channel.Frequency) != 1)
 80097d2:	2801      	cmp	r0, #1
 80097d4:	d10f      	bne.n	80097f6 <at_Rx2Frequency_set+0x4a>
  status = LoRaMacMibSetRequestConfirm(&mib);
 80097d6:	4668      	mov	r0, sp
 80097d8:	f007 fc4e 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 80097dc:	f7ff fce4 	bl	80091a8 <translate_status>
 80097e0:	1e04      	subs	r4, r0, #0
 80097e2:	d108      	bne.n	80097f6 <at_Rx2Frequency_set+0x4a>
  writeEEPROMByte(RX2_FREQ, (uint32_t)mib.Param.Rx2Channel.Frequency);
 80097e4:	9901      	ldr	r1, [sp, #4]
 80097e6:	2023      	movs	r0, #35	; 0x23
 80097e8:	f002 fb0e 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(RX2_FREQ_FLAG, FLAG_CODE);
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <at_Rx2Frequency_set+0x54>)
 80097ee:	2024      	movs	r0, #36	; 0x24
 80097f0:	6819      	ldr	r1, [r3, #0]
 80097f2:	f002 fb09 	bl	800be08 <writeEEPROMByte>
}
 80097f6:	0020      	movs	r0, r4
 80097f8:	b007      	add	sp, #28
 80097fa:	bd30      	pop	{r4, r5, pc}
 80097fc:	08017170 	.word	0x08017170
 8009800:	200009f4 	.word	0x200009f4

08009804 <at_Rx2DataRate_get>:
{
 8009804:	b510      	push	{r4, lr}
 8009806:	b086      	sub	sp, #24
  mib.Type = MIB_RX2_CHANNEL;
 8009808:	231d      	movs	r3, #29
 800980a:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 800980c:	4668      	mov	r0, sp
  mib.Type = MIB_RX2_CHANNEL;
 800980e:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009810:	f007 fb5c 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009814:	f7ff fcc8 	bl	80091a8 <translate_status>
 8009818:	1e04      	subs	r4, r0, #0
 800981a:	d103      	bne.n	8009824 <at_Rx2DataRate_get+0x20>
  print_d(mib.Param.Rx2Channel.Datarate);
 800981c:	466b      	mov	r3, sp
 800981e:	7a18      	ldrb	r0, [r3, #8]
 8009820:	f7ff fc92 	bl	8009148 <print_d>
}
 8009824:	0020      	movs	r0, r4
 8009826:	b006      	add	sp, #24
 8009828:	bd10      	pop	{r4, pc}
	...

0800982c <at_Rx2DataRate_set>:
{
 800982c:	b530      	push	{r4, r5, lr}
 800982e:	b087      	sub	sp, #28
  mib.Type = MIB_RX2_CHANNEL;
 8009830:	231d      	movs	r3, #29
 8009832:	466a      	mov	r2, sp
{
 8009834:	0005      	movs	r5, r0
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009836:	4668      	mov	r0, sp
  mib.Type = MIB_RX2_CHANNEL;
 8009838:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 800983a:	f007 fb47 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 800983e:	f7ff fcb3 	bl	80091a8 <translate_status>
 8009842:	1e04      	subs	r4, r0, #0
 8009844:	d118      	bne.n	8009878 <at_Rx2DataRate_set+0x4c>
  if (tiny_sscanf(param, "%hhu", &mib.Param.Rx2Channel.Datarate) != 1)
 8009846:	aa02      	add	r2, sp, #8
 8009848:	490d      	ldr	r1, [pc, #52]	; (8009880 <at_Rx2DataRate_set+0x54>)
 800984a:	0028      	movs	r0, r5
 800984c:	f002 fad0 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8009850:	3402      	adds	r4, #2
  if (tiny_sscanf(param, "%hhu", &mib.Param.Rx2Channel.Datarate) != 1)
 8009852:	2801      	cmp	r0, #1
 8009854:	d110      	bne.n	8009878 <at_Rx2DataRate_set+0x4c>
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009856:	4668      	mov	r0, sp
 8009858:	f007 fc0e 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 800985c:	f7ff fca4 	bl	80091a8 <translate_status>
 8009860:	1e04      	subs	r4, r0, #0
 8009862:	d109      	bne.n	8009878 <at_Rx2DataRate_set+0x4c>
  writeEEPROMByte(RX2_DATARATE, (uint32_t)mib.Param.Rx2Channel.Datarate);
 8009864:	466b      	mov	r3, sp
 8009866:	2025      	movs	r0, #37	; 0x25
 8009868:	7a19      	ldrb	r1, [r3, #8]
 800986a:	f002 facd 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(RX2_DATARATE_FLAG, FLAG_CODE);
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <at_Rx2DataRate_set+0x58>)
 8009870:	2026      	movs	r0, #38	; 0x26
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	f002 fac8 	bl	800be08 <writeEEPROMByte>
}
 8009878:	0020      	movs	r0, r4
 800987a:	b007      	add	sp, #28
 800987c:	bd30      	pop	{r4, r5, pc}
 800987e:	46c0      	nop			; (mov r8, r8)
 8009880:	0801719d 	.word	0x0801719d
 8009884:	200009f4 	.word	0x200009f4

08009888 <at_Rx1Delay_get>:
{
 8009888:	b510      	push	{r4, lr}
 800988a:	b086      	sub	sp, #24
  mib.Type = MIB_RECEIVE_DELAY_1;
 800988c:	2323      	movs	r3, #35	; 0x23
 800988e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009890:	4668      	mov	r0, sp
  mib.Type = MIB_RECEIVE_DELAY_1;
 8009892:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009894:	f007 fb1a 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009898:	f7ff fc86 	bl	80091a8 <translate_status>
 800989c:	1e04      	subs	r4, r0, #0
 800989e:	d103      	bne.n	80098a8 <at_Rx1Delay_get+0x20>

static void print_u(unsigned int value)
{
  AT_PRINTF("%u\r\n", value);
 80098a0:	9901      	ldr	r1, [sp, #4]
 80098a2:	4803      	ldr	r0, [pc, #12]	; (80098b0 <at_Rx1Delay_get+0x28>)
 80098a4:	f00a feda 	bl	801465c <TraceSend>
}
 80098a8:	0020      	movs	r0, r4
 80098aa:	b006      	add	sp, #24
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	0801716b 	.word	0x0801716b

080098b4 <at_Rx1Delay_set>:
{
 80098b4:	b510      	push	{r4, lr}
 80098b6:	b086      	sub	sp, #24
  mib.Type = MIB_RECEIVE_DELAY_1;
 80098b8:	2323      	movs	r3, #35	; 0x23
 80098ba:	466a      	mov	r2, sp
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay1) != 1)
 80098bc:	490d      	ldr	r1, [pc, #52]	; (80098f4 <at_Rx1Delay_set+0x40>)
  mib.Type = MIB_RECEIVE_DELAY_1;
 80098be:	7013      	strb	r3, [r2, #0]
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay1) != 1)
 80098c0:	aa01      	add	r2, sp, #4
 80098c2:	f002 fa95 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 80098c6:	2402      	movs	r4, #2
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay1) != 1)
 80098c8:	2801      	cmp	r0, #1
 80098ca:	d10f      	bne.n	80098ec <at_Rx1Delay_set+0x38>
  status = LoRaMacMibSetRequestConfirm(&mib);
 80098cc:	4668      	mov	r0, sp
 80098ce:	f007 fbd3 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 80098d2:	f7ff fc69 	bl	80091a8 <translate_status>
 80098d6:	1e04      	subs	r4, r0, #0
 80098d8:	d108      	bne.n	80098ec <at_Rx1Delay_set+0x38>
  writeEEPROMByte(RX1_DELAY, (uint32_t)mib.Param.ReceiveDelay1);
 80098da:	9901      	ldr	r1, [sp, #4]
 80098dc:	2027      	movs	r0, #39	; 0x27
 80098de:	f002 fa93 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(RX1_DELAY_FLAG, FLAG_CODE);
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <at_Rx1Delay_set+0x44>)
 80098e4:	2028      	movs	r0, #40	; 0x28
 80098e6:	6819      	ldr	r1, [r3, #0]
 80098e8:	f002 fa8e 	bl	800be08 <writeEEPROMByte>
}
 80098ec:	0020      	movs	r0, r4
 80098ee:	b006      	add	sp, #24
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	08017170 	.word	0x08017170
 80098f8:	200009f4 	.word	0x200009f4

080098fc <at_Rx2Delay_get>:
{
 80098fc:	b510      	push	{r4, lr}
 80098fe:	b086      	sub	sp, #24
  mib.Type = MIB_RECEIVE_DELAY_2;
 8009900:	2324      	movs	r3, #36	; 0x24
 8009902:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009904:	4668      	mov	r0, sp
  mib.Type = MIB_RECEIVE_DELAY_2;
 8009906:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009908:	f007 fae0 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 800990c:	f7ff fc4c 	bl	80091a8 <translate_status>
 8009910:	1e04      	subs	r4, r0, #0
 8009912:	d103      	bne.n	800991c <at_Rx2Delay_get+0x20>
  AT_PRINTF("%u\r\n", value);
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	4803      	ldr	r0, [pc, #12]	; (8009924 <at_Rx2Delay_get+0x28>)
 8009918:	f00a fea0 	bl	801465c <TraceSend>
}
 800991c:	0020      	movs	r0, r4
 800991e:	b006      	add	sp, #24
 8009920:	bd10      	pop	{r4, pc}
 8009922:	46c0      	nop			; (mov r8, r8)
 8009924:	0801716b 	.word	0x0801716b

08009928 <at_Rx2Delay_set>:
{
 8009928:	b510      	push	{r4, lr}
 800992a:	b086      	sub	sp, #24
  mib.Type = MIB_RECEIVE_DELAY_2;
 800992c:	2324      	movs	r3, #36	; 0x24
 800992e:	466a      	mov	r2, sp
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay2) != 1)
 8009930:	490d      	ldr	r1, [pc, #52]	; (8009968 <at_Rx2Delay_set+0x40>)
  mib.Type = MIB_RECEIVE_DELAY_2;
 8009932:	7013      	strb	r3, [r2, #0]
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay2) != 1)
 8009934:	aa01      	add	r2, sp, #4
 8009936:	f002 fa5b 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 800993a:	2402      	movs	r4, #2
  if (tiny_sscanf(param, "%lu", &mib.Param.ReceiveDelay2) != 1)
 800993c:	2801      	cmp	r0, #1
 800993e:	d10f      	bne.n	8009960 <at_Rx2Delay_set+0x38>
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009940:	4668      	mov	r0, sp
 8009942:	f007 fb99 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009946:	f7ff fc2f 	bl	80091a8 <translate_status>
 800994a:	1e04      	subs	r4, r0, #0
 800994c:	d108      	bne.n	8009960 <at_Rx2Delay_set+0x38>
  writeEEPROMByte(RX2_DELAY, (uint32_t)mib.Param.ReceiveDelay2);
 800994e:	9901      	ldr	r1, [sp, #4]
 8009950:	2029      	movs	r0, #41	; 0x29
 8009952:	f002 fa59 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(RX2_DELAY_FLAG, FLAG_CODE);
 8009956:	4b05      	ldr	r3, [pc, #20]	; (800996c <at_Rx2Delay_set+0x44>)
 8009958:	202a      	movs	r0, #42	; 0x2a
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	f002 fa54 	bl	800be08 <writeEEPROMByte>
}
 8009960:	0020      	movs	r0, r4
 8009962:	b006      	add	sp, #24
 8009964:	bd10      	pop	{r4, pc}
 8009966:	46c0      	nop			; (mov r8, r8)
 8009968:	08017170 	.word	0x08017170
 800996c:	200009f4 	.word	0x200009f4

08009970 <at_JoinAcceptDelay1_get>:
{
 8009970:	b510      	push	{r4, lr}
 8009972:	b086      	sub	sp, #24
  mib.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8009974:	2325      	movs	r3, #37	; 0x25
 8009976:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009978:	4668      	mov	r0, sp
  mib.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800997a:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 800997c:	f007 faa6 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009980:	f7ff fc12 	bl	80091a8 <translate_status>
 8009984:	1e04      	subs	r4, r0, #0
 8009986:	d103      	bne.n	8009990 <at_JoinAcceptDelay1_get+0x20>
  AT_PRINTF("%u\r\n", value);
 8009988:	9901      	ldr	r1, [sp, #4]
 800998a:	4803      	ldr	r0, [pc, #12]	; (8009998 <at_JoinAcceptDelay1_get+0x28>)
 800998c:	f00a fe66 	bl	801465c <TraceSend>
}
 8009990:	0020      	movs	r0, r4
 8009992:	b006      	add	sp, #24
 8009994:	bd10      	pop	{r4, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	0801716b 	.word	0x0801716b

0800999c <at_JoinAcceptDelay1_set>:
{
 800999c:	b510      	push	{r4, lr}
 800999e:	b086      	sub	sp, #24
  mib.Type = MIB_JOIN_ACCEPT_DELAY_1;
 80099a0:	2325      	movs	r3, #37	; 0x25
 80099a2:	466a      	mov	r2, sp
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay1) != 1)
 80099a4:	490d      	ldr	r1, [pc, #52]	; (80099dc <at_JoinAcceptDelay1_set+0x40>)
  mib.Type = MIB_JOIN_ACCEPT_DELAY_1;
 80099a6:	7013      	strb	r3, [r2, #0]
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay1) != 1)
 80099a8:	aa01      	add	r2, sp, #4
 80099aa:	f002 fa21 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 80099ae:	2402      	movs	r4, #2
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay1) != 1)
 80099b0:	2801      	cmp	r0, #1
 80099b2:	d10f      	bne.n	80099d4 <at_JoinAcceptDelay1_set+0x38>
  status = LoRaMacMibSetRequestConfirm(&mib);
 80099b4:	4668      	mov	r0, sp
 80099b6:	f007 fb5f 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 80099ba:	f7ff fbf5 	bl	80091a8 <translate_status>
 80099be:	1e04      	subs	r4, r0, #0
 80099c0:	d108      	bne.n	80099d4 <at_JoinAcceptDelay1_set+0x38>
  writeEEPROMByte(JOIN_DELAY_1, (uint32_t)mib.Param.JoinAcceptDelay1);
 80099c2:	9901      	ldr	r1, [sp, #4]
 80099c4:	202b      	movs	r0, #43	; 0x2b
 80099c6:	f002 fa1f 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(JOIN_DELAY_1_FLAG, FLAG_CODE);
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <at_JoinAcceptDelay1_set+0x44>)
 80099cc:	202c      	movs	r0, #44	; 0x2c
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	f002 fa1a 	bl	800be08 <writeEEPROMByte>
}
 80099d4:	0020      	movs	r0, r4
 80099d6:	b006      	add	sp, #24
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	08017170 	.word	0x08017170
 80099e0:	200009f4 	.word	0x200009f4

080099e4 <at_JoinAcceptDelay2_get>:
{
 80099e4:	b510      	push	{r4, lr}
 80099e6:	b086      	sub	sp, #24
  mib.Type = MIB_JOIN_ACCEPT_DELAY_2;
 80099e8:	2326      	movs	r3, #38	; 0x26
 80099ea:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 80099ec:	4668      	mov	r0, sp
  mib.Type = MIB_JOIN_ACCEPT_DELAY_2;
 80099ee:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 80099f0:	f007 fa6c 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 80099f4:	f7ff fbd8 	bl	80091a8 <translate_status>
 80099f8:	1e04      	subs	r4, r0, #0
 80099fa:	d103      	bne.n	8009a04 <at_JoinAcceptDelay2_get+0x20>
  AT_PRINTF("%u\r\n", value);
 80099fc:	9901      	ldr	r1, [sp, #4]
 80099fe:	4803      	ldr	r0, [pc, #12]	; (8009a0c <at_JoinAcceptDelay2_get+0x28>)
 8009a00:	f00a fe2c 	bl	801465c <TraceSend>
}
 8009a04:	0020      	movs	r0, r4
 8009a06:	b006      	add	sp, #24
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	0801716b 	.word	0x0801716b

08009a10 <at_JoinAcceptDelay2_set>:
{
 8009a10:	b510      	push	{r4, lr}
 8009a12:	b086      	sub	sp, #24
  mib.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8009a14:	2326      	movs	r3, #38	; 0x26
 8009a16:	466a      	mov	r2, sp
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay2) != 1)
 8009a18:	490d      	ldr	r1, [pc, #52]	; (8009a50 <at_JoinAcceptDelay2_set+0x40>)
  mib.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8009a1a:	7013      	strb	r3, [r2, #0]
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay2) != 1)
 8009a1c:	aa01      	add	r2, sp, #4
 8009a1e:	f002 f9e7 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8009a22:	2402      	movs	r4, #2
  if (tiny_sscanf(param, "%lu", &mib.Param.JoinAcceptDelay2) != 1)
 8009a24:	2801      	cmp	r0, #1
 8009a26:	d10f      	bne.n	8009a48 <at_JoinAcceptDelay2_set+0x38>
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009a28:	4668      	mov	r0, sp
 8009a2a:	f007 fb25 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009a2e:	f7ff fbbb 	bl	80091a8 <translate_status>
 8009a32:	1e04      	subs	r4, r0, #0
 8009a34:	d108      	bne.n	8009a48 <at_JoinAcceptDelay2_set+0x38>
  writeEEPROMByte(JOIN_DELAY_2, (uint32_t)mib.Param.JoinAcceptDelay2);
 8009a36:	9901      	ldr	r1, [sp, #4]
 8009a38:	202d      	movs	r0, #45	; 0x2d
 8009a3a:	f002 f9e5 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(JOIN_DELAY_2_FLAG, FLAG_CODE);
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <at_JoinAcceptDelay2_set+0x44>)
 8009a40:	202e      	movs	r0, #46	; 0x2e
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	f002 f9e0 	bl	800be08 <writeEEPROMByte>
}
 8009a48:	0020      	movs	r0, r4
 8009a4a:	b006      	add	sp, #24
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	08017170 	.word	0x08017170
 8009a54:	200009f4 	.word	0x200009f4

08009a58 <at_NetworkJoinMode_get>:
{
 8009a58:	b510      	push	{r4, lr}
  print_d((lora_config_otaa_get() == LORA_ENABLE ? 1 : 0));
 8009a5a:	f001 fb5f 	bl	800b11c <lora_config_otaa_get>
 8009a5e:	3801      	subs	r0, #1
 8009a60:	4243      	negs	r3, r0
 8009a62:	4158      	adcs	r0, r3
 8009a64:	f7ff fb70 	bl	8009148 <print_d>
}
 8009a68:	2000      	movs	r0, #0
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <at_NetworkJoinMode_set>:
{
 8009a6c:	b510      	push	{r4, lr}
  switch (param[0])
 8009a6e:	7803      	ldrb	r3, [r0, #0]
 8009a70:	2b30      	cmp	r3, #48	; 0x30
 8009a72:	d004      	beq.n	8009a7e <at_NetworkJoinMode_set+0x12>
      status = LORA_ENABLE;
 8009a74:	2401      	movs	r4, #1
  switch (param[0])
 8009a76:	2b31      	cmp	r3, #49	; 0x31
 8009a78:	d002      	beq.n	8009a80 <at_NetworkJoinMode_set+0x14>
      return AT_PARAM_ERROR;
 8009a7a:	2002      	movs	r0, #2
 8009a7c:	e00d      	b.n	8009a9a <at_NetworkJoinMode_set+0x2e>
      status = LORA_DISABLE;
 8009a7e:	2400      	movs	r4, #0
  lora_config_otaa_set(status);
 8009a80:	0020      	movs	r0, r4
 8009a82:	f001 fa01 	bl	800ae88 <lora_config_otaa_set>
  writeEEPROMByte(JOIN_MODE, status);
 8009a86:	0021      	movs	r1, r4
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f002 f9bd 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(JOIN_MODE_FLAG, FLAG_CODE);
 8009a8e:	4b03      	ldr	r3, [pc, #12]	; (8009a9c <at_NetworkJoinMode_set+0x30>)
 8009a90:	2001      	movs	r0, #1
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	f002 f9b8 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009a98:	2000      	movs	r0, #0
}
 8009a9a:	bd10      	pop	{r4, pc}
 8009a9c:	200009f4 	.word	0x200009f4

08009aa0 <at_NetworkID_get>:
  mib.Type = MIB_NET_ID;
 8009aa0:	2303      	movs	r3, #3
{
 8009aa2:	b530      	push	{r4, r5, lr}
 8009aa4:	b08b      	sub	sp, #44	; 0x2c
  mib.Type = MIB_NET_ID;
 8009aa6:	ad04      	add	r5, sp, #16
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009aa8:	0028      	movs	r0, r5
  mib.Type = MIB_NET_ID;
 8009aaa:	702b      	strb	r3, [r5, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009aac:	f007 fa0e 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009ab0:	f7ff fb7a 	bl	80091a8 <translate_status>
 8009ab4:	1e04      	subs	r4, r0, #0
 8009ab6:	d10b      	bne.n	8009ad0 <at_NetworkID_get+0x30>
 8009ab8:	6868      	ldr	r0, [r5, #4]
 8009aba:	0a03      	lsrs	r3, r0, #8
 8009abc:	0c02      	lsrs	r2, r0, #16
 8009abe:	9003      	str	r0, [sp, #12]
  AT_PRINTF("%02x:%02x:%02x:%02x\r\n",
 8009ac0:	0e01      	lsrs	r1, r0, #24
 8009ac2:	b2c0      	uxtb	r0, r0
 8009ac4:	9000      	str	r0, [sp, #0]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	4803      	ldr	r0, [pc, #12]	; (8009ad8 <at_NetworkID_get+0x38>)
 8009acc:	f00a fdc6 	bl	801465c <TraceSend>
}
 8009ad0:	0020      	movs	r0, r4
 8009ad2:	b00b      	add	sp, #44	; 0x2c
 8009ad4:	bd30      	pop	{r4, r5, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	080172ec 	.word	0x080172ec

08009adc <at_NetworkID_set>:
  mib.Type = MIB_NET_ID;
 8009adc:	2303      	movs	r3, #3
{
 8009ade:	b530      	push	{r4, r5, lr}
 8009ae0:	b089      	sub	sp, #36	; 0x24
  mib.Type = MIB_NET_ID;
 8009ae2:	ad02      	add	r5, sp, #8
 8009ae4:	702b      	strb	r3, [r5, #0]
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	230d      	movs	r3, #13
 8009aec:	446b      	add	r3, sp
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	220f      	movs	r2, #15
 8009af2:	230e      	movs	r3, #14
 8009af4:	446a      	add	r2, sp
 8009af6:	446b      	add	r3, sp
 8009af8:	490c      	ldr	r1, [pc, #48]	; (8009b2c <at_NetworkID_set+0x50>)
 8009afa:	f002 f979 	bl	800bdf0 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8009afe:	2402      	movs	r4, #2
  if (sscanf_uint32_as_hhx(param, &mib.Param.NetID) != 4)
 8009b00:	2804      	cmp	r0, #4
 8009b02:	d10f      	bne.n	8009b24 <at_NetworkID_set+0x48>
  status = LoRaMacMibSetRequestConfirm(&mib);
 8009b04:	0028      	movs	r0, r5
 8009b06:	f007 fab7 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  CHECK_STATUS(status);
 8009b0a:	f7ff fb4d 	bl	80091a8 <translate_status>
 8009b0e:	1e04      	subs	r4, r0, #0
 8009b10:	d108      	bne.n	8009b24 <at_NetworkID_set+0x48>
  writeEEPROMByte(NWK_ID, (uint32_t)mib.Param.NetID);
 8009b12:	6869      	ldr	r1, [r5, #4]
 8009b14:	202f      	movs	r0, #47	; 0x2f
 8009b16:	f002 f977 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(NWK_ID_FLAG, FLAG_CODE);
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <at_NetworkID_set+0x54>)
 8009b1c:	2030      	movs	r0, #48	; 0x30
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	f002 f972 	bl	800be08 <writeEEPROMByte>
}
 8009b24:	0020      	movs	r0, r4
 8009b26:	b009      	add	sp, #36	; 0x24
 8009b28:	bd30      	pop	{r4, r5, pc}
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	08017343 	.word	0x08017343
 8009b30:	200009f4 	.word	0x200009f4

08009b34 <at_DeviceClass_get>:
{
 8009b34:	b510      	push	{r4, lr}
 8009b36:	b086      	sub	sp, #24
  mib.Type = MIB_DEVICE_CLASS;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009b3c:	4668      	mov	r0, sp
  mib.Type = MIB_DEVICE_CLASS;
 8009b3e:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009b40:	f007 f9c4 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009b44:	f7ff fb30 	bl	80091a8 <translate_status>
 8009b48:	1e04      	subs	r4, r0, #0
 8009b4a:	d105      	bne.n	8009b58 <at_DeviceClass_get+0x24>
  AT_PRINTF("%c\r\n", 'A' + mib.Param.Class);
 8009b4c:	466b      	mov	r3, sp
 8009b4e:	7919      	ldrb	r1, [r3, #4]
 8009b50:	4803      	ldr	r0, [pc, #12]	; (8009b60 <at_DeviceClass_get+0x2c>)
 8009b52:	3141      	adds	r1, #65	; 0x41
 8009b54:	f00a fd82 	bl	801465c <TraceSend>
}
 8009b58:	0020      	movs	r0, r4
 8009b5a:	b006      	add	sp, #24
 8009b5c:	bd10      	pop	{r4, pc}
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	08017156 	.word	0x08017156

08009b64 <at_DeviceClass_set>:
{
 8009b64:	b510      	push	{r4, lr}
  switch (param[0])
 8009b66:	7803      	ldrb	r3, [r0, #0]
      return AT_ERROR;
 8009b68:	2001      	movs	r0, #1
  switch (param[0])
 8009b6a:	2b42      	cmp	r3, #66	; 0x42
 8009b6c:	d011      	beq.n	8009b92 <at_DeviceClass_set+0x2e>
 8009b6e:	2b43      	cmp	r3, #67	; 0x43
 8009b70:	d010      	beq.n	8009b94 <at_DeviceClass_set+0x30>
      return AT_PARAM_ERROR;
 8009b72:	1800      	adds	r0, r0, r0
  switch (param[0])
 8009b74:	2b41      	cmp	r3, #65	; 0x41
 8009b76:	d10c      	bne.n	8009b92 <at_DeviceClass_set+0x2e>
      LORA_RequestClass(CLASS_A);
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f001 f907 	bl	800ad8c <LORA_RequestClass>
      writeEEPROMByte(CLASS, 0x00);
 8009b7e:	2100      	movs	r1, #0
      writeEEPROMByte(CLASS, 0x02);
 8009b80:	2031      	movs	r0, #49	; 0x31
 8009b82:	f002 f941 	bl	800be08 <writeEEPROMByte>
      writeEEPROMByte(CLASS_FLAG, FLAG_CODE);
 8009b86:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <at_DeviceClass_set+0x3c>)
 8009b88:	2032      	movs	r0, #50	; 0x32
 8009b8a:	6819      	ldr	r1, [r3, #0]
 8009b8c:	f002 f93c 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009b90:	2000      	movs	r0, #0
}
 8009b92:	bd10      	pop	{r4, pc}
      LORA_RequestClass(CLASS_C);
 8009b94:	2002      	movs	r0, #2
 8009b96:	f001 f8f9 	bl	800ad8c <LORA_RequestClass>
      writeEEPROMByte(CLASS, 0x02);
 8009b9a:	2102      	movs	r1, #2
 8009b9c:	e7f0      	b.n	8009b80 <at_DeviceClass_set+0x1c>
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	200009f4 	.word	0x200009f4

08009ba4 <at_Join>:
{
 8009ba4:	b510      	push	{r4, lr}
  LoraErrorStatus status= LORA_Join();
 8009ba6:	f001 f82b 	bl	800ac00 <LORA_Join>
  if (status == LORA_SUCCESS)
 8009baa:	1e43      	subs	r3, r0, #1
 8009bac:	4198      	sbcs	r0, r3
}
 8009bae:	b2c0      	uxtb	r0, r0
 8009bb0:	bd10      	pop	{r4, pc}

08009bb2 <at_NetworkJoinStatus>:
{
 8009bb2:	b510      	push	{r4, lr}
  if( LORA_JoinStatus() == LORA_RESET )
 8009bb4:	f001 f89a 	bl	800acec <LORA_JoinStatus>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d103      	bne.n	8009bc4 <at_NetworkJoinStatus+0x12>
    print_d(1);
 8009bbc:	f7ff fac4 	bl	8009148 <print_d>
}
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	bd10      	pop	{r4, pc}
    print_d(1);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	e7f9      	b.n	8009bbc <at_NetworkJoinStatus+0xa>

08009bc8 <at_SendBinary>:
{
 8009bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bca:	0005      	movs	r5, r0
  unsigned char bufSize= strlen(param);
 8009bcc:	f7f9 ff78 	bl	8003ac0 <strlen>
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8009bd0:	aa01      	add	r2, sp, #4
  unsigned char bufSize= strlen(param);
 8009bd2:	0004      	movs	r4, r0
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8009bd4:	4921      	ldr	r1, [pc, #132]	; (8009c5c <at_SendBinary+0x94>)
 8009bd6:	0028      	movs	r0, r5
 8009bd8:	f002 f90a 	bl	800bdf0 <tiny_sscanf>
 8009bdc:	2801      	cmp	r0, #1
 8009bde:	d134      	bne.n	8009c4a <at_SendBinary+0x82>
  while (('0' <= buf[0]) && (buf[0] <= '9'))
 8009be0:	782b      	ldrb	r3, [r5, #0]
    bufSize --;
 8009be2:	b2e4      	uxtb	r4, r4
  while (('0' <= buf[0]) && (buf[0] <= '9'))
 8009be4:	001a      	movs	r2, r3
 8009be6:	3a30      	subs	r2, #48	; 0x30
 8009be8:	2a09      	cmp	r2, #9
 8009bea:	d933      	bls.n	8009c54 <at_SendBinary+0x8c>
  if (buf[0] != ':')
 8009bec:	2b3a      	cmp	r3, #58	; 0x3a
 8009bee:	d12c      	bne.n	8009c4a <at_SendBinary+0x82>
  hex[2] = 0;
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	466b      	mov	r3, sp
    bufSize --;
 8009bf4:	3c01      	subs	r4, #1
 8009bf6:	b2e4      	uxtb	r4, r4
  hex[2] = 0;
 8009bf8:	709e      	strb	r6, [r3, #2]
    buf ++;
 8009bfa:	3501      	adds	r5, #1
  while ((size < LORAWAN_APP_DATA_BUFF_SIZE) && (bufSize > 1))
 8009bfc:	2c01      	cmp	r4, #1
 8009bfe:	d913      	bls.n	8009c28 <at_SendBinary+0x60>
    hex[0] = buf[size*2];
 8009c00:	466a      	mov	r2, sp
 8009c02:	782b      	ldrb	r3, [r5, #0]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buff[size]) != 1)
 8009c04:	4916      	ldr	r1, [pc, #88]	; (8009c60 <at_SendBinary+0x98>)
    hex[0] = buf[size*2];
 8009c06:	7013      	strb	r3, [r2, #0]
    hex[1] = buf[size*2+1];
 8009c08:	786b      	ldrb	r3, [r5, #1]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buff[size]) != 1)
 8009c0a:	4668      	mov	r0, sp
    hex[1] = buf[size*2+1];
 8009c0c:	7053      	strb	r3, [r2, #1]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buff[size]) != 1)
 8009c0e:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <at_SendBinary+0x9c>)
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	1992      	adds	r2, r2, r6
 8009c14:	f002 f8ec 	bl	800bdf0 <tiny_sscanf>
 8009c18:	2801      	cmp	r0, #1
 8009c1a:	d119      	bne.n	8009c50 <at_SendBinary+0x88>
    bufSize -= 2;
 8009c1c:	3c02      	subs	r4, #2
    size++;
 8009c1e:	3601      	adds	r6, #1
    bufSize -= 2;
 8009c20:	b2e4      	uxtb	r4, r4
 8009c22:	3502      	adds	r5, #2
  while ((size < LORAWAN_APP_DATA_BUFF_SIZE) && (bufSize > 1))
 8009c24:	2e40      	cmp	r6, #64	; 0x40
 8009c26:	d1e9      	bne.n	8009bfc <at_SendBinary+0x34>
  if (bufSize != 0)
 8009c28:	2c00      	cmp	r4, #0
 8009c2a:	d111      	bne.n	8009c50 <at_SendBinary+0x88>
  AppData.Port= appPort;
 8009c2c:	466b      	mov	r3, sp
  AppData.BuffSize = size;
 8009c2e:	4c0d      	ldr	r4, [pc, #52]	; (8009c64 <at_SendBinary+0x9c>)
  AppData.Port= appPort;
 8009c30:	791b      	ldrb	r3, [r3, #4]
  AppData.BuffSize = size;
 8009c32:	7126      	strb	r6, [r4, #4]
  AppData.Port= appPort;
 8009c34:	7163      	strb	r3, [r4, #5]
  status = LORA_send( &AppData, lora_config_reqack_get() );
 8009c36:	f001 fd3f 	bl	800b6b8 <lora_config_reqack_get>
 8009c3a:	0001      	movs	r1, r0
 8009c3c:	0020      	movs	r0, r4
 8009c3e:	f001 f863 	bl	800ad08 <LORA_send>
  if (status == LORA_SUCCESS)
 8009c42:	1e43      	subs	r3, r0, #1
 8009c44:	4198      	sbcs	r0, r3
    return AT_PARAM_ERROR;
 8009c46:	b2c0      	uxtb	r0, r0
 8009c48:	e003      	b.n	8009c52 <at_SendBinary+0x8a>
    AT_PRINTF("AT+SEND without the application port");
 8009c4a:	4807      	ldr	r0, [pc, #28]	; (8009c68 <at_SendBinary+0xa0>)
 8009c4c:	f00a fd06 	bl	801465c <TraceSend>
      return AT_PARAM_ERROR;
 8009c50:	2002      	movs	r0, #2
}
 8009c52:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    buf ++;
 8009c54:	3501      	adds	r5, #1
    bufSize --;
 8009c56:	3c01      	subs	r4, #1
 8009c58:	e7c2      	b.n	8009be0 <at_SendBinary+0x18>
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	08017174 	.word	0x08017174
 8009c60:	08017352 	.word	0x08017352
 8009c64:	200009ec 	.word	0x200009ec
 8009c68:	08017178 	.word	0x08017178

08009c6c <at_Send>:
{
 8009c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c6e:	0005      	movs	r5, r0
  unsigned char bufSize= strlen(param);
 8009c70:	f7f9 ff26 	bl	8003ac0 <strlen>
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8009c74:	aa01      	add	r2, sp, #4
  unsigned char bufSize= strlen(param);
 8009c76:	0004      	movs	r4, r0
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8009c78:	4918      	ldr	r1, [pc, #96]	; (8009cdc <at_Send+0x70>)
 8009c7a:	0028      	movs	r0, r5
 8009c7c:	f002 f8b8 	bl	800bdf0 <tiny_sscanf>
 8009c80:	2801      	cmp	r0, #1
 8009c82:	d121      	bne.n	8009cc8 <at_Send+0x5c>
  unsigned char bufSize= strlen(param);
 8009c84:	b2e0      	uxtb	r0, r4
  while (('0' <= buf[0]) && (buf[0] <= '9'))
 8009c86:	782b      	ldrb	r3, [r5, #0]
 8009c88:	001a      	movs	r2, r3
 8009c8a:	3a30      	subs	r2, #48	; 0x30
 8009c8c:	2a09      	cmp	r2, #9
 8009c8e:	d920      	bls.n	8009cd2 <at_Send+0x66>
  if (buf[0] != ':')
 8009c90:	2b3a      	cmp	r3, #58	; 0x3a
 8009c92:	d119      	bne.n	8009cc8 <at_Send+0x5c>
    bufSize --;
 8009c94:	3801      	subs	r0, #1
 8009c96:	b2c0      	uxtb	r0, r0
 8009c98:	1c04      	adds	r4, r0, #0
 8009c9a:	2840      	cmp	r0, #64	; 0x40
 8009c9c:	d900      	bls.n	8009ca0 <at_Send+0x34>
 8009c9e:	2440      	movs	r4, #64	; 0x40
    buf ++;
 8009ca0:	1c69      	adds	r1, r5, #1
  memcpy1(AppData.Buff, (uint8_t *)buf, bufSize);
 8009ca2:	4d0f      	ldr	r5, [pc, #60]	; (8009ce0 <at_Send+0x74>)
 8009ca4:	b2e2      	uxtb	r2, r4
 8009ca6:	6828      	ldr	r0, [r5, #0]
 8009ca8:	f00a fa33 	bl	8014112 <memcpy1>
  AppData.Port= appPort;
 8009cac:	466b      	mov	r3, sp
 8009cae:	791b      	ldrb	r3, [r3, #4]
  AppData.BuffSize = bufSize;
 8009cb0:	712c      	strb	r4, [r5, #4]
  AppData.Port= appPort;
 8009cb2:	716b      	strb	r3, [r5, #5]
  status = LORA_send( &AppData, lora_config_reqack_get() );
 8009cb4:	f001 fd00 	bl	800b6b8 <lora_config_reqack_get>
 8009cb8:	0001      	movs	r1, r0
 8009cba:	0028      	movs	r0, r5
 8009cbc:	f001 f824 	bl	800ad08 <LORA_send>
  if (status == LORA_SUCCESS)
 8009cc0:	1e43      	subs	r3, r0, #1
 8009cc2:	4198      	sbcs	r0, r3
    return AT_PARAM_ERROR;
 8009cc4:	b2c0      	uxtb	r0, r0
 8009cc6:	e003      	b.n	8009cd0 <at_Send+0x64>
    AT_PRINTF("AT+SEND without the application port");
 8009cc8:	4806      	ldr	r0, [pc, #24]	; (8009ce4 <at_Send+0x78>)
 8009cca:	f00a fcc7 	bl	801465c <TraceSend>
    return AT_PARAM_ERROR;
 8009cce:	2002      	movs	r0, #2
}
 8009cd0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    bufSize --;
 8009cd2:	3801      	subs	r0, #1
    buf ++;
 8009cd4:	3501      	adds	r5, #1
    bufSize --;
 8009cd6:	b2c0      	uxtb	r0, r0
 8009cd8:	e7d5      	b.n	8009c86 <at_Send+0x1a>
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	08017174 	.word	0x08017174
 8009ce0:	200009ec 	.word	0x200009ec
 8009ce4:	08017178 	.word	0x08017178

08009ce8 <at_ReceiveBinary>:
{
 8009ce8:	b570      	push	{r4, r5, r6, lr}
  AT_PRINTF("%d:", ReceivedDataPort);
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <at_ReceiveBinary+0x30>)
 8009cec:	480b      	ldr	r0, [pc, #44]	; (8009d1c <at_ReceiveBinary+0x34>)
 8009cee:	7819      	ldrb	r1, [r3, #0]
 8009cf0:	f00a fcb4 	bl	801465c <TraceSend>
  for (i = 0; i < ReceivedDataSize; i++)
 8009cf4:	2400      	movs	r4, #0
 8009cf6:	4d0a      	ldr	r5, [pc, #40]	; (8009d20 <at_ReceiveBinary+0x38>)
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d305      	bcc.n	8009d0a <at_ReceiveBinary+0x22>
  AT_PRINTF("\r\n");
 8009cfe:	4809      	ldr	r0, [pc, #36]	; (8009d24 <at_ReceiveBinary+0x3c>)
 8009d00:	f00a fcac 	bl	801465c <TraceSend>
  ReceivedDataSize = 0;
 8009d04:	2000      	movs	r0, #0
 8009d06:	6028      	str	r0, [r5, #0]
}
 8009d08:	bd70      	pop	{r4, r5, r6, pc}
    AT_PRINTF("%02x", ReceivedData[i]);
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <at_ReceiveBinary+0x40>)
 8009d0c:	4807      	ldr	r0, [pc, #28]	; (8009d2c <at_ReceiveBinary+0x44>)
 8009d0e:	5ce1      	ldrb	r1, [r4, r3]
 8009d10:	f00a fca4 	bl	801465c <TraceSend>
  for (i = 0; i < ReceivedDataSize; i++)
 8009d14:	3401      	adds	r4, #1
 8009d16:	e7ee      	b.n	8009cf6 <at_ReceiveBinary+0xe>
 8009d18:	20000db7 	.word	0x20000db7
 8009d1c:	08017162 	.word	0x08017162
 8009d20:	20000db8 	.word	0x20000db8
 8009d24:	0801856c 	.word	0x0801856c
 8009d28:	20000cb8 	.word	0x20000cb8
 8009d2c:	08017166 	.word	0x08017166

08009d30 <at_Receive>:
{
 8009d30:	b510      	push	{r4, lr}
  AT_PRINTF("%d:", ReceivedDataPort);
 8009d32:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <at_Receive+0x2c>)
 8009d34:	480a      	ldr	r0, [pc, #40]	; (8009d60 <at_Receive+0x30>)
 8009d36:	7819      	ldrb	r1, [r3, #0]
 8009d38:	f00a fc90 	bl	801465c <TraceSend>
  if (ReceivedDataSize)
 8009d3c:	4c09      	ldr	r4, [pc, #36]	; (8009d64 <at_Receive+0x34>)
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <at_Receive+0x20>
    AT_PRINTF("%s", ReceivedData);
 8009d44:	4908      	ldr	r1, [pc, #32]	; (8009d68 <at_Receive+0x38>)
 8009d46:	4809      	ldr	r0, [pc, #36]	; (8009d6c <at_Receive+0x3c>)
 8009d48:	f00a fc88 	bl	801465c <TraceSend>
    ReceivedDataSize = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6023      	str	r3, [r4, #0]
  AT_PRINTF("\r\n");
 8009d50:	4807      	ldr	r0, [pc, #28]	; (8009d70 <at_Receive+0x40>)
 8009d52:	f00a fc83 	bl	801465c <TraceSend>
}
 8009d56:	2000      	movs	r0, #0
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	20000db7 	.word	0x20000db7
 8009d60:	08017162 	.word	0x08017162
 8009d64:	20000db8 	.word	0x20000db8
 8009d68:	20000cb8 	.word	0x20000cb8
 8009d6c:	0801715f 	.word	0x0801715f
 8009d70:	0801856c 	.word	0x0801856c

08009d74 <at_version_get>:
{
 8009d74:	b510      	push	{r4, lr}
  AT_PRINTF(AT_VERSION_STRING"\r\n");
 8009d76:	4802      	ldr	r0, [pc, #8]	; (8009d80 <at_version_get+0xc>)
 8009d78:	f00a fc70 	bl	801465c <TraceSend>
}
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	bd10      	pop	{r4, pc}
 8009d80:	080172a8 	.word	0x080172a8

08009d84 <at_ack_set>:
{
 8009d84:	b510      	push	{r4, lr}
  switch (param[0])
 8009d86:	7803      	ldrb	r3, [r0, #0]
 8009d88:	2b30      	cmp	r3, #48	; 0x30
 8009d8a:	d003      	beq.n	8009d94 <at_ack_set+0x10>
 8009d8c:	2b31      	cmp	r3, #49	; 0x31
 8009d8e:	d00f      	beq.n	8009db0 <at_ack_set+0x2c>
      return AT_PARAM_ERROR;
 8009d90:	2002      	movs	r0, #2
 8009d92:	e00c      	b.n	8009dae <at_ack_set+0x2a>
      lora_config_reqack_set(LORAWAN_UNCONFIRMED_MSG);
 8009d94:	2000      	movs	r0, #0
 8009d96:	f001 fc89 	bl	800b6ac <lora_config_reqack_set>
      writeEEPROMByte(CONF_MODE, 0);
 8009d9a:	2100      	movs	r1, #0
      writeEEPROMByte(CONF_MODE, 1);
 8009d9c:	2033      	movs	r0, #51	; 0x33
 8009d9e:	f002 f833 	bl	800be08 <writeEEPROMByte>
      writeEEPROMByte(CONF_MODE_FLAG, FLAG_CODE);
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <at_ack_set+0x38>)
 8009da4:	2034      	movs	r0, #52	; 0x34
 8009da6:	6819      	ldr	r1, [r3, #0]
 8009da8:	f002 f82e 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009dac:	2000      	movs	r0, #0
}
 8009dae:	bd10      	pop	{r4, pc}
      lora_config_reqack_set(LORAWAN_CONFIRMED_MSG);
 8009db0:	2001      	movs	r0, #1
 8009db2:	f001 fc7b 	bl	800b6ac <lora_config_reqack_set>
      writeEEPROMByte(CONF_MODE, 1);
 8009db6:	2101      	movs	r1, #1
 8009db8:	e7f0      	b.n	8009d9c <at_ack_set+0x18>
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	200009f4 	.word	0x200009f4

08009dc0 <at_ack_get>:
{
 8009dc0:	b510      	push	{r4, lr}
  print_d (((lora_config_reqack_get() == LORAWAN_CONFIRMED_MSG) ? 1 : 0));
 8009dc2:	f001 fc79 	bl	800b6b8 <lora_config_reqack_get>
 8009dc6:	3801      	subs	r0, #1
 8009dc8:	4243      	negs	r3, r0
 8009dca:	4158      	adcs	r0, r3
 8009dcc:	f7ff f9bc 	bl	8009148 <print_d>
}
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	bd10      	pop	{r4, pc}

08009dd4 <at_isack_get>:
{
 8009dd4:	b510      	push	{r4, lr}
  print_d(((lora_config_isack_get() == LORA_ENABLE) ? 1 : 0));
 8009dd6:	f001 fc8f 	bl	800b6f8 <lora_config_isack_get>
 8009dda:	3801      	subs	r0, #1
 8009ddc:	4243      	negs	r3, r0
 8009dde:	4158      	adcs	r0, r3
 8009de0:	f7ff f9b2 	bl	8009148 <print_d>
}
 8009de4:	2000      	movs	r0, #0
 8009de6:	bd10      	pop	{r4, pc}

08009de8 <at_snr_get>:
{
 8009de8:	b510      	push	{r4, lr}
  print_u(lora_config_snr_get());
 8009dea:	f001 fc6b 	bl	800b6c4 <lora_config_snr_get>
 8009dee:	0001      	movs	r1, r0
  AT_PRINTF("%u\r\n", value);
 8009df0:	4802      	ldr	r0, [pc, #8]	; (8009dfc <at_snr_get+0x14>)
 8009df2:	f00a fc33 	bl	801465c <TraceSend>
}
 8009df6:	2000      	movs	r0, #0
 8009df8:	bd10      	pop	{r4, pc}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	0801716b 	.word	0x0801716b

08009e00 <at_rssi_get>:
{
 8009e00:	b510      	push	{r4, lr}
  print_d(lora_config_rssi_get());
 8009e02:	f001 fc65 	bl	800b6d0 <lora_config_rssi_get>
 8009e06:	f7ff f99f 	bl	8009148 <print_d>
}
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	bd10      	pop	{r4, pc}
	...

08009e10 <at_bat_get>:
{
 8009e10:	b510      	push	{r4, lr}
  print_u(HW_GetBatteryLevel());
 8009e12:	f7ff f933 	bl	800907c <HW_GetBatteryLevel>
 8009e16:	0001      	movs	r1, r0
  AT_PRINTF("%u\r\n", value);
 8009e18:	4802      	ldr	r0, [pc, #8]	; (8009e24 <at_bat_get+0x14>)
 8009e1a:	f00a fc1f 	bl	801465c <TraceSend>
}
 8009e1e:	2000      	movs	r0, #0
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	0801716b 	.word	0x0801716b

08009e28 <at_test_txTone>:
{
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	0004      	movs	r4, r0
  return TST_TxTone(param, strlen(param));
 8009e2c:	f7f9 fe48 	bl	8003ac0 <strlen>
 8009e30:	0001      	movs	r1, r0
 8009e32:	0020      	movs	r0, r4
 8009e34:	f001 fc80 	bl	800b738 <TST_TxTone>
}
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <at_test_rxTone>:
{
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	0004      	movs	r4, r0
  return TST_RxTone(param, strlen(param));
 8009e3e:	f7f9 fe3f 	bl	8003ac0 <strlen>
 8009e42:	0001      	movs	r1, r0
 8009e44:	0020      	movs	r0, r4
 8009e46:	f001 fcf1 	bl	800b82c <TST_RxTone>
}
 8009e4a:	bd10      	pop	{r4, pc}

08009e4c <at_test_txlora>:
{
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	0004      	movs	r4, r0
  TST_TX_LoraStart( param, strlen(param) );
 8009e50:	f7f9 fe36 	bl	8003ac0 <strlen>
 8009e54:	0001      	movs	r1, r0
 8009e56:	0020      	movs	r0, r4
 8009e58:	f001 fe0e 	bl	800ba78 <TST_TX_LoraStart>
}
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <at_test_rxlora>:
{
 8009e60:	b510      	push	{r4, lr}
  TST_RX_LoraStart( );
 8009e62:	f001 fe51 	bl	800bb08 <TST_RX_LoraStart>
}
 8009e66:	2000      	movs	r0, #0
 8009e68:	bd10      	pop	{r4, pc}

08009e6a <at_test_get_lora_config>:
{
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	0004      	movs	r4, r0
  return TST_get_lora_config( param, strlen(param));
 8009e6e:	f7f9 fe27 	bl	8003ac0 <strlen>
 8009e72:	0001      	movs	r1, r0
 8009e74:	0020      	movs	r0, r4
 8009e76:	f001 fd9b 	bl	800b9b0 <TST_get_lora_config>
}
 8009e7a:	bd10      	pop	{r4, pc}

08009e7c <at_test_set_lora_config>:
{
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	0004      	movs	r4, r0
  return TST_SET_lora_config( param, strlen(param));
 8009e80:	f7f9 fe1e 	bl	8003ac0 <strlen>
 8009e84:	0001      	movs	r1, r0
 8009e86:	0020      	movs	r0, r4
 8009e88:	f001 fd2a 	bl	800b8e0 <TST_SET_lora_config>
}
 8009e8c:	bd10      	pop	{r4, pc}

08009e8e <at_test_stop>:
{
 8009e8e:	b510      	push	{r4, lr}
  return TST_stop( );
 8009e90:	f001 fdcc 	bl	800ba2c <TST_stop>
}
 8009e94:	bd10      	pop	{r4, pc}
	...

08009e98 <at_subband_get>:
{
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	b086      	sub	sp, #24
  mib.Type = MIB_CHANNELS_MASK;
 8009e9c:	231f      	movs	r3, #31
 8009e9e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009ea0:	4668      	mov	r0, sp
  mib.Type = MIB_CHANNELS_MASK;
 8009ea2:	7013      	strb	r3, [r2, #0]
  status = LoRaMacMibGetRequestConfirm(&mib);
 8009ea4:	f007 f812 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  CHECK_STATUS(status);
 8009ea8:	f7ff f97e 	bl	80091a8 <translate_status>
 8009eac:	1e04      	subs	r4, r0, #0
 8009eae:	d117      	bne.n	8009ee0 <at_subband_get+0x48>
  if((int)mib.Param.ChannelsMask[0] == 65535) {
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	4a0e      	ldr	r2, [pc, #56]	; (8009eec <at_subband_get+0x54>)
 8009eb4:	8819      	ldrh	r1, [r3, #0]
 8009eb6:	4291      	cmp	r1, r2
 8009eb8:	d010      	beq.n	8009edc <at_subband_get+0x44>
      int channel = log2((int)mib.Param.ChannelsMask[4]) + 1;
 8009eba:	8918      	ldrh	r0, [r3, #8]
 8009ebc:	f7f9 f848 	bl	8002f50 <__aeabi_i2d>
 8009ec0:	f7fe fbae 	bl	8008620 <log>
 8009ec4:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <at_subband_get+0x58>)
 8009ec6:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <at_subband_get+0x5c>)
 8009ec8:	f7f7 fe44 	bl	8001b54 <__aeabi_ddiv>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <at_subband_get+0x60>)
 8009ed0:	f7f7 fb30 	bl	8001534 <__aeabi_dadd>
 8009ed4:	f7f9 f808 	bl	8002ee8 <__aeabi_d2iz>
      channel <= 4 ? print_d(channel) : print_d(channel-4);
 8009ed8:	2804      	cmp	r0, #4
 8009eda:	dc04      	bgt.n	8009ee6 <at_subband_get+0x4e>
 8009edc:	f7ff f934 	bl	8009148 <print_d>
}
 8009ee0:	0020      	movs	r0, r4
 8009ee2:	b006      	add	sp, #24
 8009ee4:	bd10      	pop	{r4, pc}
      channel <= 4 ? print_d(channel) : print_d(channel-4);
 8009ee6:	3804      	subs	r0, #4
 8009ee8:	e7f8      	b.n	8009edc <at_subband_get+0x44>
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	0000ffff 	.word	0x0000ffff
 8009ef0:	fefa39ef 	.word	0xfefa39ef
 8009ef4:	3fe62e42 	.word	0x3fe62e42
 8009ef8:	3ff00000 	.word	0x3ff00000

08009efc <at_subband_set>:
{
 8009efc:	b570      	push	{r4, r5, r6, lr}
  if(param[1] != 0 || param[0] == '9')
 8009efe:	7845      	ldrb	r5, [r0, #1]
{
 8009f00:	0004      	movs	r4, r0
      return AT_PARAM_ERROR;
 8009f02:	2302      	movs	r3, #2
  if(param[1] != 0 || param[0] == '9')
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	d10f      	bne.n	8009f28 <at_subband_set+0x2c>
 8009f08:	7800      	ldrb	r0, [r0, #0]
 8009f0a:	2839      	cmp	r0, #57	; 0x39
 8009f0c:	d00c      	beq.n	8009f28 <at_subband_set+0x2c>
  lora_set_sub_band(param[0]);
 8009f0e:	f000 ff7d 	bl	800ae0c <lora_set_sub_band>
  writeEEPROMByte(SUB_BAND, param[0] - '0');
 8009f12:	7821      	ldrb	r1, [r4, #0]
 8009f14:	2019      	movs	r0, #25
 8009f16:	3930      	subs	r1, #48	; 0x30
 8009f18:	f001 ff76 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(SUB_BAND_FLAG, FLAG_CODE);
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <at_subband_set+0x30>)
 8009f1e:	201a      	movs	r0, #26
 8009f20:	6819      	ldr	r1, [r3, #0]
 8009f22:	f001 ff71 	bl	800be08 <writeEEPROMByte>
  return AT_OK;
 8009f26:	002b      	movs	r3, r5
}
 8009f28:	0018      	movs	r0, r3
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	200009f4 	.word	0x200009f4

08009f30 <at_reset_params>:
ATEerror_t at_reset_params(const char *param) {
 8009f30:	b510      	push	{r4, lr}
  FLAG_CODE = randr(0, 0xFFFF);
 8009f32:	4908      	ldr	r1, [pc, #32]	; (8009f54 <at_reset_params+0x24>)
 8009f34:	2000      	movs	r0, #0
 8009f36:	f00a f8e1 	bl	80140fc <randr>
 8009f3a:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <at_reset_params+0x28>)
 8009f3c:	0001      	movs	r1, r0
 8009f3e:	6018      	str	r0, [r3, #0]
  writeEEPROMByte(FLAG_ADDRESS, FLAG_CODE);
 8009f40:	2035      	movs	r0, #53	; 0x35
 8009f42:	f001 ff61 	bl	800be08 <writeEEPROMByte>
  writeEEPROMByte(FLAG_DIFF, 9957);
 8009f46:	4905      	ldr	r1, [pc, #20]	; (8009f5c <at_reset_params+0x2c>)
 8009f48:	2036      	movs	r0, #54	; 0x36
 8009f4a:	f001 ff5d 	bl	800be08 <writeEEPROMByte>
}
 8009f4e:	2000      	movs	r0, #0
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	0000ffff 	.word	0x0000ffff
 8009f58:	200009f4 	.word	0x200009f4
 8009f5c:	000026e5 	.word	0x000026e5

08009f60 <at_self_test>:
ATEerror_t at_self_test(const char *param) {
 8009f60:	b510      	push	{r4, lr}
  AT_PRINTF("\n###### Teste de comandos basicos ######\n");
 8009f62:	4852      	ldr	r0, [pc, #328]	; (800a0ac <at_self_test+0x14c>)
 8009f64:	f00a fb7a 	bl	801465c <TraceSend>
  AT_PRINTF("AT+DADDR\n");
 8009f68:	4851      	ldr	r0, [pc, #324]	; (800a0b0 <at_self_test+0x150>)
 8009f6a:	f00a fb77 	bl	801465c <TraceSend>
  command_return = at_DevAddr_get("");
 8009f6e:	4c51      	ldr	r4, [pc, #324]	; (800a0b4 <at_self_test+0x154>)
 8009f70:	0020      	movs	r0, r4
 8009f72:	f7ff fa0f 	bl	8009394 <at_DevAddr_get>
  if(command_return == 0) {
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d000      	beq.n	8009f7c <at_self_test+0x1c>
 8009f7a:	e083      	b.n	800a084 <at_self_test+0x124>
      AT_PRINTF("OK\n\n");
 8009f7c:	484e      	ldr	r0, [pc, #312]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009f7e:	f00a fb6d 	bl	801465c <TraceSend>
  AT_PRINTF("AT+DEUI\n");
 8009f82:	484e      	ldr	r0, [pc, #312]	; (800a0bc <at_self_test+0x15c>)
 8009f84:	f00a fb6a 	bl	801465c <TraceSend>
  command_return = at_DevEUI_get("");
 8009f88:	0020      	movs	r0, r4
 8009f8a:	f7ff f945 	bl	8009218 <at_DevEUI_get>
  if(command_return == 0) {
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d000      	beq.n	8009f94 <at_self_test+0x34>
 8009f92:	e079      	b.n	800a088 <at_self_test+0x128>
      AT_PRINTF("OK\n\n");
 8009f94:	4848      	ldr	r0, [pc, #288]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009f96:	f00a fb61 	bl	801465c <TraceSend>
  AT_PRINTF("AT+ADR\n");
 8009f9a:	4849      	ldr	r0, [pc, #292]	; (800a0c0 <at_self_test+0x160>)
 8009f9c:	f00a fb5e 	bl	801465c <TraceSend>
  command_return = at_ADR_get("");
 8009fa0:	0020      	movs	r0, r4
 8009fa2:	f7ff fae0 	bl	8009566 <at_ADR_get>
  if(command_return == 0) {
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d000      	beq.n	8009fac <at_self_test+0x4c>
 8009faa:	e06f      	b.n	800a08c <at_self_test+0x12c>
      AT_PRINTF("OK\n\n");
 8009fac:	4842      	ldr	r0, [pc, #264]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009fae:	f00a fb55 	bl	801465c <TraceSend>
  AT_PRINTF("AT+CLASS\n");
 8009fb2:	4844      	ldr	r0, [pc, #272]	; (800a0c4 <at_self_test+0x164>)
 8009fb4:	f00a fb52 	bl	801465c <TraceSend>
  command_return = at_DeviceClass_get("");
 8009fb8:	0020      	movs	r0, r4
 8009fba:	f7ff fdbb 	bl	8009b34 <at_DeviceClass_get>
  if(command_return == 0) {
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d166      	bne.n	800a090 <at_self_test+0x130>
      AT_PRINTF("OK\n\n");
 8009fc2:	483d      	ldr	r0, [pc, #244]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009fc4:	f00a fb4a 	bl	801465c <TraceSend>
  AT_PRINTF("AT+DR\n");
 8009fc8:	483f      	ldr	r0, [pc, #252]	; (800a0c8 <at_self_test+0x168>)
 8009fca:	f00a fb47 	bl	801465c <TraceSend>
  command_return = at_DataRate_get("");
 8009fce:	0020      	movs	r0, r4
 8009fd0:	f7ff fb3a 	bl	8009648 <at_DataRate_get>
  if(command_return == 0) {
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d15d      	bne.n	800a094 <at_self_test+0x134>
      AT_PRINTF("OK\n\n");
 8009fd8:	4837      	ldr	r0, [pc, #220]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009fda:	f00a fb3f 	bl	801465c <TraceSend>
  AT_PRINTF("AT+RX1DL\n");
 8009fde:	483b      	ldr	r0, [pc, #236]	; (800a0cc <at_self_test+0x16c>)
 8009fe0:	f00a fb3c 	bl	801465c <TraceSend>
  command_return = at_Rx1Delay_get("");
 8009fe4:	0020      	movs	r0, r4
 8009fe6:	f7ff fc4f 	bl	8009888 <at_Rx1Delay_get>
  if(command_return == 0) {
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d154      	bne.n	800a098 <at_self_test+0x138>
      AT_PRINTF("OK\n\n");
 8009fee:	4832      	ldr	r0, [pc, #200]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 8009ff0:	f00a fb34 	bl	801465c <TraceSend>
  AT_PRINTF("AT+RX2DL\n");
 8009ff4:	4836      	ldr	r0, [pc, #216]	; (800a0d0 <at_self_test+0x170>)
 8009ff6:	f00a fb31 	bl	801465c <TraceSend>
  command_return = at_Rx2Delay_get("");
 8009ffa:	0020      	movs	r0, r4
 8009ffc:	f7ff fc7e 	bl	80098fc <at_Rx2Delay_get>
  if(command_return == 0) {
 800a000:	2800      	cmp	r0, #0
 800a002:	d14b      	bne.n	800a09c <at_self_test+0x13c>
      AT_PRINTF("OK\n\n");
 800a004:	482c      	ldr	r0, [pc, #176]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 800a006:	f00a fb29 	bl	801465c <TraceSend>
  AT_PRINTF("AT+TXP\n");
 800a00a:	4832      	ldr	r0, [pc, #200]	; (800a0d4 <at_self_test+0x174>)
 800a00c:	f00a fb26 	bl	801465c <TraceSend>
  command_return = at_TransmitPower_get("");
 800a010:	0020      	movs	r0, r4
 800a012:	f7ff fadf 	bl	80095d4 <at_TransmitPower_get>
  if(command_return == 0) {
 800a016:	2800      	cmp	r0, #0
 800a018:	d142      	bne.n	800a0a0 <at_self_test+0x140>
      AT_PRINTF("OK\n\n");
 800a01a:	4827      	ldr	r0, [pc, #156]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 800a01c:	f00a fb1e 	bl	801465c <TraceSend>
  HAL_Delay(500);
 800a020:	20fa      	movs	r0, #250	; 0xfa
 800a022:	0040      	lsls	r0, r0, #1
 800a024:	f001 ff0c 	bl	800be40 <HAL_Delay>
  AT_PRINTF("\n###### Teste de escrita e leitura na EEPROM ######\n");
 800a028:	482b      	ldr	r0, [pc, #172]	; (800a0d8 <at_self_test+0x178>)
 800a02a:	f00a fb17 	bl	801465c <TraceSend>
  AT_PRINTF("AT+SBAND\n");
 800a02e:	482b      	ldr	r0, [pc, #172]	; (800a0dc <at_self_test+0x17c>)
 800a030:	f00a fb14 	bl	801465c <TraceSend>
  writeEEPROMByte(SUB_BAND, 4);
 800a034:	2104      	movs	r1, #4
 800a036:	2019      	movs	r0, #25
 800a038:	f001 fee6 	bl	800be08 <writeEEPROMByte>
  int sub_b = readEEPROMByte(SUB_BAND);
 800a03c:	2019      	movs	r0, #25
 800a03e:	f001 fef5 	bl	800be2c <readEEPROMByte>
  if(sub_b == 4) {
 800a042:	2804      	cmp	r0, #4
 800a044:	d12e      	bne.n	800a0a4 <at_self_test+0x144>
      AT_PRINTF("EEPROM OK\n\n");
 800a046:	4826      	ldr	r0, [pc, #152]	; (800a0e0 <at_self_test+0x180>)
      AT_PRINTF("ERROR\n\n");
 800a048:	f00a fb08 	bl	801465c <TraceSend>
  HAL_Delay(50);
 800a04c:	2032      	movs	r0, #50	; 0x32
 800a04e:	f001 fef7 	bl	800be40 <HAL_Delay>
  AT_PRINTF("AT+RSTCNF\n");
 800a052:	4824      	ldr	r0, [pc, #144]	; (800a0e4 <at_self_test+0x184>)
 800a054:	f00a fb02 	bl	801465c <TraceSend>
  command_return = at_reset_params("");
 800a058:	0020      	movs	r0, r4
 800a05a:	f7ff ff69 	bl	8009f30 <at_reset_params>
  if(command_return == 0) {
 800a05e:	2800      	cmp	r0, #0
 800a060:	d122      	bne.n	800a0a8 <at_self_test+0x148>
      AT_PRINTF("OK\n\n");
 800a062:	4815      	ldr	r0, [pc, #84]	; (800a0b8 <at_self_test+0x158>)
      AT_PRINTF("ERROR\n\n");
 800a064:	f00a fafa 	bl	801465c <TraceSend>
  HAL_Delay(50);
 800a068:	2032      	movs	r0, #50	; 0x32
 800a06a:	f001 fee9 	bl	800be40 <HAL_Delay>
  AT_PRINTF("\n###### Teste da parte de RF ######\n");
 800a06e:	481e      	ldr	r0, [pc, #120]	; (800a0e8 <at_self_test+0x188>)
 800a070:	f00a faf4 	bl	801465c <TraceSend>
  AT_PRINTF("AT+SEND\n");
 800a074:	481d      	ldr	r0, [pc, #116]	; (800a0ec <at_self_test+0x18c>)
 800a076:	f00a faf1 	bl	801465c <TraceSend>
  at_Send("10:test");
 800a07a:	481d      	ldr	r0, [pc, #116]	; (800a0f0 <at_self_test+0x190>)
 800a07c:	f7ff fdf6 	bl	8009c6c <at_Send>
}
 800a080:	2000      	movs	r0, #0
 800a082:	bd10      	pop	{r4, pc}
      AT_PRINTF("ERROR\n\n");
 800a084:	481b      	ldr	r0, [pc, #108]	; (800a0f4 <at_self_test+0x194>)
 800a086:	e77a      	b.n	8009f7e <at_self_test+0x1e>
      AT_PRINTF("ERROR\n\n");
 800a088:	481a      	ldr	r0, [pc, #104]	; (800a0f4 <at_self_test+0x194>)
 800a08a:	e784      	b.n	8009f96 <at_self_test+0x36>
      AT_PRINTF("ERROR\n\n");
 800a08c:	4819      	ldr	r0, [pc, #100]	; (800a0f4 <at_self_test+0x194>)
 800a08e:	e78e      	b.n	8009fae <at_self_test+0x4e>
      AT_PRINTF("ERROR\n\n");
 800a090:	4818      	ldr	r0, [pc, #96]	; (800a0f4 <at_self_test+0x194>)
 800a092:	e797      	b.n	8009fc4 <at_self_test+0x64>
      AT_PRINTF("ERROR\n\n");
 800a094:	4817      	ldr	r0, [pc, #92]	; (800a0f4 <at_self_test+0x194>)
 800a096:	e7a0      	b.n	8009fda <at_self_test+0x7a>
      AT_PRINTF("ERROR\n\n");
 800a098:	4816      	ldr	r0, [pc, #88]	; (800a0f4 <at_self_test+0x194>)
 800a09a:	e7a9      	b.n	8009ff0 <at_self_test+0x90>
      AT_PRINTF("ERROR\n\n");
 800a09c:	4815      	ldr	r0, [pc, #84]	; (800a0f4 <at_self_test+0x194>)
 800a09e:	e7b2      	b.n	800a006 <at_self_test+0xa6>
      AT_PRINTF("ERROR\n\n");
 800a0a0:	4814      	ldr	r0, [pc, #80]	; (800a0f4 <at_self_test+0x194>)
 800a0a2:	e7bb      	b.n	800a01c <at_self_test+0xbc>
      AT_PRINTF("ERROR\n\n");
 800a0a4:	4813      	ldr	r0, [pc, #76]	; (800a0f4 <at_self_test+0x194>)
 800a0a6:	e7cf      	b.n	800a048 <at_self_test+0xe8>
      AT_PRINTF("ERROR\n\n");
 800a0a8:	4812      	ldr	r0, [pc, #72]	; (800a0f4 <at_self_test+0x194>)
 800a0aa:	e7db      	b.n	800a064 <at_self_test+0x104>
 800a0ac:	080171a2 	.word	0x080171a2
 800a0b0:	080171cc 	.word	0x080171cc
 800a0b4:	08017266 	.word	0x08017266
 800a0b8:	08017262 	.word	0x08017262
 800a0bc:	080171de 	.word	0x080171de
 800a0c0:	080171e7 	.word	0x080171e7
 800a0c4:	080171ef 	.word	0x080171ef
 800a0c8:	080171f9 	.word	0x080171f9
 800a0cc:	08017200 	.word	0x08017200
 800a0d0:	0801720a 	.word	0x0801720a
 800a0d4:	08017214 	.word	0x08017214
 800a0d8:	0801721c 	.word	0x0801721c
 800a0dc:	08017251 	.word	0x08017251
 800a0e0:	0801725b 	.word	0x0801725b
 800a0e4:	08017267 	.word	0x08017267
 800a0e8:	08017272 	.word	0x08017272
 800a0ec:	08017297 	.word	0x08017297
 800a0f0:	080172a0 	.word	0x080172a0
 800a0f4:	080171d6 	.word	0x080171d6

0800a0f8 <at_enter_bootload>:
ATEerror_t at_enter_bootload(const char *param) {
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 800a0fc:	2214      	movs	r2, #20
 800a0fe:	2100      	movs	r1, #0
 800a100:	a801      	add	r0, sp, #4
 800a102:	f7f6 f87d 	bl	8000200 <memset>
  HW_GPIO_Init ( GPIOA, GPIO_PIN_11, &initStruct );
 800a106:	2180      	movs	r1, #128	; 0x80
 800a108:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a10a:	2401      	movs	r4, #1
  HW_GPIO_Init ( GPIOA, GPIO_PIN_11, &initStruct );
 800a10c:	aa01      	add	r2, sp, #4
 800a10e:	0109      	lsls	r1, r1, #4
 800a110:	05c0      	lsls	r0, r0, #23
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a112:	9402      	str	r4, [sp, #8]
  HW_GPIO_Init ( GPIOA, GPIO_PIN_11, &initStruct );
 800a114:	f000 f904 	bl	800a320 <HW_GPIO_Init>
  HW_GPIO_Write( GPIOA, GPIO_PIN_11, 1 );
 800a118:	2180      	movs	r1, #128	; 0x80
 800a11a:	20a0      	movs	r0, #160	; 0xa0
 800a11c:	0022      	movs	r2, r4
 800a11e:	0109      	lsls	r1, r1, #4
 800a120:	05c0      	lsls	r0, r0, #23
 800a122:	f000 f96f 	bl	800a404 <HW_GPIO_Write>
  HAL_Delay(1000);
 800a126:	20fa      	movs	r0, #250	; 0xfa
 800a128:	0080      	lsls	r0, r0, #2
 800a12a:	f001 fe89 	bl	800be40 <HAL_Delay>
  HW_GPIO_Write( GPIOA, GPIO_PIN_11, 0 );
 800a12e:	2180      	movs	r1, #128	; 0x80
 800a130:	20a0      	movs	r0, #160	; 0xa0
 800a132:	2200      	movs	r2, #0
 800a134:	0109      	lsls	r1, r1, #4
 800a136:	05c0      	lsls	r0, r0, #23
 800a138:	f000 f964 	bl	800a404 <HW_GPIO_Write>
  __ASM volatile ("dsb 0xF":::"memory");
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	4a03      	ldr	r2, [pc, #12]	; (800a150 <at_enter_bootload+0x58>)
 800a142:	4b04      	ldr	r3, [pc, #16]	; (800a154 <at_enter_bootload+0x5c>)
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	e7fd      	b.n	800a14a <at_enter_bootload+0x52>
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	05fa0004 	.word	0x05fa0004
 800a154:	e000ed00 	.word	0xe000ed00

0800a158 <CMD_GetChar>:
  IsCharReceived=RESET;
}

static void CMD_GetChar( uint8_t* rxChar)
{
  command[i] = *rxChar;
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <CMD_GetChar+0x14>)
 800a15a:	4a05      	ldr	r2, [pc, #20]	; (800a170 <CMD_GetChar+0x18>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	7801      	ldrb	r1, [r0, #0]
 800a160:	54d1      	strb	r1, [r2, r3]
  IsCharReceived=SET;
 800a162:	2201      	movs	r2, #1
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <CMD_GetChar+0x1c>)
 800a166:	701a      	strb	r2, [r3, #0]
}
 800a168:	4770      	bx	lr
 800a16a:	46c0      	nop			; (mov r8, r8)
 800a16c:	20000e40 	.word	0x20000e40
 800a170:	20000dbd 	.word	0x20000dbd
 800a174:	20000dbc 	.word	0x20000dbc

0800a178 <CMD_Init>:
{
 800a178:	b510      	push	{r4, lr}
  vcom_ReceiveInit( CMD_GetChar );
 800a17a:	4803      	ldr	r0, [pc, #12]	; (800a188 <CMD_Init+0x10>)
 800a17c:	f000 fbf2 	bl	800a964 <vcom_ReceiveInit>
  IsCharReceived=RESET;
 800a180:	2200      	movs	r2, #0
 800a182:	4b02      	ldr	r3, [pc, #8]	; (800a18c <CMD_Init+0x14>)
 800a184:	701a      	strb	r2, [r3, #0]
}
 800a186:	bd10      	pop	{r4, pc}
 800a188:	0800a159 	.word	0x0800a159
 800a18c:	20000dbc 	.word	0x20000dbc

0800a190 <CMD_Process>:

int CMD_Process(void)
{
/* Process all commands */
  if (IsCharReceived==SET)
 800a190:	4b46      	ldr	r3, [pc, #280]	; (800a2ac <CMD_Process+0x11c>)
{
 800a192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (IsCharReceived==SET)
 800a194:	781f      	ldrb	r7, [r3, #0]
 800a196:	2000      	movs	r0, #0
 800a198:	2f01      	cmp	r7, #1
 800a19a:	d10b      	bne.n	800a1b4 <CMD_Process+0x24>
    IsCharReceived=RESET;
    //EXIT CRITICAL
#if 0 /* echo On */
  PRINTF("%c", command[i]);
#endif
    if (command[i] == AT_ERROR_RX_CHAR)
 800a19c:	4e44      	ldr	r6, [pc, #272]	; (800a2b0 <CMD_Process+0x120>)
    IsCharReceived=RESET;
 800a19e:	7018      	strb	r0, [r3, #0]
    if (command[i] == AT_ERROR_RX_CHAR)
 800a1a0:	4d44      	ldr	r5, [pc, #272]	; (800a2b4 <CMD_Process+0x124>)
 800a1a2:	6833      	ldr	r3, [r6, #0]
 800a1a4:	5cec      	ldrb	r4, [r5, r3]
 800a1a6:	2c01      	cmp	r4, #1
 800a1a8:	d105      	bne.n	800a1b6 <CMD_Process+0x26>
    {
      i = 0;
 800a1aa:	6030      	str	r0, [r6, #0]
{
  if (error_type > AT_MAX)
  {
    error_type = AT_MAX;
  }
  AT_PRINTF(ATError_description[error_type]);
 800a1ac:	4842      	ldr	r0, [pc, #264]	; (800a2b8 <CMD_Process+0x128>)
 800a1ae:	f00a fa55 	bl	801465c <TraceSend>
    return 1; // indica que uma mensagem foi recebida
 800a1b2:	2001      	movs	r0, #1
}
 800a1b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    else if ((command[i] == '\\') || (command[i] == '#'))
 800a1b6:	2c5c      	cmp	r4, #92	; 0x5c
 800a1b8:	d001      	beq.n	800a1be <CMD_Process+0x2e>
 800a1ba:	2c23      	cmp	r4, #35	; 0x23
 800a1bc:	d16a      	bne.n	800a294 <CMD_Process+0x104>
    return 1; // indica que uma mensagem foi recebida
 800a1be:	2001      	movs	r0, #1
      if (i != 0)
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0f7      	beq.n	800a1b4 <CMD_Process+0x24>
        command[i] = '\0';
 800a1c4:	2400      	movs	r4, #0
 800a1c6:	54ec      	strb	r4, [r5, r3]
{
  ATEerror_t status = AT_OK;
  const struct ATCommand_s *Current_ATCommand;
  int i;

  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800a1c8:	782b      	ldrb	r3, [r5, #0]
 800a1ca:	2b41      	cmp	r3, #65	; 0x41
 800a1cc:	d001      	beq.n	800a1d2 <CMD_Process+0x42>
#endif
  }
  else
  {
    /* point to the start of the command, excluding AT */
    status = AT_ERROR;
 800a1ce:	2401      	movs	r4, #1
 800a1d0:	e006      	b.n	800a1e0 <CMD_Process+0x50>
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800a1d2:	786b      	ldrb	r3, [r5, #1]
 800a1d4:	2b54      	cmp	r3, #84	; 0x54
 800a1d6:	d1fa      	bne.n	800a1ce <CMD_Process+0x3e>
  if (cmd[2] == '\0')
 800a1d8:	78ab      	ldrb	r3, [r5, #2]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d108      	bne.n	800a1f0 <CMD_Process+0x60>
  ATEerror_t status = AT_OK;
 800a1de:	2400      	movs	r4, #0
  AT_PRINTF(ATError_description[error_type]);
 800a1e0:	4b36      	ldr	r3, [pc, #216]	; (800a2bc <CMD_Process+0x12c>)
 800a1e2:	00a4      	lsls	r4, r4, #2
 800a1e4:	58e0      	ldr	r0, [r4, r3]
 800a1e6:	f00a fa39 	bl	801465c <TraceSend>
        i = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6033      	str	r3, [r6, #0]
 800a1ee:	e7e0      	b.n	800a1b2 <CMD_Process+0x22>
  if (cmd[2] == '?')
 800a1f0:	2b3f      	cmp	r3, #63	; 0x3f
 800a1f2:	d12d      	bne.n	800a250 <CMD_Process+0xc0>
    PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800a1f4:	4832      	ldr	r0, [pc, #200]	; (800a2c0 <CMD_Process+0x130>)
 800a1f6:	f00a fa31 	bl	801465c <TraceSend>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d1fa      	bne.n	800a1f4 <CMD_Process+0x64>
 800a1fe:	2718      	movs	r7, #24
 800a200:	242d      	movs	r4, #45	; 0x2d
 800a202:	427f      	negs	r7, r7
 800a204:	3c01      	subs	r4, #1
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800a206:	2c00      	cmp	r4, #0
 800a208:	d0e9      	beq.n	800a1de <CMD_Process+0x4e>
 800a20a:	003d      	movs	r5, r7
 800a20c:	4365      	muls	r5, r4
 800a20e:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <CMD_Process+0x134>)
 800a210:	18ed      	adds	r5, r5, r3
 800a212:	4b2d      	ldr	r3, [pc, #180]	; (800a2c8 <CMD_Process+0x138>)
 800a214:	195d      	adds	r5, r3, r5
      PPRINTF(ATCommand[i].help_string);
 800a216:	6828      	ldr	r0, [r5, #0]
 800a218:	f00a fa20 	bl	801465c <TraceSend>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d1fa      	bne.n	800a216 <CMD_Process+0x86>
 800a220:	e7f0      	b.n	800a204 <CMD_Process+0x74>
        {
          case '\0':    /* nothing after the command */
            status = Current_ATCommand->run(cmd);
            break;
          case '=':
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800a222:	785a      	ldrb	r2, [r3, #1]
 800a224:	1c58      	adds	r0, r3, #1
 800a226:	2a3f      	cmp	r2, #63	; 0x3f
 800a228:	d105      	bne.n	800a236 <CMD_Process+0xa6>
 800a22a:	789b      	ldrb	r3, [r3, #2]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <CMD_Process+0xa6>
            {
              status = Current_ATCommand->get(cmd + 1);
 800a230:	68bb      	ldr	r3, [r7, #8]
            }
            else
            {
              status = Current_ATCommand->set(cmd + 1);
 800a232:	4798      	blx	r3
 800a234:	e028      	b.n	800a288 <CMD_Process+0xf8>
 800a236:	2318      	movs	r3, #24
 800a238:	4363      	muls	r3, r4
 800a23a:	4a23      	ldr	r2, [pc, #140]	; (800a2c8 <CMD_Process+0x138>)
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	e7f7      	b.n	800a232 <CMD_Process+0xa2>
            }
            break;
          case '?':
#ifndef NO_HELP
            AT_PRINTF(Current_ATCommand->help_string);
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f00a fa0a 	bl	801465c <TraceSend>
 800a248:	e7c9      	b.n	800a1de <CMD_Process+0x4e>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800a24a:	3401      	adds	r4, #1
 800a24c:	2c2c      	cmp	r4, #44	; 0x2c
 800a24e:	d0be      	beq.n	800a1ce <CMD_Process+0x3e>
 800a250:	2318      	movs	r3, #24
 800a252:	4363      	muls	r3, r4
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 800a254:	4a1c      	ldr	r2, [pc, #112]	; (800a2c8 <CMD_Process+0x138>)
 800a256:	491c      	ldr	r1, [pc, #112]	; (800a2c8 <CMD_Process+0x138>)
 800a258:	18d7      	adds	r7, r2, r3
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	5859      	ldr	r1, [r3, r1]
 800a25e:	481b      	ldr	r0, [pc, #108]	; (800a2cc <CMD_Process+0x13c>)
 800a260:	0015      	movs	r5, r2
 800a262:	f7f9 fc5f 	bl	8003b24 <strncmp>
 800a266:	9001      	str	r0, [sp, #4]
 800a268:	2800      	cmp	r0, #0
 800a26a:	d1ee      	bne.n	800a24a <CMD_Process+0xba>
        cmd += Current_ATCommand->size_string;
 800a26c:	4a17      	ldr	r2, [pc, #92]	; (800a2cc <CMD_Process+0x13c>)
 800a26e:	002b      	movs	r3, r5
 800a270:	4694      	mov	ip, r2
 800a272:	4463      	add	r3, ip
        switch (cmd[0])
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	2a3d      	cmp	r2, #61	; 0x3d
 800a278:	d0d3      	beq.n	800a222 <CMD_Process+0x92>
 800a27a:	2a3f      	cmp	r2, #63	; 0x3f
 800a27c:	d0e1      	beq.n	800a242 <CMD_Process+0xb2>
 800a27e:	2a00      	cmp	r2, #0
 800a280:	d1a5      	bne.n	800a1ce <CMD_Process+0x3e>
            status = Current_ATCommand->run(cmd);
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	0018      	movs	r0, r3
 800a286:	4790      	blx	r2
 800a288:	1c04      	adds	r4, r0, #0
 800a28a:	2807      	cmp	r0, #7
 800a28c:	d900      	bls.n	800a290 <CMD_Process+0x100>
 800a28e:	2407      	movs	r4, #7
 800a290:	b2e4      	uxtb	r4, r4
 800a292:	e7a5      	b.n	800a1e0 <CMD_Process+0x50>
    else if (i == (CMD_SIZE - 1))
 800a294:	2b7f      	cmp	r3, #127	; 0x7f
 800a296:	d105      	bne.n	800a2a4 <CMD_Process+0x114>
      i = 0;
 800a298:	6030      	str	r0, [r6, #0]
  AT_PRINTF(ATError_description[error_type]);
 800a29a:	480d      	ldr	r0, [pc, #52]	; (800a2d0 <CMD_Process+0x140>)
 800a29c:	f00a f9de 	bl	801465c <TraceSend>
    return 1; // indica que uma mensagem foi recebida
 800a2a0:	0038      	movs	r0, r7
 800a2a2:	e787      	b.n	800a1b4 <CMD_Process+0x24>
      i++;
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	e7fa      	b.n	800a2a0 <CMD_Process+0x110>
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	20000dbc 	.word	0x20000dbc
 800a2b0:	20000e40 	.word	0x20000e40
 800a2b4:	20000dbd 	.word	0x20000dbd
 800a2b8:	08017798 	.word	0x08017798
 800a2bc:	08017778 	.word	0x08017778
 800a2c0:	080177a8 	.word	0x080177a8
 800a2c4:	00000434 	.word	0x00000434
 800a2c8:	08017358 	.word	0x08017358
 800a2cc:	20000dbf 	.word	0x20000dbf
 800a2d0:	0801782d 	.word	0x0801782d

0800a2d4 <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
#endif
}

void Error_Handler(void)
{
 800a2d4:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800a2d6:	4802      	ldr	r0, [pc, #8]	; (800a2e0 <Error_Handler+0xc>)
 800a2d8:	f00a f9c0 	bl	801465c <TraceSend>
 800a2dc:	e7fe      	b.n	800a2dc <Error_Handler+0x8>
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	080182db 	.word	0x080182db

0800a2e4 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800a2e4:	0001      	movs	r1, r0
 800a2e6:	23ff      	movs	r3, #255	; 0xff
 800a2e8:	4399      	bics	r1, r3
 800a2ea:	000b      	movs	r3, r1
{
 800a2ec:	0002      	movs	r2, r0
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800a2ee:	1e58      	subs	r0, r3, #1
 800a2f0:	4183      	sbcs	r3, r0
 800a2f2:	00d8      	lsls	r0, r3, #3
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800a2f4:	4b07      	ldr	r3, [pc, #28]	; (800a314 <HW_GPIO_GetBitPos+0x30>)
 800a2f6:	421a      	tst	r2, r3
 800a2f8:	d001      	beq.n	800a2fe <HW_GPIO_GetBitPos+0x1a>
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800a2fe:	4b06      	ldr	r3, [pc, #24]	; (800a318 <HW_GPIO_GetBitPos+0x34>)
 800a300:	421a      	tst	r2, r3
 800a302:	d001      	beq.n	800a308 <HW_GPIO_GetBitPos+0x24>
 800a304:	2302      	movs	r3, #2
 800a306:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <HW_GPIO_GetBitPos+0x38>)
 800a30a:	421a      	tst	r2, r3
 800a30c:	d001      	beq.n	800a312 <HW_GPIO_GetBitPos+0x2e>
 800a30e:	2301      	movs	r3, #1
 800a310:	4318      	orrs	r0, r3
  
  return PinPos;
}
 800a312:	4770      	bx	lr
 800a314:	fffff0f0 	.word	0xfffff0f0
 800a318:	ffffcccc 	.word	0xffffcccc
 800a31c:	ffffaaaa 	.word	0xffffaaaa

0800a320 <HW_GPIO_Init>:
{
 800a320:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800a322:	4c21      	ldr	r4, [pc, #132]	; (800a3a8 <HW_GPIO_Init+0x88>)
{
 800a324:	b087      	sub	sp, #28
 800a326:	4b21      	ldr	r3, [pc, #132]	; (800a3ac <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800a328:	42a0      	cmp	r0, r4
 800a32a:	d02a      	beq.n	800a382 <HW_GPIO_Init+0x62>
 800a32c:	d80c      	bhi.n	800a348 <HW_GPIO_Init+0x28>
 800a32e:	24a0      	movs	r4, #160	; 0xa0
 800a330:	05e4      	lsls	r4, r4, #23
 800a332:	42a0      	cmp	r0, r4
 800a334:	d017      	beq.n	800a366 <HW_GPIO_Init+0x46>
 800a336:	2580      	movs	r5, #128	; 0x80
 800a338:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a33a:	432c      	orrs	r4, r5
 800a33c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	402b      	ands	r3, r5
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	9b05      	ldr	r3, [sp, #20]
 800a346:	e016      	b.n	800a376 <HW_GPIO_Init+0x56>
 800a348:	4c19      	ldr	r4, [pc, #100]	; (800a3b0 <HW_GPIO_Init+0x90>)
 800a34a:	42a0      	cmp	r0, r4
 800a34c:	d022      	beq.n	800a394 <HW_GPIO_Init+0x74>
 800a34e:	4c19      	ldr	r4, [pc, #100]	; (800a3b4 <HW_GPIO_Init+0x94>)
 800a350:	42a0      	cmp	r0, r4
 800a352:	d1f0      	bne.n	800a336 <HW_GPIO_Init+0x16>
 800a354:	2508      	movs	r5, #8
 800a356:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a358:	432c      	orrs	r4, r5
 800a35a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	402b      	ands	r3, r5
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9b04      	ldr	r3, [sp, #16]
 800a364:	e007      	b.n	800a376 <HW_GPIO_Init+0x56>
 800a366:	2501      	movs	r5, #1
 800a368:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a36a:	432c      	orrs	r4, r5
 800a36c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	402b      	ands	r3, r5
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800a376:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 800a378:	0011      	movs	r1, r2
 800a37a:	f003 fc9f 	bl	800dcbc <HAL_GPIO_Init>
}
 800a37e:	b007      	add	sp, #28
 800a380:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800a382:	2502      	movs	r5, #2
 800a384:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a386:	432c      	orrs	r4, r5
 800a388:	62dc      	str	r4, [r3, #44]	; 0x2c
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	402b      	ands	r3, r5
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	9b02      	ldr	r3, [sp, #8]
 800a392:	e7f0      	b.n	800a376 <HW_GPIO_Init+0x56>
 800a394:	2504      	movs	r5, #4
 800a396:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a398:	432c      	orrs	r4, r5
 800a39a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	402b      	ands	r3, r5
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	e7e7      	b.n	800a376 <HW_GPIO_Init+0x56>
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	50000400 	.word	0x50000400
 800a3ac:	40021000 	.word	0x40021000
 800a3b0:	50000800 	.word	0x50000800
 800a3b4:	50000c00 	.word	0x50000c00

0800a3b8 <HW_GPIO_SetIrq>:
{
 800a3b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800a3ba:	0008      	movs	r0, r1
{
 800a3bc:	001c      	movs	r4, r3
 800a3be:	000d      	movs	r5, r1
 800a3c0:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800a3c2:	f7ff ff8f 	bl	800a2e4 <HW_GPIO_GetBitPos>
 800a3c6:	4b08      	ldr	r3, [pc, #32]	; (800a3e8 <HW_GPIO_SetIrq+0x30>)
 800a3c8:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 800a3ca:	501c      	str	r4, [r3, r0]
  if ( irqHandler != NULL)
 800a3cc:	2c00      	cmp	r4, #0
 800a3ce:	d00a      	beq.n	800a3e6 <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800a3d0:	0028      	movs	r0, r5
 800a3d2:	f001 fd8f 	bl	800bef4 <MSP_GetIRQn>
 800a3d6:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 800a3d8:	2200      	movs	r2, #0
 800a3da:	0031      	movs	r1, r6
 800a3dc:	f003 fc34 	bl	800dc48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800a3e0:	0020      	movs	r0, r4
 800a3e2:	f003 fc61 	bl	800dca8 <HAL_NVIC_EnableIRQ>
}
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	20000e44 	.word	0x20000e44

0800a3ec <HW_GPIO_IrqHandler>:
{
 800a3ec:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 800a3ee:	f7ff ff79 	bl	800a2e4 <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 800a3f2:	4b03      	ldr	r3, [pc, #12]	; (800a400 <HW_GPIO_IrqHandler+0x14>)
 800a3f4:	0080      	lsls	r0, r0, #2
 800a3f6:	58c3      	ldr	r3, [r0, r3]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d000      	beq.n	800a3fe <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ] ( );
 800a3fc:	4798      	blx	r3
}
 800a3fe:	bd10      	pop	{r4, pc}
 800a400:	20000e44 	.word	0x20000e44

0800a404 <HW_GPIO_Write>:
{
 800a404:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	f003 fd14 	bl	800de34 <HAL_GPIO_WritePin>
}
 800a40c:	bd10      	pop	{r4, pc}
	...

0800a410 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a412:	4f23      	ldr	r7, [pc, #140]	; (800a4a0 <HW_RTC_GetCalendarValue+0x90>)
{
 800a414:	0006      	movs	r6, r0
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a416:	2200      	movs	r2, #0
 800a418:	0038      	movs	r0, r7
{
 800a41a:	000d      	movs	r5, r1
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a41c:	f004 f9ba 	bl	800e794 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800a420:	2200      	movs	r2, #0
 800a422:	0031      	movs	r1, r6
 800a424:	0038      	movs	r0, r7
    first_read = RTC_TimeStruct->SubSeconds;
 800a426:	686c      	ldr	r4, [r5, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800a428:	f004 f9de 	bl	800e7e8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a42c:	2200      	movs	r2, #0
 800a42e:	0029      	movs	r1, r5
 800a430:	0038      	movs	r0, r7
 800a432:	f004 f9af 	bl	800e794 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 800a436:	686b      	ldr	r3, [r5, #4]
 800a438:	429c      	cmp	r4, r3
 800a43a:	d1f1      	bne.n	800a420 <HW_RTC_GetCalendarValue+0x10>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 800a43c:	78f3      	ldrb	r3, [r6, #3]
 800a43e:	4f19      	ldr	r7, [pc, #100]	; (800a4a4 <HW_RTC_GetCalendarValue+0x94>)
 800a440:	435f      	muls	r7, r3
 800a442:	3703      	adds	r7, #3
 800a444:	08bf      	lsrs	r7, r7, #2

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800a446:	079b      	lsls	r3, r3, #30
 800a448:	d027      	beq.n	800a49a <HW_RTC_GetCalendarValue+0x8a>
 800a44a:	4917      	ldr	r1, [pc, #92]	; (800a4a8 <HW_RTC_GetCalendarValue+0x98>)
 
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800a44c:	223d      	movs	r2, #61	; 0x3d
 800a44e:	7870      	ldrb	r0, [r6, #1]
 800a450:	3801      	subs	r0, #1
 800a452:	4342      	muls	r2, r0
 800a454:	3201      	adds	r2, #1
 800a456:	0fd3      	lsrs	r3, r2, #31
 800a458:	189b      	adds	r3, r3, r2

  seconds += (RTC_DateStruct->Date -1);
 800a45a:	78b2      	ldrb	r2, [r6, #2]
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800a45c:	105b      	asrs	r3, r3, #1
 800a45e:	3a01      	subs	r2, #1
 800a460:	19d2      	adds	r2, r2, r7
 800a462:	189a      	adds	r2, r3, r2
 800a464:	000b      	movs	r3, r1
 800a466:	0040      	lsls	r0, r0, #1
 800a468:	40c3      	lsrs	r3, r0
 800a46a:	2103      	movs	r1, #3
 800a46c:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date -1);
 800a46e:	1ad3      	subs	r3, r2, r3
  
  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY; 
 800a470:	4a0e      	ldr	r2, [pc, #56]	; (800a4ac <HW_RTC_GetCalendarValue+0x9c>)

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 800a472:	7829      	ldrb	r1, [r5, #0]
  seconds *= SECONDS_IN_1DAY; 
 800a474:	435a      	muls	r2, r3
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 800a476:	23e1      	movs	r3, #225	; 0xe1
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	434b      	muls	r3, r1
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800a47c:	213c      	movs	r1, #60	; 0x3c
 800a47e:	7868      	ldrb	r0, [r5, #1]
 800a480:	4341      	muls	r1, r0
 800a482:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a484:	78a9      	ldrb	r1, [r5, #2]


  
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800a486:	4d0a      	ldr	r5, [pc, #40]	; (800a4b0 <HW_RTC_GetCalendarValue+0xa0>)
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800a488:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a48a:	189b      	adds	r3, r3, r2
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800a48c:	0d99      	lsrs	r1, r3, #22
 800a48e:	0298      	lsls	r0, r3, #10
 800a490:	2300      	movs	r3, #0
 800a492:	1b2a      	subs	r2, r5, r4
 800a494:	1880      	adds	r0, r0, r2
 800a496:	4159      	adcs	r1, r3

  return( calendarValue );
}
 800a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800a49a:	4906      	ldr	r1, [pc, #24]	; (800a4b4 <HW_RTC_GetCalendarValue+0xa4>)
 800a49c:	e7d6      	b.n	800a44c <HW_RTC_GetCalendarValue+0x3c>
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	20000eb0 	.word	0x20000eb0
 800a4a4:	000005b5 	.word	0x000005b5
 800a4a8:	0099aaa0 	.word	0x0099aaa0
 800a4ac:	00015180 	.word	0x00015180
 800a4b0:	000003ff 	.word	0x000003ff
 800a4b4:	00445550 	.word	0x00445550

0800a4b8 <HW_RTC_GetMinimumTimeout>:
}
 800a4b8:	2003      	movs	r0, #3
 800a4ba:	4770      	bx	lr

0800a4bc <HW_RTC_ms2Tick>:
{
 800a4bc:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 800a4be:	0e41      	lsrs	r1, r0, #25
 800a4c0:	227d      	movs	r2, #125	; 0x7d
 800a4c2:	01c0      	lsls	r0, r0, #7
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f7f6 fd2b 	bl	8000f20 <__aeabi_uldivmod>
}
 800a4ca:	bd10      	pop	{r4, pc}

0800a4cc <HW_RTC_Tick2ms>:
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800a4cc:	22fa      	movs	r2, #250	; 0xfa
  tick = tick&PREDIV_S;  
 800a4ce:	0583      	lsls	r3, r0, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800a4d0:	0092      	lsls	r2, r2, #2
  tick = tick&PREDIV_S;  
 800a4d2:	0d9b      	lsrs	r3, r3, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800a4d4:	4353      	muls	r3, r2
  uint32_t seconds = tick>>N_PREDIV_S;
 800a4d6:	0a80      	lsrs	r0, r0, #10
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800a4d8:	4350      	muls	r0, r2
 800a4da:	0a9b      	lsrs	r3, r3, #10
 800a4dc:	1818      	adds	r0, r3, r0
}
 800a4de:	4770      	bx	lr

0800a4e0 <HW_RTC_GetTimerElapsedTime>:
{
 800a4e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800a4e2:	a901      	add	r1, sp, #4
 800a4e4:	4668      	mov	r0, sp
 800a4e6:	f7ff ff93 	bl	800a410 <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 800a4ea:	4b02      	ldr	r3, [pc, #8]	; (800a4f4 <HW_RTC_GetTimerElapsedTime+0x14>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	1ac0      	subs	r0, r0, r3
}
 800a4f0:	b007      	add	sp, #28
 800a4f2:	bd00      	pop	{pc}
 800a4f4:	20000ed4 	.word	0x20000ed4

0800a4f8 <HW_RTC_GetTimerValue>:
{
 800a4f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800a4fa:	a901      	add	r1, sp, #4
 800a4fc:	4668      	mov	r0, sp
 800a4fe:	f7ff ff87 	bl	800a410 <HW_RTC_GetCalendarValue>
}
 800a502:	b007      	add	sp, #28
 800a504:	bd00      	pop	{pc}
	...

0800a508 <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 800a508:	2180      	movs	r1, #128	; 0x80
{
 800a50a:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 800a50c:	4c07      	ldr	r4, [pc, #28]	; (800a52c <HW_RTC_StopAlarm+0x24>)
 800a50e:	0049      	lsls	r1, r1, #1
 800a510:	0020      	movs	r0, r4
 800a512:	f003 fe97 	bl	800e244 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800a516:	6821      	ldr	r1, [r4, #0]
 800a518:	4b05      	ldr	r3, [pc, #20]	; (800a530 <HW_RTC_StopAlarm+0x28>)
 800a51a:	68ca      	ldr	r2, [r1, #12]
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a520:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800a522:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a524:	4b03      	ldr	r3, [pc, #12]	; (800a534 <HW_RTC_StopAlarm+0x2c>)
 800a526:	0292      	lsls	r2, r2, #10
 800a528:	615a      	str	r2, [r3, #20]
}
 800a52a:	bd10      	pop	{r4, pc}
 800a52c:	20000eb0 	.word	0x20000eb0
 800a530:	fffffe7f 	.word	0xfffffe7f
 800a534:	40010400 	.word	0x40010400

0800a538 <HW_RTC_SetAlarm>:
{
 800a538:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800a53a:	4d48      	ldr	r5, [pc, #288]	; (800a65c <HW_RTC_SetAlarm+0x124>)
{
 800a53c:	b087      	sub	sp, #28
 800a53e:	0006      	movs	r6, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800a540:	2300      	movs	r3, #0
 800a542:	5eec      	ldrsh	r4, [r5, r3]
 800a544:	f7ff ffcc 	bl	800a4e0 <HW_RTC_GetTimerElapsedTime>
 800a548:	3403      	adds	r4, #3
 800a54a:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 800a54c:	2100      	movs	r1, #0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800a54e:	4284      	cmp	r4, r0
 800a550:	d300      	bcc.n	800a554 <HW_RTC_SetAlarm+0x1c>
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 800a552:	2101      	movs	r1, #1
 800a554:	2004      	movs	r0, #4
 800a556:	f009 fc9b 	bl	8013e90 <LPM_SetStopMode>
  if( LPM_GetMode() == LPM_StopMode )
 800a55a:	f009 fcaf 	bl	8013ebc <LPM_GetMode>
 800a55e:	2801      	cmp	r0, #1
 800a560:	d102      	bne.n	800a568 <HW_RTC_SetAlarm+0x30>
    timeout = timeout -  McuWakeUpTimeCal;
 800a562:	2200      	movs	r2, #0
 800a564:	5eab      	ldrsh	r3, [r5, r2]
 800a566:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800a568:	4b3d      	ldr	r3, [pc, #244]	; (800a660 <HW_RTC_SetAlarm+0x128>)
 800a56a:	795a      	ldrb	r2, [r3, #5]
 800a56c:	689f      	ldr	r7, [r3, #8]
 800a56e:	9201      	str	r2, [sp, #4]
 800a570:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800a572:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800a574:	9202      	str	r2, [sp, #8]
 800a576:	79da      	ldrb	r2, [r3, #7]
 800a578:	791d      	ldrb	r5, [r3, #4]
 800a57a:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800a57c:	7e5a      	ldrb	r2, [r3, #25]
 800a57e:	7edb      	ldrb	r3, [r3, #27]
 800a580:	9200      	str	r2, [sp, #0]
 800a582:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm( );
 800a584:	f7ff ffc0 	bl	800a508 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800a588:	4936      	ldr	r1, [pc, #216]	; (800a664 <HW_RTC_SetAlarm+0x12c>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800a58a:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800a58c:	1bcf      	subs	r7, r1, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800a58e:	0d92      	lsrs	r2, r2, #22
 800a590:	18ba      	adds	r2, r7, r2
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800a592:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 800a594:	4e34      	ldr	r6, [pc, #208]	; (800a668 <HW_RTC_SetAlarm+0x130>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800a596:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 800a598:	b2a0      	uxth	r0, r4
 800a59a:	9105      	str	r1, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800a59c:	42b3      	cmp	r3, r6
 800a59e:	d83e      	bhi.n	800a61e <HW_RTC_SetAlarm+0xe6>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800a5a0:	4932      	ldr	r1, [pc, #200]	; (800a66c <HW_RTC_SetAlarm+0x134>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800a5a2:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	d83f      	bhi.n	800a628 <HW_RTC_SetAlarm+0xf0>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800a5a8:	4669      	mov	r1, sp
 800a5aa:	888e      	ldrh	r6, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800a5ac:	2b3b      	cmp	r3, #59	; 0x3b
 800a5ae:	d840      	bhi.n	800a632 <HW_RTC_SetAlarm+0xfa>
 800a5b0:	0a97      	lsrs	r7, r2, #10
 800a5b2:	02bc      	lsls	r4, r7, #10
 800a5b4:	1b14      	subs	r4, r2, r4
 800a5b6:	9a02      	ldr	r2, [sp, #8]
 800a5b8:	b2a4      	uxth	r4, r4
 800a5ba:	18bf      	adds	r7, r7, r2
 800a5bc:	18ff      	adds	r7, r7, r3
 800a5be:	b2bf      	uxth	r7, r7
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800a5c0:	2f3b      	cmp	r7, #59	; 0x3b
 800a5c2:	d83a      	bhi.n	800a63a <HW_RTC_SetAlarm+0x102>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800a5c4:	2e3b      	cmp	r6, #59	; 0x3b
 800a5c6:	d83d      	bhi.n	800a644 <HW_RTC_SetAlarm+0x10c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800a5c8:	2d17      	cmp	r5, #23
 800a5ca:	d840      	bhi.n	800a64e <HW_RTC_SetAlarm+0x116>
  if( RTC_DateStruct.Year % 4 == 0 ) 
 800a5cc:	9b04      	ldr	r3, [sp, #16]
 800a5ce:	079b      	lsls	r3, r3, #30
 800a5d0:	d142      	bne.n	800a658 <HW_RTC_SetAlarm+0x120>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 800a5d2:	4b27      	ldr	r3, [pc, #156]	; (800a670 <HW_RTC_SetAlarm+0x138>)
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800a5d4:	9a00      	ldr	r2, [sp, #0]
 800a5d6:	189b      	adds	r3, r3, r2
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	7819      	ldrb	r1, [r3, #0]
 800a5dc:	4288      	cmp	r0, r1
 800a5de:	d902      	bls.n	800a5e6 <HW_RTC_SetAlarm+0xae>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800a5e0:	f7f6 fc5a 	bl	8000e98 <__aeabi_idivmod>
 800a5e4:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800a5e6:	9b05      	ldr	r3, [sp, #20]
 800a5e8:	4922      	ldr	r1, [pc, #136]	; (800a674 <HW_RTC_SetAlarm+0x13c>)
 800a5ea:	1b1c      	subs	r4, r3, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 800a5ec:	23a0      	movs	r3, #160	; 0xa0
 800a5ee:	051b      	lsls	r3, r3, #20
 800a5f0:	618b      	str	r3, [r1, #24]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 800a5f2:	1c4b      	adds	r3, r1, #1
 800a5f4:	77d8      	strb	r0, [r3, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800a5f6:	466b      	mov	r3, sp
 800a5f8:	7b1b      	ldrb	r3, [r3, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800a5fa:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800a5fc:	70cb      	strb	r3, [r1, #3]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800a5fe:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800a600:	481d      	ldr	r0, [pc, #116]	; (800a678 <HW_RTC_SetAlarm+0x140>)
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800a602:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800a604:	604c      	str	r4, [r1, #4]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800a606:	708f      	strb	r7, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800a608:	704e      	strb	r6, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800a60a:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800a60c:	61ca      	str	r2, [r1, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800a60e:	614a      	str	r2, [r1, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800a610:	624b      	str	r3, [r1, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a612:	60ca      	str	r2, [r1, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a614:	610a      	str	r2, [r1, #16]
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800a616:	f003 ffeb 	bl	800e5f0 <HAL_RTC_SetAlarm_IT>
}
 800a61a:	b007      	add	sp, #28
 800a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800a61e:	4917      	ldr	r1, [pc, #92]	; (800a67c <HW_RTC_SetAlarm+0x144>)
    rtcAlarmDays++;
 800a620:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800a622:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 800a624:	b280      	uxth	r0, r0
 800a626:	e7b9      	b.n	800a59c <HW_RTC_SetAlarm+0x64>
    timeoutValue -= SECONDS_IN_1HOUR;
 800a628:	4c15      	ldr	r4, [pc, #84]	; (800a680 <HW_RTC_SetAlarm+0x148>)
    rtcAlarmHours++;
 800a62a:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800a62c:	191b      	adds	r3, r3, r4
    rtcAlarmHours++;
 800a62e:	b2ad      	uxth	r5, r5
 800a630:	e7b8      	b.n	800a5a4 <HW_RTC_SetAlarm+0x6c>
    rtcAlarmMinutes++;
 800a632:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800a634:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 800a636:	b2b6      	uxth	r6, r6
 800a638:	e7b8      	b.n	800a5ac <HW_RTC_SetAlarm+0x74>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800a63a:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmMinutes++;
 800a63c:	3601      	adds	r6, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800a63e:	b2bf      	uxth	r7, r7
    rtcAlarmMinutes++;
 800a640:	b2b6      	uxth	r6, r6
 800a642:	e7bd      	b.n	800a5c0 <HW_RTC_SetAlarm+0x88>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800a644:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmHours++;
 800a646:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800a648:	b2b6      	uxth	r6, r6
    rtcAlarmHours++;
 800a64a:	b2ad      	uxth	r5, r5
 800a64c:	e7ba      	b.n	800a5c4 <HW_RTC_SetAlarm+0x8c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800a64e:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800a650:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800a652:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800a654:	b280      	uxth	r0, r0
 800a656:	e7b7      	b.n	800a5c8 <HW_RTC_SetAlarm+0x90>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <HW_RTC_SetAlarm+0x14c>)
 800a65a:	e7bb      	b.n	800a5d4 <HW_RTC_SetAlarm+0x9c>
 800a65c:	20000e86 	.word	0x20000e86
 800a660:	20000ed4 	.word	0x20000ed4
 800a664:	000003ff 	.word	0x000003ff
 800a668:	0001517f 	.word	0x0001517f
 800a66c:	00000e0f 	.word	0x00000e0f
 800a670:	080182f7 	.word	0x080182f7
 800a674:	20000e88 	.word	0x20000e88
 800a678:	20000eb0 	.word	0x20000eb0
 800a67c:	fffeae80 	.word	0xfffeae80
 800a680:	fffff1f0 	.word	0xfffff1f0
 800a684:	080182eb 	.word	0x080182eb

0800a688 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 800a688:	2004      	movs	r0, #4
{
 800a68a:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 800a68c:	2100      	movs	r1, #0
 800a68e:	f009 fbff 	bl	8013e90 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a692:	2280      	movs	r2, #128	; 0x80
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <HW_RTC_IrqHandler+0x34>)
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800a696:	480a      	ldr	r0, [pc, #40]	; (800a6c0 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a698:	0292      	lsls	r2, r2, #10
 800a69a:	615a      	str	r2, [r3, #20]
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800a69c:	6803      	ldr	r3, [r0, #0]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	04d2      	lsls	r2, r2, #19
 800a6a2:	d509      	bpl.n	800a6b8 <HW_RTC_IrqHandler+0x30>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	05d2      	lsls	r2, r2, #23
 800a6a8:	d506      	bpl.n	800a6b8 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 800a6aa:	68d9      	ldr	r1, [r3, #12]
 800a6ac:	4a05      	ldr	r2, [pc, #20]	; (800a6c4 <HW_RTC_IrqHandler+0x3c>)
 800a6ae:	b2c9      	uxtb	r1, r1
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a6b4:	f001 fc16 	bl	800bee4 <HAL_RTC_AlarmAEventCallback>
}
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	40010400 	.word	0x40010400
 800a6c0:	20000eb0 	.word	0x20000eb0
 800a6c4:	fffffe7f 	.word	0xfffffe7f

0800a6c8 <HW_RTC_DelayMs>:
{
 800a6c8:	b570      	push	{r4, r5, r6, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 800a6ca:	0e41      	lsrs	r1, r0, #25
 800a6cc:	227d      	movs	r2, #125	; 0x7d
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	01c0      	lsls	r0, r0, #7
 800a6d2:	f7f6 fc25 	bl	8000f20 <__aeabi_uldivmod>
 800a6d6:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue( );
 800a6d8:	f7ff ff0e 	bl	800a4f8 <HW_RTC_GetTimerValue>
 800a6dc:	0005      	movs	r5, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 800a6de:	f7ff ff0b 	bl	800a4f8 <HW_RTC_GetTimerValue>
 800a6e2:	1b40      	subs	r0, r0, r5
 800a6e4:	42a0      	cmp	r0, r4
 800a6e6:	d300      	bcc.n	800a6ea <HW_RTC_DelayMs+0x22>
}
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	e7f7      	b.n	800a6de <HW_RTC_DelayMs+0x16>
	...

0800a6f0 <HW_RTC_SetTimerContext>:
{
 800a6f0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800a6f2:	4c04      	ldr	r4, [pc, #16]	; (800a704 <HW_RTC_SetTimerContext+0x14>)
 800a6f4:	0020      	movs	r0, r4
 800a6f6:	1d21      	adds	r1, r4, #4
 800a6f8:	3018      	adds	r0, #24
 800a6fa:	f7ff fe89 	bl	800a410 <HW_RTC_GetCalendarValue>
 800a6fe:	6020      	str	r0, [r4, #0]
}
 800a700:	bd10      	pop	{r4, pc}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	20000ed4 	.word	0x20000ed4

0800a708 <HW_RTC_Init>:
{
 800a708:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( HW_RTC_Initalized == false )
 800a70a:	4f1b      	ldr	r7, [pc, #108]	; (800a778 <HW_RTC_Init+0x70>)
{
 800a70c:	b087      	sub	sp, #28
  if( HW_RTC_Initalized == false )
 800a70e:	783c      	ldrb	r4, [r7, #0]
 800a710:	2c00      	cmp	r4, #0
 800a712:	d12f      	bne.n	800a774 <HW_RTC_Init+0x6c>
  RtcHandle.Instance = RTC;
 800a714:	4d19      	ldr	r5, [pc, #100]	; (800a77c <HW_RTC_Init+0x74>)
 800a716:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <HW_RTC_Init+0x78>)
  HAL_RTC_Init( &RtcHandle );
 800a718:	0028      	movs	r0, r5
  RtcHandle.Instance = RTC;
 800a71a:	602b      	str	r3, [r5, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800a71c:	231f      	movs	r3, #31
 800a71e:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800a720:	4b18      	ldr	r3, [pc, #96]	; (800a784 <HW_RTC_Init+0x7c>)
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800a722:	2601      	movs	r6, #1
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800a724:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800a726:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800a728:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a72a:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a72c:	61ec      	str	r4, [r5, #28]
  HAL_RTC_Init( &RtcHandle );
 800a72e:	f003 fe1f 	bl	800e370 <HAL_RTC_Init>
  RTC_DateStruct.Year = 0;
 800a732:	466b      	mov	r3, sp
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 800a734:	4669      	mov	r1, sp
 800a736:	0022      	movs	r2, r4
 800a738:	0028      	movs	r0, r5
  RTC_DateStruct.Year = 0;
 800a73a:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800a73c:	705e      	strb	r6, [r3, #1]
  RTC_DateStruct.Date = 1;
 800a73e:	709e      	strb	r6, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800a740:	701e      	strb	r6, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 800a742:	f003 fee9 	bl	800e518 <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 0;
 800a746:	a901      	add	r1, sp, #4
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800a748:	0022      	movs	r2, r4
 800a74a:	0028      	movs	r0, r5
  RTC_TimeStruct.Hours = 0;
 800a74c:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 800a74e:	704c      	strb	r4, [r1, #1]
  RTC_TimeStruct.Seconds = 0;
 800a750:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 800a752:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 800a754:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800a756:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800a758:	60cc      	str	r4, [r1, #12]
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800a75a:	f003 fe5f 	bl	800e41c <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800a75e:	0028      	movs	r0, r5
 800a760:	f004 f870 	bl	800e844 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800a764:	2180      	movs	r1, #128	; 0x80
 800a766:	0028      	movs	r0, r5
 800a768:	0049      	lsls	r1, r1, #1
 800a76a:	f003 fd6b 	bl	800e244 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext( );
 800a76e:	f7ff ffbf 	bl	800a6f0 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800a772:	703e      	strb	r6, [r7, #0]
}
 800a774:	b007      	add	sp, #28
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	20000e84 	.word	0x20000e84
 800a77c:	20000eb0 	.word	0x20000eb0
 800a780:	40002800 	.word	0x40002800
 800a784:	000003ff 	.word	0x000003ff

0800a788 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800a788:	4b01      	ldr	r3, [pc, #4]	; (800a790 <HW_RTC_GetTimerContext+0x8>)
 800a78a:	6818      	ldr	r0, [r3, #0]
}
 800a78c:	4770      	bx	lr
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	20000ed4 	.word	0x20000ed4

0800a794 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms 
 *               
 * \return uint32_t seconds 
 */
uint32_t HW_RTC_GetCalendarTime( uint16_t *mSeconds)
{
 800a794:	b530      	push	{r4, r5, lr}
 800a796:	b087      	sub	sp, #28
 800a798:	0005      	movs	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;
  
  uint64_t calendarValue = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 800a79a:	a901      	add	r1, sp, #4
 800a79c:	4668      	mov	r0, sp
 800a79e:	f7ff fe37 	bl	800a410 <HW_RTC_GetCalendarValue>
 800a7a2:	0004      	movs	r4, r0
  
  uint32_t seconds = (uint32_t) calendarValue >>N_PREDIV_S;
  
  ticks =  (uint32_t) calendarValue&PREDIV_S;
 800a7a4:	0580      	lsls	r0, r0, #22
 800a7a6:	0d80      	lsrs	r0, r0, #22
  
  *mSeconds = HW_RTC_Tick2ms(ticks);
 800a7a8:	f7ff fe90 	bl	800a4cc <HW_RTC_Tick2ms>
 800a7ac:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t) calendarValue >>N_PREDIV_S;
 800a7ae:	0aa0      	lsrs	r0, r4, #10
  
  return seconds;
}
 800a7b0:	b007      	add	sp, #28
 800a7b2:	bd30      	pop	{r4, r5, pc}

0800a7b4 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite( uint32_t Data0, uint32_t Data1)
{
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	000d      	movs	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800a7b8:	4c05      	ldr	r4, [pc, #20]	; (800a7d0 <HW_RTC_BKUPWrite+0x1c>)
{
 800a7ba:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	0020      	movs	r0, r4
 800a7c0:	f004 f834 	bl	800e82c <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 800a7c4:	002a      	movs	r2, r5
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	0020      	movs	r0, r4
 800a7ca:	f004 f82f 	bl	800e82c <HAL_RTCEx_BKUPWrite>
}
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	20000eb0 	.word	0x20000eb0

0800a7d4 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead( uint32_t *Data0, uint32_t *Data1)
{
 800a7d4:	b570      	push	{r4, r5, r6, lr}
  *Data0=HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800a7d6:	4c07      	ldr	r4, [pc, #28]	; (800a7f4 <HW_RTC_BKUPRead+0x20>)
{
 800a7d8:	0006      	movs	r6, r0
 800a7da:	000d      	movs	r5, r1
  *Data0=HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800a7dc:	0020      	movs	r0, r4
 800a7de:	2100      	movs	r1, #0
 800a7e0:	f004 f82a 	bl	800e838 <HAL_RTCEx_BKUPRead>
  *Data1=HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800a7e4:	2101      	movs	r1, #1
  *Data0=HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800a7e6:	6030      	str	r0, [r6, #0]
  *Data1=HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800a7e8:	0020      	movs	r0, r4
 800a7ea:	f004 f825 	bl	800e838 <HAL_RTCEx_BKUPRead>
 800a7ee:	6028      	str	r0, [r5, #0]
}
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	20000eb0 	.word	0x20000eb0

0800a7f8 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 800a7fc:	2214      	movs	r2, #20
 800a7fe:	2100      	movs	r1, #0
 800a800:	a801      	add	r0, sp, #4
 800a802:	f7f5 fcfd 	bl	8000200 <memset>
  initStruct.Pull =GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate= SPI1_AF ;

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800a806:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_AF_PP;
 800a808:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800a80a:	05e4      	lsls	r4, r4, #23
  initStruct.Mode =GPIO_MODE_AF_PP;
 800a80c:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800a80e:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800a810:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800a812:	2108      	movs	r1, #8
 800a814:	480f      	ldr	r0, [pc, #60]	; (800a854 <HW_SPI_IoInit+0x5c>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 800a816:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800a818:	2580      	movs	r5, #128	; 0x80
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800a81a:	f7ff fd81 	bl	800a320 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800a81e:	aa01      	add	r2, sp, #4
 800a820:	0020      	movs	r0, r4
 800a822:	2140      	movs	r1, #64	; 0x40
 800a824:	f7ff fd7c 	bl	800a320 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800a828:	aa01      	add	r2, sp, #4
 800a82a:	0020      	movs	r0, r4
 800a82c:	2180      	movs	r1, #128	; 0x80
 800a82e:	f7ff fd77 	bl	800a320 <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a832:	2601      	movs	r6, #1
  initStruct.Pull = GPIO_NOPULL;
 800a834:	2300      	movs	r3, #0
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800a836:	022d      	lsls	r5, r5, #8
 800a838:	aa01      	add	r2, sp, #4
 800a83a:	0029      	movs	r1, r5
 800a83c:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_NOPULL;
 800a83e:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a840:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800a842:	f7ff fd6d 	bl	800a320 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800a846:	0032      	movs	r2, r6
 800a848:	0029      	movs	r1, r5
 800a84a:	0020      	movs	r0, r4
 800a84c:	f7ff fdda 	bl	800a404 <HW_GPIO_Write>
}
 800a850:	b006      	add	sp, #24
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	50000400 	.word	0x50000400

0800a858 <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800a858:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <HW_SPI_Init+0x6c>)
 800a85a:	481b      	ldr	r0, [pc, #108]	; (800a8c8 <HW_SPI_Init+0x70>)
{
 800a85c:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800a85e:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800a860:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <HW_SPI_Init+0x74>)
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800a862:	491b      	ldr	r1, [pc, #108]	; (800a8d0 <HW_SPI_Init+0x78>)
  uint32_t SysClkTmp = SystemCoreClock;
 800a864:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800a866:	2300      	movs	r3, #0
  while( SysClkTmp > hz)
 800a868:	428a      	cmp	r2, r1
 800a86a:	d903      	bls.n	800a874 <HW_SPI_Init+0x1c>
  {
    divisor++;
 800a86c:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 800a86e:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 800a870:	2b07      	cmp	r3, #7
 800a872:	d1f9      	bne.n	800a868 <HW_SPI_Init+0x10>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a874:	075a      	lsls	r2, r3, #29
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800a876:	0799      	lsls	r1, r3, #30
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a878:	0fd2      	lsrs	r2, r2, #31
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800a87a:	0fc9      	lsrs	r1, r1, #31
 800a87c:	0109      	lsls	r1, r1, #4
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a87e:	0152      	lsls	r2, r2, #5
 800a880:	430a      	orrs	r2, r1
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800a882:	2101      	movs	r1, #1
 800a884:	400b      	ands	r3, r1
 800a886:	00db      	lsls	r3, r3, #3
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a888:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800a88a:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800a88c:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800a88e:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800a890:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800a892:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800a894:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800a896:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 800a898:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800a89a:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800a89c:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 800a89e:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800a8a0:	0052      	lsls	r2, r2, #1
 800a8a2:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800a8a4:	32fc      	adds	r2, #252	; 0xfc
 800a8a6:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE(); 
 800a8a8:	4a0a      	ldr	r2, [pc, #40]	; (800a8d4 <HW_SPI_Init+0x7c>)
 800a8aa:	015b      	lsls	r3, r3, #5
 800a8ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800a8b2:	f001 fb7b 	bl	800bfac <HAL_SPI_Init>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d001      	beq.n	800a8be <HW_SPI_Init+0x66>
     Error_Handler();
 800a8ba:	f7ff fd0b 	bl	800a2d4 <Error_Handler>
  HW_SPI_IoInit(  );
 800a8be:	f7ff ff9b 	bl	800a7f8 <HW_SPI_IoInit>
}
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	40013000 	.word	0x40013000
 800a8c8:	20000ef0 	.word	0x20000ef0
 800a8cc:	200009e8 	.word	0x200009e8
 800a8d0:	00989680 	.word	0x00989680
 800a8d4:	40021000 	.word	0x40021000

0800a8d8 <HW_SPI_InOut>:
{
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800a8dc:	2416      	movs	r4, #22
 800a8de:	2301      	movs	r3, #1
{
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800a8e4:	446c      	add	r4, sp
 800a8e6:	425b      	negs	r3, r3
{
 800a8e8:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800a8ea:	0022      	movs	r2, r4
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	4803      	ldr	r0, [pc, #12]	; (800a8fc <HW_SPI_InOut+0x24>)
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	f001 fb9b 	bl	800c02c <HAL_SPI_TransmitReceive>
  return rxData;
 800a8f6:	8820      	ldrh	r0, [r4, #0]
}
 800a8f8:	b006      	add	sp, #24
 800a8fa:	bd10      	pop	{r4, pc}
 800a8fc:	20000ef0 	.word	0x20000ef0

0800a900 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(  void (*TxCb)(void) )
{

  /*Record Tx complete for DMA*/
  TxCpltCallback=TxCb;
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <vcom_Init+0x30>)
{
 800a902:	b510      	push	{r4, lr}
  TxCpltCallback=TxCb;
 800a904:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx; // LPUART1
 800a906:	480b      	ldr	r0, [pc, #44]	; (800a934 <vcom_Init+0x34>)
 800a908:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <vcom_Init+0x38>)
 800a90a:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 9600;
 800a90c:	2396      	movs	r3, #150	; 0x96
 800a90e:	019b      	lsls	r3, r3, #6
 800a910:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800a912:	2300      	movs	r3, #0
 800a914:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800a916:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800a918:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800a91a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800a91c:	330c      	adds	r3, #12
 800a91e:	6143      	str	r3, [r0, #20]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800a920:	f002 f904 	bl	800cb2c <HAL_UART_Init>
 800a924:	2800      	cmp	r0, #0
 800a926:	d001      	beq.n	800a92c <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
 800a928:	f7ff fcd4 	bl	800a2d4 <Error_Handler>
  }
}
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	20000f4c 	.word	0x20000f4c
 800a934:	20000f50 	.word	0x20000f50
 800a938:	40004800 	.word	0x40004800

0800a93c <vcom_Trace>:

void vcom_Trace(  uint8_t *p_data, uint16_t size )
{
 800a93c:	b510      	push	{r4, lr}
 800a93e:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle,p_data, size);
 800a940:	0001      	movs	r1, r0
 800a942:	4802      	ldr	r0, [pc, #8]	; (800a94c <vcom_Trace+0x10>)
 800a944:	f001 fd4e 	bl	800c3e4 <HAL_UART_Transmit_DMA>
}
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	20000f50 	.word	0x20000f50

0800a950 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
   if (NULL != TxCpltCallback)
 800a950:	4b03      	ldr	r3, [pc, #12]	; (800a960 <HAL_UART_TxCpltCallback+0x10>)
{
 800a952:	b510      	push	{r4, lr}
   if (NULL != TxCpltCallback)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d000      	beq.n	800a95c <HAL_UART_TxCpltCallback+0xc>
   {
     TxCpltCallback();
 800a95a:	4798      	blx	r3
   }
}
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	20000f4c 	.word	0x20000f4c

0800a964 <vcom_ReceiveInit>:

void vcom_ReceiveInit(  void (*RxCb)(uint8_t *rxChar) )
{
 800a964:	b513      	push	{r0, r1, r4, lr}
  RxCpltCallback=RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent=UART_WAKEUP_ON_STARTBIT;

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection );
 800a966:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback=RxCb;
 800a968:	4b08      	ldr	r3, [pc, #32]	; (800a98c <vcom_ReceiveInit+0x28>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection );
 800a96a:	4c09      	ldr	r4, [pc, #36]	; (800a990 <vcom_ReceiveInit+0x2c>)
  RxCpltCallback=RxCb;
 800a96c:	6018      	str	r0, [r3, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection );
 800a96e:	9a01      	ldr	r2, [sp, #4]
 800a970:	0389      	lsls	r1, r1, #14
 800a972:	0020      	movs	r0, r4
 800a974:	f002 f910 	bl	800cb98 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800a978:	0020      	movs	r0, r4
 800a97a:	f002 f955 	bl	800cc28 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx,1);
 800a97e:	2201      	movs	r2, #1
 800a980:	4904      	ldr	r1, [pc, #16]	; (800a994 <vcom_ReceiveInit+0x30>)
 800a982:	0020      	movs	r0, r4
 800a984:	f001 fcda 	bl	800c33c <HAL_UART_Receive_IT>
}
 800a988:	bd13      	pop	{r0, r1, r4, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	20000f48 	.word	0x20000f48
 800a990:	20000f50 	.word	0x20000f50
 800a994:	2000223c 	.word	0x2000223c

0800a998 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
   if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE ==UartHandle->ErrorCode))
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <HAL_UART_RxCpltCallback+0x24>)
{
 800a99a:	b570      	push	{r4, r5, r6, lr}
   if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE ==UartHandle->ErrorCode))
 800a99c:	681b      	ldr	r3, [r3, #0]
{
 800a99e:	0004      	movs	r4, r0
 800a9a0:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <HAL_UART_RxCpltCallback+0x28>)
   if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE ==UartHandle->ErrorCode))
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <HAL_UART_RxCpltCallback+0x18>
 800a9a6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	d101      	bne.n	800a9b0 <HAL_UART_RxCpltCallback+0x18>
   {
     RxCpltCallback(&charRx);
 800a9ac:	0028      	movs	r0, r5
 800a9ae:	4798      	blx	r3
   }
   HAL_UART_Receive_IT(UartHandle, &charRx,1);
 800a9b0:	0029      	movs	r1, r5
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	0020      	movs	r0, r4
 800a9b6:	f001 fcc1 	bl	800c33c <HAL_UART_Receive_IT>
}
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	20000f48 	.word	0x20000f48
 800a9c0:	2000223c 	.word	0x2000223c

0800a9c4 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 800a9c4:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 800a9c6:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <vcom_DMA_TX_IRQHandler+0xc>)
 800a9c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a9ca:	f003 fb57 	bl	800e07c <HAL_DMA_IRQHandler>
}
 800a9ce:	bd10      	pop	{r4, pc}
 800a9d0:	20000f50 	.word	0x20000f50

0800a9d4 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800a9d4:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800a9d6:	4802      	ldr	r0, [pc, #8]	; (800a9e0 <vcom_IRQHandler+0xc>)
 800a9d8:	f001 fdd4 	bl	800c584 <HAL_UART_IRQHandler>
}
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	20000f50 	.word	0x20000f50

0800a9e4 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 800a9e4:	b530      	push	{r4, r5, lr}
 800a9e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 800a9e8:	2214      	movs	r2, #20
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	a803      	add	r0, sp, #12
 800a9ee:	f7f5 fc07 	bl	8000200 <memset>
    /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <vcom_IoInit+0x5c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800a9f6:	24a0      	movs	r4, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800a9f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800a9fa:	2506      	movs	r5, #6
  USARTx_TX_GPIO_CLK_ENABLE();
 800a9fc:	4311      	orrs	r1, r2
 800a9fe:	62d9      	str	r1, [r3, #44]	; 0x2c
 800aa00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800aa02:	05e4      	lsls	r4, r4, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 800aa04:	4011      	ands	r1, r2
 800aa06:	9101      	str	r1, [sp, #4]
 800aa08:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800aa0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800aa0c:	0020      	movs	r0, r4
  USARTx_RX_GPIO_CLK_ENABLE();
 800aa0e:	4311      	orrs	r1, r2
 800aa10:	62d9      	str	r1, [r3, #44]	; 0x2c
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800aa14:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 800aa16:	401a      	ands	r2, r3
 800aa18:	9202      	str	r2, [sp, #8]
 800aa1a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800aa20:	3b02      	subs	r3, #2
 800aa22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800aa24:	3301      	adds	r3, #1
 800aa26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800aa28:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800aa2a:	f003 f947 	bl	800dcbc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800aa2e:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800aa30:	a903      	add	r1, sp, #12
 800aa32:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800aa34:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800aa36:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800aa38:	f003 f940 	bl	800dcbc <HAL_GPIO_Init>
}
 800aa3c:	b009      	add	sp, #36	; 0x24
 800aa3e:	bd30      	pop	{r4, r5, pc}
 800aa40:	40021000 	.word	0x40021000

0800aa44 <HAL_UART_MspInit>:
{
 800aa44:	b570      	push	{r4, r5, r6, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 800aa46:	2501      	movs	r5, #1
 800aa48:	4c28      	ldr	r4, [pc, #160]	; (800aaec <HAL_UART_MspInit+0xa8>)
{
 800aa4a:	b08c      	sub	sp, #48	; 0x30
  USARTx_TX_GPIO_CLK_ENABLE();
 800aa4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef  PeriphClkInit={0};
 800aa4e:	2100      	movs	r1, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 800aa50:	432b      	orrs	r3, r5
 800aa52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
{
 800aa56:	0006      	movs	r6, r0
  USARTx_TX_GPIO_CLK_ENABLE();
 800aa58:	402b      	ands	r3, r5
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800aa5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef  PeriphClkInit={0};
 800aa60:	a803      	add	r0, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 800aa62:	432b      	orrs	r3, r5
 800aa64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa68:	402b      	ands	r3, r5
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	9b01      	ldr	r3, [sp, #4]
  USARTx_CLK_ENABLE();
 800aa6e:	2380      	movs	r3, #128	; 0x80
 800aa70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aa72:	02db      	lsls	r3, r3, #11
 800aa74:	4313      	orrs	r3, r2
 800aa76:	63a3      	str	r3, [r4, #56]	; 0x38
  RCC_PeriphCLKInitTypeDef  PeriphClkInit={0};
 800aa78:	2224      	movs	r2, #36	; 0x24
 800aa7a:	f7f5 fbc1 	bl	8000200 <memset>
  PeriphClkInit.PeriphClockSelection=RCC_PERIPHCLK_LPUART1;
 800aa7e:	2304      	movs	r3, #4
 800aa80:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Lpuart1ClockSelection=RCC_LPUART1CLKSOURCE_HSI;
 800aa82:	2380      	movs	r3, #128	; 0x80
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800aa84:	a803      	add	r0, sp, #12
  PeriphClkInit.Lpuart1ClockSelection=RCC_LPUART1CLKSOURCE_HSI;
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	9307      	str	r3, [sp, #28]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800aa8a:	f002 fefb 	bl	800d884 <HAL_RCCEx_PeriphCLKConfig>
  DMAx_CLK_ENABLE();
 800aa8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa90:	432b      	orrs	r3, r5
 800aa92:	6323      	str	r3, [r4, #48]	; 0x30
 800aa94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa96:	402b      	ands	r3, r5
 800aa98:	9302      	str	r3, [sp, #8]
 800aa9a:	9b02      	ldr	r3, [sp, #8]
  vcom_IoInit();
 800aa9c:	f7ff ffa2 	bl	800a9e4 <vcom_IoInit>
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800aaa0:	4c13      	ldr	r4, [pc, #76]	; (800aaf0 <HAL_UART_MspInit+0xac>)
 800aaa2:	4b14      	ldr	r3, [pc, #80]	; (800aaf4 <HAL_UART_MspInit+0xb0>)
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800aaa4:	2280      	movs	r2, #128	; 0x80
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800aaa6:	6023      	str	r3, [r4, #0]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800aaac:	2300      	movs	r3, #0
  HAL_DMA_Init(&hdma_tx);
 800aaae:	0020      	movs	r0, r4
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800aab0:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aab2:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800aab4:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 800aab6:	61e3      	str	r3, [r4, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800aab8:	6223      	str	r3, [r4, #32]
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800aaba:	3305      	adds	r3, #5
 800aabc:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800aabe:	6122      	str	r2, [r4, #16]
  HAL_DMA_Init(&hdma_tx);
 800aac0:	f003 f9ca 	bl	800de58 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800aac4:	002a      	movs	r2, r5
 800aac6:	0029      	movs	r1, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800aac8:	6634      	str	r4, [r6, #96]	; 0x60
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800aaca:	200b      	movs	r0, #11
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800aacc:	62a6      	str	r6, [r4, #40]	; 0x28
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800aace:	f003 f8bb 	bl	800dc48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800aad2:	200b      	movs	r0, #11
 800aad4:	f003 f8e8 	bl	800dca8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800aad8:	002a      	movs	r2, r5
 800aada:	0029      	movs	r1, r5
 800aadc:	201d      	movs	r0, #29
 800aade:	f003 f8b3 	bl	800dc48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800aae2:	201d      	movs	r0, #29
 800aae4:	f003 f8e0 	bl	800dca8 <HAL_NVIC_EnableIRQ>
}
 800aae8:	b00c      	add	sp, #48	; 0x30
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	40021000 	.word	0x40021000
 800aaf0:	20000fc0 	.word	0x20000fc0
 800aaf4:	40020080 	.word	0x40020080

0800aaf8 <McpsConfirm>:
            }
            default:
                break;
        }
    }
}
 800aaf8:	4770      	bx	lr

0800aafa <LORA_BeaconReq>:
  }
}
#endif

static LoraErrorStatus LORA_BeaconReq( void)
{
 800aafa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800aafc:	230b      	movs	r3, #11
 800aafe:	466a      	mov	r2, sp

  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ab00:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800ab02:	7013      	strb	r3, [r2, #0]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ab04:	f006 fcfa 	bl	80114fc <LoRaMacMlmeRequest>
 800ab08:	1e43      	subs	r3, r0, #1
 800ab0a:	4198      	sbcs	r0, r3
 800ab0c:	4240      	negs	r0, r0
  }
  else
  {
    return LORA_ERROR;
  }
}
 800ab0e:	b005      	add	sp, #20
 800ab10:	bd00      	pop	{pc}

0800ab12 <LORA_PingSlotReq>:

static LoraErrorStatus LORA_PingSlotReq( void)
{
 800ab12:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_LINK_CHECK;
 800ab14:	2303      	movs	r3, #3
 800ab16:	466a      	mov	r2, sp
  LoRaMacMlmeRequest( &mlmeReq );
 800ab18:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_LINK_CHECK;
 800ab1a:	7013      	strb	r3, [r2, #0]
  LoRaMacMlmeRequest( &mlmeReq );
 800ab1c:	f006 fcee 	bl	80114fc <LoRaMacMlmeRequest>

  mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ab20:	466a      	mov	r2, sp
 800ab22:	230c      	movs	r3, #12
 800ab24:	7013      	strb	r3, [r2, #0]
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = LORAWAN_DEFAULT_PING_SLOT_PERIODICITY;
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 800ab26:	2300      	movs	r3, #0

  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ab28:	4668      	mov	r0, sp
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 800ab2a:	7113      	strb	r3, [r2, #4]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ab2c:	f006 fce6 	bl	80114fc <LoRaMacMlmeRequest>
 800ab30:	1e43      	subs	r3, r0, #1
 800ab32:	4198      	sbcs	r0, r3
 800ab34:	4240      	negs	r0, r0
  }
  else
  {
     return LORA_ERROR;
  }
}
 800ab36:	b005      	add	sp, #20
 800ab38:	bd00      	pop	{pc}
	...

0800ab3c <MlmeIndication>:
{
 800ab3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    switch( MlmeIndication->MlmeIndication )
 800ab3e:	7803      	ldrb	r3, [r0, #0]
 800ab40:	2b06      	cmp	r3, #6
 800ab42:	d003      	beq.n	800ab4c <MlmeIndication+0x10>
 800ab44:	2b0e      	cmp	r3, #14
 800ab46:	d006      	beq.n	800ab56 <MlmeIndication+0x1a>
}
 800ab48:	b007      	add	sp, #28
 800ab4a:	bd00      	pop	{pc}
            LoRaMainCallbacks->LORA_TxNeeded( );
 800ab4c:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <MlmeIndication+0x30>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	4798      	blx	r3
 800ab54:	e7f8      	b.n	800ab48 <MlmeIndication+0xc>
            mibReq.Type = MIB_DEVICE_CLASS;
 800ab56:	2300      	movs	r3, #0
 800ab58:	466a      	mov	r2, sp
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ab5a:	4668      	mov	r0, sp
            mibReq.Type = MIB_DEVICE_CLASS;
 800ab5c:	7013      	strb	r3, [r2, #0]
            mibReq.Param.Class = CLASS_A;
 800ab5e:	7113      	strb	r3, [r2, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ab60:	f006 fa8a 	bl	8011078 <LoRaMacMibSetRequestConfirm>
            LORA_BeaconReq();
 800ab64:	f7ff ffc9 	bl	800aafa <LORA_BeaconReq>
}
 800ab68:	e7ee      	b.n	800ab48 <MlmeIndication+0xc>
 800ab6a:	46c0      	nop			; (mov r8, r8)
 800ab6c:	2000102c 	.word	0x2000102c

0800ab70 <McpsIndication>:
{
 800ab70:	b513      	push	{r0, r1, r4, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ab72:	7843      	ldrb	r3, [r0, #1]
{
 800ab74:	0004      	movs	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d116      	bne.n	800aba8 <McpsIndication+0x38>
    if( mcpsIndication->FramePending == true )
 800ab7a:	7943      	ldrb	r3, [r0, #5]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d103      	bne.n	800ab88 <McpsIndication+0x18>
        LoRaMainCallbacks->LORA_TxNeeded( );
 800ab80:	4b14      	ldr	r3, [pc, #80]	; (800abd4 <McpsIndication+0x64>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	4798      	blx	r3
    if (certif_running() == true )
 800ab88:	f003 ffa6 	bl	800ead8 <certif_running>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d001      	beq.n	800ab94 <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 800ab90:	f003 ffa8 	bl	800eae4 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 800ab94:	7b63      	ldrb	r3, [r4, #13]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d006      	beq.n	800aba8 <McpsIndication+0x38>
      switch( mcpsIndication->Port )
 800ab9a:	78e3      	ldrb	r3, [r4, #3]
 800ab9c:	2be0      	cmp	r3, #224	; 0xe0
 800ab9e:	d104      	bne.n	800abaa <McpsIndication+0x3a>
          certif_rx( mcpsIndication, &JoinParameters );
 800aba0:	490d      	ldr	r1, [pc, #52]	; (800abd8 <McpsIndication+0x68>)
 800aba2:	0020      	movs	r0, r4
 800aba4:	f003 ffb6 	bl	800eb14 <certif_rx>
}
 800aba8:	bd13      	pop	{r0, r1, r4, pc}
          AppData.Port = mcpsIndication->Port;
 800abaa:	466a      	mov	r2, sp
 800abac:	7153      	strb	r3, [r2, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 800abae:	7b23      	ldrb	r3, [r4, #12]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800abb0:	4668      	mov	r0, sp
          AppData.BuffSize = mcpsIndication->BufferSize;
 800abb2:	7113      	strb	r3, [r2, #4]
          AppData.Buff = mcpsIndication->Buffer;
 800abb4:	68a3      	ldr	r3, [r4, #8]
          lora_config.Rssi = mcpsIndication->Rssi;
 800abb6:	89e1      	ldrh	r1, [r4, #14]
          AppData.Buff = mcpsIndication->Buffer;
 800abb8:	9300      	str	r3, [sp, #0]
          lora_config.Rssi = mcpsIndication->Rssi;
 800abba:	4b08      	ldr	r3, [pc, #32]	; (800abdc <McpsIndication+0x6c>)
 800abbc:	001a      	movs	r2, r3
 800abbe:	3272      	adds	r2, #114	; 0x72
 800abc0:	8011      	strh	r1, [r2, #0]
          lora_config.Snr  = mcpsIndication->Snr;
 800abc2:	7c22      	ldrb	r2, [r4, #16]
 800abc4:	3374      	adds	r3, #116	; 0x74
 800abc6:	701a      	strb	r2, [r3, #0]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <McpsIndication+0x64>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	4798      	blx	r3
 800abd0:	e7ea      	b.n	800aba8 <McpsIndication+0x38>
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	2000102c 	.word	0x2000102c
 800abd8:	20001004 	.word	0x20001004
 800abdc:	200009f8 	.word	0x200009f8

0800abe0 <update_flag>:
void update_flag() {
 800abe0:	b510      	push	{r4, lr}
  flag = readEEPROMByte(FLAG_DIFF);
 800abe2:	2036      	movs	r0, #54	; 0x36
 800abe4:	f001 f922 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800abe8:	4c04      	ldr	r4, [pc, #16]	; (800abfc <update_flag+0x1c>)
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	4298      	cmp	r0, r3
 800abee:	d103      	bne.n	800abf8 <update_flag+0x18>
      FLAG_CODE = readEEPROMByte(FLAG_ADDRESS);
 800abf0:	2035      	movs	r0, #53	; 0x35
 800abf2:	f001 f91b 	bl	800be2c <readEEPROMByte>
 800abf6:	6020      	str	r0, [r4, #0]
}
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	200009f4 	.word	0x200009f4

0800ac00 <LORA_Join>:
{
 800ac00:	b530      	push	{r4, r5, lr}
  if (lora_config.otaa == LORA_ENABLE)
 800ac02:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <LORA_Join+0x40>)
{
 800ac04:	b085      	sub	sp, #20
  if (lora_config.otaa == LORA_ENABLE)
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	2a01      	cmp	r2, #1
 800ac0a:	d115      	bne.n	800ac38 <LORA_Join+0x38>
    mlmeReq.Type = MLME_JOIN;
 800ac0c:	2400      	movs	r4, #0
 800ac0e:	466a      	mov	r2, sp
 800ac10:	7014      	strb	r4, [r2, #0]
    mlmeReq.Req.Join.DevEui = lora_config.DevEui;
 800ac12:	1c9a      	adds	r2, r3, #2
 800ac14:	9201      	str	r2, [sp, #4]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800ac16:	466a      	mov	r2, sp
    mlmeReq.Req.Join.JoinEui = lora_config.JoinEui;
 800ac18:	330a      	adds	r3, #10
 800ac1a:	9302      	str	r3, [sp, #8]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <LORA_Join+0x44>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	7313      	strb	r3, [r2, #12]
    JoinParameters = mlmeReq.Req.Join;
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <LORA_Join+0x48>)
 800ac26:	ab01      	add	r3, sp, #4
 800ac28:	cb23      	ldmia	r3!, {r0, r1, r5}
 800ac2a:	c223      	stmia	r2!, {r0, r1, r5}
    LoRaMacMlmeRequest( &mlmeReq );
 800ac2c:	4668      	mov	r0, sp
 800ac2e:	f006 fc65 	bl	80114fc <LoRaMacMlmeRequest>
    status = LORA_SUCCESS;
 800ac32:	0020      	movs	r0, r4
}
 800ac34:	b005      	add	sp, #20
 800ac36:	bd30      	pop	{r4, r5, pc}
    status = LORA_ERROR;
 800ac38:	2001      	movs	r0, #1
 800ac3a:	4240      	negs	r0, r0
 800ac3c:	e7fa      	b.n	800ac34 <LORA_Join+0x34>
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	200009f8 	.word	0x200009f8
 800ac44:	20001030 	.word	0x20001030
 800ac48:	20001004 	.word	0x20001004

0800ac4c <MlmeConfirm>:
{
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	0004      	movs	r4, r0
    switch( mlmeConfirm->MlmeRequest )
 800ac50:	7800      	ldrb	r0, [r0, #0]
{
 800ac52:	b086      	sub	sp, #24
    switch( mlmeConfirm->MlmeRequest )
 800ac54:	280c      	cmp	r0, #12
 800ac56:	d815      	bhi.n	800ac84 <MlmeConfirm+0x38>
 800ac58:	f7f5 ff90 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800ac5c:	19141407 	.word	0x19141407
 800ac60:	14141414 	.word	0x14141414
 800ac64:	24141414 	.word	0x24141414
 800ac68:	2d          	.byte	0x2d
 800ac69:	00          	.byte	0x00
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ac6a:	7863      	ldrb	r3, [r4, #1]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10b      	bne.n	800ac88 <MlmeConfirm+0x3c>
              LoRaMainCallbacks->LORA_HasJoined();
 800ac70:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <MlmeConfirm+0x9c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	4798      	blx	r3
  mlmeReq.Type = MLME_BEACON_TIMING;
 800ac78:	230d      	movs	r3, #13
 800ac7a:	466a      	mov	r2, sp
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ac7c:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_BEACON_TIMING;
 800ac7e:	7013      	strb	r3, [r2, #0]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800ac80:	f006 fc3c 	bl	80114fc <LoRaMacMlmeRequest>
}
 800ac84:	b006      	add	sp, #24
 800ac86:	bd10      	pop	{r4, pc}
                LORA_Join();
 800ac88:	f7ff ffba 	bl	800ac00 <LORA_Join>
 800ac8c:	e7fa      	b.n	800ac84 <MlmeConfirm+0x38>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ac8e:	7863      	ldrb	r3, [r4, #1]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f7      	bne.n	800ac84 <MlmeConfirm+0x38>
                if (certif_running() == true )
 800ac94:	f003 ff20 	bl	800ead8 <certif_running>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d0f3      	beq.n	800ac84 <MlmeConfirm+0x38>
                     certif_linkCheck( mlmeConfirm);
 800ac9c:	0020      	movs	r0, r4
 800ac9e:	f003 ff29 	bl	800eaf4 <certif_linkCheck>
 800aca2:	e7ef      	b.n	800ac84 <MlmeConfirm+0x38>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800aca4:	7863      	ldrb	r3, [r4, #1]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <MlmeConfirm+0x64>
                LORA_PingSlotReq( );
 800acaa:	f7ff ff32 	bl	800ab12 <LORA_PingSlotReq>
}
 800acae:	e7e9      	b.n	800ac84 <MlmeConfirm+0x38>
                LORA_BeaconReq( );
 800acb0:	f7ff ff23 	bl	800aafa <LORA_BeaconReq>
 800acb4:	e7e6      	b.n	800ac84 <MlmeConfirm+0x38>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800acb6:	7863      	ldrb	r3, [r4, #1]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f6      	bne.n	800acaa <MlmeConfirm+0x5e>
                mibReq.Type = MIB_DEVICE_CLASS;
 800acbc:	466a      	mov	r2, sp
                mibReq.Param.Class = CLASS_B;
 800acbe:	2401      	movs	r4, #1
                LoRaMacMibSetRequestConfirm( &mibReq );
 800acc0:	4668      	mov	r0, sp
                mibReq.Type = MIB_DEVICE_CLASS;
 800acc2:	7013      	strb	r3, [r2, #0]
                mibReq.Param.Class = CLASS_B;
 800acc4:	7114      	strb	r4, [r2, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800acc6:	f006 f9d7 	bl	8011078 <LoRaMacMibSetRequestConfirm>
                mibReq.Type = MIB_PING_SLOT_DATARATE;
 800acca:	466a      	mov	r2, sp
 800accc:	233d      	movs	r3, #61	; 0x3d
                LoRaMacMibSetRequestConfirm( &mibReq );
 800acce:	4668      	mov	r0, sp
                mibReq.Type = MIB_PING_SLOT_DATARATE;
 800acd0:	7013      	strb	r3, [r2, #0]
                mibReq.Param.PingSlotDatarate = DR_8;
 800acd2:	3b35      	subs	r3, #53	; 0x35
 800acd4:	7113      	strb	r3, [r2, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800acd6:	f006 f9cf 	bl	8011078 <LoRaMacMibSetRequestConfirm>
                LoRaMainCallbacks->LORA_ConfirmClass(CLASS_B);
 800acda:	4b03      	ldr	r3, [pc, #12]	; (800ace8 <MlmeConfirm+0x9c>)
 800acdc:	0020      	movs	r0, r4
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	4798      	blx	r3
 800ace4:	e7ce      	b.n	800ac84 <MlmeConfirm+0x38>
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	2000102c 	.word	0x2000102c

0800acec <LORA_JoinStatus>:
{
 800acec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800acee:	2301      	movs	r3, #1
 800acf0:	466a      	mov	r2, sp
  LoRaMacMibGetRequestConfirm( &mibReq );
 800acf2:	4668      	mov	r0, sp
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800acf4:	7013      	strb	r3, [r2, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800acf6:	f006 f8e9 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800acfa:	466b      	mov	r3, sp
 800acfc:	7918      	ldrb	r0, [r3, #4]
 800acfe:	1e43      	subs	r3, r0, #1
 800ad00:	4198      	sbcs	r0, r3
    return LORA_RESET;
 800ad02:	b2c0      	uxtb	r0, r0
}
 800ad04:	b007      	add	sp, #28
 800ad06:	bd00      	pop	{pc}

0800ad08 <LORA_send>:
{
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	0004      	movs	r4, r0
 800ad0e:	000e      	movs	r6, r1
    if (certif_running() == true)
 800ad10:	f003 fee2 	bl	800ead8 <certif_running>
 800ad14:	0005      	movs	r5, r0
      return LORA_ERROR;
 800ad16:	2001      	movs	r0, #1
    if (certif_running() == true)
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	d112      	bne.n	800ad42 <LORA_send+0x3a>
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ad1c:	7920      	ldrb	r0, [r4, #4]
 800ad1e:	a901      	add	r1, sp, #4
 800ad20:	f006 f872 	bl	8010e08 <LoRaMacQueryTxPossible>
 800ad24:	ab02      	add	r3, sp, #8
 800ad26:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <LORA_send+0x64>)
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d00d      	beq.n	800ad48 <LORA_send+0x40>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ad2c:	701d      	strb	r5, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ad2e:	609d      	str	r5, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ad30:	819d      	strh	r5, [r3, #12]
  lora_config.TxDatarate = TxDataRate;
}

int8_t lora_config_tx_datarate_get(void )
{
  return lora_config.TxDatarate;
 800ad32:	327c      	adds	r2, #124	; 0x7c
            mcpsReq.Req.Confirmed.Datarate = lora_config_tx_datarate_get() ;
 800ad34:	7812      	ldrb	r2, [r2, #0]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800ad36:	0018      	movs	r0, r3
            mcpsReq.Req.Confirmed.Datarate = lora_config_tx_datarate_get() ;
 800ad38:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800ad3a:	f006 fd13 	bl	8011764 <LoRaMacMcpsRequest>
 800ad3e:	1e43      	subs	r3, r0, #1
 800ad40:	4198      	sbcs	r0, r3
      return LORA_ERROR;
 800ad42:	4240      	negs	r0, r0
}
 800ad44:	b006      	add	sp, #24
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	7920      	ldrb	r0, [r4, #4]
 800ad4a:	7965      	ldrb	r5, [r4, #5]
 800ad4c:	6821      	ldr	r1, [r4, #0]
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d104      	bne.n	800ad5c <LORA_send+0x54>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800ad52:	701e      	strb	r6, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 800ad54:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 800ad56:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 800ad58:	6099      	str	r1, [r3, #8]
 800ad5a:	e7ea      	b.n	800ad32 <LORA_send+0x2a>
            mcpsReq.Type = MCPS_CONFIRMED;
 800ad5c:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 800ad5e:	6099      	str	r1, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800ad60:	2108      	movs	r1, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 800ad62:	701c      	strb	r4, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 800ad64:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 800ad66:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800ad68:	73d9      	strb	r1, [r3, #15]
 800ad6a:	e7e2      	b.n	800ad32 <LORA_send+0x2a>
 800ad6c:	200009f8 	.word	0x200009f8

0800ad70 <OnCertifTimer>:

/* Dummy data sent periodically to let the tester respond with start test command*/
static TimerEvent_t TxcertifTimer;

void OnCertifTimer( void)
{
 800ad70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t Dummy[1]= {1};
 800ad72:	2301      	movs	r3, #1
 800ad74:	aa01      	add	r2, sp, #4
  lora_AppData_t AppData;
  AppData.Buff=Dummy;
 800ad76:	a802      	add	r0, sp, #8
  uint8_t Dummy[1]= {1};
 800ad78:	7013      	strb	r3, [r2, #0]
  AppData.BuffSize=sizeof(Dummy);
 800ad7a:	7103      	strb	r3, [r0, #4]
  AppData.Port = 224;

  LORA_send( &AppData, LORAWAN_UNCONFIRMED_MSG);
 800ad7c:	2100      	movs	r1, #0
  AppData.Port = 224;
 800ad7e:	33df      	adds	r3, #223	; 0xdf
  AppData.Buff=Dummy;
 800ad80:	9202      	str	r2, [sp, #8]
  AppData.Port = 224;
 800ad82:	7143      	strb	r3, [r0, #5]
  LORA_send( &AppData, LORAWAN_UNCONFIRMED_MSG);
 800ad84:	f7ff ffc0 	bl	800ad08 <LORA_send>
}
 800ad88:	b005      	add	sp, #20
 800ad8a:	bd00      	pop	{pc}

0800ad8c <LORA_RequestClass>:
{
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	b086      	sub	sp, #24
  mibReq.Type = MIB_DEVICE_CLASS;
 800ad90:	466b      	mov	r3, sp
 800ad92:	2600      	movs	r6, #0
{
 800ad94:	0005      	movs	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 800ad96:	4668      	mov	r0, sp
  mibReq.Type = MIB_DEVICE_CLASS;
 800ad98:	701e      	strb	r6, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800ad9a:	f006 f897 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 800ad9e:	466b      	mov	r3, sp
 800ada0:	791b      	ldrb	r3, [r3, #4]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800ada2:	0034      	movs	r4, r6
  if (currentClass != newClass)
 800ada4:	42ab      	cmp	r3, r5
 800ada6:	d010      	beq.n	800adca <LORA_RequestClass+0x3e>
    switch (newClass)
 800ada8:	2d01      	cmp	r5, #1
 800adaa:	d016      	beq.n	800adda <LORA_RequestClass+0x4e>
 800adac:	42b5      	cmp	r5, r6
 800adae:	d003      	beq.n	800adb8 <LORA_RequestClass+0x2c>
 800adb0:	2d02      	cmp	r5, #2
 800adb2:	d01e      	beq.n	800adf2 <LORA_RequestClass+0x66>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800adb4:	0034      	movs	r4, r6
 800adb6:	e008      	b.n	800adca <LORA_RequestClass+0x3e>
        mibReq.Param.Class = CLASS_A;
 800adb8:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800adba:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_A;
 800adbc:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800adbe:	f006 f95b 	bl	8011078 <LoRaMacMibSetRequestConfirm>
 800adc2:	1e04      	subs	r4, r0, #0
 800adc4:	d004      	beq.n	800add0 <LORA_RequestClass+0x44>
          Errorstatus = LORA_ERROR;
 800adc6:	2401      	movs	r4, #1
 800adc8:	4264      	negs	r4, r4
}
 800adca:	0020      	movs	r0, r4
 800adcc:	b006      	add	sp, #24
 800adce:	bd70      	pop	{r4, r5, r6, pc}
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 800add0:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <LORA_RequestClass+0x7c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800add6:	4798      	blx	r3
 800add8:	e7f7      	b.n	800adca <LORA_RequestClass+0x3e>
        mibReq.Param.Class = CLASS_B;
 800adda:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800addc:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_B;
 800adde:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ade0:	f006 f94a 	bl	8011078 <LoRaMacMibSetRequestConfirm>
 800ade4:	1e04      	subs	r4, r0, #0
 800ade6:	d1ee      	bne.n	800adc6 <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800ade8:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <LORA_RequestClass+0x7c>)
 800adea:	0028      	movs	r0, r5
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	e7f1      	b.n	800add6 <LORA_RequestClass+0x4a>
        if (currentClass != CLASS_A)
 800adf2:	1e5c      	subs	r4, r3, #1
 800adf4:	41a3      	sbcs	r3, r4
 800adf6:	425c      	negs	r4, r3
        mibReq.Param.Class = CLASS_C;
 800adf8:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800adfa:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_C;
 800adfc:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800adfe:	f006 f93b 	bl	8011078 <LoRaMacMibSetRequestConfirm>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0f0      	beq.n	800ade8 <LORA_RequestClass+0x5c>
 800ae06:	e7de      	b.n	800adc6 <LORA_RequestClass+0x3a>
 800ae08:	2000102c 	.word	0x2000102c

0800ae0c <lora_set_sub_band>:
void lora_set_sub_band(char subBand) {
 800ae0c:	b530      	push	{r4, r5, lr}
 800ae0e:	0004      	movs	r4, r0
 800ae10:	b08b      	sub	sp, #44	; 0x2c
  uint16_t gatewayChannelsMask[5] = {0};
 800ae12:	ad01      	add	r5, sp, #4
 800ae14:	220a      	movs	r2, #10
 800ae16:	2100      	movs	r1, #0
 800ae18:	0028      	movs	r0, r5
 800ae1a:	f7f5 f9f1 	bl	8000200 <memset>
  switch (subBand) {
 800ae1e:	0020      	movs	r0, r4
 800ae20:	3830      	subs	r0, #48	; 0x30
 800ae22:	ac04      	add	r4, sp, #16
 800ae24:	2808      	cmp	r0, #8
 800ae26:	d811      	bhi.n	800ae4c <lora_set_sub_band+0x40>
 800ae28:	4916      	ldr	r1, [pc, #88]	; (800ae84 <lora_set_sub_band+0x78>)
 800ae2a:	f7f5 fea7 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800ae2e:	0506      	.short	0x0506
 800ae30:	23211f1d 	.word	0x23211f1d
 800ae34:	2725      	.short	0x2725
 800ae36:	29          	.byte	0x29
 800ae37:	00          	.byte	0x00
            uint16_t mask[5] = { 0x00FF, 0x0000, 0x0000, 0x0000, 0x0001 };
 800ae38:	310a      	adds	r1, #10
            uint16_t mask[5] = { 0x0000, 0x0000, 0x0000, 0xFF00, 0x0800 };
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	0020      	movs	r0, r4
 800ae3e:	f7f8 fd95 	bl	800396c <memcpy>
            memcpy(gatewayChannelsMask, mask, sizeof(mask)+1);
 800ae42:	220b      	movs	r2, #11
 800ae44:	0021      	movs	r1, r4
 800ae46:	0028      	movs	r0, r5
 800ae48:	f7f8 fd90 	bl	800396c <memcpy>
  mib.Type = MIB_CHANNELS_DEFAULT_MASK;
 800ae4c:	2320      	movs	r3, #32
  LoRaMacMibSetRequestConfirm( &mib );
 800ae4e:	0020      	movs	r0, r4
  mib.Type = MIB_CHANNELS_DEFAULT_MASK;
 800ae50:	7023      	strb	r3, [r4, #0]
  mib.Param.ChannelsDefaultMask = gatewayChannelsMask;
 800ae52:	6065      	str	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mib );
 800ae54:	f006 f910 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mib.Type = MIB_CHANNELS_MASK;
 800ae58:	231f      	movs	r3, #31
  LoRaMacMibSetRequestConfirm( &mib );
 800ae5a:	0020      	movs	r0, r4
  mib.Type = MIB_CHANNELS_MASK;
 800ae5c:	7023      	strb	r3, [r4, #0]
  mib.Param.ChannelsMask = gatewayChannelsMask;
 800ae5e:	6065      	str	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mib );
 800ae60:	f006 f90a 	bl	8011078 <LoRaMacMibSetRequestConfirm>
}
 800ae64:	b00b      	add	sp, #44	; 0x2c
 800ae66:	bd30      	pop	{r4, r5, pc}
            uint16_t mask[5] = { 0xFF00, 0x0000, 0x0000, 0x0000, 0x0002 };
 800ae68:	3114      	adds	r1, #20
 800ae6a:	e7e6      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0x00FF, 0x0000, 0x0000, 0x0004 };
 800ae6c:	311e      	adds	r1, #30
 800ae6e:	e7e4      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0xFF00, 0x0000, 0x0000, 0x0008 };
 800ae70:	3128      	adds	r1, #40	; 0x28
 800ae72:	e7e2      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0x0000, 0x00FF, 0x0000, 0x0100 };
 800ae74:	3132      	adds	r1, #50	; 0x32
 800ae76:	e7e0      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0x0000, 0xFF00, 0x0000, 0x0200 };
 800ae78:	313c      	adds	r1, #60	; 0x3c
 800ae7a:	e7de      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0x0000, 0x0000, 0x00FF, 0x0400 };
 800ae7c:	3146      	adds	r1, #70	; 0x46
 800ae7e:	e7dc      	b.n	800ae3a <lora_set_sub_band+0x2e>
            uint16_t mask[5] = { 0x0000, 0x0000, 0x0000, 0xFF00, 0x0800 };
 800ae80:	3150      	adds	r1, #80	; 0x50
 800ae82:	e7da      	b.n	800ae3a <lora_set_sub_band+0x2e>
 800ae84:	08016a7c 	.word	0x08016a7c

0800ae88 <lora_config_otaa_set>:
{
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
  lora_config.otaa = otaa;
 800ae8a:	4c98      	ldr	r4, [pc, #608]	; (800b0ec <lora_config_otaa_set+0x264>)
{
 800ae8c:	b08f      	sub	sp, #60	; 0x3c
  lora_config.otaa = otaa;
 800ae8e:	7020      	strb	r0, [r4, #0]
  if (lora_config.otaa == LORA_ENABLE)
 800ae90:	2801      	cmp	r0, #1
 800ae92:	d155      	bne.n	800af40 <lora_config_otaa_set+0xb8>
    PPRINTF("OTAA Mode enabled\n\r");
 800ae94:	4896      	ldr	r0, [pc, #600]	; (800b0f0 <lora_config_otaa_set+0x268>)
 800ae96:	f009 fbe1 	bl	801465c <TraceSend>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1fa      	bne.n	800ae94 <lora_config_otaa_set+0xc>
    PPRINTF("DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(lora_config.DevEui));
 800ae9e:	7a60      	ldrb	r0, [r4, #9]
 800aea0:	7923      	ldrb	r3, [r4, #4]
 800aea2:	78e2      	ldrb	r2, [r4, #3]
 800aea4:	78a1      	ldrb	r1, [r4, #2]
 800aea6:	9004      	str	r0, [sp, #16]
 800aea8:	7a20      	ldrb	r0, [r4, #8]
 800aeaa:	9003      	str	r0, [sp, #12]
 800aeac:	79e0      	ldrb	r0, [r4, #7]
 800aeae:	9002      	str	r0, [sp, #8]
 800aeb0:	79a0      	ldrb	r0, [r4, #6]
 800aeb2:	9001      	str	r0, [sp, #4]
 800aeb4:	7960      	ldrb	r0, [r4, #5]
 800aeb6:	9000      	str	r0, [sp, #0]
 800aeb8:	488e      	ldr	r0, [pc, #568]	; (800b0f4 <lora_config_otaa_set+0x26c>)
 800aeba:	f009 fbcf 	bl	801465c <TraceSend>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d1ed      	bne.n	800ae9e <lora_config_otaa_set+0x16>
    PPRINTF("JoinEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(lora_config.JoinEui));
 800aec2:	7c60      	ldrb	r0, [r4, #17]
 800aec4:	7b23      	ldrb	r3, [r4, #12]
 800aec6:	7ae2      	ldrb	r2, [r4, #11]
 800aec8:	7aa1      	ldrb	r1, [r4, #10]
 800aeca:	9004      	str	r0, [sp, #16]
 800aecc:	7c20      	ldrb	r0, [r4, #16]
 800aece:	9003      	str	r0, [sp, #12]
 800aed0:	7be0      	ldrb	r0, [r4, #15]
 800aed2:	9002      	str	r0, [sp, #8]
 800aed4:	7ba0      	ldrb	r0, [r4, #14]
 800aed6:	9001      	str	r0, [sp, #4]
 800aed8:	7b60      	ldrb	r0, [r4, #13]
 800aeda:	9000      	str	r0, [sp, #0]
 800aedc:	4886      	ldr	r0, [pc, #536]	; (800b0f8 <lora_config_otaa_set+0x270>)
 800aede:	f009 fbbd 	bl	801465c <TraceSend>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1ed      	bne.n	800aec2 <lora_config_otaa_set+0x3a>
    PPRINTF("AppKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(lora_config.AppKey));
 800aee6:	1ca0      	adds	r0, r4, #2
 800aee8:	7fc0      	ldrb	r0, [r0, #31]
 800aeea:	7d23      	ldrb	r3, [r4, #20]
 800aeec:	7ce2      	ldrb	r2, [r4, #19]
 800aeee:	7ca1      	ldrb	r1, [r4, #18]
 800aef0:	900c      	str	r0, [sp, #48]	; 0x30
 800aef2:	1c60      	adds	r0, r4, #1
 800aef4:	7fc0      	ldrb	r0, [r0, #31]
 800aef6:	900b      	str	r0, [sp, #44]	; 0x2c
 800aef8:	7fe0      	ldrb	r0, [r4, #31]
 800aefa:	900a      	str	r0, [sp, #40]	; 0x28
 800aefc:	7fa0      	ldrb	r0, [r4, #30]
 800aefe:	9009      	str	r0, [sp, #36]	; 0x24
 800af00:	7f60      	ldrb	r0, [r4, #29]
 800af02:	9008      	str	r0, [sp, #32]
 800af04:	7f20      	ldrb	r0, [r4, #28]
 800af06:	9007      	str	r0, [sp, #28]
 800af08:	7ee0      	ldrb	r0, [r4, #27]
 800af0a:	9006      	str	r0, [sp, #24]
 800af0c:	7ea0      	ldrb	r0, [r4, #26]
 800af0e:	9005      	str	r0, [sp, #20]
 800af10:	7e60      	ldrb	r0, [r4, #25]
 800af12:	9004      	str	r0, [sp, #16]
 800af14:	7e20      	ldrb	r0, [r4, #24]
 800af16:	9003      	str	r0, [sp, #12]
 800af18:	7de0      	ldrb	r0, [r4, #23]
 800af1a:	9002      	str	r0, [sp, #8]
 800af1c:	7da0      	ldrb	r0, [r4, #22]
 800af1e:	9001      	str	r0, [sp, #4]
 800af20:	7d60      	ldrb	r0, [r4, #21]
 800af22:	9000      	str	r0, [sp, #0]
 800af24:	4875      	ldr	r0, [pc, #468]	; (800b0fc <lora_config_otaa_set+0x274>)
 800af26:	f009 fb99 	bl	801465c <TraceSend>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1db      	bne.n	800aee6 <lora_config_otaa_set+0x5e>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800af2e:	4b74      	ldr	r3, [pc, #464]	; (800b100 <lora_config_otaa_set+0x278>)
 800af30:	2201      	movs	r2, #1
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_NONE;
 800af32:	7118      	strb	r0, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800af34:	0018      	movs	r0, r3
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800af36:	701a      	strb	r2, [r3, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800af38:	f006 f89e 	bl	8011078 <LoRaMacMibSetRequestConfirm>
}
 800af3c:	b00f      	add	sp, #60	; 0x3c
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PPRINTF("ABP Mode enabled\n\r");
 800af40:	4870      	ldr	r0, [pc, #448]	; (800b104 <lora_config_otaa_set+0x27c>)
 800af42:	f009 fb8b 	bl	801465c <TraceSend>
 800af46:	2800      	cmp	r0, #0
 800af48:	d1fa      	bne.n	800af40 <lora_config_otaa_set+0xb8>
    PPRINTF("DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(lora_config.DevEui));
 800af4a:	7a60      	ldrb	r0, [r4, #9]
 800af4c:	7923      	ldrb	r3, [r4, #4]
 800af4e:	78e2      	ldrb	r2, [r4, #3]
 800af50:	78a1      	ldrb	r1, [r4, #2]
 800af52:	9004      	str	r0, [sp, #16]
 800af54:	7a20      	ldrb	r0, [r4, #8]
 800af56:	9003      	str	r0, [sp, #12]
 800af58:	79e0      	ldrb	r0, [r4, #7]
 800af5a:	9002      	str	r0, [sp, #8]
 800af5c:	79a0      	ldrb	r0, [r4, #6]
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	7960      	ldrb	r0, [r4, #5]
 800af62:	9000      	str	r0, [sp, #0]
 800af64:	4863      	ldr	r0, [pc, #396]	; (800b0f4 <lora_config_otaa_set+0x26c>)
 800af66:	f009 fb79 	bl	801465c <TraceSend>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d1ed      	bne.n	800af4a <lora_config_otaa_set+0xc2>
    PPRINTF("DevAdd=  %08X\n\r", DevAddr) ;
 800af6e:	4f66      	ldr	r7, [pc, #408]	; (800b108 <lora_config_otaa_set+0x280>)
 800af70:	4866      	ldr	r0, [pc, #408]	; (800b10c <lora_config_otaa_set+0x284>)
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	f009 fb72 	bl	801465c <TraceSend>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1f8      	bne.n	800af6e <lora_config_otaa_set+0xe6>
    PPRINTF("NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(lora_config.NwkSEncKey));
 800af7c:	0020      	movs	r0, r4
 800af7e:	0023      	movs	r3, r4
 800af80:	0022      	movs	r2, r4
 800af82:	0021      	movs	r1, r4
 800af84:	3041      	adds	r0, #65	; 0x41
 800af86:	7800      	ldrb	r0, [r0, #0]
 800af88:	3334      	adds	r3, #52	; 0x34
 800af8a:	3233      	adds	r2, #51	; 0x33
 800af8c:	3132      	adds	r1, #50	; 0x32
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	7812      	ldrb	r2, [r2, #0]
 800af92:	7809      	ldrb	r1, [r1, #0]
 800af94:	900c      	str	r0, [sp, #48]	; 0x30
 800af96:	0020      	movs	r0, r4
 800af98:	3040      	adds	r0, #64	; 0x40
 800af9a:	7800      	ldrb	r0, [r0, #0]
 800af9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800af9e:	0020      	movs	r0, r4
 800afa0:	303f      	adds	r0, #63	; 0x3f
 800afa2:	7800      	ldrb	r0, [r0, #0]
 800afa4:	900a      	str	r0, [sp, #40]	; 0x28
 800afa6:	0020      	movs	r0, r4
 800afa8:	303e      	adds	r0, #62	; 0x3e
 800afaa:	7800      	ldrb	r0, [r0, #0]
 800afac:	9009      	str	r0, [sp, #36]	; 0x24
 800afae:	0020      	movs	r0, r4
 800afb0:	303d      	adds	r0, #61	; 0x3d
 800afb2:	7800      	ldrb	r0, [r0, #0]
 800afb4:	9008      	str	r0, [sp, #32]
 800afb6:	0020      	movs	r0, r4
 800afb8:	303c      	adds	r0, #60	; 0x3c
 800afba:	7800      	ldrb	r0, [r0, #0]
 800afbc:	9007      	str	r0, [sp, #28]
 800afbe:	0020      	movs	r0, r4
 800afc0:	303b      	adds	r0, #59	; 0x3b
 800afc2:	7800      	ldrb	r0, [r0, #0]
 800afc4:	9006      	str	r0, [sp, #24]
 800afc6:	0020      	movs	r0, r4
 800afc8:	303a      	adds	r0, #58	; 0x3a
 800afca:	7800      	ldrb	r0, [r0, #0]
 800afcc:	9005      	str	r0, [sp, #20]
 800afce:	0020      	movs	r0, r4
 800afd0:	3039      	adds	r0, #57	; 0x39
 800afd2:	7800      	ldrb	r0, [r0, #0]
 800afd4:	9004      	str	r0, [sp, #16]
 800afd6:	0020      	movs	r0, r4
 800afd8:	3038      	adds	r0, #56	; 0x38
 800afda:	7800      	ldrb	r0, [r0, #0]
 800afdc:	9003      	str	r0, [sp, #12]
 800afde:	0020      	movs	r0, r4
 800afe0:	3037      	adds	r0, #55	; 0x37
 800afe2:	7800      	ldrb	r0, [r0, #0]
 800afe4:	9002      	str	r0, [sp, #8]
 800afe6:	0020      	movs	r0, r4
 800afe8:	3036      	adds	r0, #54	; 0x36
 800afea:	7800      	ldrb	r0, [r0, #0]
 800afec:	9001      	str	r0, [sp, #4]
 800afee:	0020      	movs	r0, r4
 800aff0:	3035      	adds	r0, #53	; 0x35
 800aff2:	7800      	ldrb	r0, [r0, #0]
 800aff4:	9000      	str	r0, [sp, #0]
 800aff6:	4846      	ldr	r0, [pc, #280]	; (800b110 <lora_config_otaa_set+0x288>)
 800aff8:	f009 fb30 	bl	801465c <TraceSend>
 800affc:	2800      	cmp	r0, #0
 800affe:	d1bd      	bne.n	800af7c <lora_config_otaa_set+0xf4>
    PPRINTF("AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(lora_config.AppSKey));
 800b000:	0020      	movs	r0, r4
 800b002:	0023      	movs	r3, r4
 800b004:	0022      	movs	r2, r4
 800b006:	3051      	adds	r0, #81	; 0x51
 800b008:	7800      	ldrb	r0, [r0, #0]
 800b00a:	4942      	ldr	r1, [pc, #264]	; (800b114 <lora_config_otaa_set+0x28c>)
 800b00c:	3344      	adds	r3, #68	; 0x44
 800b00e:	3243      	adds	r2, #67	; 0x43
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	7812      	ldrb	r2, [r2, #0]
 800b014:	7809      	ldrb	r1, [r1, #0]
 800b016:	900c      	str	r0, [sp, #48]	; 0x30
 800b018:	0020      	movs	r0, r4
 800b01a:	3050      	adds	r0, #80	; 0x50
 800b01c:	7800      	ldrb	r0, [r0, #0]
 800b01e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b020:	0020      	movs	r0, r4
 800b022:	304f      	adds	r0, #79	; 0x4f
 800b024:	7800      	ldrb	r0, [r0, #0]
 800b026:	900a      	str	r0, [sp, #40]	; 0x28
 800b028:	0020      	movs	r0, r4
 800b02a:	304e      	adds	r0, #78	; 0x4e
 800b02c:	7800      	ldrb	r0, [r0, #0]
 800b02e:	9009      	str	r0, [sp, #36]	; 0x24
 800b030:	0020      	movs	r0, r4
 800b032:	304d      	adds	r0, #77	; 0x4d
 800b034:	7800      	ldrb	r0, [r0, #0]
 800b036:	9008      	str	r0, [sp, #32]
 800b038:	0020      	movs	r0, r4
 800b03a:	304c      	adds	r0, #76	; 0x4c
 800b03c:	7800      	ldrb	r0, [r0, #0]
 800b03e:	9007      	str	r0, [sp, #28]
 800b040:	0020      	movs	r0, r4
 800b042:	304b      	adds	r0, #75	; 0x4b
 800b044:	7800      	ldrb	r0, [r0, #0]
 800b046:	9006      	str	r0, [sp, #24]
 800b048:	0020      	movs	r0, r4
 800b04a:	304a      	adds	r0, #74	; 0x4a
 800b04c:	7800      	ldrb	r0, [r0, #0]
 800b04e:	9005      	str	r0, [sp, #20]
 800b050:	0020      	movs	r0, r4
 800b052:	3049      	adds	r0, #73	; 0x49
 800b054:	7800      	ldrb	r0, [r0, #0]
 800b056:	9004      	str	r0, [sp, #16]
 800b058:	0020      	movs	r0, r4
 800b05a:	3048      	adds	r0, #72	; 0x48
 800b05c:	7800      	ldrb	r0, [r0, #0]
 800b05e:	9003      	str	r0, [sp, #12]
 800b060:	0020      	movs	r0, r4
 800b062:	3047      	adds	r0, #71	; 0x47
 800b064:	7800      	ldrb	r0, [r0, #0]
 800b066:	9002      	str	r0, [sp, #8]
 800b068:	0020      	movs	r0, r4
 800b06a:	3046      	adds	r0, #70	; 0x46
 800b06c:	7800      	ldrb	r0, [r0, #0]
 800b06e:	9001      	str	r0, [sp, #4]
 800b070:	0020      	movs	r0, r4
 800b072:	3045      	adds	r0, #69	; 0x45
 800b074:	7800      	ldrb	r0, [r0, #0]
 800b076:	9000      	str	r0, [sp, #0]
 800b078:	4827      	ldr	r0, [pc, #156]	; (800b118 <lora_config_otaa_set+0x290>)
 800b07a:	f009 faef 	bl	801465c <TraceSend>
 800b07e:	1e06      	subs	r6, r0, #0
 800b080:	d1be      	bne.n	800b000 <lora_config_otaa_set+0x178>
    mibReq.Type = MIB_DEV_ADDR;
 800b082:	2304      	movs	r3, #4
 800b084:	4d1e      	ldr	r5, [pc, #120]	; (800b100 <lora_config_otaa_set+0x278>)
 800b086:	702b      	strb	r3, [r5, #0]
    mibReq.Param.DevAddr = DevAddr;
 800b088:	683b      	ldr	r3, [r7, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b08a:	0028      	movs	r0, r5
    mibReq.Param.DevAddr = DevAddr;
 800b08c:	606b      	str	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b08e:	f005 fff3 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800b092:	2309      	movs	r3, #9
 800b094:	702b      	strb	r3, [r5, #0]
    mibReq.Param.FNwkSIntKey = lora_config.FNwkSIntKey;
 800b096:	0023      	movs	r3, r4
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b098:	0028      	movs	r0, r5
    mibReq.Param.FNwkSIntKey = lora_config.FNwkSIntKey;
 800b09a:	3352      	adds	r3, #82	; 0x52
 800b09c:	606b      	str	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b09e:	f005 ffeb 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 800b0a2:	230a      	movs	r3, #10
 800b0a4:	702b      	strb	r3, [r5, #0]
    mibReq.Param.SNwkSIntKey = lora_config.SNwkSIntKey;
 800b0a6:	0023      	movs	r3, r4
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0a8:	0028      	movs	r0, r5
    mibReq.Param.SNwkSIntKey = lora_config.SNwkSIntKey;
 800b0aa:	3362      	adds	r3, #98	; 0x62
 800b0ac:	606b      	str	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0ae:	f005 ffe3 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800b0b2:	230b      	movs	r3, #11
    mibReq.Param.NwkSEncKey = lora_config.NwkSEncKey;
 800b0b4:	3432      	adds	r4, #50	; 0x32
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0b6:	0028      	movs	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800b0b8:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NwkSEncKey = lora_config.NwkSEncKey;
 800b0ba:	606c      	str	r4, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0bc:	f005 ffdc 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_APP_S_KEY;
 800b0c0:	230c      	movs	r3, #12
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b0c2:	2401      	movs	r4, #1
    mibReq.Type = MIB_APP_S_KEY;
 800b0c4:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AppSKey = lora_config.AppSKey;
 800b0c6:	4b13      	ldr	r3, [pc, #76]	; (800b114 <lora_config_otaa_set+0x28c>)
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0c8:	0028      	movs	r0, r5
    mibReq.Param.AppSKey = lora_config.AppSKey;
 800b0ca:	606b      	str	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0cc:	f005 ffd4 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0d0:	0028      	movs	r0, r5
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b0d2:	702c      	strb	r4, [r5, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b0d4:	712c      	strb	r4, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0d6:	f005 ffcf 	bl	8011078 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b0da:	2330      	movs	r3, #48	; 0x30
 800b0dc:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 800b0de:	3b2d      	subs	r3, #45	; 0x2d
 800b0e0:	712e      	strb	r6, [r5, #4]
 800b0e2:	716b      	strb	r3, [r5, #5]
 800b0e4:	71ae      	strb	r6, [r5, #6]
 800b0e6:	71ec      	strb	r4, [r5, #7]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b0e8:	0028      	movs	r0, r5
 800b0ea:	e725      	b.n	800af38 <lora_config_otaa_set+0xb0>
 800b0ec:	200009f8 	.word	0x200009f8
 800b0f0:	08018303 	.word	0x08018303
 800b0f4:	08018317 	.word	0x08018317
 800b0f8:	08018349 	.word	0x08018349
 800b0fc:	0801837c 	.word	0x0801837c
 800b100:	20001048 	.word	0x20001048
 800b104:	080183d6 	.word	0x080183d6
 800b108:	20001000 	.word	0x20001000
 800b10c:	080183e9 	.word	0x080183e9
 800b110:	080183f9 	.word	0x080183f9
 800b114:	20000a3a 	.word	0x20000a3a
 800b118:	08018454 	.word	0x08018454

0800b11c <lora_config_otaa_get>:
  return lora_config.otaa;
 800b11c:	4b01      	ldr	r3, [pc, #4]	; (800b124 <lora_config_otaa_get+0x8>)
 800b11e:	7818      	ldrb	r0, [r3, #0]
}
 800b120:	4770      	bx	lr
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	200009f8 	.word	0x200009f8

0800b128 <lora_config_duty_cycle_set>:
  lora_config.duty_cycle = duty_cycle;
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <lora_config_duty_cycle_set+0x14>)
{
 800b12a:	b510      	push	{r4, lr}
  lora_config.duty_cycle = duty_cycle;
 800b12c:	7058      	strb	r0, [r3, #1]
  LoRaMacTestSetDutyCycleOn((duty_cycle == LORA_ENABLE) ? 1 : 0);
 800b12e:	3801      	subs	r0, #1
 800b130:	4243      	negs	r3, r0
 800b132:	4158      	adcs	r0, r3
 800b134:	b2c0      	uxtb	r0, r0
 800b136:	f006 fbc9 	bl	80118cc <LoRaMacTestSetDutyCycleOn>
}
 800b13a:	bd10      	pop	{r4, pc}
 800b13c:	200009f8 	.word	0x200009f8

0800b140 <lora_config_duty_cycle_get>:
  return lora_config.duty_cycle;
 800b140:	4b01      	ldr	r3, [pc, #4]	; (800b148 <lora_config_duty_cycle_get+0x8>)
 800b142:	7858      	ldrb	r0, [r3, #1]
}
 800b144:	4770      	bx	lr
 800b146:	46c0      	nop			; (mov r8, r8)
 800b148:	200009f8 	.word	0x200009f8

0800b14c <lora_config_deveui_get>:
  return lora_config.DevEui;
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <lora_config_deveui_get+0x8>)
}
 800b14e:	3002      	adds	r0, #2
 800b150:	4770      	bx	lr
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	200009f8 	.word	0x200009f8

0800b158 <lora_config_deveui_set>:
{
 800b158:	b510      	push	{r4, lr}
 800b15a:	0001      	movs	r1, r0
  memcpy1(lora_config.DevEui, deveui, sizeof(lora_config.DevEui));
 800b15c:	4802      	ldr	r0, [pc, #8]	; (800b168 <lora_config_deveui_set+0x10>)
 800b15e:	2208      	movs	r2, #8
 800b160:	3002      	adds	r0, #2
 800b162:	f008 ffd6 	bl	8014112 <memcpy1>
}
 800b166:	bd10      	pop	{r4, pc}
 800b168:	200009f8 	.word	0x200009f8

0800b16c <lora_config_joineui_get>:
  return lora_config.JoinEui;
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <lora_config_joineui_get+0x8>)
}
 800b16e:	300a      	adds	r0, #10
 800b170:	4770      	bx	lr
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	200009f8 	.word	0x200009f8

0800b178 <lora_config_joineui_set>:
{
 800b178:	b510      	push	{r4, lr}
 800b17a:	0001      	movs	r1, r0
  memcpy1(lora_config.JoinEui, joineui, sizeof(lora_config.JoinEui));
 800b17c:	4802      	ldr	r0, [pc, #8]	; (800b188 <lora_config_joineui_set+0x10>)
 800b17e:	2208      	movs	r2, #8
 800b180:	300a      	adds	r0, #10
 800b182:	f008 ffc6 	bl	8014112 <memcpy1>
}
 800b186:	bd10      	pop	{r4, pc}
 800b188:	200009f8 	.word	0x200009f8

0800b18c <lora_config_appkey_get>:
  return lora_config.AppKey;
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <lora_config_appkey_get+0x8>)
}
 800b18e:	3012      	adds	r0, #18
 800b190:	4770      	bx	lr
 800b192:	46c0      	nop			; (mov r8, r8)
 800b194:	200009f8 	.word	0x200009f8

0800b198 <lora_config_appkey_set>:
{
 800b198:	b510      	push	{r4, lr}
 800b19a:	0001      	movs	r1, r0
  memcpy1(lora_config.AppKey, appkey, sizeof(lora_config.AppKey));
 800b19c:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <lora_config_appkey_set+0x10>)
 800b19e:	2210      	movs	r2, #16
 800b1a0:	3012      	adds	r0, #18
 800b1a2:	f008 ffb6 	bl	8014112 <memcpy1>
}
 800b1a6:	bd10      	pop	{r4, pc}
 800b1a8:	200009f8 	.word	0x200009f8

0800b1ac <get_params_from_memory>:
void get_params_from_memory() {
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  flag = readEEPROMByte(DEV_EUI_FLAG);
 800b1ae:	2006      	movs	r0, #6
void get_params_from_memory() {
 800b1b0:	b085      	sub	sp, #20
  flag = readEEPROMByte(DEV_EUI_FLAG);
 800b1b2:	f000 fe3b 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b1b6:	4cd7      	ldr	r4, [pc, #860]	; (800b514 <get_params_from_memory+0x368>)
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	4298      	cmp	r0, r3
 800b1bc:	d11d      	bne.n	800b1fa <get_params_from_memory+0x4e>
      uint8_t deveui[8] = {0};
 800b1be:	2208      	movs	r2, #8
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4668      	mov	r0, sp
 800b1c4:	f7f5 f81c 	bl	8000200 <memset>
      uint32_t read_from_mem1 = readEEPROMByte(DEV_EUI_0);
 800b1c8:	2004      	movs	r0, #4
 800b1ca:	f000 fe2f 	bl	800be2c <readEEPROMByte>
 800b1ce:	0005      	movs	r5, r0
      uint32_t read_from_mem2 = readEEPROMByte(DEV_EUI_1);
 800b1d0:	2005      	movs	r0, #5
 800b1d2:	f000 fe2b 	bl	800be2c <readEEPROMByte>
      deveui[0] = read_from_mem1 >> 24; deveui[1] = read_from_mem1 >> 16; deveui[2] = read_from_mem1 >> 8; deveui[3] = read_from_mem1;
 800b1d6:	466a      	mov	r2, sp
 800b1d8:	0e2b      	lsrs	r3, r5, #24
 800b1da:	7013      	strb	r3, [r2, #0]
 800b1dc:	0c2b      	lsrs	r3, r5, #16
 800b1de:	7053      	strb	r3, [r2, #1]
 800b1e0:	0a2b      	lsrs	r3, r5, #8
 800b1e2:	7093      	strb	r3, [r2, #2]
      deveui[4] = read_from_mem2 >> 24; deveui[5] = read_from_mem2 >> 16; deveui[6] = read_from_mem2 >> 8; deveui[7] = read_from_mem2;
 800b1e4:	0e03      	lsrs	r3, r0, #24
 800b1e6:	7113      	strb	r3, [r2, #4]
 800b1e8:	0c03      	lsrs	r3, r0, #16
 800b1ea:	7153      	strb	r3, [r2, #5]
 800b1ec:	71d0      	strb	r0, [r2, #7]
 800b1ee:	0a03      	lsrs	r3, r0, #8
      lora_config_deveui_set(deveui);
 800b1f0:	4668      	mov	r0, sp
      deveui[0] = read_from_mem1 >> 24; deveui[1] = read_from_mem1 >> 16; deveui[2] = read_from_mem1 >> 8; deveui[3] = read_from_mem1;
 800b1f2:	70d5      	strb	r5, [r2, #3]
      deveui[4] = read_from_mem2 >> 24; deveui[5] = read_from_mem2 >> 16; deveui[6] = read_from_mem2 >> 8; deveui[7] = read_from_mem2;
 800b1f4:	7193      	strb	r3, [r2, #6]
      lora_config_deveui_set(deveui);
 800b1f6:	f7ff ffaf 	bl	800b158 <lora_config_deveui_set>
  flag = readEEPROMByte(JOIN_EUI_FLAG);
 800b1fa:	2009      	movs	r0, #9
 800b1fc:	f000 fe16 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	4298      	cmp	r0, r3
 800b204:	d11d      	bne.n	800b242 <get_params_from_memory+0x96>
      uint8_t appeui[8] = {0};
 800b206:	2208      	movs	r2, #8
 800b208:	2100      	movs	r1, #0
 800b20a:	4668      	mov	r0, sp
 800b20c:	f7f4 fff8 	bl	8000200 <memset>
      uint32_t read_from_mem1 = readEEPROMByte(JOIN_EUI_0);
 800b210:	2007      	movs	r0, #7
 800b212:	f000 fe0b 	bl	800be2c <readEEPROMByte>
 800b216:	0005      	movs	r5, r0
      uint32_t read_from_mem2 = readEEPROMByte(JOIN_EUI_1);
 800b218:	2008      	movs	r0, #8
 800b21a:	f000 fe07 	bl	800be2c <readEEPROMByte>
      appeui[0] = read_from_mem1 >> 24; appeui[1] = read_from_mem1 >> 16; appeui[2] = read_from_mem1 >> 8; appeui[3] = read_from_mem1;
 800b21e:	466a      	mov	r2, sp
 800b220:	0e2b      	lsrs	r3, r5, #24
 800b222:	7013      	strb	r3, [r2, #0]
 800b224:	0c2b      	lsrs	r3, r5, #16
 800b226:	7053      	strb	r3, [r2, #1]
 800b228:	0a2b      	lsrs	r3, r5, #8
 800b22a:	7093      	strb	r3, [r2, #2]
      appeui[4] = read_from_mem2 >> 24; appeui[5] = read_from_mem2 >> 16; appeui[6] = read_from_mem2 >> 8; appeui[7] = read_from_mem2;
 800b22c:	0e03      	lsrs	r3, r0, #24
 800b22e:	7113      	strb	r3, [r2, #4]
 800b230:	0c03      	lsrs	r3, r0, #16
 800b232:	7153      	strb	r3, [r2, #5]
 800b234:	71d0      	strb	r0, [r2, #7]
 800b236:	0a03      	lsrs	r3, r0, #8
      lora_config_joineui_set(appeui);
 800b238:	4668      	mov	r0, sp
      appeui[0] = read_from_mem1 >> 24; appeui[1] = read_from_mem1 >> 16; appeui[2] = read_from_mem1 >> 8; appeui[3] = read_from_mem1;
 800b23a:	70d5      	strb	r5, [r2, #3]
      appeui[4] = read_from_mem2 >> 24; appeui[5] = read_from_mem2 >> 16; appeui[6] = read_from_mem2 >> 8; appeui[7] = read_from_mem2;
 800b23c:	7193      	strb	r3, [r2, #6]
      lora_config_joineui_set(appeui);
 800b23e:	f7ff ff9b 	bl	800b178 <lora_config_joineui_set>
  flag = readEEPROMByte(DEV_ADR_FLAG);
 800b242:	2003      	movs	r0, #3
 800b244:	f000 fdf2 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	4298      	cmp	r0, r3
 800b24c:	d104      	bne.n	800b258 <get_params_from_memory+0xac>
      DevAddr = readEEPROMByte(DEV_ADR);
 800b24e:	2002      	movs	r0, #2
 800b250:	f000 fdec 	bl	800be2c <readEEPROMByte>
 800b254:	4bb0      	ldr	r3, [pc, #704]	; (800b518 <get_params_from_memory+0x36c>)
 800b256:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(APP_KEY_FLAG);
 800b258:	2013      	movs	r0, #19
 800b25a:	f000 fde7 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	4298      	cmp	r0, r3
 800b262:	d133      	bne.n	800b2cc <get_params_from_memory+0x120>
      uint8_t appkey[16] = {0};
 800b264:	2210      	movs	r2, #16
 800b266:	2100      	movs	r1, #0
 800b268:	4668      	mov	r0, sp
 800b26a:	f7f4 ffc9 	bl	8000200 <memset>
      uint32_t read_from_mem1 = readEEPROMByte(APP_KEY_0);
 800b26e:	200f      	movs	r0, #15
 800b270:	f000 fddc 	bl	800be2c <readEEPROMByte>
 800b274:	0007      	movs	r7, r0
      uint32_t read_from_mem2 = readEEPROMByte(APP_KEY_1);
 800b276:	2010      	movs	r0, #16
 800b278:	f000 fdd8 	bl	800be2c <readEEPROMByte>
 800b27c:	0006      	movs	r6, r0
      uint32_t read_from_mem3 = readEEPROMByte(APP_KEY_2);
 800b27e:	2011      	movs	r0, #17
 800b280:	f000 fdd4 	bl	800be2c <readEEPROMByte>
 800b284:	0005      	movs	r5, r0
      uint32_t read_from_mem4 = readEEPROMByte(APP_KEY_3);
 800b286:	2012      	movs	r0, #18
 800b288:	f000 fdd0 	bl	800be2c <readEEPROMByte>
      appkey[0] = read_from_mem1 >> 24; appkey[1] = read_from_mem1 >> 16; appkey[2] = read_from_mem1 >> 8; appkey[3] = read_from_mem1;
 800b28c:	466a      	mov	r2, sp
 800b28e:	0e3b      	lsrs	r3, r7, #24
 800b290:	7013      	strb	r3, [r2, #0]
 800b292:	0c3b      	lsrs	r3, r7, #16
 800b294:	7053      	strb	r3, [r2, #1]
 800b296:	0a3b      	lsrs	r3, r7, #8
 800b298:	7093      	strb	r3, [r2, #2]
      appkey[4] = read_from_mem2 >> 24; appkey[5] = read_from_mem2 >> 16; appkey[6] = read_from_mem2 >> 8; appkey[7] = read_from_mem2;
 800b29a:	0e33      	lsrs	r3, r6, #24
 800b29c:	7113      	strb	r3, [r2, #4]
 800b29e:	0c33      	lsrs	r3, r6, #16
 800b2a0:	7153      	strb	r3, [r2, #5]
 800b2a2:	0a33      	lsrs	r3, r6, #8
 800b2a4:	7193      	strb	r3, [r2, #6]
      appkey[8] = read_from_mem3 >> 24; appkey[9] = read_from_mem3 >> 16; appkey[10] = read_from_mem3 >> 8; appkey[11] = read_from_mem3;
 800b2a6:	0e2b      	lsrs	r3, r5, #24
 800b2a8:	7213      	strb	r3, [r2, #8]
 800b2aa:	0c2b      	lsrs	r3, r5, #16
 800b2ac:	7253      	strb	r3, [r2, #9]
 800b2ae:	0a2b      	lsrs	r3, r5, #8
 800b2b0:	7293      	strb	r3, [r2, #10]
      appkey[12] = read_from_mem4 >> 24; appkey[13] = read_from_mem4 >> 16; appkey[14] = read_from_mem4 >> 8; appkey[15] = read_from_mem4;
 800b2b2:	0e03      	lsrs	r3, r0, #24
 800b2b4:	7313      	strb	r3, [r2, #12]
 800b2b6:	0c03      	lsrs	r3, r0, #16
 800b2b8:	7353      	strb	r3, [r2, #13]
 800b2ba:	73d0      	strb	r0, [r2, #15]
 800b2bc:	0a03      	lsrs	r3, r0, #8
      lora_config_appkey_set(appkey);
 800b2be:	4668      	mov	r0, sp
      appkey[0] = read_from_mem1 >> 24; appkey[1] = read_from_mem1 >> 16; appkey[2] = read_from_mem1 >> 8; appkey[3] = read_from_mem1;
 800b2c0:	70d7      	strb	r7, [r2, #3]
      appkey[4] = read_from_mem2 >> 24; appkey[5] = read_from_mem2 >> 16; appkey[6] = read_from_mem2 >> 8; appkey[7] = read_from_mem2;
 800b2c2:	71d6      	strb	r6, [r2, #7]
      appkey[8] = read_from_mem3 >> 24; appkey[9] = read_from_mem3 >> 16; appkey[10] = read_from_mem3 >> 8; appkey[11] = read_from_mem3;
 800b2c4:	72d5      	strb	r5, [r2, #11]
      appkey[12] = read_from_mem4 >> 24; appkey[13] = read_from_mem4 >> 16; appkey[14] = read_from_mem4 >> 8; appkey[15] = read_from_mem4;
 800b2c6:	7393      	strb	r3, [r2, #14]
      lora_config_appkey_set(appkey);
 800b2c8:	f7ff ff66 	bl	800b198 <lora_config_appkey_set>
  flag = readEEPROMByte(NWK_SKEY_FLAG);
 800b2cc:	200e      	movs	r0, #14
 800b2ce:	f000 fdad 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	4298      	cmp	r0, r3
 800b2d6:	d143      	bne.n	800b360 <get_params_from_memory+0x1b4>
      uint8_t nwkskey[16] = {0};
 800b2d8:	2210      	movs	r2, #16
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4668      	mov	r0, sp
 800b2de:	f7f4 ff8f 	bl	8000200 <memset>
      uint32_t read_from_mem1 = readEEPROMByte(NWK_SKEY_0);
 800b2e2:	200a      	movs	r0, #10
 800b2e4:	f000 fda2 	bl	800be2c <readEEPROMByte>
 800b2e8:	0007      	movs	r7, r0
      uint32_t read_from_mem2 = readEEPROMByte(NWK_SKEY_1);
 800b2ea:	200b      	movs	r0, #11
 800b2ec:	f000 fd9e 	bl	800be2c <readEEPROMByte>
 800b2f0:	0006      	movs	r6, r0
      uint32_t read_from_mem3 = readEEPROMByte(NWK_SKEY_2);
 800b2f2:	200c      	movs	r0, #12
 800b2f4:	f000 fd9a 	bl	800be2c <readEEPROMByte>
 800b2f8:	0005      	movs	r5, r0
      uint32_t read_from_mem4 = readEEPROMByte(NWK_SKEY_3);
 800b2fa:	200d      	movs	r0, #13
 800b2fc:	f000 fd96 	bl	800be2c <readEEPROMByte>
      nwkskey[0] = read_from_mem1 >> 24; nwkskey[1] = read_from_mem1 >> 16; nwkskey[2] = read_from_mem1 >> 8; nwkskey[3] = read_from_mem1;
 800b300:	466a      	mov	r2, sp
 800b302:	0e3b      	lsrs	r3, r7, #24
 800b304:	7013      	strb	r3, [r2, #0]
 800b306:	0c3b      	lsrs	r3, r7, #16
 800b308:	7053      	strb	r3, [r2, #1]
 800b30a:	0a3b      	lsrs	r3, r7, #8
 800b30c:	7093      	strb	r3, [r2, #2]
      nwkskey[4] = read_from_mem2 >> 24; nwkskey[5] = read_from_mem2 >> 16; nwkskey[6] = read_from_mem2 >> 8; nwkskey[7] = read_from_mem2;
 800b30e:	0e33      	lsrs	r3, r6, #24
 800b310:	7113      	strb	r3, [r2, #4]
 800b312:	0c33      	lsrs	r3, r6, #16
 800b314:	7153      	strb	r3, [r2, #5]
 800b316:	0a33      	lsrs	r3, r6, #8
 800b318:	7193      	strb	r3, [r2, #6]
      nwkskey[8] = read_from_mem3 >> 24; nwkskey[9] = read_from_mem3 >> 16; nwkskey[10] = read_from_mem3 >> 8; nwkskey[11] = read_from_mem3;
 800b31a:	0e2b      	lsrs	r3, r5, #24
 800b31c:	7213      	strb	r3, [r2, #8]
 800b31e:	0c2b      	lsrs	r3, r5, #16
 800b320:	7253      	strb	r3, [r2, #9]
 800b322:	0a2b      	lsrs	r3, r5, #8
 800b324:	7293      	strb	r3, [r2, #10]
 800b326:	72d5      	strb	r5, [r2, #11]
      nwkskey[12] = read_from_mem4 >> 24; nwkskey[13] = read_from_mem4 >> 16; nwkskey[14] = read_from_mem4 >> 8; nwkskey[15] = read_from_mem4;
 800b328:	0e03      	lsrs	r3, r0, #24
      memcpy1(lora_config.NwkSEncKey, nwkskey, sizeof(lora_config.NwkSEncKey));
 800b32a:	4d7c      	ldr	r5, [pc, #496]	; (800b51c <get_params_from_memory+0x370>)
      nwkskey[12] = read_from_mem4 >> 24; nwkskey[13] = read_from_mem4 >> 16; nwkskey[14] = read_from_mem4 >> 8; nwkskey[15] = read_from_mem4;
 800b32c:	7313      	strb	r3, [r2, #12]
 800b32e:	0c03      	lsrs	r3, r0, #16
 800b330:	7353      	strb	r3, [r2, #13]
 800b332:	73d0      	strb	r0, [r2, #15]
 800b334:	0a03      	lsrs	r3, r0, #8
      memcpy1(lora_config.NwkSEncKey, nwkskey, sizeof(lora_config.NwkSEncKey));
 800b336:	0028      	movs	r0, r5
      nwkskey[12] = read_from_mem4 >> 24; nwkskey[13] = read_from_mem4 >> 16; nwkskey[14] = read_from_mem4 >> 8; nwkskey[15] = read_from_mem4;
 800b338:	7393      	strb	r3, [r2, #14]
      nwkskey[0] = read_from_mem1 >> 24; nwkskey[1] = read_from_mem1 >> 16; nwkskey[2] = read_from_mem1 >> 8; nwkskey[3] = read_from_mem1;
 800b33a:	70d7      	strb	r7, [r2, #3]
      nwkskey[4] = read_from_mem2 >> 24; nwkskey[5] = read_from_mem2 >> 16; nwkskey[6] = read_from_mem2 >> 8; nwkskey[7] = read_from_mem2;
 800b33c:	71d6      	strb	r6, [r2, #7]
      memcpy1(lora_config.NwkSEncKey, nwkskey, sizeof(lora_config.NwkSEncKey));
 800b33e:	3032      	adds	r0, #50	; 0x32
 800b340:	2210      	movs	r2, #16
 800b342:	4669      	mov	r1, sp
 800b344:	f008 fee5 	bl	8014112 <memcpy1>
      memcpy1(lora_config.FNwkSIntKey, nwkskey, sizeof(lora_config.FNwkSIntKey));
 800b348:	0028      	movs	r0, r5
 800b34a:	2210      	movs	r2, #16
 800b34c:	3052      	adds	r0, #82	; 0x52
 800b34e:	4669      	mov	r1, sp
 800b350:	f008 fedf 	bl	8014112 <memcpy1>
      memcpy1(lora_config.SNwkSIntKey, nwkskey, sizeof(lora_config.SNwkSIntKey));
 800b354:	0028      	movs	r0, r5
 800b356:	2210      	movs	r2, #16
 800b358:	3062      	adds	r0, #98	; 0x62
 800b35a:	4669      	mov	r1, sp
 800b35c:	f008 fed9 	bl	8014112 <memcpy1>
  flag = readEEPROMByte(APP_SKEY_FLAG);
 800b360:	2018      	movs	r0, #24
 800b362:	f000 fd63 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	4298      	cmp	r0, r3
 800b36a:	d136      	bne.n	800b3da <get_params_from_memory+0x22e>
      uint8_t appskey[16] = {0};
 800b36c:	2210      	movs	r2, #16
 800b36e:	2100      	movs	r1, #0
 800b370:	4668      	mov	r0, sp
 800b372:	f7f4 ff45 	bl	8000200 <memset>
      uint32_t read_from_mem1 = readEEPROMByte(APP_SKEY_0);
 800b376:	2014      	movs	r0, #20
 800b378:	f000 fd58 	bl	800be2c <readEEPROMByte>
 800b37c:	0007      	movs	r7, r0
      uint32_t read_from_mem2 = readEEPROMByte(APP_SKEY_1);
 800b37e:	2015      	movs	r0, #21
 800b380:	f000 fd54 	bl	800be2c <readEEPROMByte>
 800b384:	0006      	movs	r6, r0
      uint32_t read_from_mem3 = readEEPROMByte(APP_SKEY_2);
 800b386:	2016      	movs	r0, #22
 800b388:	f000 fd50 	bl	800be2c <readEEPROMByte>
 800b38c:	0005      	movs	r5, r0
      uint32_t read_from_mem4 = readEEPROMByte(APP_SKEY_3);
 800b38e:	2017      	movs	r0, #23
 800b390:	f000 fd4c 	bl	800be2c <readEEPROMByte>
      appskey[0] = read_from_mem1 >> 24; appskey[1] = read_from_mem1 >> 16; appskey[2] = read_from_mem1 >> 8; appskey[3] = read_from_mem1;
 800b394:	466a      	mov	r2, sp
 800b396:	0e3b      	lsrs	r3, r7, #24
 800b398:	7013      	strb	r3, [r2, #0]
 800b39a:	0c3b      	lsrs	r3, r7, #16
 800b39c:	7053      	strb	r3, [r2, #1]
 800b39e:	0a3b      	lsrs	r3, r7, #8
 800b3a0:	7093      	strb	r3, [r2, #2]
      appskey[4] = read_from_mem2 >> 24; appskey[5] = read_from_mem2 >> 16; appskey[6] = read_from_mem2 >> 8; appskey[7] = read_from_mem2;
 800b3a2:	0e33      	lsrs	r3, r6, #24
 800b3a4:	7113      	strb	r3, [r2, #4]
 800b3a6:	0c33      	lsrs	r3, r6, #16
 800b3a8:	7153      	strb	r3, [r2, #5]
 800b3aa:	0a33      	lsrs	r3, r6, #8
 800b3ac:	7193      	strb	r3, [r2, #6]
      appskey[8] = read_from_mem3 >> 24; appskey[9] = read_from_mem3 >> 16; appskey[10] = read_from_mem3 >> 8; appskey[11] = read_from_mem3;
 800b3ae:	0e2b      	lsrs	r3, r5, #24
 800b3b0:	7213      	strb	r3, [r2, #8]
 800b3b2:	0c2b      	lsrs	r3, r5, #16
 800b3b4:	7253      	strb	r3, [r2, #9]
 800b3b6:	0a2b      	lsrs	r3, r5, #8
 800b3b8:	7293      	strb	r3, [r2, #10]
      appskey[12] = read_from_mem4 >> 24; appskey[13] = read_from_mem4 >> 16; appskey[14] = read_from_mem4 >> 8; appskey[15] = read_from_mem4;
 800b3ba:	0e03      	lsrs	r3, r0, #24
 800b3bc:	7313      	strb	r3, [r2, #12]
 800b3be:	0c03      	lsrs	r3, r0, #16
 800b3c0:	7353      	strb	r3, [r2, #13]
 800b3c2:	73d0      	strb	r0, [r2, #15]
 800b3c4:	0a03      	lsrs	r3, r0, #8
      memcpy1(lora_config.AppSKey, appskey, sizeof(lora_config.AppSKey));
 800b3c6:	4855      	ldr	r0, [pc, #340]	; (800b51c <get_params_from_memory+0x370>)
      appskey[0] = read_from_mem1 >> 24; appskey[1] = read_from_mem1 >> 16; appskey[2] = read_from_mem1 >> 8; appskey[3] = read_from_mem1;
 800b3c8:	70d7      	strb	r7, [r2, #3]
      appskey[4] = read_from_mem2 >> 24; appskey[5] = read_from_mem2 >> 16; appskey[6] = read_from_mem2 >> 8; appskey[7] = read_from_mem2;
 800b3ca:	71d6      	strb	r6, [r2, #7]
      appskey[8] = read_from_mem3 >> 24; appskey[9] = read_from_mem3 >> 16; appskey[10] = read_from_mem3 >> 8; appskey[11] = read_from_mem3;
 800b3cc:	72d5      	strb	r5, [r2, #11]
      appskey[12] = read_from_mem4 >> 24; appskey[13] = read_from_mem4 >> 16; appskey[14] = read_from_mem4 >> 8; appskey[15] = read_from_mem4;
 800b3ce:	7393      	strb	r3, [r2, #14]
      memcpy1(lora_config.AppSKey, appskey, sizeof(lora_config.AppSKey));
 800b3d0:	4669      	mov	r1, sp
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	3042      	adds	r0, #66	; 0x42
 800b3d6:	f008 fe9c 	bl	8014112 <memcpy1>
  flag = readEEPROMByte(TX_POWER_FLAG);
 800b3da:	201e      	movs	r0, #30
 800b3dc:	f000 fd26 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	4298      	cmp	r0, r3
 800b3e4:	d105      	bne.n	800b3f2 <get_params_from_memory+0x246>
      lora_config.TxPower = readEEPROMByte(TX_POWER);
 800b3e6:	201d      	movs	r0, #29
 800b3e8:	f000 fd20 	bl	800be2c <readEEPROMByte>
 800b3ec:	4b4b      	ldr	r3, [pc, #300]	; (800b51c <get_params_from_memory+0x370>)
 800b3ee:	337d      	adds	r3, #125	; 0x7d
 800b3f0:	7018      	strb	r0, [r3, #0]
  flag = readEEPROMByte(DATARATE_FLAG);
 800b3f2:	2020      	movs	r0, #32
 800b3f4:	f000 fd1a 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d105      	bne.n	800b40a <get_params_from_memory+0x25e>
      lora_config_tx_datarate_set(readEEPROMByte(DATARATE));
 800b3fe:	201f      	movs	r0, #31
 800b400:	f000 fd14 	bl	800be2c <readEEPROMByte>
  lora_config.TxDatarate = TxDataRate;
 800b404:	4b45      	ldr	r3, [pc, #276]	; (800b51c <get_params_from_memory+0x370>)
 800b406:	337c      	adds	r3, #124	; 0x7c
 800b408:	7018      	strb	r0, [r3, #0]
  flag = readEEPROMByte(RX2_FREQ_FLAG);
 800b40a:	2024      	movs	r0, #36	; 0x24
 800b40c:	f000 fd0e 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	4298      	cmp	r0, r3
 800b414:	d105      	bne.n	800b422 <get_params_from_memory+0x276>
      lora_config.Rx2Frequency = readEEPROMByte(RX2_FREQ);
 800b416:	2023      	movs	r0, #35	; 0x23
 800b418:	f000 fd08 	bl	800be2c <readEEPROMByte>
 800b41c:	4b3f      	ldr	r3, [pc, #252]	; (800b51c <get_params_from_memory+0x370>)
 800b41e:	3304      	adds	r3, #4
 800b420:	67d8      	str	r0, [r3, #124]	; 0x7c
  flag = readEEPROMByte(RX2_DATARATE_FLAG);
 800b422:	2026      	movs	r0, #38	; 0x26
 800b424:	f000 fd02 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	4298      	cmp	r0, r3
 800b42c:	d105      	bne.n	800b43a <get_params_from_memory+0x28e>
      lora_config.Rx2DataRate = readEEPROMByte(RX2_DATARATE);
 800b42e:	2025      	movs	r0, #37	; 0x25
 800b430:	f000 fcfc 	bl	800be2c <readEEPROMByte>
 800b434:	4b39      	ldr	r3, [pc, #228]	; (800b51c <get_params_from_memory+0x370>)
 800b436:	3308      	adds	r3, #8
 800b438:	67d8      	str	r0, [r3, #124]	; 0x7c
  flag = readEEPROMByte(RX1_DELAY_FLAG);
 800b43a:	2028      	movs	r0, #40	; 0x28
 800b43c:	f000 fcf6 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	4298      	cmp	r0, r3
 800b444:	d105      	bne.n	800b452 <get_params_from_memory+0x2a6>
      lora_config.Rx1Delay = readEEPROMByte(RX1_DELAY);
 800b446:	2027      	movs	r0, #39	; 0x27
 800b448:	f000 fcf0 	bl	800be2c <readEEPROMByte>
 800b44c:	4b33      	ldr	r3, [pc, #204]	; (800b51c <get_params_from_memory+0x370>)
 800b44e:	3388      	adds	r3, #136	; 0x88
 800b450:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(RX2_DELAY_FLAG);
 800b452:	202a      	movs	r0, #42	; 0x2a
 800b454:	f000 fcea 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	4298      	cmp	r0, r3
 800b45c:	d105      	bne.n	800b46a <get_params_from_memory+0x2be>
      lora_config.Rx2Delay = readEEPROMByte(RX2_DELAY);
 800b45e:	2029      	movs	r0, #41	; 0x29
 800b460:	f000 fce4 	bl	800be2c <readEEPROMByte>
 800b464:	4b2d      	ldr	r3, [pc, #180]	; (800b51c <get_params_from_memory+0x370>)
 800b466:	338c      	adds	r3, #140	; 0x8c
 800b468:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(JOIN_DELAY_1_FLAG);
 800b46a:	202c      	movs	r0, #44	; 0x2c
 800b46c:	f000 fcde 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	4298      	cmp	r0, r3
 800b474:	d105      	bne.n	800b482 <get_params_from_memory+0x2d6>
      lora_config.JoinDelay1 = readEEPROMByte(JOIN_DELAY_1);
 800b476:	202b      	movs	r0, #43	; 0x2b
 800b478:	f000 fcd8 	bl	800be2c <readEEPROMByte>
 800b47c:	4b27      	ldr	r3, [pc, #156]	; (800b51c <get_params_from_memory+0x370>)
 800b47e:	3390      	adds	r3, #144	; 0x90
 800b480:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(JOIN_DELAY_2_FLAG);
 800b482:	202e      	movs	r0, #46	; 0x2e
 800b484:	f000 fcd2 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	4298      	cmp	r0, r3
 800b48c:	d105      	bne.n	800b49a <get_params_from_memory+0x2ee>
      lora_config.JoinDelay2 = readEEPROMByte(JOIN_DELAY_2);
 800b48e:	202d      	movs	r0, #45	; 0x2d
 800b490:	f000 fccc 	bl	800be2c <readEEPROMByte>
 800b494:	4b21      	ldr	r3, [pc, #132]	; (800b51c <get_params_from_memory+0x370>)
 800b496:	3394      	adds	r3, #148	; 0x94
 800b498:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(JOIN_MODE_FLAG);
 800b49a:	2001      	movs	r0, #1
 800b49c:	f000 fcc6 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	4298      	cmp	r0, r3
 800b4a4:	d104      	bne.n	800b4b0 <get_params_from_memory+0x304>
      lora_config.otaa = readEEPROMByte(JOIN_MODE);
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	f000 fcc0 	bl	800be2c <readEEPROMByte>
 800b4ac:	4b1b      	ldr	r3, [pc, #108]	; (800b51c <get_params_from_memory+0x370>)
 800b4ae:	7018      	strb	r0, [r3, #0]
  flag = readEEPROMByte(NWK_ID_FLAG);
 800b4b0:	2030      	movs	r0, #48	; 0x30
 800b4b2:	f000 fcbb 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	4298      	cmp	r0, r3
 800b4ba:	d105      	bne.n	800b4c8 <get_params_from_memory+0x31c>
      lora_config.netid = readEEPROMByte(NWK_ID);
 800b4bc:	202f      	movs	r0, #47	; 0x2f
 800b4be:	f000 fcb5 	bl	800be2c <readEEPROMByte>
 800b4c2:	4b16      	ldr	r3, [pc, #88]	; (800b51c <get_params_from_memory+0x370>)
 800b4c4:	3398      	adds	r3, #152	; 0x98
 800b4c6:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(CLASS_FLAG);
 800b4c8:	2032      	movs	r0, #50	; 0x32
 800b4ca:	f000 fcaf 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	4298      	cmp	r0, r3
 800b4d2:	d105      	bne.n	800b4e0 <get_params_from_memory+0x334>
      lora_config.class = readEEPROMByte(CLASS);
 800b4d4:	2031      	movs	r0, #49	; 0x31
 800b4d6:	f000 fca9 	bl	800be2c <readEEPROMByte>
 800b4da:	4b10      	ldr	r3, [pc, #64]	; (800b51c <get_params_from_memory+0x370>)
 800b4dc:	339c      	adds	r3, #156	; 0x9c
 800b4de:	6018      	str	r0, [r3, #0]
  flag = readEEPROMByte(CONF_MODE_FLAG);
 800b4e0:	2034      	movs	r0, #52	; 0x34
 800b4e2:	f000 fca3 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	d105      	bne.n	800b4f8 <get_params_from_memory+0x34c>
      lora_config.ReqAck = readEEPROMByte(CONF_MODE);
 800b4ec:	2033      	movs	r0, #51	; 0x33
 800b4ee:	f000 fc9d 	bl	800be2c <readEEPROMByte>
 800b4f2:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <get_params_from_memory+0x370>)
 800b4f4:	3376      	adds	r3, #118	; 0x76
 800b4f6:	7018      	strb	r0, [r3, #0]
  flag = readEEPROMByte(SUB_BAND_FLAG);
 800b4f8:	201a      	movs	r0, #26
 800b4fa:	f000 fc97 	bl	800be2c <readEEPROMByte>
  if(flag == FLAG_CODE) {
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	4298      	cmp	r0, r3
 800b502:	d105      	bne.n	800b510 <get_params_from_memory+0x364>
      lora_config.subBand = readEEPROMByte(SUB_BAND);
 800b504:	2019      	movs	r0, #25
 800b506:	f000 fc91 	bl	800be2c <readEEPROMByte>
 800b50a:	4b04      	ldr	r3, [pc, #16]	; (800b51c <get_params_from_memory+0x370>)
 800b50c:	33a0      	adds	r3, #160	; 0xa0
 800b50e:	6018      	str	r0, [r3, #0]
}
 800b510:	b005      	add	sp, #20
 800b512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b514:	200009f4 	.word	0x200009f4
 800b518:	20001000 	.word	0x20001000
 800b51c:	200009f8 	.word	0x200009f8

0800b520 <LORA_Init>:
{
 800b520:	0003      	movs	r3, r0
 800b522:	b570      	push	{r4, r5, r6, lr}
  LoRaMainCallbacks->BoardGetUniqueId( lora_config.DevEui );
 800b524:	4d55      	ldr	r5, [pc, #340]	; (800b67c <LORA_Init+0x15c>)
  LoRaMainCallbacks = callbacks;
 800b526:	4c56      	ldr	r4, [pc, #344]	; (800b680 <LORA_Init+0x160>)
  LoRaParamInit = LoRaParam;
 800b528:	4e56      	ldr	r6, [pc, #344]	; (800b684 <LORA_Init+0x164>)
  LoRaMainCallbacks = callbacks;
 800b52a:	6020      	str	r0, [r4, #0]
  LoRaMainCallbacks->BoardGetUniqueId( lora_config.DevEui );
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	1ca8      	adds	r0, r5, #2
  LoRaParamInit = LoRaParam;
 800b530:	6031      	str	r1, [r6, #0]
  LoRaMainCallbacks->BoardGetUniqueId( lora_config.DevEui );
 800b532:	4798      	blx	r3
  srand1( LoRaMainCallbacks->BoardGetRandomSeed( ) );
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	4798      	blx	r3
 800b53a:	f008 fdd9 	bl	80140f0 <srand1>
  DevAddr = randr( 0, 0x01FFFFFF );
 800b53e:	4952      	ldr	r1, [pc, #328]	; (800b688 <LORA_Init+0x168>)
 800b540:	2000      	movs	r0, #0
 800b542:	f008 fddb 	bl	80140fc <randr>
 800b546:	4b51      	ldr	r3, [pc, #324]	; (800b68c <LORA_Init+0x16c>)
 800b548:	6018      	str	r0, [r3, #0]
  get_params_from_memory();
 800b54a:	f7ff fe2f 	bl	800b1ac <get_params_from_memory>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b54e:	4850      	ldr	r0, [pc, #320]	; (800b690 <LORA_Init+0x170>)
 800b550:	4b50      	ldr	r3, [pc, #320]	; (800b694 <LORA_Init+0x174>)
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800b552:	4951      	ldr	r1, [pc, #324]	; (800b698 <LORA_Init+0x178>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b554:	6003      	str	r3, [r0, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b556:	4b51      	ldr	r3, [pc, #324]	; (800b69c <LORA_Init+0x17c>)
 800b558:	6043      	str	r3, [r0, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b55a:	4b51      	ldr	r3, [pc, #324]	; (800b6a0 <LORA_Init+0x180>)
 800b55c:	6083      	str	r3, [r0, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b55e:	4b51      	ldr	r3, [pc, #324]	; (800b6a4 <LORA_Init+0x184>)
 800b560:	60c3      	str	r3, [r0, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800b566:	685b      	ldr	r3, [r3, #4]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800b568:	600a      	str	r2, [r1, #0]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_US915 );
 800b56a:	2208      	movs	r2, #8
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800b56c:	604b      	str	r3, [r1, #4]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_US915 );
 800b56e:	f005 fa4d 	bl	8010a0c <LoRaMacInitialization>
  mibReq.Type = MIB_ADR;
 800b572:	2302      	movs	r3, #2
 800b574:	4c4c      	ldr	r4, [pc, #304]	; (800b6a8 <LORA_Init+0x188>)
 800b576:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800b578:	6833      	ldr	r3, [r6, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b57a:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b580:	f005 fd7a 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800b584:	231a      	movs	r3, #26
 800b586:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800b588:	6833      	ldr	r3, [r6, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b58a:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800b58c:	789b      	ldrb	r3, [r3, #2]
 800b58e:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b590:	f005 fd72 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 800b594:	2305      	movs	r3, #5
 800b596:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AppKey = lora_config.AppKey;
 800b598:	002b      	movs	r3, r5
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b59a:	0020      	movs	r0, r4
  mibReq.Param.AppKey = lora_config.AppKey;
 800b59c:	3312      	adds	r3, #18
 800b59e:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5a0:	f005 fd6a 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NWK_KEY;
 800b5a4:	2306      	movs	r3, #6
 800b5a6:	7023      	strb	r3, [r4, #0]
  mibReq.Param.NwkKey = lora_config.NwkKey;
 800b5a8:	002b      	movs	r3, r5
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5aa:	0020      	movs	r0, r4
  mibReq.Param.NwkKey = lora_config.NwkKey;
 800b5ac:	3322      	adds	r3, #34	; 0x22
 800b5ae:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5b0:	f005 fd62 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEVICE_CLASS;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	7023      	strb	r3, [r4, #0]
  mibReq.Param.Class = lora_config.class;
 800b5b8:	002b      	movs	r3, r5
 800b5ba:	339c      	adds	r3, #156	; 0x9c
 800b5bc:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5be:	0020      	movs	r0, r4
  mibReq.Param.Class = lora_config.class;
 800b5c0:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5c2:	f005 fd59 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b5c6:	2329      	movs	r3, #41	; 0x29
 800b5c8:	7023      	strb	r3, [r4, #0]
  mibReq.Param.ChannelsTxPower = lora_config.TxPower;
 800b5ca:	002b      	movs	r3, r5
 800b5cc:	337d      	adds	r3, #125	; 0x7d
 800b5ce:	781b      	ldrb	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5d0:	0020      	movs	r0, r4
  mibReq.Param.ChannelsTxPower = lora_config.TxPower;
 800b5d2:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5d4:	f005 fd50 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_RX2_CHANNEL;
 800b5d8:	231d      	movs	r3, #29
 800b5da:	7023      	strb	r3, [r4, #0]
  mibReq.Param.Rx2Channel.Frequency = lora_config.Rx2Frequency;
 800b5dc:	1d2b      	adds	r3, r5, #4
 800b5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5e0:	0020      	movs	r0, r4
  mibReq.Param.Rx2Channel.Frequency = lora_config.Rx2Frequency;
 800b5e2:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5e4:	f005 fd48 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Param.Rx2Channel.Datarate = lora_config.Rx2DataRate;
 800b5e8:	002b      	movs	r3, r5
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5ee:	0020      	movs	r0, r4
  mibReq.Param.Rx2Channel.Datarate = lora_config.Rx2DataRate;
 800b5f0:	7223      	strb	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b5f2:	f005 fd41 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_RECEIVE_DELAY_1;
 800b5f6:	2323      	movs	r3, #35	; 0x23
 800b5f8:	7023      	strb	r3, [r4, #0]
  mibReq.Param.ReceiveDelay1 = lora_config.Rx1Delay;
 800b5fa:	002b      	movs	r3, r5
 800b5fc:	3388      	adds	r3, #136	; 0x88
 800b5fe:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b600:	0020      	movs	r0, r4
  mibReq.Param.ReceiveDelay1 = lora_config.Rx1Delay;
 800b602:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b604:	f005 fd38 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_RECEIVE_DELAY_2;
 800b608:	2324      	movs	r3, #36	; 0x24
 800b60a:	7023      	strb	r3, [r4, #0]
  mibReq.Param.ReceiveDelay2 = lora_config.Rx2Delay;
 800b60c:	002b      	movs	r3, r5
 800b60e:	338c      	adds	r3, #140	; 0x8c
 800b610:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b612:	0020      	movs	r0, r4
  mibReq.Param.ReceiveDelay2 = lora_config.Rx2Delay;
 800b614:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b616:	f005 fd2f 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800b61a:	2325      	movs	r3, #37	; 0x25
 800b61c:	7023      	strb	r3, [r4, #0]
  mibReq.Param.JoinAcceptDelay1 = lora_config.JoinDelay1;
 800b61e:	002b      	movs	r3, r5
 800b620:	3390      	adds	r3, #144	; 0x90
 800b622:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b624:	0020      	movs	r0, r4
  mibReq.Param.JoinAcceptDelay1 = lora_config.JoinDelay1;
 800b626:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b628:	f005 fd26 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 800b62c:	2326      	movs	r3, #38	; 0x26
 800b62e:	7023      	strb	r3, [r4, #0]
  mibReq.Param.JoinAcceptDelay2 = lora_config.JoinDelay2;
 800b630:	002b      	movs	r3, r5
 800b632:	3394      	adds	r3, #148	; 0x94
 800b634:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b636:	0020      	movs	r0, r4
  mibReq.Param.JoinAcceptDelay2 = lora_config.JoinDelay2;
 800b638:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b63a:	f005 fd1d 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NET_ID;
 800b63e:	2303      	movs	r3, #3
 800b640:	7023      	strb	r3, [r4, #0]
  mibReq.Param.NetID = lora_config.netid;
 800b642:	002b      	movs	r3, r5
 800b644:	3398      	adds	r3, #152	; 0x98
 800b646:	681b      	ldr	r3, [r3, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b648:	0020      	movs	r0, r4
  mibReq.Param.NetID = lora_config.netid;
 800b64a:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b64c:	f005 fd14 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  lora_config.duty_cycle = LORA_ENABLE;
 800b650:	2301      	movs	r3, #1
 800b652:	706b      	strb	r3, [r5, #1]
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800b654:	332a      	adds	r3, #42	; 0x2a
 800b656:	7023      	strb	r3, [r4, #0]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b658:	0020      	movs	r0, r4
  mibReq.Param.SystemMaxRxError = 10;
 800b65a:	3b21      	subs	r3, #33	; 0x21
 800b65c:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800b65e:	f005 fd0b 	bl	8011078 <LoRaMacMibSetRequestConfirm>
  char channels = lora_config.subBand + '0';
 800b662:	002b      	movs	r3, r5
 800b664:	33a0      	adds	r3, #160	; 0xa0
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	3030      	adds	r0, #48	; 0x30
  lora_set_sub_band(channels);
 800b66a:	b2c0      	uxtb	r0, r0
 800b66c:	f7ff fbce 	bl	800ae0c <lora_set_sub_band>
  lora_config_otaa_set(lora_config.otaa);
 800b670:	7828      	ldrb	r0, [r5, #0]
 800b672:	f7ff fc09 	bl	800ae88 <lora_config_otaa_set>
  LoRaMacStart( );
 800b676:	f005 fbbf 	bl	8010df8 <LoRaMacStart>
}
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	200009f8 	.word	0x200009f8
 800b680:	2000102c 	.word	0x2000102c
 800b684:	20001030 	.word	0x20001030
 800b688:	01ffffff 	.word	0x01ffffff
 800b68c:	20001000 	.word	0x20001000
 800b690:	2000101c 	.word	0x2000101c
 800b694:	0800aaf9 	.word	0x0800aaf9
 800b698:	20001010 	.word	0x20001010
 800b69c:	0800ab71 	.word	0x0800ab71
 800b6a0:	0800ac4d 	.word	0x0800ac4d
 800b6a4:	0800ab3d 	.word	0x0800ab3d
 800b6a8:	20001048 	.word	0x20001048

0800b6ac <lora_config_reqack_set>:
  lora_config.ReqAck = reqack;
 800b6ac:	4b01      	ldr	r3, [pc, #4]	; (800b6b4 <lora_config_reqack_set+0x8>)
 800b6ae:	3376      	adds	r3, #118	; 0x76
 800b6b0:	7018      	strb	r0, [r3, #0]
}
 800b6b2:	4770      	bx	lr
 800b6b4:	200009f8 	.word	0x200009f8

0800b6b8 <lora_config_reqack_get>:
  return lora_config.ReqAck;
 800b6b8:	4b01      	ldr	r3, [pc, #4]	; (800b6c0 <lora_config_reqack_get+0x8>)
 800b6ba:	3376      	adds	r3, #118	; 0x76
 800b6bc:	7818      	ldrb	r0, [r3, #0]
}
 800b6be:	4770      	bx	lr
 800b6c0:	200009f8 	.word	0x200009f8

0800b6c4 <lora_config_snr_get>:
  return lora_config.Snr;
 800b6c4:	2074      	movs	r0, #116	; 0x74
 800b6c6:	4b01      	ldr	r3, [pc, #4]	; (800b6cc <lora_config_snr_get+0x8>)
 800b6c8:	5618      	ldrsb	r0, [r3, r0]
}
 800b6ca:	4770      	bx	lr
 800b6cc:	200009f8 	.word	0x200009f8

0800b6d0 <lora_config_rssi_get>:
  return lora_config.Rssi;
 800b6d0:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <lora_config_rssi_get+0xc>)
 800b6d2:	3372      	adds	r3, #114	; 0x72
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	5e18      	ldrsh	r0, [r3, r0]
}
 800b6d8:	4770      	bx	lr
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	200009f8 	.word	0x200009f8

0800b6e0 <lora_config_tx_datarate_set>:
  lora_config.TxDatarate = TxDataRate;
 800b6e0:	4b01      	ldr	r3, [pc, #4]	; (800b6e8 <lora_config_tx_datarate_set+0x8>)
 800b6e2:	337c      	adds	r3, #124	; 0x7c
 800b6e4:	7018      	strb	r0, [r3, #0]
}
 800b6e6:	4770      	bx	lr
 800b6e8:	200009f8 	.word	0x200009f8

0800b6ec <lora_config_tx_datarate_get>:
  return lora_config.TxDatarate;
 800b6ec:	207c      	movs	r0, #124	; 0x7c
 800b6ee:	4b01      	ldr	r3, [pc, #4]	; (800b6f4 <lora_config_tx_datarate_get+0x8>)
 800b6f0:	5618      	ldrsb	r0, [r3, r0]
}
 800b6f2:	4770      	bx	lr
 800b6f4:	200009f8 	.word	0x200009f8

0800b6f8 <lora_config_isack_get>:
  if (lora_config.McpsConfirm == NULL)
 800b6f8:	4b02      	ldr	r3, [pc, #8]	; (800b704 <lora_config_isack_get+0xc>)
 800b6fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6fc:	1e18      	subs	r0, r3, #0
 800b6fe:	d000      	beq.n	800b702 <lora_config_isack_get+0xa>
    return (lora_config.McpsConfirm->AckReceived ? LORA_ENABLE : LORA_DISABLE);
 800b700:	7918      	ldrb	r0, [r3, #4]
}
 800b702:	4770      	bx	lr
 800b704:	200009f8 	.word	0x200009f8

0800b708 <lora_wan_certif>:

void lora_wan_certif( void )
{
 800b708:	b510      	push	{r4, lr}
  LoRaMacTestSetDutyCycleOn( false );
 800b70a:	2000      	movs	r0, #0
 800b70c:	f006 f8de 	bl	80118cc <LoRaMacTestSetDutyCycleOn>
  LORA_Join( );
 800b710:	f7ff fa76 	bl	800ac00 <LORA_Join>
  TimerInit( &TxcertifTimer,  OnCertifTimer); /* 8s */
 800b714:	4c06      	ldr	r4, [pc, #24]	; (800b730 <lora_wan_certif+0x28>)
 800b716:	4907      	ldr	r1, [pc, #28]	; (800b734 <lora_wan_certif+0x2c>)
 800b718:	0020      	movs	r0, r4
 800b71a:	f008 fc09 	bl	8013f30 <TimerInit>
  TimerSetValue( &TxcertifTimer,  8000); /* 8s */
 800b71e:	21fa      	movs	r1, #250	; 0xfa
 800b720:	0020      	movs	r0, r4
 800b722:	0149      	lsls	r1, r1, #5
 800b724:	f008 fcaa 	bl	801407c <TimerSetValue>
  TimerStart( &TxcertifTimer );
 800b728:	0020      	movs	r0, r4
 800b72a:	f008 fc09 	bl	8013f40 <TimerStart>

}
 800b72e:	bd10      	pop	{r4, pc}
 800b730:	20001034 	.word	0x20001034
 800b734:	0800ad71 	.word	0x0800ad71

0800b738 <TST_TxTone>:
/* Functions Definition ------------------------------------------------------*/

/* receive test functions */

ATEerror_t TST_TxTone(const char *buf, unsigned bufSize)
{
 800b738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t paboost = loraParam.paBoost;

  if ( (TestState & TX_TEST_TONE) != TX_TEST_TONE )
 800b73a:	4a36      	ldr	r2, [pc, #216]	; (800b814 <TST_TxTone+0xdc>)
 800b73c:	2301      	movs	r3, #1
 800b73e:	7811      	ldrb	r1, [r2, #0]
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    return AT_OK;
  }
  else
  {
    return AT_BUSY_ERROR;
 800b740:	2003      	movs	r0, #3
  if ( (TestState & TX_TEST_TONE) != TX_TEST_TONE )
 800b742:	000d      	movs	r5, r1
 800b744:	401d      	ands	r5, r3
 800b746:	d13d      	bne.n	800b7c4 <TST_TxTone+0x8c>
  uint8_t paboost = loraParam.paBoost;
 800b748:	4e33      	ldr	r6, [pc, #204]	; (800b818 <TST_TxTone+0xe0>)
    TestState |= TX_TEST_TONE;
 800b74a:	430b      	orrs	r3, r1
  uint8_t paboost = loraParam.paBoost;
 800b74c:	7e30      	ldrb	r0, [r6, #24]
    TestState |= TX_TEST_TONE;
 800b74e:	7013      	strb	r3, [r2, #0]
  uint8_t paboost = loraParam.paBoost;
 800b750:	9000      	str	r0, [sp, #0]
    PRINTF("Tx Test\n\r");
 800b752:	4832      	ldr	r0, [pc, #200]	; (800b81c <TST_TxTone+0xe4>)
 800b754:	f008 ff82 	bl	801465c <TraceSend>
    SX1276SetModem( MODEM_FSK );
 800b758:	0028      	movs	r0, r5
 800b75a:	f00a f8cd 	bl	80158f8 <SX1276SetModem>
    Radio.SetChannel( loraParam.freqMHz * 1000000 );
 800b75e:	4f30      	ldr	r7, [pc, #192]	; (800b820 <TST_TxTone+0xe8>)
 800b760:	6833      	ldr	r3, [r6, #0]
 800b762:	4830      	ldr	r0, [pc, #192]	; (800b824 <TST_TxTone+0xec>)
 800b764:	4358      	muls	r0, r3
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	4798      	blx	r3
    Radio.Write( REG_FDEVMSB, 0x00 );                           // FdevMsb = 0
 800b76c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b76e:	0029      	movs	r1, r5
 800b770:	2004      	movs	r0, #4
 800b772:	47a0      	blx	r4
    Radio.Write( REG_FDEVLSB, 0x00 );                           // FdevLsb = 0
 800b774:	0029      	movs	r1, r5
 800b776:	2005      	movs	r0, #5
 800b778:	47a0      	blx	r4
    Radio.Write( REG_PACKETCONFIG2, ( Radio.Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800b77a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800b77c:	2031      	movs	r0, #49	; 0x31
 800b77e:	47a8      	blx	r5
 800b780:	21bf      	movs	r1, #191	; 0xbf
 800b782:	4001      	ands	r1, r0
 800b784:	2031      	movs	r0, #49	; 0x31
 800b786:	47a0      	blx	r4
    switch (loraParam.power)
 800b788:	6870      	ldr	r0, [r6, #4]
 800b78a:	3807      	subs	r0, #7
 800b78c:	280d      	cmp	r0, #13
 800b78e:	d815      	bhi.n	800b7bc <TST_TxTone+0x84>
 800b790:	f7f5 f9f4 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800b794:	2914142f 	.word	0x2914142f
 800b798:	22141414 	.word	0x22141414
 800b79c:	14191414 	.word	0x14191414
 800b7a0:	0714      	.short	0x0714
        Radio.Write( REG_PACONFIG, 0xFF );                             // PA_Boost 17 dBm
 800b7a2:	21ff      	movs	r1, #255	; 0xff
 800b7a4:	2009      	movs	r0, #9
 800b7a6:	47a0      	blx	r4
        Radio.Write( REG_PADAC, ( Radio.Read( REG_PADAC ) & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON );  // Enable 20dBm boost
 800b7a8:	204d      	movs	r0, #77	; 0x4d
 800b7aa:	47a8      	blx	r5
 800b7ac:	2107      	movs	r1, #7
        Radio.Write( REG_PADAC, ( Radio.Read( REG_PADAC ) & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF );  // Disable 20dBm boost
 800b7ae:	4301      	orrs	r1, r0
 800b7b0:	b2c9      	uxtb	r1, r1
 800b7b2:	204d      	movs	r0, #77	; 0x4d
 800b7b4:	47a0      	blx	r4
        PRINTF("force PA boost Output\n\r");
 800b7b6:	481c      	ldr	r0, [pc, #112]	; (800b828 <TST_TxTone+0xf0>)
 800b7b8:	f008 ff50 	bl	801465c <TraceSend>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800b7bc:	2003      	movs	r0, #3
 800b7be:	f009 fef3 	bl	80155a8 <SX1276SetOpMode>
    return AT_OK;
 800b7c2:	2000      	movs	r0, #0
  }
}
 800b7c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        Radio.Write( REG_PACONFIG, 0xFF );                           // PA_Boost 17 dBm
 800b7c6:	21ff      	movs	r1, #255	; 0xff
 800b7c8:	2009      	movs	r0, #9
 800b7ca:	47a0      	blx	r4
        Radio.Write( REG_PADAC, ( Radio.Read( REG_PADAC ) & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF );  // Disable 20dBm boost
 800b7cc:	204d      	movs	r0, #77	; 0x4d
 800b7ce:	47a8      	blx	r5
 800b7d0:	2307      	movs	r3, #7
 800b7d2:	2104      	movs	r1, #4
 800b7d4:	4398      	bics	r0, r3
 800b7d6:	e7ea      	b.n	800b7ae <TST_TxTone+0x76>
        if ( paboost == 1 )
 800b7d8:	9b00      	ldr	r3, [sp, #0]
          Radio.Write( REG_PACONFIG, 0xFB );                           // PA_Boost 14 dBm
 800b7da:	21fb      	movs	r1, #251	; 0xfb
        if ( paboost == 1 )
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d00d      	beq.n	800b7fc <TST_TxTone+0xc4>
          Radio.Write( REG_PACONFIG, 0x7F );                           // RFO 14 dBm
 800b7e0:	217f      	movs	r1, #127	; 0x7f
            Radio.Write( REG_PACONFIG, 0x78 );                                // RFO 7 dBm
 800b7e2:	2009      	movs	r0, #9
 800b7e4:	e014      	b.n	800b810 <TST_TxTone+0xd8>
        if ( paboost == 1 )
 800b7e6:	9b00      	ldr	r3, [sp, #0]
            Radio.Write( REG_PACONFIG, 0xF7 );                        // PA_Boost 10 dBm
 800b7e8:	21f7      	movs	r1, #247	; 0xf7
        if ( paboost == 1 )
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d006      	beq.n	800b7fc <TST_TxTone+0xc4>
            Radio.Write( REG_PACONFIG, 0x7A );                        // RFO 10 dBm
 800b7ee:	217a      	movs	r1, #122	; 0x7a
 800b7f0:	e7f7      	b.n	800b7e2 <TST_TxTone+0xaa>
        if ( paboost == 1 )
 800b7f2:	9b00      	ldr	r3, [sp, #0]
            Radio.Write( REG_PACONFIG, 0x78 );                                // RFO 7 dBm
 800b7f4:	2178      	movs	r1, #120	; 0x78
        if ( paboost == 1 )
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d1f3      	bne.n	800b7e2 <TST_TxTone+0xaa>
            Radio.Write( REG_PACONFIG, 0xF5 );                                // PA_Boost 7 dBm
 800b7fa:	21f5      	movs	r1, #245	; 0xf5
 800b7fc:	2009      	movs	r0, #9
 800b7fe:	47a0      	blx	r4
            Radio.Write( REG_PADAC, ( Radio.Read( REG_PADAC ) & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF );  // Disable 20dBm boost
 800b800:	204d      	movs	r0, #77	; 0x4d
 800b802:	47a8      	blx	r5
 800b804:	2307      	movs	r3, #7
 800b806:	2104      	movs	r1, #4
 800b808:	4398      	bics	r0, r3
 800b80a:	4301      	orrs	r1, r0
 800b80c:	204d      	movs	r0, #77	; 0x4d
 800b80e:	b2c9      	uxtb	r1, r1
            Radio.Write( REG_PACONFIG, 0x78 );                                // RFO 7 dBm
 800b810:	47a0      	blx	r4
 800b812:	e7d3      	b.n	800b7bc <TST_TxTone+0x84>
 800b814:	20001060 	.word	0x20001060
 800b818:	20000a9c 	.word	0x20000a9c
 800b81c:	080184f2 	.word	0x080184f2
 800b820:	08018acc 	.word	0x08018acc
 800b824:	000f4240 	.word	0x000f4240
 800b828:	080184fc 	.word	0x080184fc

0800b82c <TST_RxTone>:


/* receive test functions */

ATEerror_t TST_RxTone(const char *buf, unsigned bufSize)
{
 800b82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* check that test is not already started*/
  if ( (TestState & RX_TEST_RSSI) != RX_TEST_RSSI )
 800b82e:	2102      	movs	r1, #2
 800b830:	4a24      	ldr	r2, [pc, #144]	; (800b8c4 <TST_RxTone+0x98>)

    return AT_OK;
  }
  else
  {
    return AT_BUSY_ERROR;
 800b832:	2503      	movs	r5, #3
  if ( (TestState & RX_TEST_RSSI) != RX_TEST_RSSI )
 800b834:	7813      	ldrb	r3, [r2, #0]
 800b836:	4019      	ands	r1, r3
 800b838:	9100      	str	r1, [sp, #0]
 800b83a:	d139      	bne.n	800b8b0 <TST_RxTone+0x84>
    TestState |= RX_TEST_RSSI;
 800b83c:	3102      	adds	r1, #2
 800b83e:	430b      	orrs	r3, r1
    PRINTF("Rx Test\n\r");
 800b840:	4821      	ldr	r0, [pc, #132]	; (800b8c8 <TST_RxTone+0x9c>)
    TestState |= RX_TEST_RSSI;
 800b842:	7013      	strb	r3, [r2, #0]
    PRINTF("Rx Test\n\r");
 800b844:	f008 ff0a 	bl	801465c <TraceSend>
     SX1276SetModem( MODEM_FSK );
 800b848:	9800      	ldr	r0, [sp, #0]
 800b84a:	f00a f855 	bl	80158f8 <SX1276SetModem>
    Radio.SetChannel( loraParam.freqMHz * 1000000 );
 800b84e:	4f1f      	ldr	r7, [pc, #124]	; (800b8cc <TST_RxTone+0xa0>)
 800b850:	4e1f      	ldr	r6, [pc, #124]	; (800b8d0 <TST_RxTone+0xa4>)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	481f      	ldr	r0, [pc, #124]	; (800b8d4 <TST_RxTone+0xa8>)
 800b856:	4358      	muls	r0, r3
 800b858:	6973      	ldr	r3, [r6, #20]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	4798      	blx	r3
    Radio.Write( REG_BITRATEMSB, 0x1A );           // bitrate =  4800 bps
 800b85e:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 800b860:	211a      	movs	r1, #26
 800b862:	2002      	movs	r0, #2
 800b864:	47a0      	blx	r4
    Radio.Write( REG_BITRATELSB, 0x0B );           //
 800b866:	210b      	movs	r1, #11
 800b868:	0028      	movs	r0, r5
 800b86a:	47a0      	blx	r4
    Radio.Write( REG_FDEVMSB, 0x00 );              // Frequency deviation = 5 KHz
 800b86c:	9900      	ldr	r1, [sp, #0]
 800b86e:	2004      	movs	r0, #4
 800b870:	47a0      	blx	r4
    Radio.Write( REG_FDEVLSB, 0x52 );              //
 800b872:	2152      	movs	r1, #82	; 0x52
 800b874:	2005      	movs	r0, #5
 800b876:	47a0      	blx	r4
    if (loraParam.lna ==0 )
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d11a      	bne.n	800b8b4 <TST_RxTone+0x88>
      Radio.Write( REG_LR_LNA,0x20); //LNA off
 800b87e:	200c      	movs	r0, #12
 800b880:	2120      	movs	r1, #32
 800b882:	47a0      	blx	r4
      PRINTF(">>> LNA is OFF\n\r");
 800b884:	4814      	ldr	r0, [pc, #80]	; (800b8d8 <TST_RxTone+0xac>)
 800b886:	f008 fee9 	bl	801465c <TraceSend>
    Radio.Write( REG_PACKETCONFIG2, ( Radio.Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800b88a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b88c:	2031      	movs	r0, #49	; 0x31
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	2540      	movs	r5, #64	; 0x40
 800b892:	4798      	blx	r3
 800b894:	43a8      	bics	r0, r5
 800b896:	b2c1      	uxtb	r1, r0
 800b898:	2031      	movs	r0, #49	; 0x31
 800b89a:	47a0      	blx	r4
    Radio.Write( REG_RSSICONFIG, 0x07 );//256 samples average
 800b89c:	2107      	movs	r1, #7
 800b89e:	200e      	movs	r0, #14
 800b8a0:	47a0      	blx	r4
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800b8a2:	2005      	movs	r0, #5
 800b8a4:	f009 fe80 	bl	80155a8 <SX1276SetOpMode>
    Radio.Write( REG_RXCONFIG, 0x40  ); //Triggers a manual Restart of the Receiver chain
 800b8a8:	0029      	movs	r1, r5
 800b8aa:	200d      	movs	r0, #13
 800b8ac:	47a0      	blx	r4
    return AT_OK;
 800b8ae:	2500      	movs	r5, #0
  }
}
 800b8b0:	0028      	movs	r0, r5
 800b8b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PRINTF(">>> LNA is ON\n\r");
 800b8b4:	4809      	ldr	r0, [pc, #36]	; (800b8dc <TST_RxTone+0xb0>)
 800b8b6:	f008 fed1 	bl	801465c <TraceSend>
      Radio.Write( REG_LR_LNA,0x23); //LNA on
 800b8ba:	2123      	movs	r1, #35	; 0x23
 800b8bc:	200c      	movs	r0, #12
 800b8be:	47a0      	blx	r4
 800b8c0:	e7e3      	b.n	800b88a <TST_RxTone+0x5e>
 800b8c2:	46c0      	nop			; (mov r8, r8)
 800b8c4:	20001060 	.word	0x20001060
 800b8c8:	080184af 	.word	0x080184af
 800b8cc:	20000a9c 	.word	0x20000a9c
 800b8d0:	08018acc 	.word	0x08018acc
 800b8d4:	000f4240 	.word	0x000f4240
 800b8d8:	080184b9 	.word	0x080184b9
 800b8dc:	080184ca 	.word	0x080184ca

0800b8e0 <TST_SET_lora_config>:




ATEerror_t TST_SET_lora_config(const char *buf, unsigned bufSize)
{
 800b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  s_loraParameter_t loraParamTmp;
  uint32_t sfSet[]={7,8,9,10,11,12};
 800b8e2:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <TST_SET_lora_config+0xc4>)
{
 800b8e4:	b09b      	sub	sp, #108	; 0x6c
  uint32_t sfSet[]={7,8,9,10,11,12};
 800b8e6:	ad0d      	add	r5, sp, #52	; 0x34
 800b8e8:	0019      	movs	r1, r3
 800b8ea:	002a      	movs	r2, r5
 800b8ec:	c9d0      	ldmia	r1!, {r4, r6, r7}
 800b8ee:	c2d0      	stmia	r2!, {r4, r6, r7}
 800b8f0:	c9d0      	ldmia	r1!, {r4, r6, r7}
 800b8f2:	c2d0      	stmia	r2!, {r4, r6, r7}
  uint32_t crDenSet[]={5,6,7,8};
 800b8f4:	ac09      	add	r4, sp, #36	; 0x24
 800b8f6:	0022      	movs	r2, r4
 800b8f8:	3318      	adds	r3, #24
 800b8fa:	cbc2      	ldmia	r3!, {r1, r6, r7}
 800b8fc:	c2c2      	stmia	r2!, {r1, r6, r7}
 800b8fe:	681b      	ldr	r3, [r3, #0]
  uint32_t crNum;

  if (8 != tiny_sscanf(buf, "%d:%d:%d:%d:%d/%d:%d:%d",
 800b900:	4929      	ldr	r1, [pc, #164]	; (800b9a8 <TST_SET_lora_config+0xc8>)
  uint32_t crDenSet[]={5,6,7,8};
 800b902:	6013      	str	r3, [r2, #0]
  if (8 != tiny_sscanf(buf, "%d:%d:%d:%d:%d/%d:%d:%d",
 800b904:	ab19      	add	r3, sp, #100	; 0x64
 800b906:	9305      	str	r3, [sp, #20]
 800b908:	ab18      	add	r3, sp, #96	; 0x60
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	ab17      	add	r3, sp, #92	; 0x5c
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	ab08      	add	r3, sp, #32
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	ab16      	add	r3, sp, #88	; 0x58
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	ab15      	add	r3, sp, #84	; 0x54
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	aa13      	add	r2, sp, #76	; 0x4c
 800b91e:	ab14      	add	r3, sp, #80	; 0x50
 800b920:	f000 fa66 	bl	800bdf0 <tiny_sscanf>
 800b924:	2808      	cmp	r0, #8
 800b926:	d002      	beq.n	800b92e <TST_SET_lora_config+0x4e>
                       &crNum,
                       &loraParamTmp.codingRate,
                       &loraParamTmp.lna,
                       &loraParamTmp.paBoost) )
  {
    return AT_PARAM_ERROR;
 800b928:	2002      	movs	r0, #2
  loraParam.freqMHz =loraParamTmp.freqMHz;
  loraParam.lna =loraParamTmp.lna;
  loraParam.paBoost = loraParamTmp.paBoost;

  return AT_OK;
}
 800b92a:	b01b      	add	sp, #108	; 0x6c
 800b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  loraParam.freqMHz =loraParamTmp.freqMHz;
 800b92e:	4b1f      	ldr	r3, [pc, #124]	; (800b9ac <TST_SET_lora_config+0xcc>)
 800b930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b932:	601a      	str	r2, [r3, #0]
  loraParam.power =loraParamTmp.power;
 800b934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b936:	9207      	str	r2, [sp, #28]
 800b938:	605a      	str	r2, [r3, #4]
  if ( loraParamTmp.bandwidth== 125 )
 800b93a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b93c:	2a7d      	cmp	r2, #125	; 0x7d
 800b93e:	d127      	bne.n	800b990 <TST_SET_lora_config+0xb0>
    loraParam.bandwidth= BW_125kHz;
 800b940:	2200      	movs	r2, #0
    loraParam.bandwidth= BW_500kHz;
 800b942:	609a      	str	r2, [r3, #8]
  if ( !is_in_list(loraParamTmp.sf, sfSet, sizeof(sfSet) ) )
 800b944:	2200      	movs	r2, #0
{
  bool status =false;
  for (int i=0; i <list_len; i++)
  {
    if (list[i] == in)
      status =true;
 800b946:	2001      	movs	r0, #1
  bool status =false;
 800b948:	0016      	movs	r6, r2
  if ( !is_in_list(loraParamTmp.sf, sfSet, sizeof(sfSet) ) )
 800b94a:	9916      	ldr	r1, [sp, #88]	; 0x58
    if (list[i] == in)
 800b94c:	58af      	ldr	r7, [r5, r2]
 800b94e:	42b9      	cmp	r1, r7
 800b950:	d100      	bne.n	800b954 <TST_SET_lora_config+0x74>
      status =true;
 800b952:	0006      	movs	r6, r0
 800b954:	3204      	adds	r2, #4
  for (int i=0; i <list_len; i++)
 800b956:	2a60      	cmp	r2, #96	; 0x60
 800b958:	d1f8      	bne.n	800b94c <TST_SET_lora_config+0x6c>
  if ( !is_in_list(loraParamTmp.sf, sfSet, sizeof(sfSet) ) )
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d0e4      	beq.n	800b928 <TST_SET_lora_config+0x48>
  if (crNum != 4)
 800b95e:	9a08      	ldr	r2, [sp, #32]
    loraParam.sf =loraParamTmp.sf;
 800b960:	60d9      	str	r1, [r3, #12]
  if (crNum != 4)
 800b962:	2a04      	cmp	r2, #4
 800b964:	d1e0      	bne.n	800b928 <TST_SET_lora_config+0x48>
  bool status =false;
 800b966:	2000      	movs	r0, #0
  if ( !is_in_list(loraParamTmp.codingRate, crDenSet, sizeof(crDenSet) ) )
 800b968:	0001      	movs	r1, r0
 800b96a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    if (list[i] == in)
 800b96c:	5865      	ldr	r5, [r4, r1]
 800b96e:	42aa      	cmp	r2, r5
 800b970:	d100      	bne.n	800b974 <TST_SET_lora_config+0x94>
      status =true;
 800b972:	0030      	movs	r0, r6
 800b974:	3104      	adds	r1, #4
  for (int i=0; i <list_len; i++)
 800b976:	2940      	cmp	r1, #64	; 0x40
 800b978:	d1f8      	bne.n	800b96c <TST_SET_lora_config+0x8c>
  if ( !is_in_list(loraParamTmp.codingRate, crDenSet, sizeof(crDenSet) ) )
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d0d4      	beq.n	800b928 <TST_SET_lora_config+0x48>
    loraParam.codingRate =loraParamTmp.codingRate-4;
 800b97e:	3a04      	subs	r2, #4
 800b980:	611a      	str	r2, [r3, #16]
  loraParam.lna =loraParamTmp.lna;
 800b982:	9a18      	ldr	r2, [sp, #96]	; 0x60
  return AT_OK;
 800b984:	2000      	movs	r0, #0
  loraParam.lna =loraParamTmp.lna;
 800b986:	9207      	str	r2, [sp, #28]
 800b988:	615a      	str	r2, [r3, #20]
  loraParam.paBoost = loraParamTmp.paBoost;
 800b98a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b98c:	619a      	str	r2, [r3, #24]
  return AT_OK;
 800b98e:	e7cc      	b.n	800b92a <TST_SET_lora_config+0x4a>
  else if( loraParamTmp.bandwidth== 250 )
 800b990:	2afa      	cmp	r2, #250	; 0xfa
 800b992:	d101      	bne.n	800b998 <TST_SET_lora_config+0xb8>
    loraParam.bandwidth= BW_250kHz;
 800b994:	3af9      	subs	r2, #249	; 0xf9
 800b996:	e7d4      	b.n	800b942 <TST_SET_lora_config+0x62>
  else if( loraParamTmp.bandwidth== 500 )
 800b998:	21fa      	movs	r1, #250	; 0xfa
 800b99a:	0049      	lsls	r1, r1, #1
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d1c3      	bne.n	800b928 <TST_SET_lora_config+0x48>
    loraParam.bandwidth= BW_500kHz;
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	e7ce      	b.n	800b942 <TST_SET_lora_config+0x62>
 800b9a4:	08016ad8 	.word	0x08016ad8
 800b9a8:	080184da 	.word	0x080184da
 800b9ac:	20000a9c 	.word	0x20000a9c

0800b9b0 <TST_get_lora_config>:
{
 800b9b0:	b530      	push	{r4, r5, lr}
 800b9b2:	b085      	sub	sp, #20
  uint32_t bwSet[]={125, 250, 500};
 800b9b4:	ad01      	add	r5, sp, #4
 800b9b6:	002a      	movs	r2, r5
 800b9b8:	4b13      	ldr	r3, [pc, #76]	; (800ba08 <TST_get_lora_config+0x58>)
 800b9ba:	3328      	adds	r3, #40	; 0x28
 800b9bc:	cb13      	ldmia	r3!, {r0, r1, r4}
 800b9be:	c213      	stmia	r2!, {r0, r1, r4}
  AT_PRINTF("Freq= %d MHz\r\n", loraParam.freqMHz);
 800b9c0:	4c12      	ldr	r4, [pc, #72]	; (800ba0c <TST_get_lora_config+0x5c>)
 800b9c2:	4813      	ldr	r0, [pc, #76]	; (800ba10 <TST_get_lora_config+0x60>)
 800b9c4:	6821      	ldr	r1, [r4, #0]
 800b9c6:	f008 fe49 	bl	801465c <TraceSend>
  AT_PRINTF("Power= %d dBm\r\n", loraParam.power);
 800b9ca:	6861      	ldr	r1, [r4, #4]
 800b9cc:	4811      	ldr	r0, [pc, #68]	; (800ba14 <TST_get_lora_config+0x64>)
 800b9ce:	f008 fe45 	bl	801465c <TraceSend>
  AT_PRINTF("Bandwidth= %d kHz\r\n", bwSet[loraParam.bandwidth] );
 800b9d2:	68a3      	ldr	r3, [r4, #8]
 800b9d4:	4810      	ldr	r0, [pc, #64]	; (800ba18 <TST_get_lora_config+0x68>)
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	5959      	ldr	r1, [r3, r5]
 800b9da:	f008 fe3f 	bl	801465c <TraceSend>
  AT_PRINTF("SF= %d \r\n", loraParam.sf);
 800b9de:	68e1      	ldr	r1, [r4, #12]
 800b9e0:	480e      	ldr	r0, [pc, #56]	; (800ba1c <TST_get_lora_config+0x6c>)
 800b9e2:	f008 fe3b 	bl	801465c <TraceSend>
  AT_PRINTF("CR= 4/%d \r\n", loraParam.codingRate+4);
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	480d      	ldr	r0, [pc, #52]	; (800ba20 <TST_get_lora_config+0x70>)
 800b9ea:	1d19      	adds	r1, r3, #4
 800b9ec:	f008 fe36 	bl	801465c <TraceSend>
  AT_PRINTF("LNA State =%d  \r\n", loraParam.lna);
 800b9f0:	6961      	ldr	r1, [r4, #20]
 800b9f2:	480c      	ldr	r0, [pc, #48]	; (800ba24 <TST_get_lora_config+0x74>)
 800b9f4:	f008 fe32 	bl	801465c <TraceSend>
  AT_PRINTF("PA Boost State =%d  \r\n", loraParam.paBoost);
 800b9f8:	69a1      	ldr	r1, [r4, #24]
 800b9fa:	480b      	ldr	r0, [pc, #44]	; (800ba28 <TST_get_lora_config+0x78>)
 800b9fc:	f008 fe2e 	bl	801465c <TraceSend>
}
 800ba00:	2000      	movs	r0, #0
 800ba02:	b005      	add	sp, #20
 800ba04:	bd30      	pop	{r4, r5, pc}
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	08016ad8 	.word	0x08016ad8
 800ba0c:	20000a9c 	.word	0x20000a9c
 800ba10:	08018514 	.word	0x08018514
 800ba14:	08018523 	.word	0x08018523
 800ba18:	08018533 	.word	0x08018533
 800ba1c:	08018547 	.word	0x08018547
 800ba20:	08018551 	.word	0x08018551
 800ba24:	0801855d 	.word	0x0801855d
 800ba28:	0801856f 	.word	0x0801856f

0800ba2c <TST_stop>:
{
 800ba2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( (TestState & RX_TEST_RSSI) == RX_TEST_RSSI )
 800ba2e:	4c0e      	ldr	r4, [pc, #56]	; (800ba68 <TST_stop+0x3c>)
 800ba30:	7823      	ldrb	r3, [r4, #0]
 800ba32:	079b      	lsls	r3, r3, #30
 800ba34:	d50e      	bpl.n	800ba54 <TST_stop+0x28>
    uint8_t rssiReg =  Radio.Read( REG_RSSIVALUE );
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <TST_stop+0x40>)
 800ba38:	2011      	movs	r0, #17
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	4798      	blx	r3
    AT_PRINTF("RSSI=%d,%d dBm\n\r", -(rssiReg/2), rssiReg&0x1?5:0);
 800ba40:	2205      	movs	r2, #5
 800ba42:	0841      	lsrs	r1, r0, #1
 800ba44:	07c0      	lsls	r0, r0, #31
 800ba46:	17c0      	asrs	r0, r0, #31
 800ba48:	b2c9      	uxtb	r1, r1
 800ba4a:	4002      	ands	r2, r0
 800ba4c:	4249      	negs	r1, r1
 800ba4e:	4808      	ldr	r0, [pc, #32]	; (800ba70 <TST_stop+0x44>)
 800ba50:	f008 fe04 	bl	801465c <TraceSend>
  TestState = 0;
 800ba54:	2500      	movs	r5, #0
  PRINTF("Test Stop\n\r");
 800ba56:	4807      	ldr	r0, [pc, #28]	; (800ba74 <TST_stop+0x48>)
  TestState = 0;
 800ba58:	7025      	strb	r5, [r4, #0]
  PRINTF("Test Stop\n\r");
 800ba5a:	f008 fdff 	bl	801465c <TraceSend>
  SX1276SetOpMode( RF_OPMODE_SLEEP );
 800ba5e:	0028      	movs	r0, r5
 800ba60:	f009 fda2 	bl	80155a8 <SX1276SetOpMode>
}
 800ba64:	0028      	movs	r0, r5
 800ba66:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ba68:	20001060 	.word	0x20001060
 800ba6c:	08018acc 	.word	0x08018acc
 800ba70:	08018586 	.word	0x08018586
 800ba74:	08018597 	.word	0x08018597

0800ba78 <TST_TX_LoraStart>:
{
 800ba78:	b570      	push	{r4, r5, r6, lr}
  uint8_t bufTx[]={0x00, 0x11, 0x22, 0x33,
 800ba7a:	491d      	ldr	r1, [pc, #116]	; (800baf0 <TST_TX_LoraStart+0x78>)
{
 800ba7c:	b090      	sub	sp, #64	; 0x40
  uint8_t bufTx[]={0x00, 0x11, 0x22, 0x33,
 800ba7e:	2210      	movs	r2, #16
 800ba80:	3134      	adds	r1, #52	; 0x34
 800ba82:	a80c      	add	r0, sp, #48	; 0x30
 800ba84:	f7f7 ff72 	bl	800396c <memcpy>
  if ( (TestState & TX_TEST_LORA) != TX_TEST_LORA )
 800ba88:	4a1a      	ldr	r2, [pc, #104]	; (800baf4 <TST_TX_LoraStart+0x7c>)
 800ba8a:	2304      	movs	r3, #4
 800ba8c:	7811      	ldrb	r1, [r2, #0]
    return AT_BUSY_ERROR;
 800ba8e:	2003      	movs	r0, #3
  if ( (TestState & TX_TEST_LORA) != TX_TEST_LORA )
 800ba90:	000c      	movs	r4, r1
 800ba92:	401c      	ands	r4, r3
 800ba94:	d129      	bne.n	800baea <TST_TX_LoraStart+0x72>
    Radio.SetModem( MODEM_LORA );
 800ba96:	4d18      	ldr	r5, [pc, #96]	; (800baf8 <TST_TX_LoraStart+0x80>)
    TestState |= TX_TEST_LORA;
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	7013      	strb	r3, [r2, #0]
    Radio.SetModem( MODEM_LORA );
 800ba9c:	692b      	ldr	r3, [r5, #16]
 800ba9e:	3802      	subs	r0, #2
 800baa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa2:	4798      	blx	r3
    Radio.SetChannel( loraParam.freqMHz * 1000000 );
 800baa4:	4e15      	ldr	r6, [pc, #84]	; (800bafc <TST_TX_LoraStart+0x84>)
 800baa6:	4816      	ldr	r0, [pc, #88]	; (800bb00 <TST_TX_LoraStart+0x88>)
 800baa8:	6833      	ldr	r3, [r6, #0]
 800baaa:	4358      	muls	r0, r3
 800baac:	696b      	ldr	r3, [r5, #20]
 800baae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bab0:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, loraParam.power, 0, loraParam.bandwidth,
 800bab2:	2104      	movs	r1, #4
 800bab4:	4b13      	ldr	r3, [pc, #76]	; (800bb04 <TST_TX_LoraStart+0x8c>)
 800bab6:	5671      	ldrsb	r1, [r6, r1]
 800bab8:	2001      	movs	r0, #1
 800baba:	9308      	str	r3, [sp, #32]
 800babc:	2308      	movs	r3, #8
 800babe:	9004      	str	r0, [sp, #16]
 800bac0:	9407      	str	r4, [sp, #28]
 800bac2:	9406      	str	r4, [sp, #24]
 800bac4:	9405      	str	r4, [sp, #20]
 800bac6:	9403      	str	r4, [sp, #12]
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	7b33      	ldrb	r3, [r6, #12]
 800bacc:	0022      	movs	r2, r4
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	68f3      	ldr	r3, [r6, #12]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bad6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad8:	68b3      	ldr	r3, [r6, #8]
 800bada:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800badc:	47b0      	blx	r6
    Radio.Send( bufTx, sizeof(bufTx) );
 800bade:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bae0:	a80c      	add	r0, sp, #48	; 0x30
 800bae2:	2110      	movs	r1, #16
 800bae4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bae6:	4798      	blx	r3
    return AT_OK;
 800bae8:	0020      	movs	r0, r4
}
 800baea:	b010      	add	sp, #64	; 0x40
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	08016ad8 	.word	0x08016ad8
 800baf4:	20001060 	.word	0x20001060
 800baf8:	08018acc 	.word	0x08018acc
 800bafc:	20000a9c 	.word	0x20000a9c
 800bb00:	000f4240 	.word	0x000f4240
 800bb04:	00000bb8 	.word	0x00000bb8

0800bb08 <TST_RX_LoraStart>:
{
 800bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (TestState & RX_TEST_LORA) != RX_TEST_LORA )
 800bb0a:	4a21      	ldr	r2, [pc, #132]	; (800bb90 <TST_RX_LoraStart+0x88>)
 800bb0c:	2708      	movs	r7, #8
 800bb0e:	7813      	ldrb	r3, [r2, #0]
{
 800bb10:	b08d      	sub	sp, #52	; 0x34
  if ( (TestState & RX_TEST_LORA) != RX_TEST_LORA )
 800bb12:	001c      	movs	r4, r3
    return AT_BUSY_ERROR;
 800bb14:	2003      	movs	r0, #3
  if ( (TestState & RX_TEST_LORA) != RX_TEST_LORA )
 800bb16:	403c      	ands	r4, r7
 800bb18:	d12e      	bne.n	800bb78 <TST_RX_LoraStart+0x70>
    Radio.SetModem( MODEM_LORA );
 800bb1a:	4d1e      	ldr	r5, [pc, #120]	; (800bb94 <TST_RX_LoraStart+0x8c>)
    TestState |= RX_TEST_LORA;
 800bb1c:	433b      	orrs	r3, r7
 800bb1e:	7013      	strb	r3, [r2, #0]
    Radio.SetModem( MODEM_LORA );
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	3802      	subs	r0, #2
 800bb24:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb26:	4798      	blx	r3
    Radio.SetChannel( loraParam.freqMHz );
 800bb28:	4e1b      	ldr	r6, [pc, #108]	; (800bb98 <TST_RX_LoraStart+0x90>)
 800bb2a:	696b      	ldr	r3, [r5, #20]
 800bb2c:	6830      	ldr	r0, [r6, #0]
 800bb2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb30:	4798      	blx	r3
    Radio.SetRxConfig( MODEM_LORA, loraParam.bandwidth, loraParam.sf,
 800bb32:	2205      	movs	r2, #5
 800bb34:	2001      	movs	r0, #1
 800bb36:	7b33      	ldrb	r3, [r6, #12]
 800bb38:	9202      	str	r2, [sp, #8]
 800bb3a:	6a2a      	ldr	r2, [r5, #32]
 800bb3c:	9408      	str	r4, [sp, #32]
 800bb3e:	9407      	str	r4, [sp, #28]
 800bb40:	9406      	str	r4, [sp, #24]
 800bb42:	9404      	str	r4, [sp, #16]
 800bb44:	9403      	str	r4, [sp, #12]
 800bb46:	9400      	str	r4, [sp, #0]
 800bb48:	9009      	str	r0, [sp, #36]	; 0x24
 800bb4a:	9005      	str	r0, [sp, #20]
 800bb4c:	9701      	str	r7, [sp, #4]
 800bb4e:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb50:	68b1      	ldr	r1, [r6, #8]
 800bb52:	68f2      	ldr	r2, [r6, #12]
 800bb54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bb56:	47a0      	blx	r4
    if (loraParam.lna ==0 )
 800bb58:	6973      	ldr	r3, [r6, #20]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10e      	bne.n	800bb7c <TST_RX_LoraStart+0x74>
      Radio.Write( REG_LR_LNA,0x20); //LNA off
 800bb5e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bb60:	200c      	movs	r0, #12
 800bb62:	2120      	movs	r1, #32
 800bb64:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb66:	4798      	blx	r3
      PRINTF(">>> LNA is OFF\n\r");
 800bb68:	480c      	ldr	r0, [pc, #48]	; (800bb9c <TST_RX_LoraStart+0x94>)
 800bb6a:	f008 fd77 	bl	801465c <TraceSend>
    Radio.Rx( 0 );
 800bb6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bb70:	2000      	movs	r0, #0
 800bb72:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb74:	4798      	blx	r3
    return AT_OK;
 800bb76:	2000      	movs	r0, #0
}
 800bb78:	b00d      	add	sp, #52	; 0x34
 800bb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PRINTF(">>> LNA is ON\n\r");
 800bb7c:	4808      	ldr	r0, [pc, #32]	; (800bba0 <TST_RX_LoraStart+0x98>)
 800bb7e:	f008 fd6d 	bl	801465c <TraceSend>
      Radio.Write( REG_LR_LNA,0x23); //LNA on
 800bb82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bb84:	2123      	movs	r1, #35	; 0x23
 800bb86:	200c      	movs	r0, #12
 800bb88:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb8a:	4798      	blx	r3
 800bb8c:	e7ef      	b.n	800bb6e <TST_RX_LoraStart+0x66>
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	20001060 	.word	0x20001060
 800bb94:	08018acc 	.word	0x08018acc
 800bb98:	20000a9c 	.word	0x20000a9c
 800bb9c:	080184b9 	.word	0x080184b9
 800bba0:	080184ca 	.word	0x080184ca

0800bba4 <tiny_vfscanf>:
/*
 * vfscanf
 */
static inline int
VFSCANF(const char *str, const char *fmt0, __va_list ap)
{
 800bba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba6:	4c8e      	ldr	r4, [pc, #568]	; (800bde0 <tiny_vfscanf+0x23c>)
 800bba8:	0017      	movs	r7, r2
 800bbaa:	44a5      	add	sp, r4
 800bbac:	000c      	movs	r4, r1
 800bbae:	9002      	str	r0, [sp, #8]
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
  fp_r = strlen(str);
 800bbb0:	f7f7 ff86 	bl	8003ac0 <strlen>
  u_char *fmt = (u_char *)fmt0;
 800bbb4:	0023      	movs	r3, r4

  nassigned = 0;
  nread = 0;
  base = 0;    /* XXX just to keep gcc happy */
 800bbb6:	2400      	movs	r4, #0
  fp_r = strlen(str);
 800bbb8:	9001      	str	r0, [sp, #4]
  nassigned = 0;
 800bbba:	9405      	str	r4, [sp, #20]
  for (;;) {
    c = *fmt++;
 800bbbc:	781d      	ldrb	r5, [r3, #0]
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	9203      	str	r2, [sp, #12]
    if (c == 0)
 800bbc2:	2d00      	cmp	r5, #0
 800bbc4:	d078      	beq.n	800bcb8 <tiny_vfscanf+0x114>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 800bbc6:	2d25      	cmp	r5, #37	; 0x25
 800bbc8:	d000      	beq.n	800bbcc <tiny_vfscanf+0x28>
 800bbca:	e07a      	b.n	800bcc2 <tiny_vfscanf+0x11e>
 800bbcc:	2200      	movs	r2, #0
      goto again;
#endif
    case 'h':
      if (*fmt == 'h') {
        fmt++;
        flags |= SHORTSHORT;
 800bbce:	2308      	movs	r3, #8
 800bbd0:	0011      	movs	r1, r2
 800bbd2:	469c      	mov	ip, r3
      flags |= SIZEINT;
      goto again;
#endif
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
      width = width * 10 + c - '0';
 800bbd4:	260a      	movs	r6, #10
    if (c != '%')
 800bbd6:	9803      	ldr	r0, [sp, #12]
again:    c = *fmt++;
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	7803      	ldrb	r3, [r0, #0]
    switch (c) {
 800bbe0:	2b58      	cmp	r3, #88	; 0x58
 800bbe2:	d05d      	beq.n	800bca0 <tiny_vfscanf+0xfc>
 800bbe4:	d848      	bhi.n	800bc78 <tiny_vfscanf+0xd4>
 800bbe6:	2b39      	cmp	r3, #57	; 0x39
 800bbe8:	d840      	bhi.n	800bc6c <tiny_vfscanf+0xc8>
 800bbea:	2b30      	cmp	r3, #48	; 0x30
 800bbec:	d300      	bcc.n	800bbf0 <tiny_vfscanf+0x4c>
 800bbee:	e07b      	b.n	800bce8 <tiny_vfscanf+0x144>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d100      	bne.n	800bbf6 <tiny_vfscanf+0x52>
 800bbf4:	e0f0      	b.n	800bdd8 <tiny_vfscanf+0x234>
 800bbf6:	2b25      	cmp	r3, #37	; 0x25
 800bbf8:	d063      	beq.n	800bcc2 <tiny_vfscanf+0x11e>
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 800bbfa:	9801      	ldr	r0, [sp, #4]
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	dd56      	ble.n	800bcae <tiny_vfscanf+0x10a>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d000      	beq.n	800bc06 <tiny_vfscanf+0x62>
 800bc04:	e06a      	b.n	800bcdc <tiny_vfscanf+0x138>
 800bc06:	4b77      	ldr	r3, [pc, #476]	; (800bde4 <tiny_vfscanf+0x240>)
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 800bc08:	3901      	subs	r1, #1
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d900      	bls.n	800bc10 <tiny_vfscanf+0x6c>
 800bc0e:	0019      	movs	r1, r3
        width = sizeof(buf) - 2;
      width++;
 800bc10:	1c4b      	adds	r3, r1, #1
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 800bc12:	25a0      	movs	r5, #160	; 0xa0
      width++;
 800bc14:	9306      	str	r3, [sp, #24]
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
 800bc16:	2300      	movs	r3, #0
      flags |= SIGNOK | NDIGITS;
 800bc18:	01ed      	lsls	r5, r5, #7
 800bc1a:	4315      	orrs	r5, r2
      sign_minus = 0;
 800bc1c:	9307      	str	r3, [sp, #28]
      value = 0;
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2300      	movs	r3, #0
      for (p = buf; width; width--) {
 800bc22:	a90f      	add	r1, sp, #60	; 0x3c
        break;
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 800bc24:	9104      	str	r1, [sp, #16]
        c = *fp_p;
 800bc26:	9902      	ldr	r1, [sp, #8]
 800bc28:	780e      	ldrb	r6, [r1, #0]
        switch (c) {
 800bc2a:	2e39      	cmp	r6, #57	; 0x39
 800bc2c:	d863      	bhi.n	800bcf6 <tiny_vfscanf+0x152>
 800bc2e:	2e30      	cmp	r6, #48	; 0x30
 800bc30:	d300      	bcc.n	800bc34 <tiny_vfscanf+0x90>
 800bc32:	e07b      	b.n	800bd2c <tiny_vfscanf+0x188>
 800bc34:	2e2b      	cmp	r6, #43	; 0x2b
 800bc36:	d100      	bne.n	800bc3a <tiny_vfscanf+0x96>
 800bc38:	e0b6      	b.n	800bda8 <tiny_vfscanf+0x204>
 800bc3a:	2e2d      	cmp	r6, #45	; 0x2d
 800bc3c:	d100      	bne.n	800bc40 <tiny_vfscanf+0x9c>
 800bc3e:	e0af      	b.n	800bda0 <tiny_vfscanf+0x1fc>
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 800bc40:	2180      	movs	r1, #128	; 0x80
 800bc42:	01c9      	lsls	r1, r1, #7
 800bc44:	4029      	ands	r1, r5
 800bc46:	d137      	bne.n	800bcb8 <tiny_vfscanf+0x114>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 800bc48:	9804      	ldr	r0, [sp, #16]
 800bc4a:	7001      	strb	r1, [r0, #0]
        if (sign_minus)
 800bc4c:	9907      	ldr	r1, [sp, #28]
 800bc4e:	2900      	cmp	r1, #0
 800bc50:	d004      	beq.n	800bc5c <tiny_vfscanf+0xb8>
          value = -value;
 800bc52:	0010      	movs	r0, r2
 800bc54:	0019      	movs	r1, r3
 800bc56:	2300      	movs	r3, #0
 800bc58:	4242      	negs	r2, r0
 800bc5a:	418b      	sbcs	r3, r1
 800bc5c:	1d39      	adds	r1, r7, #4
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
          *va_arg(ap, long *) = value;
 800bc5e:	000b      	movs	r3, r1
 800bc60:	6839      	ldr	r1, [r7, #0]
        if (flags & LONG)
 800bc62:	07e8      	lsls	r0, r5, #31
 800bc64:	d400      	bmi.n	800bc68 <tiny_vfscanf+0xc4>
 800bc66:	e0aa      	b.n	800bdbe <tiny_vfscanf+0x21a>
        else if (flags & SHORT)
          *va_arg(ap, short *) = value;
        else if (flags & SHORTSHORT)
          *va_arg(ap, char *) = value;
        else
          *va_arg(ap, int *) = value;
 800bc68:	600a      	str	r2, [r1, #0]
 800bc6a:	e0ab      	b.n	800bdc4 <tiny_vfscanf+0x220>
    switch (c) {
 800bc6c:	2b44      	cmp	r3, #68	; 0x44
 800bc6e:	d1c4      	bne.n	800bbfa <tiny_vfscanf+0x56>
      flags |= LONG;
 800bc70:	2301      	movs	r3, #1
      flags |= UNSIGNED;
 800bc72:	431a      	orrs	r2, r3
      base = 10;
 800bc74:	240a      	movs	r4, #10
 800bc76:	e017      	b.n	800bca8 <tiny_vfscanf+0x104>
    switch (c) {
 800bc78:	2b6c      	cmp	r3, #108	; 0x6c
 800bc7a:	d033      	beq.n	800bce4 <tiny_vfscanf+0x140>
 800bc7c:	d80c      	bhi.n	800bc98 <tiny_vfscanf+0xf4>
 800bc7e:	2b64      	cmp	r3, #100	; 0x64
 800bc80:	d0f8      	beq.n	800bc74 <tiny_vfscanf+0xd0>
 800bc82:	2b68      	cmp	r3, #104	; 0x68
 800bc84:	d1b9      	bne.n	800bbfa <tiny_vfscanf+0x56>
      if (*fmt == 'h') {
 800bc86:	7843      	ldrb	r3, [r0, #1]
 800bc88:	2b68      	cmp	r3, #104	; 0x68
 800bc8a:	d129      	bne.n	800bce0 <tiny_vfscanf+0x13c>
        fmt++;
 800bc8c:	1c83      	adds	r3, r0, #2
 800bc8e:	9303      	str	r3, [sp, #12]
        flags |= SHORTSHORT;
 800bc90:	4663      	mov	r3, ip
      flags |= LONG;
 800bc92:	431a      	orrs	r2, r3
    if (c != '%')
 800bc94:	9803      	ldr	r0, [sp, #12]
 800bc96:	e79f      	b.n	800bbd8 <tiny_vfscanf+0x34>
    switch (c) {
 800bc98:	2b75      	cmp	r3, #117	; 0x75
 800bc9a:	d029      	beq.n	800bcf0 <tiny_vfscanf+0x14c>
 800bc9c:	2b78      	cmp	r3, #120	; 0x78
 800bc9e:	d1ac      	bne.n	800bbfa <tiny_vfscanf+0x56>
      flags |= UNSIGNED;
 800bca0:	2380      	movs	r3, #128	; 0x80
      base = 16;
 800bca2:	2410      	movs	r4, #16
      flags |= UNSIGNED;
 800bca4:	011b      	lsls	r3, r3, #4
 800bca6:	431a      	orrs	r2, r3
    if (fp_r <= 0 && __srefill(fp))
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dcab      	bgt.n	800bc06 <tiny_vfscanf+0x62>
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 800bcae:	9b05      	ldr	r3, [sp, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <tiny_vfscanf+0x114>
 800bcb4:	3b01      	subs	r3, #1
      return (EOF);
 800bcb6:	9305      	str	r3, [sp, #20]
match_failure:
  return (nassigned);
}
 800bcb8:	9805      	ldr	r0, [sp, #20]
 800bcba:	2391      	movs	r3, #145	; 0x91
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	449d      	add	sp, r3
 800bcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (fp_r <= 0 && __srefill(fp))
 800bcc2:	9b01      	ldr	r3, [sp, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	ddf2      	ble.n	800bcae <tiny_vfscanf+0x10a>
      if (*fp_p != c)
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	429d      	cmp	r5, r3
 800bcce:	d1f3      	bne.n	800bcb8 <tiny_vfscanf+0x114>
      fp_r--, fp_p++;
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	9b02      	ldr	r3, [sp, #8]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	9302      	str	r3, [sp, #8]
      break;
 800bcdc:	9b03      	ldr	r3, [sp, #12]
 800bcde:	e76d      	b.n	800bbbc <tiny_vfscanf+0x18>
        flags |= SHORT;
 800bce0:	2304      	movs	r3, #4
 800bce2:	e7d6      	b.n	800bc92 <tiny_vfscanf+0xee>
      flags |= LONG;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e7d4      	b.n	800bc92 <tiny_vfscanf+0xee>
      width = width * 10 + c - '0';
 800bce8:	4371      	muls	r1, r6
 800bcea:	3930      	subs	r1, #48	; 0x30
 800bcec:	1859      	adds	r1, r3, r1
      goto again;
 800bcee:	e7d1      	b.n	800bc94 <tiny_vfscanf+0xf0>
      flags |= UNSIGNED;
 800bcf0:	2380      	movs	r3, #128	; 0x80
 800bcf2:	011b      	lsls	r3, r3, #4
 800bcf4:	e7bd      	b.n	800bc72 <tiny_vfscanf+0xce>
        switch (c) {
 800bcf6:	2e41      	cmp	r6, #65	; 0x41
 800bcf8:	d3a2      	bcc.n	800bc40 <tiny_vfscanf+0x9c>
 800bcfa:	2e46      	cmp	r6, #70	; 0x46
 800bcfc:	d93c      	bls.n	800bd78 <tiny_vfscanf+0x1d4>
 800bcfe:	0031      	movs	r1, r6
 800bd00:	3961      	subs	r1, #97	; 0x61
 800bd02:	2905      	cmp	r1, #5
 800bd04:	d89c      	bhi.n	800bc40 <tiny_vfscanf+0x9c>
          if (base <= 10)
 800bd06:	2c0a      	cmp	r4, #10
 800bd08:	dd9a      	ble.n	800bc40 <tiny_vfscanf+0x9c>
          flags &= ~(SIGNOK | NDIGITS);
 800bd0a:	4937      	ldr	r1, [pc, #220]	; (800bde8 <tiny_vfscanf+0x244>)
          value = value * base + c - 'a' + 10;
 800bd0c:	0020      	movs	r0, r4
          flags &= ~(SIGNOK | NDIGITS);
 800bd0e:	400d      	ands	r5, r1
          value = value * base + c - 'a' + 10;
 800bd10:	17e1      	asrs	r1, r4, #31
 800bd12:	f7f5 f925 	bl	8000f60 <__aeabi_lmul>
 800bd16:	2257      	movs	r2, #87	; 0x57
 800bd18:	4252      	negs	r2, r2
 800bd1a:	17d3      	asrs	r3, r2, #31
 800bd1c:	1812      	adds	r2, r2, r0
 800bd1e:	414b      	adcs	r3, r1
 800bd20:	2100      	movs	r1, #0
 800bd22:	960c      	str	r6, [sp, #48]	; 0x30
 800bd24:	910d      	str	r1, [sp, #52]	; 0x34
 800bd26:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd28:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd2a:	e00f      	b.n	800bd4c <tiny_vfscanf+0x1a8>
          flags &= ~(SIGNOK | NDIGITS);
 800bd2c:	492e      	ldr	r1, [pc, #184]	; (800bde8 <tiny_vfscanf+0x244>)
          value = value * base + c - '0';
 800bd2e:	0020      	movs	r0, r4
          flags &= ~(SIGNOK | NDIGITS);
 800bd30:	400d      	ands	r5, r1
          value = value * base + c - '0';
 800bd32:	17e1      	asrs	r1, r4, #31
 800bd34:	f7f5 f914 	bl	8000f60 <__aeabi_lmul>
 800bd38:	2230      	movs	r2, #48	; 0x30
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	17d3      	asrs	r3, r2, #31
 800bd3e:	1812      	adds	r2, r2, r0
 800bd40:	414b      	adcs	r3, r1
 800bd42:	2100      	movs	r1, #0
 800bd44:	9608      	str	r6, [sp, #32]
 800bd46:	9109      	str	r1, [sp, #36]	; 0x24
 800bd48:	9808      	ldr	r0, [sp, #32]
 800bd4a:	9909      	ldr	r1, [sp, #36]	; 0x24
          value = value * base + c - 'A' + 10;
 800bd4c:	1812      	adds	r2, r2, r0
 800bd4e:	414b      	adcs	r3, r1
        *p++ = c;
 800bd50:	9804      	ldr	r0, [sp, #16]
 800bd52:	9904      	ldr	r1, [sp, #16]
 800bd54:	7006      	strb	r6, [r0, #0]
        if (--fp_r > 0)
 800bd56:	9801      	ldr	r0, [sp, #4]
        *p++ = c;
 800bd58:	3101      	adds	r1, #1
        if (--fp_r > 0)
 800bd5a:	3801      	subs	r0, #1
 800bd5c:	9001      	str	r0, [sp, #4]
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d008      	beq.n	800bd74 <tiny_vfscanf+0x1d0>
          fp_p++;
 800bd62:	9802      	ldr	r0, [sp, #8]
 800bd64:	3001      	adds	r0, #1
 800bd66:	9002      	str	r0, [sp, #8]
      for (p = buf; width; width--) {
 800bd68:	9806      	ldr	r0, [sp, #24]
 800bd6a:	3801      	subs	r0, #1
 800bd6c:	9006      	str	r0, [sp, #24]
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d000      	beq.n	800bd74 <tiny_vfscanf+0x1d0>
 800bd72:	e757      	b.n	800bc24 <tiny_vfscanf+0x80>
        *p++ = c;
 800bd74:	9104      	str	r1, [sp, #16]
 800bd76:	e763      	b.n	800bc40 <tiny_vfscanf+0x9c>
          if (base <= 10)
 800bd78:	2c0a      	cmp	r4, #10
 800bd7a:	dc00      	bgt.n	800bd7e <tiny_vfscanf+0x1da>
 800bd7c:	e760      	b.n	800bc40 <tiny_vfscanf+0x9c>
          flags &= ~(SIGNOK | NDIGITS);
 800bd7e:	491a      	ldr	r1, [pc, #104]	; (800bde8 <tiny_vfscanf+0x244>)
          value = value * base + c - 'A' + 10;
 800bd80:	0020      	movs	r0, r4
          flags &= ~(SIGNOK | NDIGITS);
 800bd82:	400d      	ands	r5, r1
          value = value * base + c - 'A' + 10;
 800bd84:	17e1      	asrs	r1, r4, #31
 800bd86:	f7f5 f8eb 	bl	8000f60 <__aeabi_lmul>
 800bd8a:	2237      	movs	r2, #55	; 0x37
 800bd8c:	4252      	negs	r2, r2
 800bd8e:	17d3      	asrs	r3, r2, #31
 800bd90:	1812      	adds	r2, r2, r0
 800bd92:	414b      	adcs	r3, r1
 800bd94:	2100      	movs	r1, #0
 800bd96:	960a      	str	r6, [sp, #40]	; 0x28
 800bd98:	910b      	str	r1, [sp, #44]	; 0x2c
 800bd9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd9e:	e7d5      	b.n	800bd4c <tiny_vfscanf+0x1a8>
          if (!(flags & HAVESIGN)) {
 800bda0:	04a9      	lsls	r1, r5, #18
 800bda2:	d401      	bmi.n	800bda8 <tiny_vfscanf+0x204>
            sign_minus = 1;
 800bda4:	2101      	movs	r1, #1
 800bda6:	9107      	str	r1, [sp, #28]
          if (flags & SIGNOK) {
 800bda8:	2180      	movs	r1, #128	; 0x80
 800bdaa:	0149      	lsls	r1, r1, #5
 800bdac:	420d      	tst	r5, r1
 800bdae:	d100      	bne.n	800bdb2 <tiny_vfscanf+0x20e>
 800bdb0:	e746      	b.n	800bc40 <tiny_vfscanf+0x9c>
            flags &= ~SIGNOK;
 800bdb2:	490e      	ldr	r1, [pc, #56]	; (800bdec <tiny_vfscanf+0x248>)
 800bdb4:	400d      	ands	r5, r1
            flags |= HAVESIGN;
 800bdb6:	2180      	movs	r1, #128	; 0x80
 800bdb8:	0189      	lsls	r1, r1, #6
 800bdba:	430d      	orrs	r5, r1
            goto ok;
 800bdbc:	e7c8      	b.n	800bd50 <tiny_vfscanf+0x1ac>
        else if (flags & SHORT)
 800bdbe:	0768      	lsls	r0, r5, #29
 800bdc0:	d505      	bpl.n	800bdce <tiny_vfscanf+0x22a>
          *va_arg(ap, short *) = value;
 800bdc2:	800a      	strh	r2, [r1, #0]
        nassigned++;
 800bdc4:	9a05      	ldr	r2, [sp, #20]
      break;
 800bdc6:	001f      	movs	r7, r3
        nassigned++;
 800bdc8:	3201      	adds	r2, #1
 800bdca:	9205      	str	r2, [sp, #20]
      break;
 800bdcc:	e786      	b.n	800bcdc <tiny_vfscanf+0x138>
        else if (flags & SHORTSHORT)
 800bdce:	0728      	lsls	r0, r5, #28
 800bdd0:	d400      	bmi.n	800bdd4 <tiny_vfscanf+0x230>
 800bdd2:	e749      	b.n	800bc68 <tiny_vfscanf+0xc4>
          *va_arg(ap, char *) = value;
 800bdd4:	700a      	strb	r2, [r1, #0]
 800bdd6:	e7f5      	b.n	800bdc4 <tiny_vfscanf+0x220>
      return (EOF);
 800bdd8:	2301      	movs	r3, #1
 800bdda:	425b      	negs	r3, r3
 800bddc:	e76b      	b.n	800bcb6 <tiny_vfscanf+0x112>
 800bdde:	46c0      	nop			; (mov r8, r8)
 800bde0:	fffffdbc 	.word	0xfffffdbc
 800bde4:	000001ff 	.word	0x000001ff
 800bde8:	ffffafff 	.word	0xffffafff
 800bdec:	ffffefff 	.word	0xffffefff

0800bdf0 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 800bdf0:	b40e      	push	{r1, r2, r3}
 800bdf2:	b503      	push	{r0, r1, lr}
 800bdf4:	aa03      	add	r2, sp, #12
 800bdf6:	ca02      	ldmia	r2!, {r1}
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 800bdf8:	9201      	str	r2, [sp, #4]
  ret = tiny_vfscanf(str, fmt, ap);
 800bdfa:	f7ff fed3 	bl	800bba4 <tiny_vfscanf>
  va_end(ap);
  return (ret);
}
 800bdfe:	b002      	add	sp, #8
 800be00:	bc08      	pop	{r3}
 800be02:	b003      	add	sp, #12
 800be04:	4718      	bx	r3
	...

0800be08 <writeEEPROMByte>:
 * writeEEPROMByte allows to write a byte(uint8_t) to the internal eeprom
 * @param   address  starts at 0, the max size depends on the uc type
 * @param   data     byte (uint8_t)
 * @return  status   internal HAL_Status
 */
HAL_StatusTypeDef writeEEPROMByte(uint32_t address, uint32_t data) {
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	000d      	movs	r5, r1

    HAL_StatusTypeDef  status;

    address = address*4 + EEPROM_BASE_ADDRESS;
 800be0c:	4b06      	ldr	r3, [pc, #24]	; (800be28 <writeEEPROMByte+0x20>)
 800be0e:	18c4      	adds	r4, r0, r3
    HAL_FLASHEx_DATAEEPROM_Unlock();  // Unprotect the EEPROM to allow writing
 800be10:	f002 fdc0 	bl	800e994 <HAL_FLASHEx_DATAEEPROM_Unlock>
    address = address*4 + EEPROM_BASE_ADDRESS;
 800be14:	00a1      	lsls	r1, r4, #2
    status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, address, data);
 800be16:	002a      	movs	r2, r5
 800be18:	2002      	movs	r0, #2
 800be1a:	f002 fdd7 	bl	800e9cc <HAL_FLASHEx_DATAEEPROM_Program>
 800be1e:	0004      	movs	r4, r0
    HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 800be20:	f002 fdca 	bl	800e9b8 <HAL_FLASHEx_DATAEEPROM_Lock>

    return status;
}
 800be24:	0020      	movs	r0, r4
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	02020000 	.word	0x02020000

0800be2c <readEEPROMByte>:
 */
uint32_t readEEPROMByte(uint32_t address) {

    uint32_t data = 0;

    address = address*4 + EEPROM_BASE_ADDRESS;
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <readEEPROMByte+0xc>)
 800be2e:	18c0      	adds	r0, r0, r3
 800be30:	0080      	lsls	r0, r0, #2
    data = *(__IO uint32_t*)address;
 800be32:	6800      	ldr	r0, [r0, #0]

    return data;
}
 800be34:	4770      	bx	lr
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	02020000 	.word	0x02020000

0800be3c <HAL_InitTick>:
 800be3c:	2000      	movs	r0, #0
 800be3e:	4770      	bx	lr

0800be40 <HAL_Delay>:
 800be40:	b507      	push	{r0, r1, r2, lr}
 800be42:	9001      	str	r0, [sp, #4]
 800be44:	9801      	ldr	r0, [sp, #4]
 800be46:	f7fe fc3f 	bl	800a6c8 <HW_RTC_DelayMs>
 800be4a:	bd07      	pop	{r0, r1, r2, pc}

0800be4c <HAL_GetTick>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	f7fe fb53 	bl	800a4f8 <HW_RTC_GetTimerValue>
 800be52:	bd10      	pop	{r4, pc}

0800be54 <HAL_MspInit>:
 800be54:	2380      	movs	r3, #128	; 0x80
 800be56:	4a0a      	ldr	r2, [pc, #40]	; (800be80 <HAL_MspInit+0x2c>)
 800be58:	055b      	lsls	r3, r3, #21
 800be5a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800be5c:	b510      	push	{r4, lr}
 800be5e:	430b      	orrs	r3, r1
 800be60:	6393      	str	r3, [r2, #56]	; 0x38
 800be62:	f002 f9d3 	bl	800e20c <HAL_PWR_DisablePVD>
 800be66:	f002 f9e3 	bl	800e230 <HAL_PWREx_EnableUltraLowPower>
 800be6a:	2308      	movs	r3, #8
 800be6c:	4a05      	ldr	r2, [pc, #20]	; (800be84 <HAL_MspInit+0x30>)
 800be6e:	6811      	ldr	r1, [r2, #0]
 800be70:	430b      	orrs	r3, r1
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	f002 f9d2 	bl	800e21c <HAL_PWREx_EnableFastWakeUp>
 800be78:	f7fc ff50 	bl	8008d1c <HW_GpioInit>
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	40021000 	.word	0x40021000
 800be84:	40022000 	.word	0x40022000

0800be88 <HAL_RTC_MspInit>:
 800be88:	2304      	movs	r3, #4
 800be8a:	b500      	push	{lr}
 800be8c:	b099      	sub	sp, #100	; 0x64
 800be8e:	930a      	str	r3, [sp, #40]	; 0x28
 800be90:	2300      	movs	r3, #0
 800be92:	9314      	str	r3, [sp, #80]	; 0x50
 800be94:	3301      	adds	r3, #1
 800be96:	33ff      	adds	r3, #255	; 0xff
 800be98:	a80a      	add	r0, sp, #40	; 0x28
 800be9a:	930c      	str	r3, [sp, #48]	; 0x30
 800be9c:	f001 f96a 	bl	800d174 <HAL_RCC_OscConfig>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d001      	beq.n	800bea8 <HAL_RTC_MspInit+0x20>
 800bea4:	f7fe fa16 	bl	800a2d4 <Error_Handler>
 800bea8:	2320      	movs	r3, #32
 800beaa:	9301      	str	r3, [sp, #4]
 800beac:	2380      	movs	r3, #128	; 0x80
 800beae:	a801      	add	r0, sp, #4
 800beb0:	025b      	lsls	r3, r3, #9
 800beb2:	9302      	str	r3, [sp, #8]
 800beb4:	f001 fce6 	bl	800d884 <HAL_RCCEx_PeriphCLKConfig>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d001      	beq.n	800bec0 <HAL_RTC_MspInit+0x38>
 800bebc:	f7fe fa0a 	bl	800a2d4 <Error_Handler>
 800bec0:	2380      	movs	r3, #128	; 0x80
 800bec2:	4a07      	ldr	r2, [pc, #28]	; (800bee0 <HAL_RTC_MspInit+0x58>)
 800bec4:	02db      	lsls	r3, r3, #11
 800bec6:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800bec8:	2002      	movs	r0, #2
 800beca:	430b      	orrs	r3, r1
 800becc:	6513      	str	r3, [r2, #80]	; 0x50
 800bece:	2200      	movs	r2, #0
 800bed0:	0011      	movs	r1, r2
 800bed2:	f001 feb9 	bl	800dc48 <HAL_NVIC_SetPriority>
 800bed6:	2002      	movs	r0, #2
 800bed8:	f001 fee6 	bl	800dca8 <HAL_NVIC_EnableIRQ>
 800bedc:	b019      	add	sp, #100	; 0x64
 800bede:	bd00      	pop	{pc}
 800bee0:	40021000 	.word	0x40021000

0800bee4 <HAL_RTC_AlarmAEventCallback>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	f008 f863 	bl	8013fb0 <TimerIrqHandler>
 800beea:	bd10      	pop	{r4, pc}

0800beec <HAL_GPIO_EXTI_Callback>:
 800beec:	b510      	push	{r4, lr}
 800beee:	f7fe fa7d 	bl	800a3ec <HW_GPIO_IrqHandler>
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <MSP_GetIRQn>:
 800bef4:	3801      	subs	r0, #1
 800bef6:	b500      	push	{lr}
 800bef8:	2807      	cmp	r0, #7
 800befa:	d807      	bhi.n	800bf0c <MSP_GetIRQn+0x18>
 800befc:	f7f4 fe3e 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800bf00:	04060808 	.word	0x04060808
 800bf04:	04060606 	.word	0x04060606
 800bf08:	2006      	movs	r0, #6
 800bf0a:	bd00      	pop	{pc}
 800bf0c:	2007      	movs	r0, #7
 800bf0e:	e7fc      	b.n	800bf0a <MSP_GetIRQn+0x16>
 800bf10:	2005      	movs	r0, #5
 800bf12:	e7fa      	b.n	800bf0a <MSP_GetIRQn+0x16>

0800bf14 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 800bf14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf16:	001d      	movs	r5, r3
 800bf18:	0004      	movs	r4, r0
 800bf1a:	000e      	movs	r6, r1
 800bf1c:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800bf1e:	f7ff ff95 	bl	800be4c <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 800bf22:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800bf24:	0007      	movs	r7, r0
  if(Status == RESET)
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d035      	beq.n	800bf96 <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 800bf2a:	6822      	ldr	r2, [r4, #0]
 800bf2c:	6893      	ldr	r3, [r2, #8]
 800bf2e:	4033      	ands	r3, r6
 800bf30:	429e      	cmp	r6, r3
 800bf32:	d135      	bne.n	800bfa0 <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 800bf34:	1c6b      	adds	r3, r5, #1
 800bf36:	d0f9      	beq.n	800bf2c <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	d009      	beq.n	800bf50 <SPI_WaitOnFlagUntilTimeout+0x3c>
 800bf3c:	f7ff ff86 	bl	800be4c <HAL_GetTick>
 800bf40:	1bc0      	subs	r0, r0, r7
 800bf42:	4285      	cmp	r5, r0
 800bf44:	d2f1      	bcs.n	800bf2a <SPI_WaitOnFlagUntilTimeout+0x16>
 800bf46:	e003      	b.n	800bf50 <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 800bf48:	1c6b      	adds	r3, r5, #1
 800bf4a:	d025      	beq.n	800bf98 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf4c:	2d00      	cmp	r5, #0
 800bf4e:	d11d      	bne.n	800bf8c <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf50:	21e0      	movs	r1, #224	; 0xe0
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	438a      	bics	r2, r1
 800bf58:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	39a0      	subs	r1, #160	; 0xa0
 800bf5e:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf60:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800bf62:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bf66:	0189      	lsls	r1, r1, #6
 800bf68:	428a      	cmp	r2, r1
 800bf6a:	d106      	bne.n	800bf7a <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 800bf6c:	6819      	ldr	r1, [r3, #0]
 800bf6e:	480d      	ldr	r0, [pc, #52]	; (800bfa4 <SPI_WaitOnFlagUntilTimeout+0x90>)
 800bf70:	4001      	ands	r1, r0
 800bf72:	6019      	str	r1, [r3, #0]
 800bf74:	6819      	ldr	r1, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 800bf7a:	0023      	movs	r3, r4
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	3351      	adds	r3, #81	; 0x51
 800bf80:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bf82:	2300      	movs	r3, #0
 800bf84:	3450      	adds	r4, #80	; 0x50
 800bf86:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 800bf88:	2003      	movs	r0, #3
 800bf8a:	e00a      	b.n	800bfa2 <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800bf8c:	f7ff ff5e 	bl	800be4c <HAL_GetTick>
 800bf90:	1bc0      	subs	r0, r0, r7
 800bf92:	4285      	cmp	r5, r0
 800bf94:	d3dc      	bcc.n	800bf50 <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	6893      	ldr	r3, [r2, #8]
 800bf9a:	4033      	ands	r3, r6
 800bf9c:	429e      	cmp	r6, r3
 800bf9e:	d1d3      	bne.n	800bf48 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800bfa0:	2000      	movs	r0, #0
}
 800bfa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfa4:	ffffdfff 	.word	0xffffdfff

0800bfa8 <HAL_SPI_MspInit>:
 800bfa8:	4770      	bx	lr
	...

0800bfac <HAL_SPI_Init>:
{
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	0004      	movs	r4, r0
    return HAL_ERROR;
 800bfb0:	2001      	movs	r0, #1
  if(hspi == NULL)
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	d037      	beq.n	800c026 <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800bfb6:	0025      	movs	r5, r4
 800bfb8:	3551      	adds	r5, #81	; 0x51
 800bfba:	782b      	ldrb	r3, [r5, #0]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d105      	bne.n	800bfce <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 800bfc2:	0022      	movs	r2, r4
 800bfc4:	3250      	adds	r2, #80	; 0x50
 800bfc6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800bfc8:	0020      	movs	r0, r4
 800bfca:	f7ff ffed 	bl	800bfa8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800bfce:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800bfd0:	2240      	movs	r2, #64	; 0x40
 800bfd2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800bfd4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800bfd6:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bfd8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800bfda:	4393      	bics	r3, r2
 800bfdc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bfde:	6863      	ldr	r3, [r4, #4]
 800bfe0:	69a2      	ldr	r2, [r4, #24]
 800bfe2:	4303      	orrs	r3, r0
 800bfe4:	68e0      	ldr	r0, [r4, #12]
 800bfe6:	4303      	orrs	r3, r0
 800bfe8:	6920      	ldr	r0, [r4, #16]
 800bfea:	4303      	orrs	r3, r0
 800bfec:	6960      	ldr	r0, [r4, #20]
 800bfee:	4303      	orrs	r3, r0
 800bff0:	69e0      	ldr	r0, [r4, #28]
 800bff2:	4303      	orrs	r3, r0
 800bff4:	6a20      	ldr	r0, [r4, #32]
 800bff6:	4303      	orrs	r3, r0
 800bff8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bffa:	4303      	orrs	r3, r0
 800bffc:	2080      	movs	r0, #128	; 0x80
 800bffe:	0080      	lsls	r0, r0, #2
 800c000:	4010      	ands	r0, r2
 800c002:	4303      	orrs	r3, r0
 800c004:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c006:	2304      	movs	r3, #4
 800c008:	0c12      	lsrs	r2, r2, #16
 800c00a:	401a      	ands	r2, r3
 800c00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c00e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c010:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800c012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c014:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800c016:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c018:	69cb      	ldr	r3, [r1, #28]
 800c01a:	4a03      	ldr	r2, [pc, #12]	; (800c028 <HAL_SPI_Init+0x7c>)
 800c01c:	4013      	ands	r3, r2
 800c01e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800c020:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c022:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800c024:	702b      	strb	r3, [r5, #0]
}
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	fffff7ff 	.word	0xfffff7ff

0800c02c <HAL_SPI_TransmitReceive>:
{
 800c02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02e:	b085      	sub	sp, #20
 800c030:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 800c032:	a802      	add	r0, sp, #8
 800c034:	3006      	adds	r0, #6
 800c036:	9001      	str	r0, [sp, #4]
 800c038:	2000      	movs	r0, #0
 800c03a:	9d01      	ldr	r5, [sp, #4]
 800c03c:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 800c03e:	0025      	movs	r5, r4
 800c040:	3551      	adds	r5, #81	; 0x51
 800c042:	7828      	ldrb	r0, [r5, #0]
 800c044:	2801      	cmp	r0, #1
 800c046:	d004      	beq.n	800c052 <HAL_SPI_TransmitReceive+0x26>
 800c048:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800c04a:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 800c04c:	2e22      	cmp	r6, #34	; 0x22
 800c04e:	d000      	beq.n	800c052 <HAL_SPI_TransmitReceive+0x26>
 800c050:	e083      	b.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 800c052:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 800c054:	2900      	cmp	r1, #0
 800c056:	d100      	bne.n	800c05a <HAL_SPI_TransmitReceive+0x2e>
 800c058:	e07f      	b.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
 800c05a:	2a00      	cmp	r2, #0
 800c05c:	d100      	bne.n	800c060 <HAL_SPI_TransmitReceive+0x34>
 800c05e:	e07c      	b.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d07a      	beq.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 800c064:	0026      	movs	r6, r4
 800c066:	3650      	adds	r6, #80	; 0x50
 800c068:	7830      	ldrb	r0, [r6, #0]
 800c06a:	4684      	mov	ip, r0
 800c06c:	4667      	mov	r7, ip
    return HAL_BUSY;
 800c06e:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 800c070:	2f01      	cmp	r7, #1
 800c072:	d072      	beq.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
 800c074:	3801      	subs	r0, #1
 800c076:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 800c078:	7828      	ldrb	r0, [r5, #0]
 800c07a:	2801      	cmp	r0, #1
 800c07c:	d101      	bne.n	800c082 <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c07e:	3031      	adds	r0, #49	; 0x31
 800c080:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c082:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 800c084:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c086:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 800c088:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 800c08a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 800c08c:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c08e:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 800c090:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800c092:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c094:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800c096:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 800c098:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c09a:	019b      	lsls	r3, r3, #6
 800c09c:	4298      	cmp	r0, r3
 800c09e:	d107      	bne.n	800c0b0 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	4f9d      	ldr	r7, [pc, #628]	; (800c318 <HAL_SPI_TransmitReceive+0x2ec>)
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	403a      	ands	r2, r7
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	4302      	orrs	r2, r0
 800c0ae:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	4694      	mov	ip, r2
 800c0b6:	2240      	movs	r2, #64	; 0x40
 800c0b8:	4667      	mov	r7, ip
 800c0ba:	4217      	tst	r7, r2
 800c0bc:	d102      	bne.n	800c0c4 <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 800c0be:	681f      	ldr	r7, [r3, #0]
 800c0c0:	433a      	orrs	r2, r7
 800c0c2:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c0c4:	2280      	movs	r2, #128	; 0x80
 800c0c6:	0112      	lsls	r2, r2, #4
 800c0c8:	4694      	mov	ip, r2
 800c0ca:	68e7      	ldr	r7, [r4, #12]
 800c0cc:	6862      	ldr	r2, [r4, #4]
 800c0ce:	4567      	cmp	r7, ip
 800c0d0:	d000      	beq.n	800c0d4 <HAL_SPI_TransmitReceive+0xa8>
 800c0d2:	e07e      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d006      	beq.n	800c0e6 <HAL_SPI_TransmitReceive+0xba>
 800c0d8:	2782      	movs	r7, #130	; 0x82
 800c0da:	007f      	lsls	r7, r7, #1
 800c0dc:	42ba      	cmp	r2, r7
 800c0de:	d10a      	bne.n	800c0f6 <HAL_SPI_TransmitReceive+0xca>
 800c0e0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c0e2:	2a01      	cmp	r2, #1
 800c0e4:	d107      	bne.n	800c0f6 <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800c0e6:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 800c0e8:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800c0ea:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c0ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 800c0ee:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800c0f0:	3a01      	subs	r2, #1
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800c0f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	d162      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0fc:	2280      	movs	r2, #128	; 0x80
 800c0fe:	0192      	lsls	r2, r2, #6
 800c100:	4290      	cmp	r0, r2
 800c102:	d104      	bne.n	800c10e <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800c104:	2280      	movs	r2, #128	; 0x80
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	0152      	lsls	r2, r2, #5
 800c10a:	430a      	orrs	r2, r1
 800c10c:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c10e:	2200      	movs	r2, #0
 800c110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c112:	2101      	movs	r1, #1
 800c114:	0020      	movs	r0, r4
 800c116:	f7ff fefd 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d11c      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c122:	68d2      	ldr	r2, [r2, #12]
 800c124:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800c126:	3302      	adds	r3, #2
 800c128:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800c12a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c12c:	3b01      	subs	r3, #1
 800c12e:	b29b      	uxth	r3, r3
 800c130:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c132:	2380      	movs	r3, #128	; 0x80
 800c134:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c136:	019b      	lsls	r3, r3, #6
 800c138:	429a      	cmp	r2, r3
 800c13a:	d000      	beq.n	800c13e <HAL_SPI_TransmitReceive+0x112>
 800c13c:	e0c4      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c140:	2200      	movs	r2, #0
 800c142:	2101      	movs	r1, #1
 800c144:	0020      	movs	r0, r4
 800c146:	f7ff fee5 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d100      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x124>
 800c14e:	e0b4      	b.n	800c2ba <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800c150:	2302      	movs	r3, #2
 800c152:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c154:	4313      	orrs	r3, r2
 800c156:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800c158:	2003      	movs	r0, #3
}
 800c15a:	b005      	add	sp, #20
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800c15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c160:	2200      	movs	r2, #0
 800c162:	2102      	movs	r1, #2
 800c164:	0020      	movs	r0, r4
 800c166:	f7ff fed5 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d1f4      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800c16e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c170:	6822      	ldr	r2, [r4, #0]
 800c172:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 800c174:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800c176:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 800c178:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 800c17a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c17c:	3b01      	subs	r3, #1
 800c17e:	b29b      	uxth	r3, r3
 800c180:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800c182:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <HAL_SPI_TransmitReceive+0x172>
 800c188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c18a:	0019      	movs	r1, r3
 800c18c:	2380      	movs	r3, #128	; 0x80
 800c18e:	019b      	lsls	r3, r3, #6
 800c190:	4299      	cmp	r1, r3
 800c192:	d104      	bne.n	800c19e <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800c194:	2180      	movs	r1, #128	; 0x80
 800c196:	6813      	ldr	r3, [r2, #0]
 800c198:	0149      	lsls	r1, r1, #5
 800c19a:	430b      	orrs	r3, r1
 800c19c:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	0020      	movs	r0, r4
 800c1a6:	f7ff feb5 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d1d4      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c1ae:	6822      	ldr	r2, [r4, #0]
 800c1b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1b2:	68d2      	ldr	r2, [r2, #12]
 800c1b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800c1b6:	3302      	adds	r3, #2
 800c1b8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800c1ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800c1c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1ca      	bne.n	800c15e <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800c1c8:	6862      	ldr	r2, [r4, #4]
 800c1ca:	2a00      	cmp	r2, #0
 800c1cc:	d1b1      	bne.n	800c132 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1d0:	e79f      	b.n	800c112 <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	d006      	beq.n	800c1e4 <HAL_SPI_TransmitReceive+0x1b8>
 800c1d6:	2782      	movs	r7, #130	; 0x82
 800c1d8:	007f      	lsls	r7, r7, #1
 800c1da:	42ba      	cmp	r2, r7
 800c1dc:	d10a      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x1c8>
 800c1de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c1e0:	2a01      	cmp	r2, #1
 800c1e2:	d107      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800c1e4:	1c4a      	adds	r2, r1, #1
 800c1e6:	6322      	str	r2, [r4, #48]	; 0x30
 800c1e8:	780a      	ldrb	r2, [r1, #0]
 800c1ea:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c1ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c1ee:	3a01      	subs	r2, #1
 800c1f0:	b292      	uxth	r2, r2
 800c1f2:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800c1f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	d149      	bne.n	800c28e <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1fa:	2280      	movs	r2, #128	; 0x80
 800c1fc:	0192      	lsls	r2, r2, #6
 800c1fe:	4290      	cmp	r0, r2
 800c200:	d104      	bne.n	800c20c <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800c202:	2280      	movs	r2, #128	; 0x80
 800c204:	6819      	ldr	r1, [r3, #0]
 800c206:	0152      	lsls	r2, r2, #5
 800c208:	430a      	orrs	r2, r1
 800c20a:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c20e:	2200      	movs	r2, #0
 800c210:	2101      	movs	r1, #1
 800c212:	0020      	movs	r0, r4
 800c214:	f7ff fe7e 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d19d      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	7013      	strb	r3, [r2, #0]
 800c224:	e781      	b.n	800c12a <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800c226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c228:	2200      	movs	r2, #0
 800c22a:	2102      	movs	r1, #2
 800c22c:	0020      	movs	r0, r4
 800c22e:	f7ff fe71 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c232:	2800      	cmp	r0, #0
 800c234:	d000      	beq.n	800c238 <HAL_SPI_TransmitReceive+0x20c>
 800c236:	e78f      	b.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800c238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c23a:	6822      	ldr	r2, [r4, #0]
 800c23c:	1c59      	adds	r1, r3, #1
 800c23e:	6321      	str	r1, [r4, #48]	; 0x30
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 800c244:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c246:	3b01      	subs	r3, #1
 800c248:	b29b      	uxth	r3, r3
 800c24a:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800c24c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10a      	bne.n	800c268 <HAL_SPI_TransmitReceive+0x23c>
 800c252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c254:	0019      	movs	r1, r3
 800c256:	2380      	movs	r3, #128	; 0x80
 800c258:	019b      	lsls	r3, r3, #6
 800c25a:	4299      	cmp	r1, r3
 800c25c:	d104      	bne.n	800c268 <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800c25e:	2180      	movs	r1, #128	; 0x80
 800c260:	6813      	ldr	r3, [r2, #0]
 800c262:	0149      	lsls	r1, r1, #5
 800c264:	430b      	orrs	r3, r1
 800c266:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c26a:	2200      	movs	r2, #0
 800c26c:	2101      	movs	r1, #1
 800c26e:	0020      	movs	r0, r4
 800c270:	f7ff fe50 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c274:	2800      	cmp	r0, #0
 800c276:	d000      	beq.n	800c27a <HAL_SPI_TransmitReceive+0x24e>
 800c278:	e76e      	b.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800c27a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	63a2      	str	r2, [r4, #56]	; 0x38
 800c280:	6822      	ldr	r2, [r4, #0]
 800c282:	68d2      	ldr	r2, [r2, #12]
 800c284:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800c286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c288:	3b01      	subs	r3, #1
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800c28e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1c8      	bne.n	800c226 <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800c294:	6862      	ldr	r2, [r4, #4]
 800c296:	2a00      	cmp	r2, #0
 800c298:	d000      	beq.n	800c29c <HAL_SPI_TransmitReceive+0x270>
 800c29a:	e74a      	b.n	800c132 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800c29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c29e:	2101      	movs	r1, #1
 800c2a0:	0020      	movs	r0, r4
 800c2a2:	f7ff fe37 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d000      	beq.n	800c2ac <HAL_SPI_TransmitReceive+0x280>
 800c2aa:	e755      	b.n	800c158 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800c2ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	63a2      	str	r2, [r4, #56]	; 0x38
 800c2b2:	6822      	ldr	r2, [r4, #0]
 800c2b4:	68d2      	ldr	r2, [r2, #12]
 800c2b6:	701a      	strb	r2, [r3, #0]
 800c2b8:	e737      	b.n	800c12a <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	9a01      	ldr	r2, [sp, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 800c2c4:	0013      	movs	r3, r2
 800c2c6:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800c2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	2180      	movs	r1, #128	; 0x80
 800c2ce:	0020      	movs	r0, r4
 800c2d0:	f7ff fe20 	bl	800bf14 <SPI_WaitOnFlagUntilTimeout>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d002      	beq.n	800c2de <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c2da:	2320      	movs	r3, #32
 800c2dc:	e73a      	b.n	800c154 <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 800c2de:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800c2e0:	2380      	movs	r3, #128	; 0x80
 800c2e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 800c2e4:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800c2e6:	019b      	lsls	r3, r3, #6
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d111      	bne.n	800c310 <HAL_SPI_TransmitReceive+0x2e4>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	6899      	ldr	r1, [r3, #8]
 800c2f0:	06c9      	lsls	r1, r1, #27
 800c2f2:	d50d      	bpl.n	800c310 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800c2f4:	2102      	movs	r1, #2
 800c2f6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c2f8:	4329      	orrs	r1, r5
 800c2fa:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 800c2fc:	6819      	ldr	r1, [r3, #0]
 800c2fe:	4c06      	ldr	r4, [pc, #24]	; (800c318 <HAL_SPI_TransmitReceive+0x2ec>)
 800c300:	4021      	ands	r1, r4
 800c302:	6019      	str	r1, [r3, #0]
 800c304:	6819      	ldr	r1, [r3, #0]
 800c306:	430a      	orrs	r2, r1
 800c308:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 800c30a:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 800c30c:	0038      	movs	r0, r7
 800c30e:	e724      	b.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 800c310:	2300      	movs	r3, #0
 800c312:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 800c314:	e721      	b.n	800c15a <HAL_SPI_TransmitReceive+0x12e>
 800c316:	46c0      	nop			; (mov r8, r8)
 800c318:	ffffdfff 	.word	0xffffdfff

0800c31c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c31c:	6803      	ldr	r3, [r0, #0]
 800c31e:	4906      	ldr	r1, [pc, #24]	; (800c338 <UART_EndRxTransfer+0x1c>)
 800c320:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c322:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c324:	400a      	ands	r2, r1
 800c326:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c328:	689a      	ldr	r2, [r3, #8]
 800c32a:	3123      	adds	r1, #35	; 0x23
 800c32c:	31ff      	adds	r1, #255	; 0xff
 800c32e:	438a      	bics	r2, r1
 800c330:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800c332:	2320      	movs	r3, #32
 800c334:	7003      	strb	r3, [r0, #0]
}
 800c336:	4770      	bx	lr
 800c338:	fffffedf 	.word	0xfffffedf

0800c33c <HAL_UART_Receive_IT>:
{
 800c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 800c33e:	0006      	movs	r6, r0
 800c340:	366a      	adds	r6, #106	; 0x6a
 800c342:	7834      	ldrb	r4, [r6, #0]
{
 800c344:	0003      	movs	r3, r0
    return HAL_BUSY;
 800c346:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c348:	2c20      	cmp	r4, #32
 800c34a:	d135      	bne.n	800c3b8 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 800c34c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800c34e:	2900      	cmp	r1, #0
 800c350:	d032      	beq.n	800c3b8 <HAL_UART_Receive_IT+0x7c>
 800c352:	2a00      	cmp	r2, #0
 800c354:	d030      	beq.n	800c3b8 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c356:	2580      	movs	r5, #128	; 0x80
 800c358:	689c      	ldr	r4, [r3, #8]
 800c35a:	016d      	lsls	r5, r5, #5
 800c35c:	42ac      	cmp	r4, r5
 800c35e:	d104      	bne.n	800c36a <HAL_UART_Receive_IT+0x2e>
 800c360:	691d      	ldr	r5, [r3, #16]
 800c362:	2d00      	cmp	r5, #0
 800c364:	d101      	bne.n	800c36a <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1) != 0)
 800c366:	4201      	tst	r1, r0
 800c368:	d126      	bne.n	800c3b8 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 800c36a:	001d      	movs	r5, r3
 800c36c:	3568      	adds	r5, #104	; 0x68
 800c36e:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 800c370:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800c372:	2f01      	cmp	r7, #1
 800c374:	d020      	beq.n	800c3b8 <HAL_UART_Receive_IT+0x7c>
 800c376:	3801      	subs	r0, #1
 800c378:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr = pData;
 800c37a:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800c37c:	0019      	movs	r1, r3
 800c37e:	3158      	adds	r1, #88	; 0x58
 800c380:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800c382:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 800c384:	2280      	movs	r2, #128	; 0x80
 800c386:	0152      	lsls	r2, r2, #5
 800c388:	4294      	cmp	r4, r2
 800c38a:	d118      	bne.n	800c3be <HAL_UART_Receive_IT+0x82>
 800c38c:	691a      	ldr	r2, [r3, #16]
 800c38e:	2a00      	cmp	r2, #0
 800c390:	d113      	bne.n	800c3ba <HAL_UART_Receive_IT+0x7e>
 800c392:	4913      	ldr	r1, [pc, #76]	; (800c3e0 <HAL_UART_Receive_IT+0xa4>)
 800c394:	001a      	movs	r2, r3
 800c396:	325c      	adds	r2, #92	; 0x5c
 800c398:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c39a:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c39c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c39e:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a0:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3a2:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a4:	6899      	ldr	r1, [r3, #8]
 800c3a6:	3a21      	subs	r2, #33	; 0x21
 800c3a8:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 800c3aa:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ac:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c3ae:	2290      	movs	r2, #144	; 0x90
 800c3b0:	6819      	ldr	r1, [r3, #0]
 800c3b2:	0052      	lsls	r2, r2, #1
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	601a      	str	r2, [r3, #0]
}
 800c3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800c3ba:	21ff      	movs	r1, #255	; 0xff
 800c3bc:	e7ea      	b.n	800c394 <HAL_UART_Receive_IT+0x58>
 800c3be:	2c00      	cmp	r4, #0
 800c3c0:	d104      	bne.n	800c3cc <HAL_UART_Receive_IT+0x90>
 800c3c2:	691a      	ldr	r2, [r3, #16]
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	d0f8      	beq.n	800c3ba <HAL_UART_Receive_IT+0x7e>
 800c3c8:	217f      	movs	r1, #127	; 0x7f
 800c3ca:	e7e3      	b.n	800c394 <HAL_UART_Receive_IT+0x58>
 800c3cc:	2280      	movs	r2, #128	; 0x80
 800c3ce:	0552      	lsls	r2, r2, #21
 800c3d0:	4294      	cmp	r4, r2
 800c3d2:	d1e2      	bne.n	800c39a <HAL_UART_Receive_IT+0x5e>
 800c3d4:	691a      	ldr	r2, [r3, #16]
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d0f6      	beq.n	800c3c8 <HAL_UART_Receive_IT+0x8c>
 800c3da:	213f      	movs	r1, #63	; 0x3f
 800c3dc:	e7da      	b.n	800c394 <HAL_UART_Receive_IT+0x58>
 800c3de:	46c0      	nop			; (mov r8, r8)
 800c3e0:	000001ff 	.word	0x000001ff

0800c3e4 <HAL_UART_Transmit_DMA>:
{
 800c3e4:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c3e6:	0002      	movs	r2, r0
{
 800c3e8:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800c3ea:	3269      	adds	r2, #105	; 0x69
 800c3ec:	7814      	ldrb	r4, [r2, #0]
{
 800c3ee:	0005      	movs	r5, r0
    return HAL_BUSY;
 800c3f0:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800c3f2:	2c20      	cmp	r4, #32
 800c3f4:	d134      	bne.n	800c460 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 800c3f6:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d031      	beq.n	800c460 <HAL_UART_Transmit_DMA+0x7c>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d02f      	beq.n	800c460 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c400:	2480      	movs	r4, #128	; 0x80
 800c402:	68ae      	ldr	r6, [r5, #8]
 800c404:	0164      	lsls	r4, r4, #5
 800c406:	42a6      	cmp	r6, r4
 800c408:	d104      	bne.n	800c414 <HAL_UART_Transmit_DMA+0x30>
 800c40a:	692c      	ldr	r4, [r5, #16]
 800c40c:	2c00      	cmp	r4, #0
 800c40e:	d101      	bne.n	800c414 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1) != 0)
 800c410:	4201      	tst	r1, r0
 800c412:	d125      	bne.n	800c460 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 800c414:	002e      	movs	r6, r5
 800c416:	3668      	adds	r6, #104	; 0x68
 800c418:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 800c41a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800c41c:	2c01      	cmp	r4, #1
 800c41e:	d01f      	beq.n	800c460 <HAL_UART_Transmit_DMA+0x7c>
 800c420:	3801      	subs	r0, #1
 800c422:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 800c424:	0028      	movs	r0, r5
 800c426:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 800c428:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c42a:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 800c42c:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 800c42e:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c430:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c432:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c434:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c436:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800c438:	4a0a      	ldr	r2, [pc, #40]	; (800c464 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 800c43a:	6384      	str	r4, [r0, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c43c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c43e:	4a0a      	ldr	r2, [pc, #40]	; (800c468 <HAL_UART_Transmit_DMA+0x84>)
 800c440:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c442:	4a0a      	ldr	r2, [pc, #40]	; (800c46c <HAL_UART_Transmit_DMA+0x88>)
 800c444:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800c446:	682a      	ldr	r2, [r5, #0]
 800c448:	3228      	adds	r2, #40	; 0x28
 800c44a:	f001 fd9b 	bl	800df84 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c44e:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 800c450:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c452:	682b      	ldr	r3, [r5, #0]
 800c454:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c456:	6899      	ldr	r1, [r3, #8]
 800c458:	1892      	adds	r2, r2, r2
 800c45a:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 800c45c:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c45e:	609a      	str	r2, [r3, #8]
}
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	0800c471 	.word	0x0800c471
 800c468:	0800c4a3 	.word	0x0800c4a3
 800c46c:	0800c52b 	.word	0x0800c52b

0800c470 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800c470:	2120      	movs	r1, #32
 800c472:	6803      	ldr	r3, [r0, #0]
{
 800c474:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800c476:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800c478:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800c47a:	400b      	ands	r3, r1
 800c47c:	d10c      	bne.n	800c498 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 800c47e:	0011      	movs	r1, r2
 800c480:	3152      	adds	r1, #82	; 0x52
 800c482:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c484:	2180      	movs	r1, #128	; 0x80
 800c486:	6813      	ldr	r3, [r2, #0]
 800c488:	689a      	ldr	r2, [r3, #8]
 800c48a:	438a      	bics	r2, r1
 800c48c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c48e:	2240      	movs	r2, #64	; 0x40
 800c490:	6819      	ldr	r1, [r3, #0]
 800c492:	430a      	orrs	r2, r1
 800c494:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800c496:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800c498:	0010      	movs	r0, r2
 800c49a:	f7fe fa59 	bl	800a950 <HAL_UART_TxCpltCallback>
}
 800c49e:	e7fa      	b.n	800c496 <UART_DMATransmitCplt+0x26>

0800c4a0 <HAL_UART_TxHalfCpltCallback>:
 800c4a0:	4770      	bx	lr

0800c4a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4a2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 800c4a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c4a6:	f7ff fffb 	bl	800c4a0 <HAL_UART_TxHalfCpltCallback>
}
 800c4aa:	bd10      	pop	{r4, pc}

0800c4ac <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4ac:	0002      	movs	r2, r0
{
 800c4ae:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4b0:	326a      	adds	r2, #106	; 0x6a
 800c4b2:	7811      	ldrb	r1, [r2, #0]
 800c4b4:	6803      	ldr	r3, [r0, #0]
 800c4b6:	2922      	cmp	r1, #34	; 0x22
 800c4b8:	d12d      	bne.n	800c516 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800c4ba:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4bc:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 800c4be:	315c      	adds	r1, #92	; 0x5c
 800c4c0:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4c4:	0164      	lsls	r4, r4, #5
 800c4c6:	4029      	ands	r1, r5
 800c4c8:	6885      	ldr	r5, [r0, #8]
 800c4ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c4cc:	42a5      	cmp	r5, r4
 800c4ce:	d11e      	bne.n	800c50e <UART_Receive_IT+0x62>
 800c4d0:	6904      	ldr	r4, [r0, #16]
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	d11b      	bne.n	800c50e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800c4d6:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2;
 800c4d8:	3302      	adds	r3, #2
 800c4da:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800c4dc:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800c4de:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 800c4e0:	315a      	adds	r1, #90	; 0x5a
 800c4e2:	880b      	ldrh	r3, [r1, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	800b      	strh	r3, [r1, #0]
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	d10d      	bne.n	800c50a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4ee:	6803      	ldr	r3, [r0, #0]
 800c4f0:	4d0c      	ldr	r5, [pc, #48]	; (800c524 <UART_Receive_IT+0x78>)
 800c4f2:	6819      	ldr	r1, [r3, #0]
 800c4f4:	4029      	ands	r1, r5
 800c4f6:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f8:	6899      	ldr	r1, [r3, #8]
 800c4fa:	3523      	adds	r5, #35	; 0x23
 800c4fc:	35ff      	adds	r5, #255	; 0xff
 800c4fe:	43a9      	bics	r1, r5
 800c500:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800c502:	2320      	movs	r3, #32
 800c504:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800c506:	f7fe fa47 	bl	800a998 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800c50a:	0020      	movs	r0, r4
 800c50c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c50e:	1c5c      	adds	r4, r3, #1
 800c510:	6544      	str	r4, [r0, #84]	; 0x54
 800c512:	7019      	strb	r1, [r3, #0]
 800c514:	e7e2      	b.n	800c4dc <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c516:	2208      	movs	r2, #8
 800c518:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800c51a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c51c:	430a      	orrs	r2, r1
 800c51e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 800c520:	e7f3      	b.n	800c50a <UART_Receive_IT+0x5e>
 800c522:	46c0      	nop			; (mov r8, r8)
 800c524:	fffffedf 	.word	0xfffffedf

0800c528 <HAL_UART_ErrorCallback>:
 800c528:	4770      	bx	lr

0800c52a <UART_DMAError>:
{
 800c52a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800c52c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c52e:	0021      	movs	r1, r4
 800c530:	3169      	adds	r1, #105	; 0x69
 800c532:	780b      	ldrb	r3, [r1, #0]
 800c534:	2b21      	cmp	r3, #33	; 0x21
 800c536:	d10d      	bne.n	800c554 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	689a      	ldr	r2, [r3, #8]
 800c53c:	0612      	lsls	r2, r2, #24
 800c53e:	d509      	bpl.n	800c554 <UART_DMAError+0x2a>
    huart->TxXferCount = 0;
 800c540:	0022      	movs	r2, r4
 800c542:	2000      	movs	r0, #0
 800c544:	3252      	adds	r2, #82	; 0x52
 800c546:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	30c0      	adds	r0, #192	; 0xc0
 800c54c:	4382      	bics	r2, r0
 800c54e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c550:	2320      	movs	r3, #32
 800c552:	700b      	strb	r3, [r1, #0]
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c554:	0023      	movs	r3, r4
 800c556:	336a      	adds	r3, #106	; 0x6a
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b22      	cmp	r3, #34	; 0x22
 800c55c:	d10a      	bne.n	800c574 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	065b      	lsls	r3, r3, #25
 800c564:	d506      	bpl.n	800c574 <UART_DMAError+0x4a>
    huart->RxXferCount = 0;
 800c566:	0023      	movs	r3, r4
 800c568:	2200      	movs	r2, #0
 800c56a:	335a      	adds	r3, #90	; 0x5a
 800c56c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800c56e:	0020      	movs	r0, r4
 800c570:	f7ff fed4 	bl	800c31c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c574:	2310      	movs	r3, #16
 800c576:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800c578:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c57a:	4313      	orrs	r3, r2
 800c57c:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800c57e:	f7ff ffd3 	bl	800c528 <HAL_UART_ErrorCallback>
}
 800c582:	bd10      	pop	{r4, pc}

0800c584 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800c584:	210f      	movs	r1, #15
{
 800c586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c588:	6803      	ldr	r3, [r0, #0]
{
 800c58a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c58c:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c58e:	6818      	ldr	r0, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800c590:	4011      	ands	r1, r2
  if (errorflags == RESET)
 800c592:	d108      	bne.n	800c5a6 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c594:	2520      	movs	r5, #32
 800c596:	422a      	tst	r2, r5
 800c598:	d005      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x22>
 800c59a:	4228      	tst	r0, r5
 800c59c:	d003      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800c59e:	0020      	movs	r0, r4
 800c5a0:	f7ff ff84 	bl	800c4ac <UART_Receive_IT>
}
 800c5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800c5a6:	689e      	ldr	r6, [r3, #8]
  if(   (errorflags != RESET)
 800c5a8:	2900      	cmp	r1, #0
 800c5aa:	d061      	beq.n	800c670 <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	0035      	movs	r5, r6
 800c5b0:	400d      	ands	r5, r1
 800c5b2:	d103      	bne.n	800c5bc <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800c5b4:	2790      	movs	r7, #144	; 0x90
 800c5b6:	007f      	lsls	r7, r7, #1
 800c5b8:	4238      	tst	r0, r7
 800c5ba:	d059      	beq.n	800c670 <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c5bc:	420a      	tst	r2, r1
 800c5be:	d005      	beq.n	800c5cc <HAL_UART_IRQHandler+0x48>
 800c5c0:	05c6      	lsls	r6, r0, #23
 800c5c2:	d503      	bpl.n	800c5cc <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800c5c4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5c6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800c5c8:	4331      	orrs	r1, r6
 800c5ca:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5cc:	2102      	movs	r1, #2
 800c5ce:	420a      	tst	r2, r1
 800c5d0:	d006      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x5c>
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	d004      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800c5d6:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800c5da:	1849      	adds	r1, r1, r1
 800c5dc:	4331      	orrs	r1, r6
 800c5de:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5e0:	2104      	movs	r1, #4
 800c5e2:	420a      	tst	r2, r1
 800c5e4:	d006      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x70>
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	d004      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800c5ea:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5ec:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800c5ee:	3902      	subs	r1, #2
 800c5f0:	4331      	orrs	r1, r6
 800c5f2:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800c5f4:	0711      	lsls	r1, r2, #28
 800c5f6:	d508      	bpl.n	800c60a <HAL_UART_IRQHandler+0x86>
 800c5f8:	0681      	lsls	r1, r0, #26
 800c5fa:	d401      	bmi.n	800c600 <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c5fc:	2d00      	cmp	r5, #0
 800c5fe:	d004      	beq.n	800c60a <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800c600:	2108      	movs	r1, #8
 800c602:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c604:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c606:	4319      	orrs	r1, r3
 800c608:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c60a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0c9      	beq.n	800c5a4 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c610:	2320      	movs	r3, #32
 800c612:	421a      	tst	r2, r3
 800c614:	d004      	beq.n	800c620 <HAL_UART_IRQHandler+0x9c>
 800c616:	4218      	tst	r0, r3
 800c618:	d002      	beq.n	800c620 <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 800c61a:	0020      	movs	r0, r4
 800c61c:	f7ff ff46 	bl	800c4ac <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800c620:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800c622:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800c624:	071b      	lsls	r3, r3, #28
 800c626:	d404      	bmi.n	800c632 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	689d      	ldr	r5, [r3, #8]
 800c62c:	2340      	movs	r3, #64	; 0x40
 800c62e:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800c630:	d01a      	beq.n	800c668 <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 800c632:	f7ff fe73 	bl	800c31c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c636:	2140      	movs	r1, #64	; 0x40
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	689a      	ldr	r2, [r3, #8]
 800c63c:	420a      	tst	r2, r1
 800c63e:	d00f      	beq.n	800c660 <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c640:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800c642:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c644:	438a      	bics	r2, r1
 800c646:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800c648:	2800      	cmp	r0, #0
 800c64a:	d009      	beq.n	800c660 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c64c:	4b32      	ldr	r3, [pc, #200]	; (800c718 <HAL_UART_IRQHandler+0x194>)
 800c64e:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c650:	f001 fcc4 	bl	800dfdc <HAL_DMA_Abort_IT>
 800c654:	2800      	cmp	r0, #0
 800c656:	d0a5      	beq.n	800c5a4 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c658:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800c65a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c65c:	4798      	blx	r3
 800c65e:	e7a1      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800c660:	0020      	movs	r0, r4
 800c662:	f7ff ff61 	bl	800c528 <HAL_UART_ErrorCallback>
 800c666:	e79d      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 800c668:	f7ff ff5e 	bl	800c528 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c66c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800c66e:	e799      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800c670:	2180      	movs	r1, #128	; 0x80
 800c672:	0349      	lsls	r1, r1, #13
 800c674:	420a      	tst	r2, r1
 800c676:	d00b      	beq.n	800c690 <HAL_UART_IRQHandler+0x10c>
 800c678:	0275      	lsls	r5, r6, #9
 800c67a:	d509      	bpl.n	800c690 <HAL_UART_IRQHandler+0x10c>
    huart->gState  = HAL_UART_STATE_READY;
 800c67c:	0022      	movs	r2, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800c67e:	6219      	str	r1, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800c680:	2320      	movs	r3, #32
 800c682:	3269      	adds	r2, #105	; 0x69
 800c684:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 800c686:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800c688:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 800c68a:	f000 fae2 	bl	800cc52 <HAL_UARTEx_WakeupCallback>
    return;
 800c68e:	e789      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c690:	2180      	movs	r1, #128	; 0x80
 800c692:	420a      	tst	r2, r1
 800c694:	d02d      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x16e>
 800c696:	4208      	tst	r0, r1
 800c698:	d02b      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x16e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c69a:	0022      	movs	r2, r4
 800c69c:	3269      	adds	r2, #105	; 0x69
 800c69e:	7812      	ldrb	r2, [r2, #0]
 800c6a0:	2a21      	cmp	r2, #33	; 0x21
 800c6a2:	d000      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x122>
 800c6a4:	e77e      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
    if(huart->TxXferCount == 0U)
 800c6a6:	0020      	movs	r0, r4
 800c6a8:	3052      	adds	r0, #82	; 0x52
 800c6aa:	8802      	ldrh	r2, [r0, #0]
 800c6ac:	2a00      	cmp	r2, #0
 800c6ae:	d107      	bne.n	800c6c0 <HAL_UART_IRQHandler+0x13c>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	438a      	bics	r2, r1
 800c6b4:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6b6:	2240      	movs	r2, #64	; 0x40
 800c6b8:	6819      	ldr	r1, [r3, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	e771      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6c0:	2180      	movs	r1, #128	; 0x80
 800c6c2:	68a5      	ldr	r5, [r4, #8]
 800c6c4:	0149      	lsls	r1, r1, #5
 800c6c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c6c8:	428d      	cmp	r5, r1
 800c6ca:	d10d      	bne.n	800c6e8 <HAL_UART_IRQHandler+0x164>
 800c6cc:	6921      	ldr	r1, [r4, #16]
 800c6ce:	2900      	cmp	r1, #0
 800c6d0:	d10a      	bne.n	800c6e8 <HAL_UART_IRQHandler+0x164>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c6d2:	8811      	ldrh	r1, [r2, #0]
        huart->pTxBuffPtr += 2U;
 800c6d4:	3202      	adds	r2, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c6d6:	05c9      	lsls	r1, r1, #23
 800c6d8:	0dc9      	lsrs	r1, r1, #23
 800c6da:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c6dc:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 800c6de:	8803      	ldrh	r3, [r0, #0]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	8003      	strh	r3, [r0, #0]
 800c6e6:	e75d      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800c6e8:	1c51      	adds	r1, r2, #1
 800c6ea:	64e1      	str	r1, [r4, #76]	; 0x4c
 800c6ec:	7812      	ldrb	r2, [r2, #0]
 800c6ee:	629a      	str	r2, [r3, #40]	; 0x28
 800c6f0:	e7f5      	b.n	800c6de <HAL_UART_IRQHandler+0x15a>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c6f2:	2140      	movs	r1, #64	; 0x40
 800c6f4:	420a      	tst	r2, r1
 800c6f6:	d100      	bne.n	800c6fa <HAL_UART_IRQHandler+0x176>
 800c6f8:	e754      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
 800c6fa:	4208      	tst	r0, r1
 800c6fc:	d100      	bne.n	800c700 <HAL_UART_IRQHandler+0x17c>
 800c6fe:	e751      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c700:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800c702:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c704:	438a      	bics	r2, r1
 800c706:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c708:	0023      	movs	r3, r4
 800c70a:	2220      	movs	r2, #32
 800c70c:	3369      	adds	r3, #105	; 0x69
 800c70e:	701a      	strb	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800c710:	f7fe f91e 	bl	800a950 <HAL_UART_TxCpltCallback>
 800c714:	e746      	b.n	800c5a4 <HAL_UART_IRQHandler+0x20>
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	0800c71d 	.word	0x0800c71d

0800c71c <UART_DMAAbortOnError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800c71c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	0002      	movs	r2, r0
{
 800c722:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 800c724:	325a      	adds	r2, #90	; 0x5a
 800c726:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0;
 800c728:	3a08      	subs	r2, #8
 800c72a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800c72c:	f7ff fefc 	bl	800c528 <HAL_UART_ErrorCallback>
}
 800c730:	bd10      	pop	{r4, pc}
	...

0800c734 <UART_SetConfig>:
{
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	0005      	movs	r5, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 800c738:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c73a:	6882      	ldr	r2, [r0, #8]
 800c73c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800c73e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c740:	4302      	orrs	r2, r0
 800c742:	6968      	ldr	r0, [r5, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c744:	4e82      	ldr	r6, [pc, #520]	; (800c950 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c746:	4302      	orrs	r2, r0
 800c748:	69e8      	ldr	r0, [r5, #28]
 800c74a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800c74c:	4881      	ldr	r0, [pc, #516]	; (800c954 <UART_SetConfig+0x220>)
 800c74e:	4001      	ands	r1, r0
 800c750:	430a      	orrs	r2, r1
 800c752:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4980      	ldr	r1, [pc, #512]	; (800c958 <UART_SetConfig+0x224>)
 800c758:	400a      	ands	r2, r1
 800c75a:	68e9      	ldr	r1, [r5, #12]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c760:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c762:	42b3      	cmp	r3, r6
 800c764:	d001      	beq.n	800c76a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800c766:	6a2a      	ldr	r2, [r5, #32]
 800c768:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	487b      	ldr	r0, [pc, #492]	; (800c95c <UART_SetConfig+0x228>)
 800c76e:	4002      	ands	r2, r0
 800c770:	430a      	orrs	r2, r1
 800c772:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c774:	4a7a      	ldr	r2, [pc, #488]	; (800c960 <UART_SetConfig+0x22c>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d117      	bne.n	800c7aa <UART_SetConfig+0x76>
 800c77a:	2203      	movs	r2, #3
 800c77c:	4b79      	ldr	r3, [pc, #484]	; (800c964 <UART_SetConfig+0x230>)
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	4013      	ands	r3, r2
 800c782:	4a79      	ldr	r2, [pc, #484]	; (800c968 <UART_SetConfig+0x234>)
 800c784:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800c786:	2002      	movs	r0, #2
 800c788:	f001 f958 	bl	800da3c <HAL_RCCEx_GetPeriphCLKFreq>
  if(UART_INSTANCE_LOWPOWER(huart))
 800c78c:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800c78e:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 800c790:	42b7      	cmp	r7, r6
 800c792:	d166      	bne.n	800c862 <UART_SetConfig+0x12e>
    switch (clocksource)
 800c794:	2c08      	cmp	r4, #8
 800c796:	d900      	bls.n	800c79a <UART_SetConfig+0x66>
 800c798:	e0d7      	b.n	800c94a <UART_SetConfig+0x216>
 800c79a:	0020      	movs	r0, r4
 800c79c:	f7f4 f9ee 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800c7a0:	d539d531 	.word	0xd539d531
 800c7a4:	d5d5d559 	.word	0xd5d5d559
 800c7a8:	5c          	.byte	0x5c
 800c7a9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7aa:	4a70      	ldr	r2, [pc, #448]	; (800c96c <UART_SetConfig+0x238>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d105      	bne.n	800c7bc <UART_SetConfig+0x88>
 800c7b0:	220c      	movs	r2, #12
 800c7b2:	4b6c      	ldr	r3, [pc, #432]	; (800c964 <UART_SetConfig+0x230>)
 800c7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	4a6d      	ldr	r2, [pc, #436]	; (800c970 <UART_SetConfig+0x23c>)
 800c7ba:	e7e3      	b.n	800c784 <UART_SetConfig+0x50>
 800c7bc:	4a6d      	ldr	r2, [pc, #436]	; (800c974 <UART_SetConfig+0x240>)
 800c7be:	2400      	movs	r4, #0
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d0e0      	beq.n	800c786 <UART_SetConfig+0x52>
 800c7c4:	4a6c      	ldr	r2, [pc, #432]	; (800c978 <UART_SetConfig+0x244>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d0dd      	beq.n	800c786 <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800c7ca:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7cc:	42b3      	cmp	r3, r6
 800c7ce:	d1da      	bne.n	800c786 <UART_SetConfig+0x52>
 800c7d0:	22c0      	movs	r2, #192	; 0xc0
 800c7d2:	2180      	movs	r1, #128	; 0x80
 800c7d4:	4b63      	ldr	r3, [pc, #396]	; (800c964 <UART_SetConfig+0x230>)
 800c7d6:	0112      	lsls	r2, r2, #4
 800c7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7da:	00c9      	lsls	r1, r1, #3
 800c7dc:	4013      	ands	r3, r2
 800c7de:	3c0c      	subs	r4, #12
 800c7e0:	428b      	cmp	r3, r1
 800c7e2:	d0d0      	beq.n	800c786 <UART_SetConfig+0x52>
 800c7e4:	d804      	bhi.n	800c7f0 <UART_SetConfig+0xbc>
 800c7e6:	2400      	movs	r4, #0
 800c7e8:	42a3      	cmp	r3, r4
 800c7ea:	d0cc      	beq.n	800c786 <UART_SetConfig+0x52>
 800c7ec:	2410      	movs	r4, #16
 800c7ee:	e7ca      	b.n	800c786 <UART_SetConfig+0x52>
 800c7f0:	2180      	movs	r1, #128	; 0x80
 800c7f2:	2402      	movs	r4, #2
 800c7f4:	0109      	lsls	r1, r1, #4
 800c7f6:	428b      	cmp	r3, r1
 800c7f8:	d0c5      	beq.n	800c786 <UART_SetConfig+0x52>
 800c7fa:	3406      	adds	r4, #6
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d0c2      	beq.n	800c786 <UART_SetConfig+0x52>
 800c800:	e7f4      	b.n	800c7ec <UART_SetConfig+0xb8>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800c802:	f001 f81f 	bl	800d844 <HAL_RCC_GetPCLK1Freq>
 800c806:	2400      	movs	r4, #0
      tmpreg = HAL_RCC_GetSysClockFreq();
 800c808:	0003      	movs	r3, r0
    if (tmpreg != 0)
 800c80a:	42a0      	cmp	r0, r4
 800c80c:	d106      	bne.n	800c81c <UART_SetConfig+0xe8>
}
 800c80e:	0020      	movs	r0, r4
 800c810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c812:	4b54      	ldr	r3, [pc, #336]	; (800c964 <UART_SetConfig+0x230>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	06db      	lsls	r3, r3, #27
 800c818:	d421      	bmi.n	800c85e <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 800c81a:	4b58      	ldr	r3, [pc, #352]	; (800c97c <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800c81c:	2103      	movs	r1, #3
 800c81e:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 800c820:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800c822:	4351      	muls	r1, r2
 800c824:	4299      	cmp	r1, r3
 800c826:	d8f2      	bhi.n	800c80e <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800c828:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800c82a:	4299      	cmp	r1, r3
 800c82c:	d3ef      	bcc.n	800c80e <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 800c82e:	2700      	movs	r7, #0
 800c830:	0856      	lsrs	r6, r2, #1
 800c832:	0e19      	lsrs	r1, r3, #24
 800c834:	0218      	lsls	r0, r3, #8
 800c836:	1980      	adds	r0, r0, r6
 800c838:	4179      	adcs	r1, r7
 800c83a:	003b      	movs	r3, r7
 800c83c:	f7f4 fb70 	bl	8000f20 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800c840:	4b4f      	ldr	r3, [pc, #316]	; (800c980 <UART_SetConfig+0x24c>)
 800c842:	18c2      	adds	r2, r0, r3
 800c844:	4b4f      	ldr	r3, [pc, #316]	; (800c984 <UART_SetConfig+0x250>)
 800c846:	429a      	cmp	r2, r3
 800c848:	d8e1      	bhi.n	800c80e <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c84e:	2400      	movs	r4, #0
      break;
 800c850:	e7dd      	b.n	800c80e <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800c852:	f000 ff03 	bl	800d65c <HAL_RCC_GetSysClockFreq>
 800c856:	e7d6      	b.n	800c806 <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 800c858:	2380      	movs	r3, #128	; 0x80
 800c85a:	021b      	lsls	r3, r3, #8
 800c85c:	e7de      	b.n	800c81c <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 800c85e:	4b4a      	ldr	r3, [pc, #296]	; (800c988 <UART_SetConfig+0x254>)
 800c860:	e7dc      	b.n	800c81c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c862:	2280      	movs	r2, #128	; 0x80
 800c864:	69e9      	ldr	r1, [r5, #28]
 800c866:	0212      	lsls	r2, r2, #8
 800c868:	4291      	cmp	r1, r2
 800c86a:	d13f      	bne.n	800c8ec <UART_SetConfig+0x1b8>
    switch (clocksource)
 800c86c:	2c08      	cmp	r4, #8
 800c86e:	d83a      	bhi.n	800c8e6 <UART_SetConfig+0x1b2>
 800c870:	0020      	movs	r0, r4
 800c872:	f7f4 f983 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800c876:	0f05      	.short	0x0f05
 800c878:	38303817 	.word	0x38303817
 800c87c:	3838      	.short	0x3838
 800c87e:	33          	.byte	0x33
 800c87f:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800c880:	686a      	ldr	r2, [r5, #4]
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	0011      	movs	r1, r2
 800c886:	0850      	lsrs	r0, r2, #1
 800c888:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c88a:	f7f4 f995 	bl	8000bb8 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c88e:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c890:	b280      	uxth	r0, r0
      break;
 800c892:	e016      	b.n	800c8c2 <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c894:	f000 ffe6 	bl	800d864 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c898:	686b      	ldr	r3, [r5, #4]
 800c89a:	0040      	lsls	r0, r0, #1
 800c89c:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c89e:	18c0      	adds	r0, r0, r3
 800c8a0:	6869      	ldr	r1, [r5, #4]
 800c8a2:	e7f2      	b.n	800c88a <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8a4:	4b2f      	ldr	r3, [pc, #188]	; (800c964 <UART_SetConfig+0x230>)
 800c8a6:	6869      	ldr	r1, [r5, #4]
 800c8a8:	681c      	ldr	r4, [r3, #0]
 800c8aa:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800c8ac:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8ae:	401c      	ands	r4, r3
 800c8b0:	d002      	beq.n	800c8b8 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800c8b2:	4b36      	ldr	r3, [pc, #216]	; (800c98c <UART_SetConfig+0x258>)
 800c8b4:	18c0      	adds	r0, r0, r3
 800c8b6:	e7e8      	b.n	800c88a <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800c8b8:	4b35      	ldr	r3, [pc, #212]	; (800c990 <UART_SetConfig+0x25c>)
 800c8ba:	18c0      	adds	r0, r0, r3
 800c8bc:	f7f4 f97c 	bl	8000bb8 <__udivsi3>
 800c8c0:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 800c8c2:	230f      	movs	r3, #15
 800c8c4:	0002      	movs	r2, r0
 800c8c6:	439a      	bics	r2, r3
 800c8c8:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800c8ca:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 800c8cc:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800c8ce:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 800c8d0:	4318      	orrs	r0, r3
 800c8d2:	60d0      	str	r0, [r2, #12]
 800c8d4:	e79b      	b.n	800c80e <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c8d6:	f000 fec1 	bl	800d65c <HAL_RCC_GetSysClockFreq>
 800c8da:	e7dd      	b.n	800c898 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c8dc:	686b      	ldr	r3, [r5, #4]
 800c8de:	0858      	lsrs	r0, r3, #1
 800c8e0:	2380      	movs	r3, #128	; 0x80
 800c8e2:	025b      	lsls	r3, r3, #9
 800c8e4:	e7db      	b.n	800c89e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800c8e6:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e7ea      	b.n	800c8c2 <UART_SetConfig+0x18e>
    switch (clocksource)
 800c8ec:	2c08      	cmp	r4, #8
 800c8ee:	d82c      	bhi.n	800c94a <UART_SetConfig+0x216>
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	f7f4 f943 	bl	8000b7c <__gnu_thumb1_case_uqi>
 800c8f6:	0f05      	.short	0x0f05
 800c8f8:	2a222a12 	.word	0x2a222a12
 800c8fc:	2a2a      	.short	0x2a2a
 800c8fe:	25          	.byte	0x25
 800c8ff:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c900:	f000 ffa0 	bl	800d844 <HAL_RCC_GetPCLK1Freq>
 800c904:	6869      	ldr	r1, [r5, #4]
 800c906:	084b      	lsrs	r3, r1, #1
 800c908:	1818      	adds	r0, r3, r0
 800c90a:	f7f4 f955 	bl	8000bb8 <__udivsi3>
 800c90e:	b280      	uxth	r0, r0
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	e79c      	b.n	800c84e <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c914:	f000 ffa6 	bl	800d864 <HAL_RCC_GetPCLK2Freq>
 800c918:	e7f4      	b.n	800c904 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c91a:	4b12      	ldr	r3, [pc, #72]	; (800c964 <UART_SetConfig+0x230>)
 800c91c:	6869      	ldr	r1, [r5, #4]
 800c91e:	681c      	ldr	r4, [r3, #0]
 800c920:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800c922:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c924:	401c      	ands	r4, r3
 800c926:	d001      	beq.n	800c92c <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800c928:	4b17      	ldr	r3, [pc, #92]	; (800c988 <UART_SetConfig+0x254>)
 800c92a:	e7ed      	b.n	800c908 <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c92c:	4b13      	ldr	r3, [pc, #76]	; (800c97c <UART_SetConfig+0x248>)
 800c92e:	18c0      	adds	r0, r0, r3
 800c930:	f7f4 f942 	bl	8000bb8 <__udivsi3>
 800c934:	b280      	uxth	r0, r0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	e769      	b.n	800c80e <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c93a:	f000 fe8f 	bl	800d65c <HAL_RCC_GetSysClockFreq>
 800c93e:	e7e1      	b.n	800c904 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c940:	2380      	movs	r3, #128	; 0x80
 800c942:	6869      	ldr	r1, [r5, #4]
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	0848      	lsrs	r0, r1, #1
 800c948:	e7de      	b.n	800c908 <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 800c94a:	2401      	movs	r4, #1
 800c94c:	e75f      	b.n	800c80e <UART_SetConfig+0xda>
 800c94e:	46c0      	nop			; (mov r8, r8)
 800c950:	40004800 	.word	0x40004800
 800c954:	efff69f3 	.word	0xefff69f3
 800c958:	ffffcfff 	.word	0xffffcfff
 800c95c:	fffff4ff 	.word	0xfffff4ff
 800c960:	40013800 	.word	0x40013800
 800c964:	40021000 	.word	0x40021000
 800c968:	080185a3 	.word	0x080185a3
 800c96c:	40004400 	.word	0x40004400
 800c970:	080185a7 	.word	0x080185a7
 800c974:	40004c00 	.word	0x40004c00
 800c978:	40005000 	.word	0x40005000
 800c97c:	00f42400 	.word	0x00f42400
 800c980:	fffffd00 	.word	0xfffffd00
 800c984:	000ffcff 	.word	0x000ffcff
 800c988:	003d0900 	.word	0x003d0900
 800c98c:	007a1200 	.word	0x007a1200
 800c990:	01e84800 	.word	0x01e84800

0800c994 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c994:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800c996:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c998:	07da      	lsls	r2, r3, #31
 800c99a:	d506      	bpl.n	800c9aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c99c:	6801      	ldr	r1, [r0, #0]
 800c99e:	4c28      	ldr	r4, [pc, #160]	; (800ca40 <UART_AdvFeatureConfig+0xac>)
 800c9a0:	684a      	ldr	r2, [r1, #4]
 800c9a2:	4022      	ands	r2, r4
 800c9a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c9a6:	4322      	orrs	r2, r4
 800c9a8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9aa:	079a      	lsls	r2, r3, #30
 800c9ac:	d506      	bpl.n	800c9bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9ae:	6801      	ldr	r1, [r0, #0]
 800c9b0:	4c24      	ldr	r4, [pc, #144]	; (800ca44 <UART_AdvFeatureConfig+0xb0>)
 800c9b2:	684a      	ldr	r2, [r1, #4]
 800c9b4:	4022      	ands	r2, r4
 800c9b6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c9b8:	4322      	orrs	r2, r4
 800c9ba:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9bc:	075a      	lsls	r2, r3, #29
 800c9be:	d506      	bpl.n	800c9ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9c0:	6801      	ldr	r1, [r0, #0]
 800c9c2:	4c21      	ldr	r4, [pc, #132]	; (800ca48 <UART_AdvFeatureConfig+0xb4>)
 800c9c4:	684a      	ldr	r2, [r1, #4]
 800c9c6:	4022      	ands	r2, r4
 800c9c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c9ca:	4322      	orrs	r2, r4
 800c9cc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9ce:	071a      	lsls	r2, r3, #28
 800c9d0:	d506      	bpl.n	800c9e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9d2:	6801      	ldr	r1, [r0, #0]
 800c9d4:	4c1d      	ldr	r4, [pc, #116]	; (800ca4c <UART_AdvFeatureConfig+0xb8>)
 800c9d6:	684a      	ldr	r2, [r1, #4]
 800c9d8:	4022      	ands	r2, r4
 800c9da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c9dc:	4322      	orrs	r2, r4
 800c9de:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9e0:	06da      	lsls	r2, r3, #27
 800c9e2:	d506      	bpl.n	800c9f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9e4:	6801      	ldr	r1, [r0, #0]
 800c9e6:	4c1a      	ldr	r4, [pc, #104]	; (800ca50 <UART_AdvFeatureConfig+0xbc>)
 800c9e8:	688a      	ldr	r2, [r1, #8]
 800c9ea:	4022      	ands	r2, r4
 800c9ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c9ee:	4322      	orrs	r2, r4
 800c9f0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9f2:	069a      	lsls	r2, r3, #26
 800c9f4:	d506      	bpl.n	800ca04 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9f6:	6801      	ldr	r1, [r0, #0]
 800c9f8:	4c16      	ldr	r4, [pc, #88]	; (800ca54 <UART_AdvFeatureConfig+0xc0>)
 800c9fa:	688a      	ldr	r2, [r1, #8]
 800c9fc:	4022      	ands	r2, r4
 800c9fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ca00:	4322      	orrs	r2, r4
 800ca02:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca04:	065a      	lsls	r2, r3, #25
 800ca06:	d510      	bpl.n	800ca2a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca08:	6801      	ldr	r1, [r0, #0]
 800ca0a:	4d13      	ldr	r5, [pc, #76]	; (800ca58 <UART_AdvFeatureConfig+0xc4>)
 800ca0c:	684a      	ldr	r2, [r1, #4]
 800ca0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ca10:	402a      	ands	r2, r5
 800ca12:	4322      	orrs	r2, r4
 800ca14:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca16:	2280      	movs	r2, #128	; 0x80
 800ca18:	0352      	lsls	r2, r2, #13
 800ca1a:	4294      	cmp	r4, r2
 800ca1c:	d105      	bne.n	800ca2a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca1e:	684a      	ldr	r2, [r1, #4]
 800ca20:	4c0e      	ldr	r4, [pc, #56]	; (800ca5c <UART_AdvFeatureConfig+0xc8>)
 800ca22:	4022      	ands	r2, r4
 800ca24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800ca26:	4322      	orrs	r2, r4
 800ca28:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca2a:	061b      	lsls	r3, r3, #24
 800ca2c:	d506      	bpl.n	800ca3c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca2e:	6802      	ldr	r2, [r0, #0]
 800ca30:	490b      	ldr	r1, [pc, #44]	; (800ca60 <UART_AdvFeatureConfig+0xcc>)
 800ca32:	6853      	ldr	r3, [r2, #4]
 800ca34:	400b      	ands	r3, r1
 800ca36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	6053      	str	r3, [r2, #4]
}
 800ca3c:	bd30      	pop	{r4, r5, pc}
 800ca3e:	46c0      	nop			; (mov r8, r8)
 800ca40:	fffdffff 	.word	0xfffdffff
 800ca44:	fffeffff 	.word	0xfffeffff
 800ca48:	fffbffff 	.word	0xfffbffff
 800ca4c:	ffff7fff 	.word	0xffff7fff
 800ca50:	ffffefff 	.word	0xffffefff
 800ca54:	ffffdfff 	.word	0xffffdfff
 800ca58:	ffefffff 	.word	0xffefffff
 800ca5c:	ff9fffff 	.word	0xff9fffff
 800ca60:	fff7ffff 	.word	0xfff7ffff

0800ca64 <UART_WaitOnFlagUntilTimeout>:
{
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	0004      	movs	r4, r0
 800ca68:	000e      	movs	r6, r1
 800ca6a:	0015      	movs	r5, r2
 800ca6c:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca6e:	6822      	ldr	r2, [r4, #0]
 800ca70:	69d3      	ldr	r3, [r2, #28]
 800ca72:	4033      	ands	r3, r6
 800ca74:	1b9b      	subs	r3, r3, r6
 800ca76:	4259      	negs	r1, r3
 800ca78:	414b      	adcs	r3, r1
 800ca7a:	42ab      	cmp	r3, r5
 800ca7c:	d001      	beq.n	800ca82 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800ca7e:	2000      	movs	r0, #0
 800ca80:	e018      	b.n	800cab4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800ca82:	9b06      	ldr	r3, [sp, #24]
 800ca84:	3301      	adds	r3, #1
 800ca86:	d0f3      	beq.n	800ca70 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800ca88:	9b06      	ldr	r3, [sp, #24]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d113      	bne.n	800cab6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	490c      	ldr	r1, [pc, #48]	; (800cac4 <UART_WaitOnFlagUntilTimeout+0x60>)
 800ca92:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800ca94:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca96:	400a      	ands	r2, r1
 800ca98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca9a:	689a      	ldr	r2, [r3, #8]
 800ca9c:	31a3      	adds	r1, #163	; 0xa3
 800ca9e:	31ff      	adds	r1, #255	; 0xff
 800caa0:	438a      	bics	r2, r1
 800caa2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800caa4:	0022      	movs	r2, r4
 800caa6:	2320      	movs	r3, #32
 800caa8:	3269      	adds	r2, #105	; 0x69
 800caaa:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800caac:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800caae:	2300      	movs	r3, #0
 800cab0:	3468      	adds	r4, #104	; 0x68
 800cab2:	7023      	strb	r3, [r4, #0]
}
 800cab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800cab6:	f7ff f9c9 	bl	800be4c <HAL_GetTick>
 800caba:	9b06      	ldr	r3, [sp, #24]
 800cabc:	1bc0      	subs	r0, r0, r7
 800cabe:	4283      	cmp	r3, r0
 800cac0:	d2d5      	bcs.n	800ca6e <UART_WaitOnFlagUntilTimeout+0xa>
 800cac2:	e7e4      	b.n	800ca8e <UART_WaitOnFlagUntilTimeout+0x2a>
 800cac4:	fffffe5f 	.word	0xfffffe5f

0800cac8 <UART_CheckIdleState>:
{
 800cac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caca:	2600      	movs	r6, #0
{
 800cacc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cace:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800cad0:	f7ff f9bc 	bl	800be4c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cad4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cad6:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	071b      	lsls	r3, r3, #28
 800cadc:	d417      	bmi.n	800cb0e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	075b      	lsls	r3, r3, #29
 800cae4:	d50a      	bpl.n	800cafc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cae6:	2180      	movs	r1, #128	; 0x80
 800cae8:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <UART_CheckIdleState+0x60>)
 800caea:	2200      	movs	r2, #0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	03c9      	lsls	r1, r1, #15
 800caf0:	002b      	movs	r3, r5
 800caf2:	0020      	movs	r0, r4
 800caf4:	f7ff ffb6 	bl	800ca64 <UART_WaitOnFlagUntilTimeout>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d113      	bne.n	800cb24 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 800cafc:	0022      	movs	r2, r4
 800cafe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800cb00:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800cb02:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 800cb04:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800cb06:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800cb08:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 800cb0a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800cb0c:	e00b      	b.n	800cb26 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb0e:	2180      	movs	r1, #128	; 0x80
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <UART_CheckIdleState+0x60>)
 800cb12:	0032      	movs	r2, r6
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	0389      	lsls	r1, r1, #14
 800cb18:	0003      	movs	r3, r0
 800cb1a:	0020      	movs	r0, r4
 800cb1c:	f7ff ffa2 	bl	800ca64 <UART_WaitOnFlagUntilTimeout>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d0dc      	beq.n	800cade <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800cb24:	2003      	movs	r0, #3
}
 800cb26:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800cb28:	01ffffff 	.word	0x01ffffff

0800cb2c <HAL_UART_Init>:
{
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800cb30:	d101      	bne.n	800cb36 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800cb32:	2001      	movs	r0, #1
}
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800cb36:	0005      	movs	r5, r0
 800cb38:	3569      	adds	r5, #105	; 0x69
 800cb3a:	782b      	ldrb	r3, [r5, #0]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d104      	bne.n	800cb4c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800cb42:	0002      	movs	r2, r0
 800cb44:	3268      	adds	r2, #104	; 0x68
 800cb46:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800cb48:	f7fd ff7c 	bl	800aa44 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800cb4c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800cb4e:	2101      	movs	r1, #1
 800cb50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cb52:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800cb54:	6813      	ldr	r3, [r2, #0]
 800cb56:	438b      	bics	r3, r1
 800cb58:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 800cb60:	0020      	movs	r0, r4
 800cb62:	f7ff ff17 	bl	800c994 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb66:	0020      	movs	r0, r4
 800cb68:	f7ff fde4 	bl	800c734 <UART_SetConfig>
 800cb6c:	2801      	cmp	r0, #1
 800cb6e:	d0e0      	beq.n	800cb32 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	4908      	ldr	r1, [pc, #32]	; (800cb94 <HAL_UART_Init+0x68>)
 800cb74:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800cb76:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb78:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb7a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	438a      	bics	r2, r1
 800cb82:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cb84:	2201      	movs	r2, #1
 800cb86:	6819      	ldr	r1, [r3, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800cb8c:	f7ff ff9c 	bl	800cac8 <UART_CheckIdleState>
 800cb90:	e7d0      	b.n	800cb34 <HAL_UART_Init+0x8>
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	ffffb7ff 	.word	0xffffb7ff

0800cb98 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *      @arg @ref UART_WAKEUP_ON_STARTBIT
  *      @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cb98:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb9a:	0005      	movs	r5, r0
{
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	9102      	str	r1, [sp, #8]
 800cba0:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 800cba2:	3568      	adds	r5, #104	; 0x68
 800cba4:	782b      	ldrb	r3, [r5, #0]
{
 800cba6:	0004      	movs	r4, r0
 800cba8:	af02      	add	r7, sp, #8
  __HAL_LOCK(huart);
 800cbaa:	2002      	movs	r0, #2
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d032      	beq.n	800cc16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb0:	0026      	movs	r6, r4
 800cbb2:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800cbb4:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800cbb6:	3669      	adds	r6, #105	; 0x69
  __HAL_LOCK(huart);
 800cbb8:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cbba:	7033      	strb	r3, [r6, #0]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	4382      	bics	r2, r0
 800cbc2:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	4816      	ldr	r0, [pc, #88]	; (800cc20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 800cbc8:	4002      	ands	r2, r0
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cbce:	2900      	cmp	r1, #0
 800cbd0:	d10c      	bne.n	800cbec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
  {
    assert_param(IS_UART_7B_ADDRESS(WakeUpSelection.Address));
  }

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800cbd2:	2210      	movs	r2, #16
 800cbd4:	6859      	ldr	r1, [r3, #4]
 800cbd6:	79b8      	ldrb	r0, [r7, #6]
 800cbd8:	4391      	bics	r1, r2
 800cbda:	88ba      	ldrh	r2, [r7, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cbdc:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800cbde:	4311      	orrs	r1, r2
 800cbe0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	0212      	lsls	r2, r2, #8
 800cbe6:	0a12      	lsrs	r2, r2, #8
 800cbe8:	4302      	orrs	r2, r0
 800cbea:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800cbec:	2201      	movs	r2, #1
 800cbee:	6819      	ldr	r1, [r3, #0]
 800cbf0:	430a      	orrs	r2, r1
 800cbf2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800cbf4:	f7ff f92a 	bl	800be4c <HAL_GetTick>
  if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbf8:	2180      	movs	r1, #128	; 0x80
 800cbfa:	4a0a      	ldr	r2, [pc, #40]	; (800cc24 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 800cbfc:	0003      	movs	r3, r0
  if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbfe:	9200      	str	r2, [sp, #0]
 800cc00:	03c9      	lsls	r1, r1, #15
 800cc02:	2200      	movs	r2, #0
 800cc04:	0020      	movs	r0, r4
 800cc06:	f7ff ff2d 	bl	800ca64 <UART_WaitOnFlagUntilTimeout>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d105      	bne.n	800cc1a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800cc0e:	2320      	movs	r3, #32
 800cc10:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 800cc12:	2300      	movs	r3, #0
 800cc14:	702b      	strb	r3, [r5, #0]
}
 800cc16:	b005      	add	sp, #20
 800cc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 800cc1a:	2003      	movs	r0, #3
 800cc1c:	e7f9      	b.n	800cc12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 800cc1e:	46c0      	nop			; (mov r8, r8)
 800cc20:	ffcfffff 	.word	0xffcfffff
 800cc24:	01ffffff 	.word	0x01ffffff

0800cc28 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800cc28:	0002      	movs	r2, r0
{
 800cc2a:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800cc2c:	3268      	adds	r2, #104	; 0x68
 800cc2e:	7811      	ldrb	r1, [r2, #0]
 800cc30:	2302      	movs	r3, #2
 800cc32:	2901      	cmp	r1, #1
 800cc34:	d00b      	beq.n	800cc4e <HAL_UARTEx_EnableStopMode+0x26>
  huart->gState = HAL_UART_STATE_BUSY;
 800cc36:	0001      	movs	r1, r0
 800cc38:	2424      	movs	r4, #36	; 0x24
 800cc3a:	3169      	adds	r1, #105	; 0x69
 800cc3c:	700c      	strb	r4, [r1, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800cc3e:	6804      	ldr	r4, [r0, #0]
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	4303      	orrs	r3, r0
 800cc44:	6023      	str	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cc46:	2320      	movs	r3, #32
 800cc48:	700b      	strb	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	7013      	strb	r3, [r2, #0]
}
 800cc4e:	0018      	movs	r0, r3
 800cc50:	bd10      	pop	{r4, pc}

0800cc52 <HAL_UARTEx_WakeupCallback>:
}
 800cc52:	4770      	bx	lr

0800cc54 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800cc54:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <ADC_DelayMicroSecond+0x24>)
{
 800cc56:	b513      	push	{r0, r1, r4, lr}
 800cc58:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800cc5a:	4908      	ldr	r1, [pc, #32]	; (800cc7c <ADC_DelayMicroSecond+0x28>)
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f7f3 ffab 	bl	8000bb8 <__udivsi3>
 800cc62:	4344      	muls	r4, r0
 800cc64:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d100      	bne.n	800cc6e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800cc6c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	9301      	str	r3, [sp, #4]
 800cc74:	e7f7      	b.n	800cc66 <ADC_DelayMicroSecond+0x12>
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	200009e8 	.word	0x200009e8
 800cc7c:	000f4240 	.word	0x000f4240

0800cc80 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cc80:	2103      	movs	r1, #3
 800cc82:	6803      	ldr	r3, [r0, #0]
{
 800cc84:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cc86:	689a      	ldr	r2, [r3, #8]
{
 800cc88:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cc8a:	400a      	ands	r2, r1
 800cc8c:	2a01      	cmp	r2, #1
 800cc8e:	d10d      	bne.n	800ccac <ADC_Enable+0x2c>
 800cc90:	6819      	ldr	r1, [r3, #0]
 800cc92:	4211      	tst	r1, r2
 800cc94:	d00a      	beq.n	800ccac <ADC_Enable+0x2c>
  return HAL_OK;
 800cc96:	2000      	movs	r0, #0
}
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc9a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cc9c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc9e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cca0:	4313      	orrs	r3, r2
 800cca2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cca4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cca6:	4303      	orrs	r3, r0
 800cca8:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800ccaa:	e7f5      	b.n	800cc98 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ccac:	6899      	ldr	r1, [r3, #8]
 800ccae:	4a0f      	ldr	r2, [pc, #60]	; (800ccec <ADC_Enable+0x6c>)
 800ccb0:	4211      	tst	r1, r2
 800ccb2:	d1f2      	bne.n	800cc9a <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 800ccb4:	2501      	movs	r5, #1
 800ccb6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800ccb8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800ccba:	432a      	orrs	r2, r5
 800ccbc:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800ccbe:	f7ff ffc9 	bl	800cc54 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800ccc2:	f7ff f8c3 	bl	800be4c <HAL_GetTick>
 800ccc6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	422b      	tst	r3, r5
 800ccce:	d1e2      	bne.n	800cc96 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ccd0:	f7ff f8bc 	bl	800be4c <HAL_GetTick>
 800ccd4:	1b80      	subs	r0, r0, r6
 800ccd6:	280a      	cmp	r0, #10
 800ccd8:	d9f6      	bls.n	800ccc8 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ccda:	2310      	movs	r3, #16
 800ccdc:	6da2      	ldr	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 800ccde:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cce0:	4313      	orrs	r3, r2
 800cce2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cce4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cce6:	431d      	orrs	r5, r3
 800cce8:	65e5      	str	r5, [r4, #92]	; 0x5c
        return HAL_ERROR;
 800ccea:	e7d5      	b.n	800cc98 <ADC_Enable+0x18>
 800ccec:	80000017 	.word	0x80000017

0800ccf0 <HAL_ADC_MspInit>:
 800ccf0:	4770      	bx	lr
	...

0800ccf4 <HAL_ADC_Init>:
{
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	0004      	movs	r4, r0
    return HAL_ERROR;
 800ccf8:	2001      	movs	r0, #1
  if(hadc == NULL)
 800ccfa:	2c00      	cmp	r4, #0
 800ccfc:	d019      	beq.n	800cd32 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800ccfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800cd04:	0022      	movs	r2, r4
 800cd06:	3254      	adds	r2, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800cd08:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_MspInit(hadc);
 800cd0a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800cd0c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800cd0e:	f7ff ffef 	bl	800ccf0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800cd12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd14:	06db      	lsls	r3, r3, #27
 800cd16:	d404      	bmi.n	800cd22 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800cd18:	2204      	movs	r2, #4
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	6898      	ldr	r0, [r3, #8]
 800cd1e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800cd20:	d008      	beq.n	800cd34 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cd22:	2310      	movs	r3, #16
 800cd24:	6da2      	ldr	r2, [r4, #88]	; 0x58
    return HAL_ERROR;
 800cd26:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	3454      	adds	r4, #84	; 0x54
 800cd30:	7023      	strb	r3, [r4, #0]
}
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800cd34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cd36:	4953      	ldr	r1, [pc, #332]	; (800ce84 <HAL_ADC_Init+0x190>)
 800cd38:	4011      	ands	r1, r2
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cd40:	2203      	movs	r2, #3
 800cd42:	6899      	ldr	r1, [r3, #8]
 800cd44:	4011      	ands	r1, r2
 800cd46:	4a50      	ldr	r2, [pc, #320]	; (800ce88 <HAL_ADC_Init+0x194>)
 800cd48:	2901      	cmp	r1, #1
 800cd4a:	d102      	bne.n	800cd52 <HAL_ADC_Init+0x5e>
 800cd4c:	681d      	ldr	r5, [r3, #0]
 800cd4e:	420d      	tst	r5, r1
 800cd50:	d119      	bne.n	800cd86 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800cd52:	2680      	movs	r6, #128	; 0x80
 800cd54:	6865      	ldr	r5, [r4, #4]
 800cd56:	05f6      	lsls	r6, r6, #23
 800cd58:	0069      	lsls	r1, r5, #1
 800cd5a:	0849      	lsrs	r1, r1, #1
 800cd5c:	42b1      	cmp	r1, r6
 800cd5e:	d003      	beq.n	800cd68 <HAL_ADC_Init+0x74>
 800cd60:	2180      	movs	r1, #128	; 0x80
 800cd62:	0609      	lsls	r1, r1, #24
 800cd64:	428d      	cmp	r5, r1
 800cd66:	d172      	bne.n	800ce4e <HAL_ADC_Init+0x15a>
 800cd68:	6919      	ldr	r1, [r3, #16]
 800cd6a:	0089      	lsls	r1, r1, #2
 800cd6c:	0889      	lsrs	r1, r1, #2
 800cd6e:	6119      	str	r1, [r3, #16]
 800cd70:	6919      	ldr	r1, [r3, #16]
 800cd72:	430d      	orrs	r5, r1
 800cd74:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800cd76:	2518      	movs	r5, #24
 800cd78:	68d9      	ldr	r1, [r3, #12]
 800cd7a:	43a9      	bics	r1, r5
 800cd7c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800cd7e:	68d9      	ldr	r1, [r3, #12]
 800cd80:	68a5      	ldr	r5, [r4, #8]
 800cd82:	4329      	orrs	r1, r5
 800cd84:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800cd86:	6811      	ldr	r1, [r2, #0]
 800cd88:	4d40      	ldr	r5, [pc, #256]	; (800ce8c <HAL_ADC_Init+0x198>)
 800cd8a:	4029      	ands	r1, r5
 800cd8c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800cd8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd90:	6815      	ldr	r5, [r2, #0]
 800cd92:	0649      	lsls	r1, r1, #25
 800cd94:	4329      	orrs	r1, r5
 800cd96:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800cd98:	2280      	movs	r2, #128	; 0x80
 800cd9a:	6899      	ldr	r1, [r3, #8]
 800cd9c:	0552      	lsls	r2, r2, #21
 800cd9e:	4211      	tst	r1, r2
 800cda0:	d102      	bne.n	800cda8 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800cda2:	6899      	ldr	r1, [r3, #8]
 800cda4:	430a      	orrs	r2, r1
 800cda6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800cda8:	68da      	ldr	r2, [r3, #12]
 800cdaa:	4939      	ldr	r1, [pc, #228]	; (800ce90 <HAL_ADC_Init+0x19c>)
 800cdac:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800cdae:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800cdb0:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdb2:	68dd      	ldr	r5, [r3, #12]
 800cdb4:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800cdb6:	2902      	cmp	r1, #2
 800cdb8:	d100      	bne.n	800cdbc <HAL_ADC_Init+0xc8>
 800cdba:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdbc:	6b66      	ldr	r6, [r4, #52]	; 0x34
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800cdbe:	6a21      	ldr	r1, [r4, #32]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdc0:	4332      	orrs	r2, r6
 800cdc2:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800cdc4:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdc6:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800cdc8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800cdca:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdcc:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800cdce:	69a5      	ldr	r5, [r4, #24]
 800cdd0:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdd2:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800cdd4:	69e5      	ldr	r5, [r4, #28]
 800cdd6:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdd8:	432a      	orrs	r2, r5
 800cdda:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cddc:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800cdde:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cde0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cde2:	30ff      	adds	r0, #255	; 0xff
 800cde4:	4282      	cmp	r2, r0
 800cde6:	d004      	beq.n	800cdf2 <HAL_ADC_Init+0xfe>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800cde8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800cdea:	68d8      	ldr	r0, [r3, #12]
 800cdec:	432a      	orrs	r2, r5
 800cdee:	4302      	orrs	r2, r0
 800cdf0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800cdf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cdf4:	2a01      	cmp	r2, #1
 800cdf6:	d106      	bne.n	800ce06 <HAL_ADC_Init+0x112>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800cdf8:	2900      	cmp	r1, #0
 800cdfa:	d134      	bne.n	800ce66 <HAL_ADC_Init+0x172>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800cdfc:	2280      	movs	r2, #128	; 0x80
 800cdfe:	68d9      	ldr	r1, [r3, #12]
 800ce00:	0252      	lsls	r2, r2, #9
 800ce02:	430a      	orrs	r2, r1
 800ce04:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800ce06:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800ce08:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800ce0a:	2901      	cmp	r1, #1
 800ce0c:	d133      	bne.n	800ce76 <HAL_ADC_Init+0x182>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800ce0e:	4821      	ldr	r0, [pc, #132]	; (800ce94 <HAL_ADC_Init+0x1a0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800ce10:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800ce12:	4002      	ands	r2, r0
 800ce14:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800ce16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ce18:	6918      	ldr	r0, [r3, #16]
 800ce1a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800ce1c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ce1e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800ce20:	4302      	orrs	r2, r0
 800ce22:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800ce24:	691a      	ldr	r2, [r3, #16]
 800ce26:	4311      	orrs	r1, r2
 800ce28:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800ce2a:	2107      	movs	r1, #7
 800ce2c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800ce2e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800ce30:	438a      	bics	r2, r1
 800ce32:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800ce34:	695a      	ldr	r2, [r3, #20]
 800ce36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800ce3c:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800ce3e:	65e0      	str	r0, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 800ce40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce42:	4393      	bics	r3, r2
 800ce44:	001a      	movs	r2, r3
 800ce46:	2301      	movs	r3, #1
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800ce4c:	e771      	b.n	800cd32 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800ce4e:	6919      	ldr	r1, [r3, #16]
 800ce50:	4e11      	ldr	r6, [pc, #68]	; (800ce98 <HAL_ADC_Init+0x1a4>)
 800ce52:	0089      	lsls	r1, r1, #2
 800ce54:	0889      	lsrs	r1, r1, #2
 800ce56:	6119      	str	r1, [r3, #16]
 800ce58:	6811      	ldr	r1, [r2, #0]
 800ce5a:	4031      	ands	r1, r6
 800ce5c:	6011      	str	r1, [r2, #0]
 800ce5e:	6811      	ldr	r1, [r2, #0]
 800ce60:	430d      	orrs	r5, r1
 800ce62:	6015      	str	r5, [r2, #0]
 800ce64:	e787      	b.n	800cd76 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ce66:	2120      	movs	r1, #32
 800ce68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce6a:	4301      	orrs	r1, r0
 800ce6c:	65a1      	str	r1, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ce6e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ce70:	430a      	orrs	r2, r1
 800ce72:	65e2      	str	r2, [r4, #92]	; 0x5c
 800ce74:	e7c7      	b.n	800ce06 <HAL_ADC_Init+0x112>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800ce76:	2101      	movs	r1, #1
 800ce78:	420a      	tst	r2, r1
 800ce7a:	d0d6      	beq.n	800ce2a <HAL_ADC_Init+0x136>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800ce7c:	691a      	ldr	r2, [r3, #16]
 800ce7e:	438a      	bics	r2, r1
 800ce80:	611a      	str	r2, [r3, #16]
 800ce82:	e7d2      	b.n	800ce2a <HAL_ADC_Init+0x136>
 800ce84:	fffffefd 	.word	0xfffffefd
 800ce88:	40012708 	.word	0x40012708
 800ce8c:	fdffffff 	.word	0xfdffffff
 800ce90:	fffe0219 	.word	0xfffe0219
 800ce94:	fffffc03 	.word	0xfffffc03
 800ce98:	ffc3ffff 	.word	0xffc3ffff

0800ce9c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ce9c:	6803      	ldr	r3, [r0, #0]
{
 800ce9e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cea0:	689b      	ldr	r3, [r3, #8]
{
 800cea2:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 800cea4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cea6:	075b      	lsls	r3, r3, #29
 800cea8:	d41a      	bmi.n	800cee0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800ceaa:	0025      	movs	r5, r4
 800ceac:	3554      	adds	r5, #84	; 0x54
 800ceae:	782b      	ldrb	r3, [r5, #0]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d015      	beq.n	800cee0 <HAL_ADC_Start+0x44>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ceb8:	69e3      	ldr	r3, [r4, #28]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d111      	bne.n	800cee2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800cebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cec0:	4a0b      	ldr	r2, [pc, #44]	; (800cef0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800cec2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800cec4:	401a      	ands	r2, r3
 800cec6:	2380      	movs	r3, #128	; 0x80
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cecc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800cece:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ced0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800ced2:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_UNLOCK(hadc);
 800ced4:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ced6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ced8:	6899      	ldr	r1, [r3, #8]
 800ceda:	3a18      	subs	r2, #24
 800cedc:	430a      	orrs	r2, r1
 800cede:	609a      	str	r2, [r3, #8]
}
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800cee2:	0020      	movs	r0, r4
 800cee4:	f7ff fecc 	bl	800cc80 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d1f9      	bne.n	800cee0 <HAL_ADC_Start+0x44>
 800ceec:	e7e7      	b.n	800cebe <HAL_ADC_Start+0x22>
 800ceee:	46c0      	nop			; (mov r8, r8)
 800cef0:	fffff0fe 	.word	0xfffff0fe

0800cef4 <HAL_ADC_PollForConversion>:
{
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800cef6:	6945      	ldr	r5, [r0, #20]
{
 800cef8:	0004      	movs	r4, r0
 800cefa:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800cefc:	2d08      	cmp	r5, #8
 800cefe:	d00d      	beq.n	800cf1c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800cf00:	6803      	ldr	r3, [r0, #0]
 800cf02:	2001      	movs	r0, #1
 800cf04:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800cf06:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800cf08:	4203      	tst	r3, r0
 800cf0a:	d007      	beq.n	800cf1c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cf0c:	2320      	movs	r3, #32
 800cf0e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800cf10:	3454      	adds	r4, #84	; 0x54
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cf12:	4313      	orrs	r3, r2
 800cf14:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800cf16:	2300      	movs	r3, #0
 800cf18:	7023      	strb	r3, [r4, #0]
}
 800cf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800cf1c:	f7fe ff96 	bl	800be4c <HAL_GetTick>
 800cf20:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	422a      	tst	r2, r5
 800cf28:	d023      	beq.n	800cf72 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cf2a:	2280      	movs	r2, #128	; 0x80
 800cf2c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf2e:	0092      	lsls	r2, r2, #2
 800cf30:	430a      	orrs	r2, r1
 800cf32:	65a2      	str	r2, [r4, #88]	; 0x58
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800cf34:	22c0      	movs	r2, #192	; 0xc0
 800cf36:	68d9      	ldr	r1, [r3, #12]
 800cf38:	0112      	lsls	r2, r2, #4
 800cf3a:	4211      	tst	r1, r2
 800cf3c:	d112      	bne.n	800cf64 <HAL_ADC_PollForConversion+0x70>
 800cf3e:	6a22      	ldr	r2, [r4, #32]
 800cf40:	2a00      	cmp	r2, #0
 800cf42:	d10f      	bne.n	800cf64 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	0712      	lsls	r2, r2, #28
 800cf48:	d50c      	bpl.n	800cf64 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cf4a:	689a      	ldr	r2, [r3, #8]
 800cf4c:	0752      	lsls	r2, r2, #29
 800cf4e:	d423      	bmi.n	800cf98 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800cf50:	210c      	movs	r1, #12
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	438a      	bics	r2, r1
 800cf56:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800cf58:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cf5a:	4914      	ldr	r1, [pc, #80]	; (800cfac <HAL_ADC_PollForConversion+0xb8>)
 800cf5c:	4011      	ands	r1, r2
 800cf5e:	2201      	movs	r2, #1
 800cf60:	430a      	orrs	r2, r1
 800cf62:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 800cf64:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800cf66:	69a2      	ldr	r2, [r4, #24]
 800cf68:	4282      	cmp	r2, r0
 800cf6a:	d1d6      	bne.n	800cf1a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800cf6c:	220c      	movs	r2, #12
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	e7d3      	b.n	800cf1a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800cf72:	1c72      	adds	r2, r6, #1
 800cf74:	d0d6      	beq.n	800cf24 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cf76:	2e00      	cmp	r6, #0
 800cf78:	d108      	bne.n	800cf8c <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800cf7a:	2304      	movs	r3, #4
 800cf7c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800cf7e:	3454      	adds	r4, #84	; 0x54
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800cf80:	4313      	orrs	r3, r2
 800cf82:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800cf84:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800cf86:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800cf88:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800cf8a:	e7c6      	b.n	800cf1a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cf8c:	f7fe ff5e 	bl	800be4c <HAL_GetTick>
 800cf90:	1bc0      	subs	r0, r0, r7
 800cf92:	4286      	cmp	r6, r0
 800cf94:	d2c5      	bcs.n	800cf22 <HAL_ADC_PollForConversion+0x2e>
 800cf96:	e7f0      	b.n	800cf7a <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cf98:	2220      	movs	r2, #32
 800cf9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	65a2      	str	r2, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	65e2      	str	r2, [r4, #92]	; 0x5c
 800cfa8:	e7dc      	b.n	800cf64 <HAL_ADC_PollForConversion+0x70>
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	fffffefe 	.word	0xfffffefe

0800cfb0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800cfb0:	6803      	ldr	r3, [r0, #0]
 800cfb2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <HAL_ADC_ConfigChannel>:
{
 800cfb8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800cfba:	0004      	movs	r4, r0
 800cfbc:	3454      	adds	r4, #84	; 0x54
 800cfbe:	7823      	ldrb	r3, [r4, #0]
{
 800cfc0:	0006      	movs	r6, r0
 800cfc2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800cfc4:	2002      	movs	r0, #2
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d00b      	beq.n	800cfe2 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800cfca:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 800cfcc:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800cfce:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 800cfd0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800cfd2:	074b      	lsls	r3, r1, #29
 800cfd4:	d506      	bpl.n	800cfe4 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	6db1      	ldr	r1, [r6, #88]	; 0x58
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	65b2      	str	r2, [r6, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	7022      	strb	r2, [r4, #0]
}
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 800cfe6:	491a      	ldr	r1, [pc, #104]	; (800d050 <HAL_ADC_ConfigChannel+0x98>)
 800cfe8:	686e      	ldr	r6, [r5, #4]
 800cfea:	682b      	ldr	r3, [r5, #0]
 800cfec:	02c0      	lsls	r0, r0, #11
 800cfee:	428e      	cmp	r6, r1
 800cff0:	d01b      	beq.n	800d02a <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800cff2:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800cff4:	0359      	lsls	r1, r3, #13
 800cff6:	0b49      	lsrs	r1, r1, #13
 800cff8:	4331      	orrs	r1, r6
 800cffa:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800cffc:	4203      	tst	r3, r0
 800cffe:	d008      	beq.n	800d012 <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_TSEN;   
 800d000:	2380      	movs	r3, #128	; 0x80
 800d002:	4a14      	ldr	r2, [pc, #80]	; (800d054 <HAL_ADC_ConfigChannel+0x9c>)
 800d004:	041b      	lsls	r3, r3, #16
 800d006:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800d008:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800d00a:	430b      	orrs	r3, r1
 800d00c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800d00e:	f7ff fe21 	bl	800cc54 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	039b      	lsls	r3, r3, #14
 800d016:	d505      	bpl.n	800d024 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800d018:	2380      	movs	r3, #128	; 0x80
 800d01a:	4a0e      	ldr	r2, [pc, #56]	; (800d054 <HAL_ADC_ConfigChannel+0x9c>)
 800d01c:	03db      	lsls	r3, r3, #15
 800d01e:	6811      	ldr	r1, [r2, #0]
 800d020:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800d022:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800d024:	2000      	movs	r0, #0
 800d026:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800d028:	e7db      	b.n	800cfe2 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800d02a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d02c:	035d      	lsls	r5, r3, #13
 800d02e:	0b6d      	lsrs	r5, r5, #13
 800d030:	43a9      	bics	r1, r5
 800d032:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800d034:	4203      	tst	r3, r0
 800d036:	d004      	beq.n	800d042 <HAL_ADC_ConfigChannel+0x8a>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800d038:	4906      	ldr	r1, [pc, #24]	; (800d054 <HAL_ADC_ConfigChannel+0x9c>)
 800d03a:	4807      	ldr	r0, [pc, #28]	; (800d058 <HAL_ADC_ConfigChannel+0xa0>)
 800d03c:	680a      	ldr	r2, [r1, #0]
 800d03e:	4002      	ands	r2, r0
 800d040:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800d042:	039b      	lsls	r3, r3, #14
 800d044:	d5ee      	bpl.n	800d024 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800d046:	4a03      	ldr	r2, [pc, #12]	; (800d054 <HAL_ADC_ConfigChannel+0x9c>)
 800d048:	4904      	ldr	r1, [pc, #16]	; (800d05c <HAL_ADC_ConfigChannel+0xa4>)
 800d04a:	6813      	ldr	r3, [r2, #0]
 800d04c:	400b      	ands	r3, r1
 800d04e:	e7e8      	b.n	800d022 <HAL_ADC_ConfigChannel+0x6a>
 800d050:	00001001 	.word	0x00001001
 800d054:	40012708 	.word	0x40012708
 800d058:	ff7fffff 	.word	0xff7fffff
 800d05c:	ffbfffff 	.word	0xffbfffff

0800d060 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d062:	0005      	movs	r5, r0
 800d064:	3554      	adds	r5, #84	; 0x54
 800d066:	782b      	ldrb	r3, [r5, #0]
{
 800d068:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800d06a:	2002      	movs	r0, #2
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d03f      	beq.n	800d0f0 <HAL_ADCEx_Calibration_Start+0x90>
 800d070:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d072:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800d074:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	6898      	ldr	r0, [r3, #8]
 800d07a:	4010      	ands	r0, r2
 800d07c:	2801      	cmp	r0, #1
 800d07e:	d102      	bne.n	800d086 <HAL_ADCEx_Calibration_Start+0x26>
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	4202      	tst	r2, r0
 800d084:	d135      	bne.n	800d0f2 <HAL_ADCEx_Calibration_Start+0x92>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800d086:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d088:	491c      	ldr	r1, [pc, #112]	; (800d0fc <HAL_ADCEx_Calibration_Start+0x9c>)
 800d08a:	4011      	ands	r1, r2
 800d08c:	2202      	movs	r2, #2
 800d08e:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800d090:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800d092:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800d094:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800d096:	68da      	ldr	r2, [r3, #12]
 800d098:	438a      	bics	r2, r1
 800d09a:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800d09c:	2280      	movs	r2, #128	; 0x80
 800d09e:	6899      	ldr	r1, [r3, #8]
 800d0a0:	0612      	lsls	r2, r2, #24
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800d0a6:	f7fe fed1 	bl	800be4c <HAL_GetTick>
 800d0aa:	0007      	movs	r7, r0
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	db0e      	blt.n	800d0d2 <HAL_ADCEx_Calibration_Start+0x72>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800d0b4:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800d0b6:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800d0b8:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800d0ba:	430e      	orrs	r6, r1
 800d0bc:	60de      	str	r6, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d0be:	6da3      	ldr	r3, [r4, #88]	; 0x58
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d0c0:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800d0c2:	4393      	bics	r3, r2
 800d0c4:	001a      	movs	r2, r3
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	65a3      	str	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800d0d0:	e00e      	b.n	800d0f0 <HAL_ADCEx_Calibration_Start+0x90>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800d0d2:	f7fe febb 	bl	800be4c <HAL_GetTick>
 800d0d6:	1bc0      	subs	r0, r0, r7
 800d0d8:	280a      	cmp	r0, #10
 800d0da:	d9e7      	bls.n	800d0ac <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 800d0dc:	2212      	movs	r2, #18
 800d0de:	6da3      	ldr	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800d0e0:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800d0e2:	4393      	bics	r3, r2
 800d0e4:	001a      	movs	r2, r3
 800d0e6:	2310      	movs	r3, #16
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	702b      	strb	r3, [r5, #0]
}
 800d0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d0f2:	2320      	movs	r3, #32
 800d0f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	65a3      	str	r3, [r4, #88]	; 0x58
 800d0fa:	e7e7      	b.n	800d0cc <HAL_ADCEx_Calibration_Start+0x6c>
 800d0fc:	fffffefd 	.word	0xfffffefd

0800d100 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d100:	22f0      	movs	r2, #240	; 0xf0
 800d102:	4b17      	ldr	r3, [pc, #92]	; (800d160 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 800d104:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d106:	68d9      	ldr	r1, [r3, #12]
 800d108:	4211      	tst	r1, r2
 800d10a:	d00b      	beq.n	800d124 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d10c:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800d10e:	2101      	movs	r1, #1
 800d110:	4814      	ldr	r0, [pc, #80]	; (800d164 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d112:	6802      	ldr	r2, [r0, #0]
 800d114:	438a      	bics	r2, r1
 800d116:	431a      	orrs	r2, r3
 800d118:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	4008      	ands	r0, r1
 800d11e:	4058      	eors	r0, r3
 800d120:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800d122:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d124:	2180      	movs	r1, #128	; 0x80
 800d126:	22c0      	movs	r2, #192	; 0xc0
 800d128:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d12a:	0549      	lsls	r1, r1, #21
 800d12c:	4c0e      	ldr	r4, [pc, #56]	; (800d168 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d12e:	0152      	lsls	r2, r2, #5
 800d130:	420d      	tst	r5, r1
 800d132:	d00a      	beq.n	800d14a <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800d138:	23c0      	movs	r3, #192	; 0xc0
 800d13a:	015b      	lsls	r3, r3, #5
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d1e5      	bne.n	800d10c <RCC_SetFlashLatencyFromMSIRange+0xc>
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d142:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d144:	4243      	negs	r3, r0
 800d146:	4143      	adcs	r3, r0
 800d148:	e7e1      	b.n	800d10e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d14a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d14c:	4329      	orrs	r1, r5
 800d14e:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d150:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800d152:	4c07      	ldr	r4, [pc, #28]	; (800d170 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d154:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800d156:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d158:	4021      	ands	r1, r4
 800d15a:	6399      	str	r1, [r3, #56]	; 0x38
 800d15c:	e7ec      	b.n	800d138 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800d15e:	46c0      	nop			; (mov r8, r8)
 800d160:	40021000 	.word	0x40021000
 800d164:	40022000 	.word	0x40022000
 800d168:	40007000 	.word	0x40007000
 800d16c:	ffff4000 	.word	0xffff4000
 800d170:	efffffff 	.word	0xefffffff

0800d174 <HAL_RCC_OscConfig>:
{
 800d174:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d176:	6803      	ldr	r3, [r0, #0]
{
 800d178:	b085      	sub	sp, #20
 800d17a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d17c:	07db      	lsls	r3, r3, #31
 800d17e:	d44e      	bmi.n	800d21e <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	079b      	lsls	r3, r3, #30
 800d184:	d500      	bpl.n	800d188 <HAL_RCC_OscConfig+0x14>
 800d186:	e0a1      	b.n	800d2cc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	06db      	lsls	r3, r3, #27
 800d18c:	d535      	bpl.n	800d1fa <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800d18e:	230c      	movs	r3, #12
 800d190:	4dbd      	ldr	r5, [pc, #756]	; (800d488 <HAL_RCC_OscConfig+0x314>)
 800d192:	68ea      	ldr	r2, [r5, #12]
 800d194:	421a      	tst	r2, r3
 800d196:	d000      	beq.n	800d19a <HAL_RCC_OscConfig+0x26>
 800d198:	e0eb      	b.n	800d372 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d19a:	682b      	ldr	r3, [r5, #0]
 800d19c:	059b      	lsls	r3, r3, #22
 800d19e:	d502      	bpl.n	800d1a6 <HAL_RCC_OscConfig+0x32>
 800d1a0:	69e3      	ldr	r3, [r4, #28]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d050      	beq.n	800d248 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d1a6:	22e0      	movs	r2, #224	; 0xe0
 800d1a8:	686b      	ldr	r3, [r5, #4]
 800d1aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d1ac:	0212      	lsls	r2, r2, #8
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	4298      	cmp	r0, r3
 800d1b2:	d800      	bhi.n	800d1b6 <HAL_RCC_OscConfig+0x42>
 800d1b4:	e0cb      	b.n	800d34e <HAL_RCC_OscConfig+0x1da>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d1b6:	f7ff ffa3 	bl	800d100 <RCC_SetFlashLatencyFromMSIRange>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d144      	bne.n	800d248 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d1be:	686b      	ldr	r3, [r5, #4]
 800d1c0:	4ab2      	ldr	r2, [pc, #712]	; (800d48c <HAL_RCC_OscConfig+0x318>)
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d1ca:	686a      	ldr	r2, [r5, #4]
 800d1cc:	6a23      	ldr	r3, [r4, #32]
 800d1ce:	0212      	lsls	r2, r2, #8
 800d1d0:	061b      	lsls	r3, r3, #24
 800d1d2:	0a12      	lsrs	r2, r2, #8
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800d1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800d1da:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800d1dc:	0b59      	lsrs	r1, r3, #13
 800d1de:	2380      	movs	r3, #128	; 0x80
 800d1e0:	3101      	adds	r1, #1
 800d1e2:	021b      	lsls	r3, r3, #8
 800d1e4:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800d1e6:	0612      	lsls	r2, r2, #24
 800d1e8:	49a9      	ldr	r1, [pc, #676]	; (800d490 <HAL_RCC_OscConfig+0x31c>)
 800d1ea:	0f12      	lsrs	r2, r2, #28
 800d1ec:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800d1ee:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800d1f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800d1f2:	4aa8      	ldr	r2, [pc, #672]	; (800d494 <HAL_RCC_OscConfig+0x320>)
 800d1f4:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800d1f6:	f7fe fe21 	bl	800be3c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	071b      	lsls	r3, r3, #28
 800d1fe:	d500      	bpl.n	800d202 <HAL_RCC_OscConfig+0x8e>
 800d200:	e0ee      	b.n	800d3e0 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	075b      	lsls	r3, r3, #29
 800d206:	d500      	bpl.n	800d20a <HAL_RCC_OscConfig+0x96>
 800d208:	e111      	b.n	800d42e <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	069b      	lsls	r3, r3, #26
 800d20e:	d500      	bpl.n	800d212 <HAL_RCC_OscConfig+0x9e>
 800d210:	e194      	b.n	800d53c <HAL_RCC_OscConfig+0x3c8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d212:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d214:	2900      	cmp	r1, #0
 800d216:	d000      	beq.n	800d21a <HAL_RCC_OscConfig+0xa6>
 800d218:	e1c4      	b.n	800d5a4 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 800d21a:	2000      	movs	r0, #0
 800d21c:	e015      	b.n	800d24a <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800d21e:	210c      	movs	r1, #12
 800d220:	4d99      	ldr	r5, [pc, #612]	; (800d488 <HAL_RCC_OscConfig+0x314>)
 800d222:	68eb      	ldr	r3, [r5, #12]
 800d224:	400b      	ands	r3, r1
 800d226:	2b08      	cmp	r3, #8
 800d228:	d008      	beq.n	800d23c <HAL_RCC_OscConfig+0xc8>
 800d22a:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d22c:	68ea      	ldr	r2, [r5, #12]
 800d22e:	025b      	lsls	r3, r3, #9
 800d230:	400a      	ands	r2, r1
 800d232:	428a      	cmp	r2, r1
 800d234:	d10b      	bne.n	800d24e <HAL_RCC_OscConfig+0xda>
 800d236:	68ea      	ldr	r2, [r5, #12]
 800d238:	421a      	tst	r2, r3
 800d23a:	d008      	beq.n	800d24e <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	039b      	lsls	r3, r3, #14
 800d240:	d59e      	bpl.n	800d180 <HAL_RCC_OscConfig+0xc>
 800d242:	6863      	ldr	r3, [r4, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d19b      	bne.n	800d180 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800d248:	2001      	movs	r0, #1
}
 800d24a:	b005      	add	sp, #20
 800d24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d24e:	6862      	ldr	r2, [r4, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d113      	bne.n	800d27c <HAL_RCC_OscConfig+0x108>
 800d254:	682a      	ldr	r2, [r5, #0]
 800d256:	4313      	orrs	r3, r2
 800d258:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d25a:	f7fe fdf7 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d25e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800d260:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d262:	02b6      	lsls	r6, r6, #10
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	4233      	tst	r3, r6
 800d268:	d000      	beq.n	800d26c <HAL_RCC_OscConfig+0xf8>
 800d26a:	e789      	b.n	800d180 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d26c:	f7fe fdee 	bl	800be4c <HAL_GetTick>
 800d270:	4b89      	ldr	r3, [pc, #548]	; (800d498 <HAL_RCC_OscConfig+0x324>)
 800d272:	1bc0      	subs	r0, r0, r7
 800d274:	4298      	cmp	r0, r3
 800d276:	d9f5      	bls.n	800d264 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 800d278:	2003      	movs	r0, #3
 800d27a:	e7e6      	b.n	800d24a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d27c:	21a0      	movs	r1, #160	; 0xa0
 800d27e:	02c9      	lsls	r1, r1, #11
 800d280:	428a      	cmp	r2, r1
 800d282:	d105      	bne.n	800d290 <HAL_RCC_OscConfig+0x11c>
 800d284:	2280      	movs	r2, #128	; 0x80
 800d286:	6829      	ldr	r1, [r5, #0]
 800d288:	02d2      	lsls	r2, r2, #11
 800d28a:	430a      	orrs	r2, r1
 800d28c:	602a      	str	r2, [r5, #0]
 800d28e:	e7e1      	b.n	800d254 <HAL_RCC_OscConfig+0xe0>
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	4882      	ldr	r0, [pc, #520]	; (800d49c <HAL_RCC_OscConfig+0x328>)
 800d294:	4001      	ands	r1, r0
 800d296:	6029      	str	r1, [r5, #0]
 800d298:	6829      	ldr	r1, [r5, #0]
 800d29a:	400b      	ands	r3, r1
 800d29c:	9303      	str	r3, [sp, #12]
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	497f      	ldr	r1, [pc, #508]	; (800d4a0 <HAL_RCC_OscConfig+0x32c>)
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	400b      	ands	r3, r1
 800d2a6:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2a8:	2a00      	cmp	r2, #0
 800d2aa:	d1d6      	bne.n	800d25a <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 800d2ac:	f7fe fdce 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d2b0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800d2b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d2b4:	02b6      	lsls	r6, r6, #10
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	4233      	tst	r3, r6
 800d2ba:	d100      	bne.n	800d2be <HAL_RCC_OscConfig+0x14a>
 800d2bc:	e760      	b.n	800d180 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d2be:	f7fe fdc5 	bl	800be4c <HAL_GetTick>
 800d2c2:	4b75      	ldr	r3, [pc, #468]	; (800d498 <HAL_RCC_OscConfig+0x324>)
 800d2c4:	1bc0      	subs	r0, r0, r7
 800d2c6:	4298      	cmp	r0, r3
 800d2c8:	d9f5      	bls.n	800d2b6 <HAL_RCC_OscConfig+0x142>
 800d2ca:	e7d5      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800d2cc:	210c      	movs	r1, #12
 800d2ce:	4d6e      	ldr	r5, [pc, #440]	; (800d488 <HAL_RCC_OscConfig+0x314>)
 800d2d0:	68ea      	ldr	r2, [r5, #12]
 800d2d2:	400a      	ands	r2, r1
 800d2d4:	2a04      	cmp	r2, #4
 800d2d6:	d006      	beq.n	800d2e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800d2d8:	68eb      	ldr	r3, [r5, #12]
 800d2da:	400b      	ands	r3, r1
 800d2dc:	428b      	cmp	r3, r1
 800d2de:	d110      	bne.n	800d302 <HAL_RCC_OscConfig+0x18e>
 800d2e0:	68eb      	ldr	r3, [r5, #12]
 800d2e2:	03db      	lsls	r3, r3, #15
 800d2e4:	d40d      	bmi.n	800d302 <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d2e6:	682b      	ldr	r3, [r5, #0]
 800d2e8:	075b      	lsls	r3, r3, #29
 800d2ea:	d502      	bpl.n	800d2f2 <HAL_RCC_OscConfig+0x17e>
 800d2ec:	68e3      	ldr	r3, [r4, #12]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d1aa      	bne.n	800d248 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2f2:	686a      	ldr	r2, [r5, #4]
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	496b      	ldr	r1, [pc, #428]	; (800d4a4 <HAL_RCC_OscConfig+0x330>)
 800d2f8:	021b      	lsls	r3, r3, #8
 800d2fa:	400a      	ands	r2, r1
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	606b      	str	r3, [r5, #4]
 800d300:	e742      	b.n	800d188 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d302:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d304:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d306:	2a00      	cmp	r2, #0
 800d308:	d010      	beq.n	800d32c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d30a:	2109      	movs	r1, #9
 800d30c:	438b      	bics	r3, r1
 800d30e:	4313      	orrs	r3, r2
 800d310:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d312:	f7fe fd9b 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d316:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 800d318:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	4233      	tst	r3, r6
 800d31e:	d1e8      	bne.n	800d2f2 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d320:	f7fe fd94 	bl	800be4c <HAL_GetTick>
 800d324:	1bc0      	subs	r0, r0, r7
 800d326:	2802      	cmp	r0, #2
 800d328:	d9f7      	bls.n	800d31a <HAL_RCC_OscConfig+0x1a6>
 800d32a:	e7a5      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI_DISABLE();
 800d32c:	2201      	movs	r2, #1
 800d32e:	4393      	bics	r3, r2
 800d330:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d332:	f7fe fd8b 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d336:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 800d338:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d33a:	682b      	ldr	r3, [r5, #0]
 800d33c:	4233      	tst	r3, r6
 800d33e:	d100      	bne.n	800d342 <HAL_RCC_OscConfig+0x1ce>
 800d340:	e722      	b.n	800d188 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d342:	f7fe fd83 	bl	800be4c <HAL_GetTick>
 800d346:	1bc0      	subs	r0, r0, r7
 800d348:	2802      	cmp	r0, #2
 800d34a:	d9f6      	bls.n	800d33a <HAL_RCC_OscConfig+0x1c6>
 800d34c:	e794      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d34e:	686b      	ldr	r3, [r5, #4]
 800d350:	4a4e      	ldr	r2, [pc, #312]	; (800d48c <HAL_RCC_OscConfig+0x318>)
 800d352:	4013      	ands	r3, r2
 800d354:	4303      	orrs	r3, r0
 800d356:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d358:	686a      	ldr	r2, [r5, #4]
 800d35a:	6a23      	ldr	r3, [r4, #32]
 800d35c:	0212      	lsls	r2, r2, #8
 800d35e:	061b      	lsls	r3, r3, #24
 800d360:	0a12      	lsrs	r2, r2, #8
 800d362:	4313      	orrs	r3, r2
 800d364:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d366:	f7ff fecb 	bl	800d100 <RCC_SetFlashLatencyFromMSIRange>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d100      	bne.n	800d370 <HAL_RCC_OscConfig+0x1fc>
 800d36e:	e733      	b.n	800d1d8 <HAL_RCC_OscConfig+0x64>
 800d370:	e76a      	b.n	800d248 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d372:	69e3      	ldr	r3, [r4, #28]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d020      	beq.n	800d3ba <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 800d378:	2380      	movs	r3, #128	; 0x80
 800d37a:	682a      	ldr	r2, [r5, #0]
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4313      	orrs	r3, r2
 800d380:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d382:	f7fe fd63 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800d386:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800d388:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800d38a:	00b6      	lsls	r6, r6, #2
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	4233      	tst	r3, r6
 800d390:	d00d      	beq.n	800d3ae <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d392:	686b      	ldr	r3, [r5, #4]
 800d394:	4a3d      	ldr	r2, [pc, #244]	; (800d48c <HAL_RCC_OscConfig+0x318>)
 800d396:	4013      	ands	r3, r2
 800d398:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d39a:	4313      	orrs	r3, r2
 800d39c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d39e:	686a      	ldr	r2, [r5, #4]
 800d3a0:	6a23      	ldr	r3, [r4, #32]
 800d3a2:	0212      	lsls	r2, r2, #8
 800d3a4:	061b      	lsls	r3, r3, #24
 800d3a6:	0a12      	lsrs	r2, r2, #8
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	606b      	str	r3, [r5, #4]
 800d3ac:	e725      	b.n	800d1fa <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d3ae:	f7fe fd4d 	bl	800be4c <HAL_GetTick>
 800d3b2:	1bc0      	subs	r0, r0, r7
 800d3b4:	2802      	cmp	r0, #2
 800d3b6:	d9e9      	bls.n	800d38c <HAL_RCC_OscConfig+0x218>
 800d3b8:	e75e      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_MSI_DISABLE();
 800d3ba:	682b      	ldr	r3, [r5, #0]
 800d3bc:	4a3a      	ldr	r2, [pc, #232]	; (800d4a8 <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800d3be:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d3c4:	f7fe fd42 	bl	800be4c <HAL_GetTick>
 800d3c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800d3ca:	00b6      	lsls	r6, r6, #2
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	4233      	tst	r3, r6
 800d3d0:	d100      	bne.n	800d3d4 <HAL_RCC_OscConfig+0x260>
 800d3d2:	e712      	b.n	800d1fa <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d3d4:	f7fe fd3a 	bl	800be4c <HAL_GetTick>
 800d3d8:	1bc0      	subs	r0, r0, r7
 800d3da:	2802      	cmp	r0, #2
 800d3dc:	d9f6      	bls.n	800d3cc <HAL_RCC_OscConfig+0x258>
 800d3de:	e74b      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d3e0:	6962      	ldr	r2, [r4, #20]
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	4d28      	ldr	r5, [pc, #160]	; (800d488 <HAL_RCC_OscConfig+0x314>)
 800d3e6:	2a00      	cmp	r2, #0
 800d3e8:	d010      	beq.n	800d40c <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800d3ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3ec:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d3f2:	f7fe fd2b 	bl	800be4c <HAL_GetTick>
 800d3f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d3fa:	4233      	tst	r3, r6
 800d3fc:	d000      	beq.n	800d400 <HAL_RCC_OscConfig+0x28c>
 800d3fe:	e700      	b.n	800d202 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d400:	f7fe fd24 	bl	800be4c <HAL_GetTick>
 800d404:	1bc0      	subs	r0, r0, r7
 800d406:	2802      	cmp	r0, #2
 800d408:	d9f6      	bls.n	800d3f8 <HAL_RCC_OscConfig+0x284>
 800d40a:	e735      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_DISABLE();
 800d40c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d40e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800d410:	439a      	bics	r2, r3
 800d412:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d414:	f7fe fd1a 	bl	800be4c <HAL_GetTick>
 800d418:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d41a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d41c:	4233      	tst	r3, r6
 800d41e:	d100      	bne.n	800d422 <HAL_RCC_OscConfig+0x2ae>
 800d420:	e6ef      	b.n	800d202 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d422:	f7fe fd13 	bl	800be4c <HAL_GetTick>
 800d426:	1bc0      	subs	r0, r0, r7
 800d428:	2802      	cmp	r0, #2
 800d42a:	d9f6      	bls.n	800d41a <HAL_RCC_OscConfig+0x2a6>
 800d42c:	e724      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d42e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800d430:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d432:	4d15      	ldr	r5, [pc, #84]	; (800d488 <HAL_RCC_OscConfig+0x314>)
 800d434:	055b      	lsls	r3, r3, #21
 800d436:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 800d438:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d43a:	421a      	tst	r2, r3
 800d43c:	d104      	bne.n	800d448 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d43e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800d440:	4313      	orrs	r3, r2
 800d442:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 800d444:	2301      	movs	r3, #1
 800d446:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d448:	2780      	movs	r7, #128	; 0x80
 800d44a:	4e18      	ldr	r6, [pc, #96]	; (800d4ac <HAL_RCC_OscConfig+0x338>)
 800d44c:	007f      	lsls	r7, r7, #1
 800d44e:	6833      	ldr	r3, [r6, #0]
 800d450:	423b      	tst	r3, r7
 800d452:	d008      	beq.n	800d466 <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d454:	2280      	movs	r2, #128	; 0x80
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	0052      	lsls	r2, r2, #1
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d128      	bne.n	800d4b0 <HAL_RCC_OscConfig+0x33c>
 800d45e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d460:	4313      	orrs	r3, r2
 800d462:	652b      	str	r3, [r5, #80]	; 0x50
 800d464:	e049      	b.n	800d4fa <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d466:	6833      	ldr	r3, [r6, #0]
 800d468:	433b      	orrs	r3, r7
 800d46a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d46c:	f7fe fcee 	bl	800be4c <HAL_GetTick>
 800d470:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d472:	6833      	ldr	r3, [r6, #0]
 800d474:	423b      	tst	r3, r7
 800d476:	d1ed      	bne.n	800d454 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d478:	f7fe fce8 	bl	800be4c <HAL_GetTick>
 800d47c:	9b01      	ldr	r3, [sp, #4]
 800d47e:	1ac0      	subs	r0, r0, r3
 800d480:	2864      	cmp	r0, #100	; 0x64
 800d482:	d9f6      	bls.n	800d472 <HAL_RCC_OscConfig+0x2fe>
 800d484:	e6f8      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	40021000 	.word	0x40021000
 800d48c:	ffff1fff 	.word	0xffff1fff
 800d490:	08017135 	.word	0x08017135
 800d494:	200009e8 	.word	0x200009e8
 800d498:	00001388 	.word	0x00001388
 800d49c:	fffeffff 	.word	0xfffeffff
 800d4a0:	fffbffff 	.word	0xfffbffff
 800d4a4:	ffffe0ff 	.word	0xffffe0ff
 800d4a8:	fffffeff 	.word	0xfffffeff
 800d4ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d116      	bne.n	800d4e2 <HAL_RCC_OscConfig+0x36e>
 800d4b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d4b6:	4a60      	ldr	r2, [pc, #384]	; (800d638 <HAL_RCC_OscConfig+0x4c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4b8:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	652b      	str	r3, [r5, #80]	; 0x50
 800d4be:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d4c0:	4a5e      	ldr	r2, [pc, #376]	; (800d63c <HAL_RCC_OscConfig+0x4c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4c2:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d4c8:	f7fe fcc0 	bl	800be4c <HAL_GetTick>
 800d4cc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d4d0:	423b      	tst	r3, r7
 800d4d2:	d02a      	beq.n	800d52a <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4d4:	f7fe fcba 	bl	800be4c <HAL_GetTick>
 800d4d8:	4b59      	ldr	r3, [pc, #356]	; (800d640 <HAL_RCC_OscConfig+0x4cc>)
 800d4da:	1b80      	subs	r0, r0, r6
 800d4dc:	4298      	cmp	r0, r3
 800d4de:	d9f6      	bls.n	800d4ce <HAL_RCC_OscConfig+0x35a>
 800d4e0:	e6ca      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4e2:	21a0      	movs	r1, #160	; 0xa0
 800d4e4:	00c9      	lsls	r1, r1, #3
 800d4e6:	428b      	cmp	r3, r1
 800d4e8:	d10d      	bne.n	800d506 <HAL_RCC_OscConfig+0x392>
 800d4ea:	2380      	movs	r3, #128	; 0x80
 800d4ec:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	430b      	orrs	r3, r1
 800d4f2:	652b      	str	r3, [r5, #80]	; 0x50
 800d4f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800d4fa:	f7fe fca7 	bl	800be4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4fe:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 800d500:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d502:	00bf      	lsls	r7, r7, #2
 800d504:	e00e      	b.n	800d524 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d506:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d508:	4a4b      	ldr	r2, [pc, #300]	; (800d638 <HAL_RCC_OscConfig+0x4c4>)
 800d50a:	4013      	ands	r3, r2
 800d50c:	652b      	str	r3, [r5, #80]	; 0x50
 800d50e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d510:	4a4a      	ldr	r2, [pc, #296]	; (800d63c <HAL_RCC_OscConfig+0x4c8>)
 800d512:	4013      	ands	r3, r2
 800d514:	e7a5      	b.n	800d462 <HAL_RCC_OscConfig+0x2ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d516:	f7fe fc99 	bl	800be4c <HAL_GetTick>
 800d51a:	4b49      	ldr	r3, [pc, #292]	; (800d640 <HAL_RCC_OscConfig+0x4cc>)
 800d51c:	1b80      	subs	r0, r0, r6
 800d51e:	4298      	cmp	r0, r3
 800d520:	d900      	bls.n	800d524 <HAL_RCC_OscConfig+0x3b0>
 800d522:	e6a9      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d524:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d526:	423b      	tst	r3, r7
 800d528:	d0f5      	beq.n	800d516 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d000      	beq.n	800d532 <HAL_RCC_OscConfig+0x3be>
 800d530:	e66b      	b.n	800d20a <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d532:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d534:	4a43      	ldr	r2, [pc, #268]	; (800d644 <HAL_RCC_OscConfig+0x4d0>)
 800d536:	4013      	ands	r3, r2
 800d538:	63ab      	str	r3, [r5, #56]	; 0x38
 800d53a:	e666      	b.n	800d20a <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d53c:	69a1      	ldr	r1, [r4, #24]
 800d53e:	2301      	movs	r3, #1
 800d540:	4d41      	ldr	r5, [pc, #260]	; (800d648 <HAL_RCC_OscConfig+0x4d4>)
 800d542:	4a42      	ldr	r2, [pc, #264]	; (800d64c <HAL_RCC_OscConfig+0x4d8>)
 800d544:	2900      	cmp	r1, #0
 800d546:	d018      	beq.n	800d57a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 800d548:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800d54a:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 800d54c:	4319      	orrs	r1, r3
 800d54e:	60a9      	str	r1, [r5, #8]
 800d550:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d552:	430b      	orrs	r3, r1
 800d554:	636b      	str	r3, [r5, #52]	; 0x34
 800d556:	2380      	movs	r3, #128	; 0x80
 800d558:	6a11      	ldr	r1, [r2, #32]
 800d55a:	019b      	lsls	r3, r3, #6
 800d55c:	430b      	orrs	r3, r1
 800d55e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800d560:	f7fe fc74 	bl	800be4c <HAL_GetTick>
 800d564:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800d566:	68ab      	ldr	r3, [r5, #8]
 800d568:	4233      	tst	r3, r6
 800d56a:	d000      	beq.n	800d56e <HAL_RCC_OscConfig+0x3fa>
 800d56c:	e651      	b.n	800d212 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d56e:	f7fe fc6d 	bl	800be4c <HAL_GetTick>
 800d572:	1bc0      	subs	r0, r0, r7
 800d574:	2802      	cmp	r0, #2
 800d576:	d9f6      	bls.n	800d566 <HAL_RCC_OscConfig+0x3f2>
 800d578:	e67e      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI48_DISABLE();
 800d57a:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800d57c:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 800d57e:	4399      	bics	r1, r3
 800d580:	60a9      	str	r1, [r5, #8]
 800d582:	6a13      	ldr	r3, [r2, #32]
 800d584:	4932      	ldr	r1, [pc, #200]	; (800d650 <HAL_RCC_OscConfig+0x4dc>)
 800d586:	400b      	ands	r3, r1
 800d588:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800d58a:	f7fe fc5f 	bl	800be4c <HAL_GetTick>
 800d58e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800d590:	68ab      	ldr	r3, [r5, #8]
 800d592:	4233      	tst	r3, r6
 800d594:	d100      	bne.n	800d598 <HAL_RCC_OscConfig+0x424>
 800d596:	e63c      	b.n	800d212 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d598:	f7fe fc58 	bl	800be4c <HAL_GetTick>
 800d59c:	1bc0      	subs	r0, r0, r7
 800d59e:	2802      	cmp	r0, #2
 800d5a0:	d9f6      	bls.n	800d590 <HAL_RCC_OscConfig+0x41c>
 800d5a2:	e669      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5a4:	220c      	movs	r2, #12
 800d5a6:	4d28      	ldr	r5, [pc, #160]	; (800d648 <HAL_RCC_OscConfig+0x4d4>)
      return HAL_ERROR;
 800d5a8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5aa:	68eb      	ldr	r3, [r5, #12]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d100      	bne.n	800d5b4 <HAL_RCC_OscConfig+0x440>
 800d5b2:	e64a      	b.n	800d24a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	4a27      	ldr	r2, [pc, #156]	; (800d654 <HAL_RCC_OscConfig+0x4e0>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d5bc:	2902      	cmp	r1, #2
 800d5be:	d12b      	bne.n	800d618 <HAL_RCC_OscConfig+0x4a4>
        tickstart = HAL_GetTick();
 800d5c0:	f7fe fc44 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d5c4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800d5c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d5c8:	04b6      	lsls	r6, r6, #18
 800d5ca:	682b      	ldr	r3, [r5, #0]
 800d5cc:	4233      	tst	r3, r6
 800d5ce:	d11d      	bne.n	800d60c <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d5d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d5d4:	68ea      	ldr	r2, [r5, #12]
 800d5d6:	430b      	orrs	r3, r1
 800d5d8:	491f      	ldr	r1, [pc, #124]	; (800d658 <HAL_RCC_OscConfig+0x4e4>)
 800d5da:	400a      	ands	r2, r1
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d5e0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800d5e6:	2380      	movs	r3, #128	; 0x80
 800d5e8:	682a      	ldr	r2, [r5, #0]
 800d5ea:	045b      	lsls	r3, r3, #17
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d5f0:	f7fe fc2c 	bl	800be4c <HAL_GetTick>
 800d5f4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d5f6:	04a4      	lsls	r4, r4, #18
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	4223      	tst	r3, r4
 800d5fc:	d000      	beq.n	800d600 <HAL_RCC_OscConfig+0x48c>
 800d5fe:	e60c      	b.n	800d21a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d600:	f7fe fc24 	bl	800be4c <HAL_GetTick>
 800d604:	1b80      	subs	r0, r0, r6
 800d606:	2802      	cmp	r0, #2
 800d608:	d9f6      	bls.n	800d5f8 <HAL_RCC_OscConfig+0x484>
 800d60a:	e635      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d60c:	f7fe fc1e 	bl	800be4c <HAL_GetTick>
 800d610:	1bc0      	subs	r0, r0, r7
 800d612:	2802      	cmp	r0, #2
 800d614:	d9d9      	bls.n	800d5ca <HAL_RCC_OscConfig+0x456>
 800d616:	e62f      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800d618:	f7fe fc18 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d61c:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 800d61e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d620:	04a4      	lsls	r4, r4, #18
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	4223      	tst	r3, r4
 800d626:	d100      	bne.n	800d62a <HAL_RCC_OscConfig+0x4b6>
 800d628:	e5f7      	b.n	800d21a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d62a:	f7fe fc0f 	bl	800be4c <HAL_GetTick>
 800d62e:	1b80      	subs	r0, r0, r6
 800d630:	2802      	cmp	r0, #2
 800d632:	d9f6      	bls.n	800d622 <HAL_RCC_OscConfig+0x4ae>
 800d634:	e620      	b.n	800d278 <HAL_RCC_OscConfig+0x104>
 800d636:	46c0      	nop			; (mov r8, r8)
 800d638:	fffffeff 	.word	0xfffffeff
 800d63c:	fffffbff 	.word	0xfffffbff
 800d640:	00001388 	.word	0x00001388
 800d644:	efffffff 	.word	0xefffffff
 800d648:	40021000 	.word	0x40021000
 800d64c:	40010000 	.word	0x40010000
 800d650:	ffffdfff 	.word	0xffffdfff
 800d654:	feffffff 	.word	0xfeffffff
 800d658:	ff02ffff 	.word	0xff02ffff

0800d65c <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 800d65c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800d65e:	4b18      	ldr	r3, [pc, #96]	; (800d6c0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 800d660:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800d662:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800d664:	400a      	ands	r2, r1
 800d666:	2a08      	cmp	r2, #8
 800d668:	d026      	beq.n	800d6b8 <HAL_RCC_GetSysClockFreq+0x5c>
 800d66a:	2a0c      	cmp	r2, #12
 800d66c:	d006      	beq.n	800d67c <HAL_RCC_GetSysClockFreq+0x20>
 800d66e:	2a04      	cmp	r2, #4
 800d670:	d11a      	bne.n	800d6a8 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	06db      	lsls	r3, r3, #27
 800d676:	d421      	bmi.n	800d6bc <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 800d678:	4812      	ldr	r0, [pc, #72]	; (800d6c4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800d67a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800d67c:	028a      	lsls	r2, r1, #10
 800d67e:	4812      	ldr	r0, [pc, #72]	; (800d6c8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800d680:	0f12      	lsrs	r2, r2, #28
 800d682:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 800d684:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d686:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 800d688:	0f89      	lsrs	r1, r1, #30
 800d68a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d68c:	03c0      	lsls	r0, r0, #15
 800d68e:	d504      	bpl.n	800d69a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 800d690:	480e      	ldr	r0, [pc, #56]	; (800d6cc <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800d692:	4350      	muls	r0, r2
 800d694:	f7f3 fa90 	bl	8000bb8 <__udivsi3>
 800d698:	e7ef      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	06db      	lsls	r3, r3, #27
 800d69e:	d501      	bpl.n	800d6a4 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800d6a0:	480b      	ldr	r0, [pc, #44]	; (800d6d0 <HAL_RCC_GetSysClockFreq+0x74>)
 800d6a2:	e7f6      	b.n	800d692 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 800d6a4:	4807      	ldr	r0, [pc, #28]	; (800d6c4 <HAL_RCC_GetSysClockFreq+0x68>)
 800d6a6:	e7f4      	b.n	800d692 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800d6a8:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800d6aa:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800d6ac:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800d6ae:	041b      	lsls	r3, r3, #16
 800d6b0:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	4098      	lsls	r0, r3
 800d6b6:	e7e0      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 800d6b8:	4804      	ldr	r0, [pc, #16]	; (800d6cc <HAL_RCC_GetSysClockFreq+0x70>)
 800d6ba:	e7de      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 800d6bc:	4804      	ldr	r0, [pc, #16]	; (800d6d0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800d6be:	e7dc      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x1e>
 800d6c0:	40021000 	.word	0x40021000
 800d6c4:	00f42400 	.word	0x00f42400
 800d6c8:	0801714d 	.word	0x0801714d
 800d6cc:	007a1200 	.word	0x007a1200
 800d6d0:	003d0900 	.word	0x003d0900

0800d6d4 <HAL_RCC_ClockConfig>:
{
 800d6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	4c53      	ldr	r4, [pc, #332]	; (800d828 <HAL_RCC_ClockConfig+0x154>)
{
 800d6da:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800d6dc:	6823      	ldr	r3, [r4, #0]
{
 800d6de:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	428b      	cmp	r3, r1
 800d6e4:	d328      	bcc.n	800d738 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6e6:	6832      	ldr	r2, [r6, #0]
 800d6e8:	0793      	lsls	r3, r2, #30
 800d6ea:	d431      	bmi.n	800d750 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d6ec:	07d3      	lsls	r3, r2, #31
 800d6ee:	d437      	bmi.n	800d760 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	6822      	ldr	r2, [r4, #0]
 800d6f4:	9901      	ldr	r1, [sp, #4]
 800d6f6:	401a      	ands	r2, r3
 800d6f8:	4291      	cmp	r1, r2
 800d6fa:	d200      	bcs.n	800d6fe <HAL_RCC_ClockConfig+0x2a>
 800d6fc:	e085      	b.n	800d80a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6fe:	6832      	ldr	r2, [r6, #0]
 800d700:	4c4a      	ldr	r4, [pc, #296]	; (800d82c <HAL_RCC_ClockConfig+0x158>)
 800d702:	0753      	lsls	r3, r2, #29
 800d704:	d500      	bpl.n	800d708 <HAL_RCC_ClockConfig+0x34>
 800d706:	e087      	b.n	800d818 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d708:	0713      	lsls	r3, r2, #28
 800d70a:	d506      	bpl.n	800d71a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d70c:	68e2      	ldr	r2, [r4, #12]
 800d70e:	6933      	ldr	r3, [r6, #16]
 800d710:	4947      	ldr	r1, [pc, #284]	; (800d830 <HAL_RCC_ClockConfig+0x15c>)
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	400a      	ands	r2, r1
 800d716:	4313      	orrs	r3, r2
 800d718:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800d71a:	f7ff ff9f 	bl	800d65c <HAL_RCC_GetSysClockFreq>
 800d71e:	68e3      	ldr	r3, [r4, #12]
 800d720:	4a44      	ldr	r2, [pc, #272]	; (800d834 <HAL_RCC_ClockConfig+0x160>)
 800d722:	061b      	lsls	r3, r3, #24
 800d724:	0f1b      	lsrs	r3, r3, #28
 800d726:	5cd3      	ldrb	r3, [r2, r3]
 800d728:	40d8      	lsrs	r0, r3
 800d72a:	4b43      	ldr	r3, [pc, #268]	; (800d838 <HAL_RCC_ClockConfig+0x164>)
 800d72c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800d72e:	2003      	movs	r0, #3
 800d730:	f7fe fb84 	bl	800be3c <HAL_InitTick>
  return HAL_OK;
 800d734:	2000      	movs	r0, #0
 800d736:	e00a      	b.n	800d74e <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	9901      	ldr	r1, [sp, #4]
 800d73c:	4393      	bics	r3, r2
 800d73e:	430b      	orrs	r3, r1
 800d740:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	4013      	ands	r3, r2
 800d746:	9a01      	ldr	r2, [sp, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d0cc      	beq.n	800d6e6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800d74c:	2001      	movs	r0, #1
}
 800d74e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d750:	20f0      	movs	r0, #240	; 0xf0
 800d752:	4936      	ldr	r1, [pc, #216]	; (800d82c <HAL_RCC_ClockConfig+0x158>)
 800d754:	68cb      	ldr	r3, [r1, #12]
 800d756:	4383      	bics	r3, r0
 800d758:	68b0      	ldr	r0, [r6, #8]
 800d75a:	4303      	orrs	r3, r0
 800d75c:	60cb      	str	r3, [r1, #12]
 800d75e:	e7c5      	b.n	800d6ec <HAL_RCC_ClockConfig+0x18>
 800d760:	4d32      	ldr	r5, [pc, #200]	; (800d82c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d762:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d764:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d766:	2a02      	cmp	r2, #2
 800d768:	d119      	bne.n	800d79e <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d76a:	039b      	lsls	r3, r3, #14
 800d76c:	d5ee      	bpl.n	800d74c <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d76e:	2103      	movs	r1, #3
 800d770:	68eb      	ldr	r3, [r5, #12]
 800d772:	438b      	bics	r3, r1
 800d774:	4313      	orrs	r3, r2
 800d776:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800d778:	f7fe fb68 	bl	800be4c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d77c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800d77e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d780:	2b02      	cmp	r3, #2
 800d782:	d119      	bne.n	800d7b8 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d784:	220c      	movs	r2, #12
 800d786:	68eb      	ldr	r3, [r5, #12]
 800d788:	4013      	ands	r3, r2
 800d78a:	2b08      	cmp	r3, #8
 800d78c:	d0b0      	beq.n	800d6f0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d78e:	f7fe fb5d 	bl	800be4c <HAL_GetTick>
 800d792:	4b2a      	ldr	r3, [pc, #168]	; (800d83c <HAL_RCC_ClockConfig+0x168>)
 800d794:	1bc0      	subs	r0, r0, r7
 800d796:	4298      	cmp	r0, r3
 800d798:	d9f4      	bls.n	800d784 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 800d79a:	2003      	movs	r0, #3
 800d79c:	e7d7      	b.n	800d74e <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d79e:	2a03      	cmp	r2, #3
 800d7a0:	d102      	bne.n	800d7a8 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7a2:	019b      	lsls	r3, r3, #6
 800d7a4:	d4e3      	bmi.n	800d76e <HAL_RCC_ClockConfig+0x9a>
 800d7a6:	e7d1      	b.n	800d74c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d7a8:	2a01      	cmp	r2, #1
 800d7aa:	d102      	bne.n	800d7b2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7ac:	075b      	lsls	r3, r3, #29
 800d7ae:	d4de      	bmi.n	800d76e <HAL_RCC_ClockConfig+0x9a>
 800d7b0:	e7cc      	b.n	800d74c <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800d7b2:	059b      	lsls	r3, r3, #22
 800d7b4:	d4db      	bmi.n	800d76e <HAL_RCC_ClockConfig+0x9a>
 800d7b6:	e7c9      	b.n	800d74c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	d10c      	bne.n	800d7d6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7bc:	220c      	movs	r2, #12
 800d7be:	68eb      	ldr	r3, [r5, #12]
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d100      	bne.n	800d7c8 <HAL_RCC_ClockConfig+0xf4>
 800d7c6:	e793      	b.n	800d6f0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7c8:	f7fe fb40 	bl	800be4c <HAL_GetTick>
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	; (800d83c <HAL_RCC_ClockConfig+0x168>)
 800d7ce:	1bc0      	subs	r0, r0, r7
 800d7d0:	4298      	cmp	r0, r3
 800d7d2:	d9f3      	bls.n	800d7bc <HAL_RCC_ClockConfig+0xe8>
 800d7d4:	e7e1      	b.n	800d79a <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d011      	beq.n	800d7fe <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d7da:	220c      	movs	r2, #12
 800d7dc:	68eb      	ldr	r3, [r5, #12]
 800d7de:	4213      	tst	r3, r2
 800d7e0:	d100      	bne.n	800d7e4 <HAL_RCC_ClockConfig+0x110>
 800d7e2:	e785      	b.n	800d6f0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7e4:	f7fe fb32 	bl	800be4c <HAL_GetTick>
 800d7e8:	4b14      	ldr	r3, [pc, #80]	; (800d83c <HAL_RCC_ClockConfig+0x168>)
 800d7ea:	1bc0      	subs	r0, r0, r7
 800d7ec:	4298      	cmp	r0, r3
 800d7ee:	d9f4      	bls.n	800d7da <HAL_RCC_ClockConfig+0x106>
 800d7f0:	e7d3      	b.n	800d79a <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7f2:	f7fe fb2b 	bl	800be4c <HAL_GetTick>
 800d7f6:	4b11      	ldr	r3, [pc, #68]	; (800d83c <HAL_RCC_ClockConfig+0x168>)
 800d7f8:	1bc0      	subs	r0, r0, r7
 800d7fa:	4298      	cmp	r0, r3
 800d7fc:	d8cd      	bhi.n	800d79a <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d7fe:	220c      	movs	r2, #12
 800d800:	68eb      	ldr	r3, [r5, #12]
 800d802:	4013      	ands	r3, r2
 800d804:	2b04      	cmp	r3, #4
 800d806:	d1f4      	bne.n	800d7f2 <HAL_RCC_ClockConfig+0x11e>
 800d808:	e772      	b.n	800d6f0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d80a:	6822      	ldr	r2, [r4, #0]
 800d80c:	439a      	bics	r2, r3
 800d80e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	421a      	tst	r2, r3
 800d814:	d19a      	bne.n	800d74c <HAL_RCC_ClockConfig+0x78>
 800d816:	e772      	b.n	800d6fe <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d818:	68e3      	ldr	r3, [r4, #12]
 800d81a:	4909      	ldr	r1, [pc, #36]	; (800d840 <HAL_RCC_ClockConfig+0x16c>)
 800d81c:	400b      	ands	r3, r1
 800d81e:	68f1      	ldr	r1, [r6, #12]
 800d820:	430b      	orrs	r3, r1
 800d822:	60e3      	str	r3, [r4, #12]
 800d824:	e770      	b.n	800d708 <HAL_RCC_ClockConfig+0x34>
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	40022000 	.word	0x40022000
 800d82c:	40021000 	.word	0x40021000
 800d830:	ffffc7ff 	.word	0xffffc7ff
 800d834:	08017135 	.word	0x08017135
 800d838:	200009e8 	.word	0x200009e8
 800d83c:	00001388 	.word	0x00001388
 800d840:	fffff8ff 	.word	0xfffff8ff

0800d844 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800d844:	4b04      	ldr	r3, [pc, #16]	; (800d858 <HAL_RCC_GetPCLK1Freq+0x14>)
 800d846:	4a05      	ldr	r2, [pc, #20]	; (800d85c <HAL_RCC_GetPCLK1Freq+0x18>)
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	055b      	lsls	r3, r3, #21
 800d84c:	0f5b      	lsrs	r3, r3, #29
 800d84e:	5cd3      	ldrb	r3, [r2, r3]
 800d850:	4a03      	ldr	r2, [pc, #12]	; (800d860 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d852:	6810      	ldr	r0, [r2, #0]
 800d854:	40d8      	lsrs	r0, r3
}    
 800d856:	4770      	bx	lr
 800d858:	40021000 	.word	0x40021000
 800d85c:	08017145 	.word	0x08017145
 800d860:	200009e8 	.word	0x200009e8

0800d864 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800d864:	4b04      	ldr	r3, [pc, #16]	; (800d878 <HAL_RCC_GetPCLK2Freq+0x14>)
 800d866:	4a05      	ldr	r2, [pc, #20]	; (800d87c <HAL_RCC_GetPCLK2Freq+0x18>)
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	049b      	lsls	r3, r3, #18
 800d86c:	0f5b      	lsrs	r3, r3, #29
 800d86e:	5cd3      	ldrb	r3, [r2, r3]
 800d870:	4a03      	ldr	r2, [pc, #12]	; (800d880 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d872:	6810      	ldr	r0, [r2, #0]
 800d874:	40d8      	lsrs	r0, r3
} 
 800d876:	4770      	bx	lr
 800d878:	40021000 	.word	0x40021000
 800d87c:	08017145 	.word	0x08017145
 800d880:	200009e8 	.word	0x200009e8

0800d884 <HAL_RCCEx_PeriphCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 800d884:	6803      	ldr	r3, [r0, #0]
{
 800d886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d888:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 800d88a:	069b      	lsls	r3, r3, #26
 800d88c:	d53a      	bpl.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d88e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800d890:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d892:	4c5f      	ldr	r4, [pc, #380]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d894:	055b      	lsls	r3, r3, #21
 800d896:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 800d898:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d89a:	421a      	tst	r2, r3
 800d89c:	d104      	bne.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d89e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8a8:	2780      	movs	r7, #128	; 0x80
 800d8aa:	4e5a      	ldr	r6, [pc, #360]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800d8ac:	007f      	lsls	r7, r7, #1
 800d8ae:	6833      	ldr	r3, [r6, #0]
 800d8b0:	423b      	tst	r3, r7
 800d8b2:	d069      	beq.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d8b4:	22c0      	movs	r2, #192	; 0xc0
 800d8b6:	21c0      	movs	r1, #192	; 0xc0
 800d8b8:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d8ba:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d8bc:	0392      	lsls	r2, r2, #14
 800d8be:	4010      	ands	r0, r2
 800d8c0:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	4290      	cmp	r0, r2
 800d8c6:	d000      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x46>
 800d8c8:	e06f      	b.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x126>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800d8ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d8cc:	400a      	ands	r2, r1
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d8ce:	d000      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d8d0:	e076      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d8d2:	6869      	ldr	r1, [r5, #4]
 800d8d4:	23c0      	movs	r3, #192	; 0xc0
 800d8d6:	000a      	movs	r2, r1
 800d8d8:	029b      	lsls	r3, r3, #10
 800d8da:	401a      	ands	r2, r3
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d107      	bne.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	484d      	ldr	r0, [pc, #308]	; (800da18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800d8e4:	4003      	ands	r3, r0
 800d8e6:	20c0      	movs	r0, #192	; 0xc0
 800d8e8:	0380      	lsls	r0, r0, #14
 800d8ea:	4001      	ands	r1, r0
 800d8ec:	430b      	orrs	r3, r1
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d8f2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d8f4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d8f6:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d103      	bne.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8fe:	4a47      	ldr	r2, [pc, #284]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800d900:	4013      	ands	r3, r2
 800d902:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	07da      	lsls	r2, r3, #31
 800d908:	d506      	bpl.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d90a:	2003      	movs	r0, #3
 800d90c:	4940      	ldr	r1, [pc, #256]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d90e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d910:	4382      	bics	r2, r0
 800d912:	68a8      	ldr	r0, [r5, #8]
 800d914:	4302      	orrs	r2, r0
 800d916:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d918:	079a      	lsls	r2, r3, #30
 800d91a:	d506      	bpl.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d91c:	200c      	movs	r0, #12
 800d91e:	493c      	ldr	r1, [pc, #240]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d920:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d922:	4382      	bics	r2, r0
 800d924:	68e8      	ldr	r0, [r5, #12]
 800d926:	4302      	orrs	r2, r0
 800d928:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d92a:	075a      	lsls	r2, r3, #29
 800d92c:	d506      	bpl.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d92e:	4938      	ldr	r1, [pc, #224]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d930:	483b      	ldr	r0, [pc, #236]	; (800da20 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800d932:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d934:	4002      	ands	r2, r0
 800d936:	6928      	ldr	r0, [r5, #16]
 800d938:	4302      	orrs	r2, r0
 800d93a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d93c:	071a      	lsls	r2, r3, #28
 800d93e:	d506      	bpl.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d940:	4933      	ldr	r1, [pc, #204]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d942:	4838      	ldr	r0, [pc, #224]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800d944:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d946:	4002      	ands	r2, r0
 800d948:	6968      	ldr	r0, [r5, #20]
 800d94a:	4302      	orrs	r2, r0
 800d94c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d94e:	05da      	lsls	r2, r3, #23
 800d950:	d506      	bpl.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d952:	492f      	ldr	r1, [pc, #188]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d954:	4834      	ldr	r0, [pc, #208]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800d956:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d958:	4002      	ands	r2, r0
 800d95a:	69a8      	ldr	r0, [r5, #24]
 800d95c:	4302      	orrs	r2, r0
 800d95e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d960:	065a      	lsls	r2, r3, #25
 800d962:	d506      	bpl.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d964:	492a      	ldr	r1, [pc, #168]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d966:	4831      	ldr	r0, [pc, #196]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800d968:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800d96a:	4002      	ands	r2, r0
 800d96c:	6a28      	ldr	r0, [r5, #32]
 800d96e:	4302      	orrs	r2, r0
 800d970:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800d972:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d974:	061b      	lsls	r3, r3, #24
 800d976:	d517      	bpl.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800d978:	4a25      	ldr	r2, [pc, #148]	; (800da10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800d97a:	492d      	ldr	r1, [pc, #180]	; (800da30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d97c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d97e:	400b      	ands	r3, r1
 800d980:	69e9      	ldr	r1, [r5, #28]
 800d982:	430b      	orrs	r3, r1
 800d984:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d986:	e00f      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d988:	6833      	ldr	r3, [r6, #0]
 800d98a:	433b      	orrs	r3, r7
 800d98c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d98e:	f7fe fa5d 	bl	800be4c <HAL_GetTick>
 800d992:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d994:	6833      	ldr	r3, [r6, #0]
 800d996:	423b      	tst	r3, r7
 800d998:	d18c      	bne.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d99a:	f7fe fa57 	bl	800be4c <HAL_GetTick>
 800d99e:	9b01      	ldr	r3, [sp, #4]
 800d9a0:	1ac0      	subs	r0, r0, r3
 800d9a2:	2864      	cmp	r0, #100	; 0x64
 800d9a4:	d9f6      	bls.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 800d9a6:	2003      	movs	r0, #3
}
 800d9a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9aa:	001a      	movs	r2, r3
 800d9ac:	400a      	ands	r2, r1
 800d9ae:	428a      	cmp	r2, r1
 800d9b0:	d000      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800d9b2:	e78a      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x46>
 800d9b4:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR; 
 800d9b6:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9b8:	0392      	lsls	r2, r2, #14
 800d9ba:	d400      	bmi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x13a>
 800d9bc:	e785      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x46>
 800d9be:	e7f3      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d9c0:	400b      	ands	r3, r1
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d100      	bne.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800d9c6:	e784      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	069b      	lsls	r3, r3, #26
 800d9cc:	d400      	bmi.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d9ce:	e780      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 800d9d0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d9d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800d9d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d9d6:	0312      	lsls	r2, r2, #12
 800d9d8:	4302      	orrs	r2, r0
 800d9da:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d9dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d9de:	4b12      	ldr	r3, [pc, #72]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d9e0:	4814      	ldr	r0, [pc, #80]	; (800da34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d9e2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d9e4:	4002      	ands	r2, r0
 800d9e6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800d9e8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800d9ea:	05cb      	lsls	r3, r1, #23
 800d9ec:	d400      	bmi.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800d9ee:	e770      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 800d9f0:	f7fe fa2c 	bl	800be4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9f4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800d9f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9f8:	00bf      	lsls	r7, r7, #2
 800d9fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d9fc:	423b      	tst	r3, r7
 800d9fe:	d000      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800da00:	e767      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da02:	f7fe fa23 	bl	800be4c <HAL_GetTick>
 800da06:	4b0c      	ldr	r3, [pc, #48]	; (800da38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800da08:	1b80      	subs	r0, r0, r6
 800da0a:	4298      	cmp	r0, r3
 800da0c:	d9f5      	bls.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x176>
 800da0e:	e7ca      	b.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800da10:	40021000 	.word	0x40021000
 800da14:	40007000 	.word	0x40007000
 800da18:	ffcfffff 	.word	0xffcfffff
 800da1c:	efffffff 	.word	0xefffffff
 800da20:	fffff3ff 	.word	0xfffff3ff
 800da24:	ffffcfff 	.word	0xffffcfff
 800da28:	fffcffff 	.word	0xfffcffff
 800da2c:	fbffffff 	.word	0xfbffffff
 800da30:	fff3ffff 	.word	0xfff3ffff
 800da34:	fff7ffff 	.word	0xfff7ffff
 800da38:	00001388 	.word	0x00001388

0800da3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800da3c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800da3e:	2808      	cmp	r0, #8
 800da40:	d100      	bne.n	800da44 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 800da42:	e0c3      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800da44:	d810      	bhi.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 800da46:	2802      	cmp	r0, #2
 800da48:	d100      	bne.n	800da4c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800da4a:	e095      	b.n	800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800da4c:	2804      	cmp	r0, #4
 800da4e:	d100      	bne.n	800da52 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800da50:	e0a2      	b.n	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800da52:	2801      	cmp	r0, #1
 800da54:	d10e      	bne.n	800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800da56:	2103      	movs	r1, #3
 800da58:	4a69      	ldr	r2, [pc, #420]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800da5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800da5c:	400b      	ands	r3, r1

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800da5e:	d000      	beq.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800da60:	e079      	b.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 800da62:	f7ff feff 	bl	800d864 <HAL_RCC_GetPCLK2Freq>
 800da66:	e032      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 800da68:	2820      	cmp	r0, #32
 800da6a:	d019      	beq.n	800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800da6c:	d804      	bhi.n	800da78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800da6e:	2810      	cmp	r0, #16
 800da70:	d100      	bne.n	800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800da72:	e0bb      	b.n	800dbec <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 800da74:	2000      	movs	r0, #0
 800da76:	e02a      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 800da78:	2840      	cmp	r0, #64	; 0x40
 800da7a:	d044      	beq.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800da7c:	2380      	movs	r3, #128	; 0x80
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	4298      	cmp	r0, r3
 800da82:	d1f7      	bne.n	800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>

#if defined(RCC_CCIPR_I2C3SEL)
  case RCC_PERIPHCLK_I2C3:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800da84:	21c0      	movs	r1, #192	; 0xc0
 800da86:	4a5e      	ldr	r2, [pc, #376]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800da88:	0289      	lsls	r1, r1, #10
 800da8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800da8c:	400b      	ands	r3, r1

      /* Check if I2C3 clock selection is PCLK1 */
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800da8e:	d100      	bne.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800da90:	e077      	b.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C3 clock selection is HSI */
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800da92:	2180      	movs	r1, #128	; 0x80
 800da94:	0289      	lsls	r1, r1, #10
 800da96:	428b      	cmp	r3, r1
 800da98:	d05f      	beq.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800da9a:	2280      	movs	r2, #128	; 0x80
 800da9c:	0252      	lsls	r2, r2, #9
 800da9e:	e0a1      	b.n	800dbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800daa0:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 800daa2:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 800daa4:	4956      	ldr	r1, [pc, #344]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800daa6:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 800daa8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800daaa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 800daac:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800daae:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 800dab0:	4282      	cmp	r2, r0
 800dab2:	d103      	bne.n	800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800dab4:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 800dab6:	0fc0      	lsrs	r0, r0, #31
 800dab8:	03c0      	lsls	r0, r0, #15
 800daba:	e008      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800dabc:	2480      	movs	r4, #128	; 0x80
 800dabe:	02a4      	lsls	r4, r4, #10
 800dac0:	42a2      	cmp	r2, r4
 800dac2:	d105      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800dac4:	2002      	movs	r0, #2
 800dac6:	4003      	ands	r3, r0
            frequency = 0U;
 800dac8:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800daca:	d000      	beq.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = LSI_VALUE;
 800dacc:	484d      	ldr	r0, [pc, #308]	; (800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
    {
      break;
    }
  }
  return(frequency);
}
 800dace:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 800dad0:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800dad2:	42aa      	cmp	r2, r5
 800dad4:	d1fb      	bne.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800dad6:	680b      	ldr	r3, [r1, #0]
 800dad8:	4223      	tst	r3, r4
 800dada:	d0f8      	beq.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 800dadc:	22c0      	movs	r2, #192	; 0xc0
 800dade:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 800dae0:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 800dae2:	0392      	lsls	r2, r2, #14
 800dae4:	4013      	ands	r3, r2
        switch (clkprediv)
 800dae6:	0389      	lsls	r1, r1, #14
 800dae8:	428b      	cmp	r3, r1
 800daea:	d008      	beq.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800daec:	4293      	cmp	r3, r2
 800daee:	d100      	bne.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800daf0:	e084      	b.n	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 800daf2:	2280      	movs	r2, #128	; 0x80
 800daf4:	0352      	lsls	r2, r2, #13
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d103      	bne.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            frequency = HSE_VALUE / 4U;
 800dafa:	4843      	ldr	r0, [pc, #268]	; (800dc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
            break;
 800dafc:	e7e7      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 8U;
 800dafe:	4843      	ldr	r0, [pc, #268]	; (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 800db00:	e7e5      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 2U;
 800db02:	4843      	ldr	r0, [pc, #268]	; (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
            break;
 800db04:	e7e3      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800db06:	2080      	movs	r0, #128	; 0x80
 800db08:	4b3d      	ldr	r3, [pc, #244]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800db0a:	04c0      	lsls	r0, r0, #19
 800db0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db0e:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800db10:	d11a      	bne.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	0192      	lsls	r2, r2, #6
 800db16:	d5da      	bpl.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800db18:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800db1a:	483e      	ldr	r0, [pc, #248]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800db1c:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800db1e:	0292      	lsls	r2, r2, #10
 800db20:	0f12      	lsrs	r2, r2, #28
 800db22:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800db24:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800db26:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800db28:	0f89      	lsrs	r1, r1, #30
 800db2a:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800db2c:	03d2      	lsls	r2, r2, #15
 800db2e:	d407      	bmi.n	800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	06db      	lsls	r3, r3, #27
 800db34:	d406      	bmi.n	800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
                    pllvco =  HSI_VALUE;
 800db36:	4b38      	ldr	r3, [pc, #224]	; (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            pllvco = (pllvco * pllmul);
 800db38:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800db3a:	f7f3 f83d 	bl	8000bb8 <__udivsi3>
 800db3e:	e7c6      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
                pllvco = HSE_VALUE;
 800db40:	4b36      	ldr	r3, [pc, #216]	; (800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800db42:	e7f9      	b.n	800db38 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
                    pllvco =  (HSI_VALUE >> 2U);
 800db44:	4b32      	ldr	r3, [pc, #200]	; (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800db46:	e7f7      	b.n	800db38 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800db48:	2202      	movs	r2, #2
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	4013      	ands	r3, r2
            frequency = 0U;
 800db4e:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800db50:	d0bd      	beq.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSI48_VALUE;
 800db52:	4833      	ldr	r0, [pc, #204]	; (800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800db54:	e7bb      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800db56:	2b02      	cmp	r3, #2
 800db58:	d103      	bne.n	800db62 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800db5a:	6813      	ldr	r3, [r2, #0]
 800db5c:	2204      	movs	r2, #4
 800db5e:	4013      	ands	r3, r2
 800db60:	e026      	b.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800db62:	2b01      	cmp	r3, #1
 800db64:	d102      	bne.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = HAL_RCC_GetSysClockFreq();
 800db66:	f7ff fd79 	bl	800d65c <HAL_RCC_GetSysClockFreq>
 800db6a:	e7b0      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = 0U;
 800db6c:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d1ad      	bne.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800db72:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800db74:	0580      	lsls	r0, r0, #22
 800db76:	e79e      	b.n	800dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800db78:	210c      	movs	r1, #12
 800db7a:	4a21      	ldr	r2, [pc, #132]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800db7c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800db7e:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800db80:	d102      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800db82:	f7ff fe5f 	bl	800d844 <HAL_RCC_GetPCLK1Freq>
 800db86:	e7a2      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800db88:	2b08      	cmp	r3, #8
 800db8a:	d0e6      	beq.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d0ea      	beq.n	800db66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 800db90:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800db92:	2b0c      	cmp	r3, #12
 800db94:	d19b      	bne.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800db96:	e7ec      	b.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800db98:	21c0      	movs	r1, #192	; 0xc0
 800db9a:	4a19      	ldr	r2, [pc, #100]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800db9c:	0109      	lsls	r1, r1, #4
 800db9e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dba0:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800dba2:	d0ee      	beq.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800dba4:	2480      	movs	r4, #128	; 0x80
 800dba6:	0124      	lsls	r4, r4, #4
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	d106      	bne.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800dbac:	6813      	ldr	r3, [r2, #0]
 800dbae:	4003      	ands	r3, r0
            frequency = 0U;
 800dbb0:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800dbb2:	d100      	bne.n	800dbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800dbb4:	e78b      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = HSI_VALUE;
 800dbb6:	4818      	ldr	r0, [pc, #96]	; (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800dbb8:	e789      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800dbba:	2080      	movs	r0, #128	; 0x80
 800dbbc:	00c0      	lsls	r0, r0, #3
 800dbbe:	4283      	cmp	r3, r0
 800dbc0:	d0d1      	beq.n	800db66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 800dbc2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	d000      	beq.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 800dbc8:	e781      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800dbca:	e7d2      	b.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800dbcc:	21c0      	movs	r1, #192	; 0xc0
 800dbce:	4a0c      	ldr	r2, [pc, #48]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800dbd0:	0189      	lsls	r1, r1, #6
 800dbd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dbd4:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800dbd6:	d0d4      	beq.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800dbd8:	2180      	movs	r1, #128	; 0x80
 800dbda:	0189      	lsls	r1, r1, #6
 800dbdc:	428b      	cmp	r3, r1
 800dbde:	d0bc      	beq.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800dbe0:	2280      	movs	r2, #128	; 0x80
 800dbe2:	0152      	lsls	r2, r2, #5
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d000      	beq.n	800dbea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800dbe8:	e744      	b.n	800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800dbea:	e7bc      	b.n	800db66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 800dbec:	4b04      	ldr	r3, [pc, #16]	; (800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800dbee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dbf0:	2380      	movs	r3, #128	; 0x80
 800dbf2:	03db      	lsls	r3, r3, #15
 800dbf4:	4018      	ands	r0, r3
 800dbf6:	d100      	bne.n	800dbfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800dbf8:	e769      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800dbfa:	e7c2      	b.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE / 16U;
 800dbfc:	4809      	ldr	r0, [pc, #36]	; (800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 800dbfe:	e766      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800dc00:	40021000 	.word	0x40021000
 800dc04:	00009088 	.word	0x00009088
 800dc08:	001e8480 	.word	0x001e8480
 800dc0c:	000f4240 	.word	0x000f4240
 800dc10:	003d0900 	.word	0x003d0900
 800dc14:	0801714d 	.word	0x0801714d
 800dc18:	00f42400 	.word	0x00f42400
 800dc1c:	007a1200 	.word	0x007a1200
 800dc20:	02dc6c00 	.word	0x02dc6c00
 800dc24:	0007a120 	.word	0x0007a120

0800dc28 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dc28:	2302      	movs	r3, #2
 800dc2a:	4a06      	ldr	r2, [pc, #24]	; (800dc44 <HAL_Init+0x1c>)
{
 800dc2c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dc2e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800dc30:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dc32:	430b      	orrs	r3, r1
 800dc34:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800dc36:	f7fe f901 	bl	800be3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dc3a:	f7fe f90b 	bl	800be54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800dc3e:	2000      	movs	r0, #0
 800dc40:	bd10      	pop	{r4, pc}
 800dc42:	46c0      	nop			; (mov r8, r8)
 800dc44:	40022000 	.word	0x40022000

0800dc48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	0189      	lsls	r1, r1, #6
  if ((int32_t)(IRQn) < 0)
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	da14      	bge.n	800dc7a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc50:	230f      	movs	r3, #15
 800dc52:	b2c0      	uxtb	r0, r0
 800dc54:	4003      	ands	r3, r0
 800dc56:	3b08      	subs	r3, #8
 800dc58:	4a11      	ldr	r2, [pc, #68]	; (800dca0 <HAL_NVIC_SetPriority+0x58>)
 800dc5a:	089b      	lsrs	r3, r3, #2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	189b      	adds	r3, r3, r2
 800dc60:	2203      	movs	r2, #3
 800dc62:	4010      	ands	r0, r2
 800dc64:	4090      	lsls	r0, r2
 800dc66:	32fc      	adds	r2, #252	; 0xfc
 800dc68:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dc6a:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc6c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dc6e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc70:	69dc      	ldr	r4, [r3, #28]
 800dc72:	43ac      	bics	r4, r5
 800dc74:	4321      	orrs	r1, r4
 800dc76:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800dc78:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc7a:	2503      	movs	r5, #3
 800dc7c:	0883      	lsrs	r3, r0, #2
 800dc7e:	4028      	ands	r0, r5
 800dc80:	40a8      	lsls	r0, r5
 800dc82:	35fc      	adds	r5, #252	; 0xfc
 800dc84:	002e      	movs	r6, r5
 800dc86:	4a07      	ldr	r2, [pc, #28]	; (800dca4 <HAL_NVIC_SetPriority+0x5c>)
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	189b      	adds	r3, r3, r2
 800dc8c:	22c0      	movs	r2, #192	; 0xc0
 800dc8e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dc90:	4029      	ands	r1, r5
 800dc92:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc94:	0092      	lsls	r2, r2, #2
 800dc96:	589c      	ldr	r4, [r3, r2]
 800dc98:	43b4      	bics	r4, r6
 800dc9a:	4321      	orrs	r1, r4
 800dc9c:	5099      	str	r1, [r3, r2]
 800dc9e:	e7eb      	b.n	800dc78 <HAL_NVIC_SetPriority+0x30>
 800dca0:	e000ed00 	.word	0xe000ed00
 800dca4:	e000e100 	.word	0xe000e100

0800dca8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800dca8:	231f      	movs	r3, #31
 800dcaa:	4018      	ands	r0, r3
 800dcac:	3b1e      	subs	r3, #30
 800dcae:	4083      	lsls	r3, r0
 800dcb0:	4a01      	ldr	r2, [pc, #4]	; (800dcb8 <HAL_NVIC_EnableIRQ+0x10>)
 800dcb2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800dcb4:	4770      	bx	lr
 800dcb6:	46c0      	nop			; (mov r8, r8)
 800dcb8:	e000e100 	.word	0xe000e100

0800dcbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800dcbe:	4a55      	ldr	r2, [pc, #340]	; (800de14 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800dcc0:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800dcc2:	1882      	adds	r2, r0, r2
 800dcc4:	1e54      	subs	r4, r2, #1
 800dcc6:	41a2      	sbcs	r2, r4
{
 800dcc8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800dcca:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800dccc:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800dcce:	3205      	adds	r2, #5
 800dcd0:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800dcd2:	9a01      	ldr	r2, [sp, #4]
 800dcd4:	40da      	lsrs	r2, r3
 800dcd6:	d101      	bne.n	800dcdc <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800dcd8:	b005      	add	sp, #20
 800dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800dcdc:	2501      	movs	r5, #1
 800dcde:	409d      	lsls	r5, r3
 800dce0:	9a01      	ldr	r2, [sp, #4]
 800dce2:	402a      	ands	r2, r5
 800dce4:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800dce6:	d100      	bne.n	800dcea <HAL_GPIO_Init+0x2e>
 800dce8:	e091      	b.n	800de0e <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800dcea:	684a      	ldr	r2, [r1, #4]
 800dcec:	4694      	mov	ip, r2
 800dcee:	2210      	movs	r2, #16
 800dcf0:	4664      	mov	r4, ip
 800dcf2:	4394      	bics	r4, r2
 800dcf4:	0022      	movs	r2, r4
 800dcf6:	3c01      	subs	r4, #1
 800dcf8:	2a02      	cmp	r2, #2
 800dcfa:	d11f      	bne.n	800dd3c <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800dcfc:	2407      	movs	r4, #7
 800dcfe:	270f      	movs	r7, #15
 800dd00:	401c      	ands	r4, r3
 800dd02:	00a4      	lsls	r4, r4, #2
 800dd04:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800dd06:	08da      	lsrs	r2, r3, #3
 800dd08:	0092      	lsls	r2, r2, #2
 800dd0a:	1882      	adds	r2, r0, r2
 800dd0c:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800dd0e:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800dd10:	690f      	ldr	r7, [r1, #16]
 800dd12:	40a7      	lsls	r7, r4
 800dd14:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800dd16:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800dd18:	2403      	movs	r4, #3
 800dd1a:	005e      	lsls	r6, r3, #1
 800dd1c:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800dd1e:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800dd20:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dd22:	68cc      	ldr	r4, [r1, #12]
 800dd24:	40b4      	lsls	r4, r6
 800dd26:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 800dd28:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dd2a:	4662      	mov	r2, ip
 800dd2c:	06d2      	lsls	r2, r2, #27
 800dd2e:	0fd2      	lsrs	r2, r2, #31
 800dd30:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800dd32:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd34:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dd36:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800dd38:	6042      	str	r2, [r0, #4]
 800dd3a:	e001      	b.n	800dd40 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800dd3c:	2c01      	cmp	r4, #1
 800dd3e:	d9eb      	bls.n	800dd18 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dd40:	2603      	movs	r6, #3
 800dd42:	0034      	movs	r4, r6
 800dd44:	005d      	lsls	r5, r3, #1
 800dd46:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dd48:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dd4a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dd4c:	4032      	ands	r2, r6
 800dd4e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800dd50:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dd52:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dd54:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800dd56:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 800dd58:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd5a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800dd5c:	688a      	ldr	r2, [r1, #8]
 800dd5e:	40aa      	lsls	r2, r5
 800dd60:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800dd62:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800dd64:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800dd66:	00d2      	lsls	r2, r2, #3
 800dd68:	d551      	bpl.n	800de0e <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd6a:	2501      	movs	r5, #1
 800dd6c:	4c2a      	ldr	r4, [pc, #168]	; (800de18 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800dd6e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dd72:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800dd74:	001d      	movs	r5, r3
 800dd76:	4035      	ands	r5, r6
 800dd78:	00ad      	lsls	r5, r5, #2
 800dd7a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd7c:	6362      	str	r2, [r4, #52]	; 0x34
 800dd7e:	4a27      	ldr	r2, [pc, #156]	; (800de1c <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800dd80:	089c      	lsrs	r4, r3, #2
 800dd82:	00a4      	lsls	r4, r4, #2
 800dd84:	18a4      	adds	r4, r4, r2
 800dd86:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800dd88:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800dd8a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800dd8c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800dd8e:	05ff      	lsls	r7, r7, #23
 800dd90:	2200      	movs	r2, #0
 800dd92:	42b8      	cmp	r0, r7
 800dd94:	d010      	beq.n	800ddb8 <HAL_GPIO_Init+0xfc>
 800dd96:	4f22      	ldr	r7, [pc, #136]	; (800de20 <HAL_GPIO_Init+0x164>)
 800dd98:	3201      	adds	r2, #1
 800dd9a:	42b8      	cmp	r0, r7
 800dd9c:	d00c      	beq.n	800ddb8 <HAL_GPIO_Init+0xfc>
 800dd9e:	4f21      	ldr	r7, [pc, #132]	; (800de24 <HAL_GPIO_Init+0x168>)
 800dda0:	3201      	adds	r2, #1
 800dda2:	42b8      	cmp	r0, r7
 800dda4:	d008      	beq.n	800ddb8 <HAL_GPIO_Init+0xfc>
 800dda6:	4f20      	ldr	r7, [pc, #128]	; (800de28 <HAL_GPIO_Init+0x16c>)
 800dda8:	0032      	movs	r2, r6
 800ddaa:	42b8      	cmp	r0, r7
 800ddac:	d004      	beq.n	800ddb8 <HAL_GPIO_Init+0xfc>
 800ddae:	4e1f      	ldr	r6, [pc, #124]	; (800de2c <HAL_GPIO_Init+0x170>)
 800ddb0:	3201      	adds	r2, #1
 800ddb2:	42b0      	cmp	r0, r6
 800ddb4:	d000      	beq.n	800ddb8 <HAL_GPIO_Init+0xfc>
 800ddb6:	9a03      	ldr	r2, [sp, #12]
 800ddb8:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ddba:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ddbc:	9d02      	ldr	r5, [sp, #8]
 800ddbe:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ddc0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800ddc2:	4a1b      	ldr	r2, [pc, #108]	; (800de30 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 800ddc4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800ddc6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800ddc8:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800ddca:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800ddcc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ddce:	03ff      	lsls	r7, r7, #15
 800ddd0:	d401      	bmi.n	800ddd6 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800ddd2:	0035      	movs	r5, r6
 800ddd4:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ddd6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800ddd8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800ddda:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800dddc:	9d00      	ldr	r5, [sp, #0]
 800ddde:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dde0:	03bf      	lsls	r7, r7, #14
 800dde2:	d401      	bmi.n	800dde8 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 800dde4:	0035      	movs	r5, r6
 800dde6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800dde8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800ddea:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800ddec:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800ddee:	9d00      	ldr	r5, [sp, #0]
 800ddf0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ddf2:	02ff      	lsls	r7, r7, #11
 800ddf4:	d401      	bmi.n	800ddfa <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800ddf6:	0035      	movs	r5, r6
 800ddf8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ddfa:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800ddfc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800ddfe:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800de00:	9e00      	ldr	r6, [sp, #0]
 800de02:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800de04:	02bf      	lsls	r7, r7, #10
 800de06:	d401      	bmi.n	800de0c <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 800de08:	4025      	ands	r5, r4
 800de0a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800de0c:	60d6      	str	r6, [r2, #12]
    position++;
 800de0e:	3301      	adds	r3, #1
 800de10:	e75f      	b.n	800dcd2 <HAL_GPIO_Init+0x16>
 800de12:	46c0      	nop			; (mov r8, r8)
 800de14:	afffe400 	.word	0xafffe400
 800de18:	40021000 	.word	0x40021000
 800de1c:	40010000 	.word	0x40010000
 800de20:	50000400 	.word	0x50000400
 800de24:	50000800 	.word	0x50000800
 800de28:	50000c00 	.word	0x50000c00
 800de2c:	50001000 	.word	0x50001000
 800de30:	40010400 	.word	0x40010400

0800de34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800de34:	2a00      	cmp	r2, #0
 800de36:	d001      	beq.n	800de3c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800de38:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800de3a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800de3c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800de3e:	e7fc      	b.n	800de3a <HAL_GPIO_WritePin+0x6>

0800de40 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800de40:	4b04      	ldr	r3, [pc, #16]	; (800de54 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800de42:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800de44:	695a      	ldr	r2, [r3, #20]
 800de46:	4210      	tst	r0, r2
 800de48:	d002      	beq.n	800de50 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800de4a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800de4c:	f7fe f84e 	bl	800beec <HAL_GPIO_EXTI_Callback>
  }
}
 800de50:	bd10      	pop	{r4, pc}
 800de52:	46c0      	nop			; (mov r8, r8)
 800de54:	40010400 	.word	0x40010400

0800de58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800de58:	0003      	movs	r3, r0
 800de5a:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800de5c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d02a      	beq.n	800deb8 <HAL_DMA_Init+0x60>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800de62:	1d98      	adds	r0, r3, #6
 800de64:	7fc2      	ldrb	r2, [r0, #31]
 800de66:	b2d2      	uxtb	r2, r2
 800de68:	2a00      	cmp	r2, #0
 800de6a:	d101      	bne.n	800de70 <HAL_DMA_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800de6c:	1d59      	adds	r1, r3, #5
 800de6e:	77ca      	strb	r2, [r1, #31]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800de70:	2202      	movs	r2, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800de72:	6819      	ldr	r1, [r3, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800de74:	77c2      	strb	r2, [r0, #31]
  tmp = hdma->Instance->CCR;
 800de76:	680c      	ldr	r4, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800de78:	4a34      	ldr	r2, [pc, #208]	; (800df4c <HAL_DMA_Init+0xf4>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800de7a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800de7c:	4014      	ands	r4, r2
  tmp |=  hdma->Init.Direction        |
 800de7e:	689a      	ldr	r2, [r3, #8]
 800de80:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800de82:	691d      	ldr	r5, [r3, #16]
 800de84:	432a      	orrs	r2, r5
 800de86:	695d      	ldr	r5, [r3, #20]
 800de88:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800de8a:	699d      	ldr	r5, [r3, #24]
 800de8c:	432a      	orrs	r2, r5
 800de8e:	69dd      	ldr	r5, [r3, #28]
 800de90:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800de92:	6a1d      	ldr	r5, [r3, #32]
 800de94:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 800de96:	4322      	orrs	r2, r4

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800de98:	600a      	str	r2, [r1, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 800de9a:	4a2d      	ldr	r2, [pc, #180]	; (800df50 <HAL_DMA_Init+0xf8>)
 800de9c:	4291      	cmp	r1, r2
 800de9e:	d10c      	bne.n	800deba <HAL_DMA_Init+0x62>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 800dea0:	240f      	movs	r4, #15
 800dea2:	4a2c      	ldr	r2, [pc, #176]	; (800df54 <HAL_DMA_Init+0xfc>)
 800dea4:	6811      	ldr	r1, [r2, #0]
 800dea6:	43a1      	bics	r1, r4
 800dea8:	6011      	str	r1, [r2, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 800deaa:	6811      	ldr	r1, [r2, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 800deae:	430b      	orrs	r3, r1
 800deb0:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800deb2:	2301      	movs	r3, #1
 800deb4:	77c3      	strb	r3, [r0, #31]
  
  return HAL_OK;
 800deb6:	2000      	movs	r0, #0
}  
 800deb8:	bd30      	pop	{r4, r5, pc}
  else if (hdma->Instance == DMA1_Channel2)
 800deba:	4a27      	ldr	r2, [pc, #156]	; (800df58 <HAL_DMA_Init+0x100>)
 800debc:	4291      	cmp	r1, r2
 800debe:	d108      	bne.n	800ded2 <HAL_DMA_Init+0x7a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 800dec0:	24f0      	movs	r4, #240	; 0xf0
 800dec2:	4a24      	ldr	r2, [pc, #144]	; (800df54 <HAL_DMA_Init+0xfc>)
 800dec4:	6811      	ldr	r1, [r2, #0]
 800dec6:	43a1      	bics	r1, r4
 800dec8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	6811      	ldr	r1, [r2, #0]
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	e7ed      	b.n	800deae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel3)
 800ded2:	4a22      	ldr	r2, [pc, #136]	; (800df5c <HAL_DMA_Init+0x104>)
 800ded4:	4291      	cmp	r1, r2
 800ded6:	d108      	bne.n	800deea <HAL_DMA_Init+0x92>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 800ded8:	4a1e      	ldr	r2, [pc, #120]	; (800df54 <HAL_DMA_Init+0xfc>)
 800deda:	4c21      	ldr	r4, [pc, #132]	; (800df60 <HAL_DMA_Init+0x108>)
 800dedc:	6811      	ldr	r1, [r2, #0]
 800dede:	4021      	ands	r1, r4
 800dee0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	6811      	ldr	r1, [r2, #0]
 800dee6:	021b      	lsls	r3, r3, #8
 800dee8:	e7e1      	b.n	800deae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel4)
 800deea:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <HAL_DMA_Init+0x10c>)
 800deec:	4291      	cmp	r1, r2
 800deee:	d108      	bne.n	800df02 <HAL_DMA_Init+0xaa>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 800def0:	4a18      	ldr	r2, [pc, #96]	; (800df54 <HAL_DMA_Init+0xfc>)
 800def2:	4c1d      	ldr	r4, [pc, #116]	; (800df68 <HAL_DMA_Init+0x110>)
 800def4:	6811      	ldr	r1, [r2, #0]
 800def6:	4021      	ands	r1, r4
 800def8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	6811      	ldr	r1, [r2, #0]
 800defe:	031b      	lsls	r3, r3, #12
 800df00:	e7d5      	b.n	800deae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel5)
 800df02:	4a1a      	ldr	r2, [pc, #104]	; (800df6c <HAL_DMA_Init+0x114>)
 800df04:	4291      	cmp	r1, r2
 800df06:	d108      	bne.n	800df1a <HAL_DMA_Init+0xc2>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 800df08:	4a12      	ldr	r2, [pc, #72]	; (800df54 <HAL_DMA_Init+0xfc>)
 800df0a:	4c19      	ldr	r4, [pc, #100]	; (800df70 <HAL_DMA_Init+0x118>)
 800df0c:	6811      	ldr	r1, [r2, #0]
 800df0e:	4021      	ands	r1, r4
 800df10:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	6811      	ldr	r1, [r2, #0]
 800df16:	041b      	lsls	r3, r3, #16
 800df18:	e7c9      	b.n	800deae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel6)
 800df1a:	4a16      	ldr	r2, [pc, #88]	; (800df74 <HAL_DMA_Init+0x11c>)
 800df1c:	4291      	cmp	r1, r2
 800df1e:	d108      	bne.n	800df32 <HAL_DMA_Init+0xda>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 800df20:	4a0c      	ldr	r2, [pc, #48]	; (800df54 <HAL_DMA_Init+0xfc>)
 800df22:	4c15      	ldr	r4, [pc, #84]	; (800df78 <HAL_DMA_Init+0x120>)
 800df24:	6811      	ldr	r1, [r2, #0]
 800df26:	4021      	ands	r1, r4
 800df28:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	6811      	ldr	r1, [r2, #0]
 800df2e:	051b      	lsls	r3, r3, #20
 800df30:	e7bd      	b.n	800deae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel7)
 800df32:	4a12      	ldr	r2, [pc, #72]	; (800df7c <HAL_DMA_Init+0x124>)
 800df34:	4291      	cmp	r1, r2
 800df36:	d1bc      	bne.n	800deb2 <HAL_DMA_Init+0x5a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 800df38:	4a06      	ldr	r2, [pc, #24]	; (800df54 <HAL_DMA_Init+0xfc>)
 800df3a:	4c11      	ldr	r4, [pc, #68]	; (800df80 <HAL_DMA_Init+0x128>)
 800df3c:	6811      	ldr	r1, [r2, #0]
 800df3e:	4021      	ands	r1, r4
 800df40:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	6811      	ldr	r1, [r2, #0]
 800df46:	061b      	lsls	r3, r3, #24
 800df48:	e7b1      	b.n	800deae <HAL_DMA_Init+0x56>
 800df4a:	46c0      	nop			; (mov r8, r8)
 800df4c:	ffffc00f 	.word	0xffffc00f
 800df50:	40020008 	.word	0x40020008
 800df54:	400200a8 	.word	0x400200a8
 800df58:	4002001c 	.word	0x4002001c
 800df5c:	40020030 	.word	0x40020030
 800df60:	fffff0ff 	.word	0xfffff0ff
 800df64:	40020044 	.word	0x40020044
 800df68:	ffff0fff 	.word	0xffff0fff
 800df6c:	40020058 	.word	0x40020058
 800df70:	fff0ffff 	.word	0xfff0ffff
 800df74:	4002006c 	.word	0x4002006c
 800df78:	ff0fffff 	.word	0xff0fffff
 800df7c:	40020080 	.word	0x40020080
 800df80:	f0ffffff 	.word	0xf0ffffff

0800df84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800df84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df86:	2502      	movs	r5, #2
  /* Process locked */
  __HAL_LOCK(hdma);
 800df88:	1d47      	adds	r7, r0, #5
 800df8a:	7ffe      	ldrb	r6, [r7, #31]
 800df8c:	002c      	movs	r4, r5
 800df8e:	2e01      	cmp	r6, #1
 800df90:	d01e      	beq.n	800dfd0 <HAL_DMA_Start_IT+0x4c>
 800df92:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800df94:	1d84      	adds	r4, r0, #6
  __HAL_LOCK(hdma);
 800df96:	77fe      	strb	r6, [r7, #31]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800df98:	77e5      	strb	r5, [r4, #31]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800df9a:	6804      	ldr	r4, [r0, #0]
 800df9c:	6825      	ldr	r5, [r4, #0]
 800df9e:	43b5      	bics	r5, r6
 800dfa0:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800dfa2:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dfa4:	6883      	ldr	r3, [r0, #8]
 800dfa6:	2b10      	cmp	r3, #16
 800dfa8:	d114      	bne.n	800dfd4 <HAL_DMA_Start_IT+0x50>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800dfaa:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800dfac:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800dfae:	2302      	movs	r3, #2
 800dfb0:	6822      	ldr	r2, [r4, #0]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800dfb6:	2304      	movs	r3, #4
 800dfb8:	6822      	ldr	r2, [r4, #0]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800dfbe:	2308      	movs	r3, #8
 800dfc0:	6822      	ldr	r2, [r4, #0]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	6822      	ldr	r2, [r4, #0]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	6023      	str	r3, [r4, #0]
  return HAL_OK;    
 800dfce:	2400      	movs	r4, #0
} 
 800dfd0:	0020      	movs	r0, r4
 800dfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800dfd4:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800dfd6:	60e2      	str	r2, [r4, #12]
 800dfd8:	e7e9      	b.n	800dfae <HAL_DMA_Start_IT+0x2a>
	...

0800dfdc <HAL_DMA_Abort_IT>:
{  
 800dfdc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800dfde:	1d84      	adds	r4, r0, #6
 800dfe0:	7fe3      	ldrb	r3, [r4, #31]
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d004      	beq.n	800dff0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dfe6:	2304      	movs	r3, #4
 800dfe8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800dfea:	3b03      	subs	r3, #3
}
 800dfec:	0018      	movs	r0, r3
 800dfee:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dff0:	210e      	movs	r1, #14
 800dff2:	6802      	ldr	r2, [r0, #0]
 800dff4:	6813      	ldr	r3, [r2, #0]
 800dff6:	438b      	bics	r3, r1
 800dff8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800dffa:	2301      	movs	r3, #1
 800dffc:	6811      	ldr	r1, [r2, #0]
 800dffe:	4399      	bics	r1, r3
 800e000:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800e002:	4917      	ldr	r1, [pc, #92]	; (800e060 <HAL_DMA_Abort_IT+0x84>)
 800e004:	428a      	cmp	r2, r1
 800e006:	d011      	beq.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e008:	4916      	ldr	r1, [pc, #88]	; (800e064 <HAL_DMA_Abort_IT+0x88>)
 800e00a:	330f      	adds	r3, #15
 800e00c:	428a      	cmp	r2, r1
 800e00e:	d00d      	beq.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e010:	4b15      	ldr	r3, [pc, #84]	; (800e068 <HAL_DMA_Abort_IT+0x8c>)
 800e012:	429a      	cmp	r2, r3
 800e014:	d018      	beq.n	800e048 <HAL_DMA_Abort_IT+0x6c>
 800e016:	4b15      	ldr	r3, [pc, #84]	; (800e06c <HAL_DMA_Abort_IT+0x90>)
 800e018:	429a      	cmp	r2, r3
 800e01a:	d018      	beq.n	800e04e <HAL_DMA_Abort_IT+0x72>
 800e01c:	4b14      	ldr	r3, [pc, #80]	; (800e070 <HAL_DMA_Abort_IT+0x94>)
 800e01e:	429a      	cmp	r2, r3
 800e020:	d018      	beq.n	800e054 <HAL_DMA_Abort_IT+0x78>
 800e022:	4b14      	ldr	r3, [pc, #80]	; (800e074 <HAL_DMA_Abort_IT+0x98>)
 800e024:	429a      	cmp	r2, r3
 800e026:	d018      	beq.n	800e05a <HAL_DMA_Abort_IT+0x7e>
 800e028:	2380      	movs	r3, #128	; 0x80
 800e02a:	045b      	lsls	r3, r3, #17
 800e02c:	4a12      	ldr	r2, [pc, #72]	; (800e078 <HAL_DMA_Abort_IT+0x9c>)
 800e02e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800e030:	2301      	movs	r3, #1
 800e032:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 800e034:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 800e036:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800e038:	1d43      	adds	r3, r0, #5
 800e03a:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800e03c:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800e03e:	42a2      	cmp	r2, r4
 800e040:	d0d4      	beq.n	800dfec <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800e042:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800e044:	0023      	movs	r3, r4
 800e046:	e7d1      	b.n	800dfec <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800e048:	2380      	movs	r3, #128	; 0x80
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	e7ee      	b.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e04e:	2380      	movs	r3, #128	; 0x80
 800e050:	015b      	lsls	r3, r3, #5
 800e052:	e7eb      	b.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e054:	2380      	movs	r3, #128	; 0x80
 800e056:	025b      	lsls	r3, r3, #9
 800e058:	e7e8      	b.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e05a:	2380      	movs	r3, #128	; 0x80
 800e05c:	035b      	lsls	r3, r3, #13
 800e05e:	e7e5      	b.n	800e02c <HAL_DMA_Abort_IT+0x50>
 800e060:	40020008 	.word	0x40020008
 800e064:	4002001c 	.word	0x4002001c
 800e068:	40020030 	.word	0x40020030
 800e06c:	40020044 	.word	0x40020044
 800e070:	40020058 	.word	0x40020058
 800e074:	4002006c 	.word	0x4002006c
 800e078:	40020000 	.word	0x40020000

0800e07c <HAL_DMA_IRQHandler>:
{        
 800e07c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800e07e:	6803      	ldr	r3, [r0, #0]
 800e080:	4d5b      	ldr	r5, [pc, #364]	; (800e1f0 <HAL_DMA_IRQHandler+0x174>)
 800e082:	4e5c      	ldr	r6, [pc, #368]	; (800e1f4 <HAL_DMA_IRQHandler+0x178>)
{        
 800e084:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800e086:	6829      	ldr	r1, [r5, #0]
 800e088:	2208      	movs	r2, #8
 800e08a:	42b3      	cmp	r3, r6
 800e08c:	d015      	beq.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
 800e08e:	485a      	ldr	r0, [pc, #360]	; (800e1f8 <HAL_DMA_IRQHandler+0x17c>)
 800e090:	3278      	adds	r2, #120	; 0x78
 800e092:	4283      	cmp	r3, r0
 800e094:	d011      	beq.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
 800e096:	4a59      	ldr	r2, [pc, #356]	; (800e1fc <HAL_DMA_IRQHandler+0x180>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d100      	bne.n	800e09e <HAL_DMA_IRQHandler+0x22>
 800e09c:	e084      	b.n	800e1a8 <HAL_DMA_IRQHandler+0x12c>
 800e09e:	4a58      	ldr	r2, [pc, #352]	; (800e200 <HAL_DMA_IRQHandler+0x184>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d100      	bne.n	800e0a6 <HAL_DMA_IRQHandler+0x2a>
 800e0a4:	e083      	b.n	800e1ae <HAL_DMA_IRQHandler+0x132>
 800e0a6:	4a57      	ldr	r2, [pc, #348]	; (800e204 <HAL_DMA_IRQHandler+0x188>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d100      	bne.n	800e0ae <HAL_DMA_IRQHandler+0x32>
 800e0ac:	e082      	b.n	800e1b4 <HAL_DMA_IRQHandler+0x138>
 800e0ae:	4a56      	ldr	r2, [pc, #344]	; (800e208 <HAL_DMA_IRQHandler+0x18c>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d100      	bne.n	800e0b6 <HAL_DMA_IRQHandler+0x3a>
 800e0b4:	e081      	b.n	800e1ba <HAL_DMA_IRQHandler+0x13e>
 800e0b6:	2280      	movs	r2, #128	; 0x80
 800e0b8:	0512      	lsls	r2, r2, #20
 800e0ba:	4211      	tst	r1, r2
 800e0bc:	d016      	beq.n	800e0ec <HAL_DMA_IRQHandler+0x70>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e0be:	2008      	movs	r0, #8
 800e0c0:	6819      	ldr	r1, [r3, #0]
 800e0c2:	4201      	tst	r1, r0
 800e0c4:	d012      	beq.n	800e0ec <HAL_DMA_IRQHandler+0x70>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800e0c6:	6819      	ldr	r1, [r3, #0]
 800e0c8:	4381      	bics	r1, r0
 800e0ca:	6019      	str	r1, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e0cc:	2301      	movs	r3, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800e0ce:	606a      	str	r2, [r5, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e0d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e0d2:	4313      	orrs	r3, r2
      hdma->State = HAL_DMA_STATE_ERROR;    
 800e0d4:	2204      	movs	r2, #4
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e0d6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_ERROR;    
 800e0d8:	1da3      	adds	r3, r4, #6
 800e0da:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma); 
 800e0dc:	2200      	movs	r2, #0
 800e0de:	1d63      	adds	r3, r4, #5
 800e0e0:	77da      	strb	r2, [r3, #31]
      if (hdma->XferErrorCallback != NULL)
 800e0e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d001      	beq.n	800e0ec <HAL_DMA_IRQHandler+0x70>
        hdma->XferErrorCallback(hdma);
 800e0e8:	0020      	movs	r0, r4
 800e0ea:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	6829      	ldr	r1, [r5, #0]
 800e0f0:	2204      	movs	r2, #4
 800e0f2:	42b3      	cmp	r3, r6
 800e0f4:	d011      	beq.n	800e11a <HAL_DMA_IRQHandler+0x9e>
 800e0f6:	4840      	ldr	r0, [pc, #256]	; (800e1f8 <HAL_DMA_IRQHandler+0x17c>)
 800e0f8:	323c      	adds	r2, #60	; 0x3c
 800e0fa:	4283      	cmp	r3, r0
 800e0fc:	d00d      	beq.n	800e11a <HAL_DMA_IRQHandler+0x9e>
 800e0fe:	4a3f      	ldr	r2, [pc, #252]	; (800e1fc <HAL_DMA_IRQHandler+0x180>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d05d      	beq.n	800e1c0 <HAL_DMA_IRQHandler+0x144>
 800e104:	4a3e      	ldr	r2, [pc, #248]	; (800e200 <HAL_DMA_IRQHandler+0x184>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d05d      	beq.n	800e1c6 <HAL_DMA_IRQHandler+0x14a>
 800e10a:	4a3e      	ldr	r2, [pc, #248]	; (800e204 <HAL_DMA_IRQHandler+0x188>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d05d      	beq.n	800e1cc <HAL_DMA_IRQHandler+0x150>
 800e110:	4a3d      	ldr	r2, [pc, #244]	; (800e208 <HAL_DMA_IRQHandler+0x18c>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d05d      	beq.n	800e1d2 <HAL_DMA_IRQHandler+0x156>
 800e116:	2280      	movs	r2, #128	; 0x80
 800e118:	04d2      	lsls	r2, r2, #19
 800e11a:	4211      	tst	r1, r2
 800e11c:	d012      	beq.n	800e144 <HAL_DMA_IRQHandler+0xc8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e11e:	2004      	movs	r0, #4
 800e120:	6819      	ldr	r1, [r3, #0]
 800e122:	4201      	tst	r1, r0
 800e124:	d00e      	beq.n	800e144 <HAL_DMA_IRQHandler+0xc8>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e126:	6819      	ldr	r1, [r3, #0]
 800e128:	0689      	lsls	r1, r1, #26
 800e12a:	d402      	bmi.n	800e132 <HAL_DMA_IRQHandler+0xb6>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e12c:	6819      	ldr	r1, [r3, #0]
 800e12e:	4381      	bics	r1, r0
 800e130:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800e132:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800e134:	2205      	movs	r2, #5
 800e136:	1da3      	adds	r3, r4, #6
 800e138:	77da      	strb	r2, [r3, #31]
      if(hdma->XferHalfCpltCallback != NULL)
 800e13a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <HAL_DMA_IRQHandler+0xc8>
        hdma->XferHalfCpltCallback(hdma);
 800e140:	0020      	movs	r0, r4
 800e142:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	6829      	ldr	r1, [r5, #0]
 800e148:	2202      	movs	r2, #2
 800e14a:	42b3      	cmp	r3, r6
 800e14c:	d011      	beq.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e14e:	482a      	ldr	r0, [pc, #168]	; (800e1f8 <HAL_DMA_IRQHandler+0x17c>)
 800e150:	321e      	adds	r2, #30
 800e152:	4283      	cmp	r3, r0
 800e154:	d00d      	beq.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e156:	4a29      	ldr	r2, [pc, #164]	; (800e1fc <HAL_DMA_IRQHandler+0x180>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d03d      	beq.n	800e1d8 <HAL_DMA_IRQHandler+0x15c>
 800e15c:	4a28      	ldr	r2, [pc, #160]	; (800e200 <HAL_DMA_IRQHandler+0x184>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d03d      	beq.n	800e1de <HAL_DMA_IRQHandler+0x162>
 800e162:	4a28      	ldr	r2, [pc, #160]	; (800e204 <HAL_DMA_IRQHandler+0x188>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d03d      	beq.n	800e1e4 <HAL_DMA_IRQHandler+0x168>
 800e168:	4a27      	ldr	r2, [pc, #156]	; (800e208 <HAL_DMA_IRQHandler+0x18c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d03d      	beq.n	800e1ea <HAL_DMA_IRQHandler+0x16e>
 800e16e:	2280      	movs	r2, #128	; 0x80
 800e170:	0492      	lsls	r2, r2, #18
 800e172:	4211      	tst	r1, r2
 800e174:	d017      	beq.n	800e1a6 <HAL_DMA_IRQHandler+0x12a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e176:	2002      	movs	r0, #2
 800e178:	6819      	ldr	r1, [r3, #0]
 800e17a:	4201      	tst	r1, r0
 800e17c:	d013      	beq.n	800e1a6 <HAL_DMA_IRQHandler+0x12a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e17e:	6819      	ldr	r1, [r3, #0]
 800e180:	0689      	lsls	r1, r1, #26
 800e182:	d402      	bmi.n	800e18a <HAL_DMA_IRQHandler+0x10e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800e184:	6819      	ldr	r1, [r3, #0]
 800e186:	4381      	bics	r1, r0
 800e188:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800e18a:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY;    
 800e18c:	2201      	movs	r2, #1
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 800e18e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e190:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_READY;    
 800e192:	1da3      	adds	r3, r4, #6
 800e194:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma);
 800e196:	2200      	movs	r2, #0
 800e198:	1d63      	adds	r3, r4, #5
 800e19a:	77da      	strb	r2, [r3, #31]
      if(hdma->XferCpltCallback != NULL)
 800e19c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d001      	beq.n	800e1a6 <HAL_DMA_IRQHandler+0x12a>
        hdma->XferCpltCallback(hdma);
 800e1a2:	0020      	movs	r0, r4
 800e1a4:	4798      	blx	r3
}  
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800e1a8:	2280      	movs	r2, #128	; 0x80
 800e1aa:	0112      	lsls	r2, r2, #4
 800e1ac:	e785      	b.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
 800e1ae:	2280      	movs	r2, #128	; 0x80
 800e1b0:	0212      	lsls	r2, r2, #8
 800e1b2:	e782      	b.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
 800e1b4:	2280      	movs	r2, #128	; 0x80
 800e1b6:	0312      	lsls	r2, r2, #12
 800e1b8:	e77f      	b.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
 800e1ba:	2280      	movs	r2, #128	; 0x80
 800e1bc:	0412      	lsls	r2, r2, #16
 800e1be:	e77c      	b.n	800e0ba <HAL_DMA_IRQHandler+0x3e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800e1c0:	2280      	movs	r2, #128	; 0x80
 800e1c2:	00d2      	lsls	r2, r2, #3
 800e1c4:	e7a9      	b.n	800e11a <HAL_DMA_IRQHandler+0x9e>
 800e1c6:	2280      	movs	r2, #128	; 0x80
 800e1c8:	01d2      	lsls	r2, r2, #7
 800e1ca:	e7a6      	b.n	800e11a <HAL_DMA_IRQHandler+0x9e>
 800e1cc:	2280      	movs	r2, #128	; 0x80
 800e1ce:	02d2      	lsls	r2, r2, #11
 800e1d0:	e7a3      	b.n	800e11a <HAL_DMA_IRQHandler+0x9e>
 800e1d2:	2280      	movs	r2, #128	; 0x80
 800e1d4:	03d2      	lsls	r2, r2, #15
 800e1d6:	e7a0      	b.n	800e11a <HAL_DMA_IRQHandler+0x9e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800e1d8:	2280      	movs	r2, #128	; 0x80
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	e7c9      	b.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e1de:	2280      	movs	r2, #128	; 0x80
 800e1e0:	0192      	lsls	r2, r2, #6
 800e1e2:	e7c6      	b.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e1e4:	2280      	movs	r2, #128	; 0x80
 800e1e6:	0292      	lsls	r2, r2, #10
 800e1e8:	e7c3      	b.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e1ea:	2280      	movs	r2, #128	; 0x80
 800e1ec:	0392      	lsls	r2, r2, #14
 800e1ee:	e7c0      	b.n	800e172 <HAL_DMA_IRQHandler+0xf6>
 800e1f0:	40020000 	.word	0x40020000
 800e1f4:	40020008 	.word	0x40020008
 800e1f8:	4002001c 	.word	0x4002001c
 800e1fc:	40020030 	.word	0x40020030
 800e200:	40020044 	.word	0x40020044
 800e204:	40020058 	.word	0x40020058
 800e208:	4002006c 	.word	0x4002006c

0800e20c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800e20c:	2110      	movs	r1, #16
 800e20e:	4a02      	ldr	r2, [pc, #8]	; (800e218 <HAL_PWR_DisablePVD+0xc>)
 800e210:	6813      	ldr	r3, [r2, #0]
 800e212:	438b      	bics	r3, r1
 800e214:	6013      	str	r3, [r2, #0]
}
 800e216:	4770      	bx	lr
 800e218:	40007000 	.word	0x40007000

0800e21c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800e21c:	2380      	movs	r3, #128	; 0x80
 800e21e:	4a03      	ldr	r2, [pc, #12]	; (800e22c <HAL_PWREx_EnableFastWakeUp+0x10>)
 800e220:	00db      	lsls	r3, r3, #3
 800e222:	6811      	ldr	r1, [r2, #0]
 800e224:	430b      	orrs	r3, r1
 800e226:	6013      	str	r3, [r2, #0]
}
 800e228:	4770      	bx	lr
 800e22a:	46c0      	nop			; (mov r8, r8)
 800e22c:	40007000 	.word	0x40007000

0800e230 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800e230:	2380      	movs	r3, #128	; 0x80
 800e232:	4a03      	ldr	r2, [pc, #12]	; (800e240 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	6811      	ldr	r1, [r2, #0]
 800e238:	430b      	orrs	r3, r1
 800e23a:	6013      	str	r3, [r2, #0]
}
 800e23c:	4770      	bx	lr
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	40007000 	.word	0x40007000

0800e244 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800e244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e246:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e248:	1c45      	adds	r5, r0, #1
 800e24a:	7feb      	ldrb	r3, [r5, #31]
{
 800e24c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800e24e:	0038      	movs	r0, r7
 800e250:	2b01      	cmp	r3, #1
 800e252:	d024      	beq.n	800e29e <HAL_RTC_DeactivateAlarm+0x5a>
 800e254:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e256:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 800e258:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e25a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e25c:	19e6      	adds	r6, r4, r7
 800e25e:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e260:	625a      	str	r2, [r3, #36]	; 0x24
 800e262:	3a77      	subs	r2, #119	; 0x77
 800e264:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 800e266:	32ad      	adds	r2, #173	; 0xad
 800e268:	4291      	cmp	r1, r2
 800e26a:	d128      	bne.n	800e2be <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e26c:	689a      	ldr	r2, [r3, #8]
 800e26e:	4921      	ldr	r1, [pc, #132]	; (800e2f4 <HAL_RTC_DeactivateAlarm+0xb0>)
 800e270:	400a      	ands	r2, r1
 800e272:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e274:	689a      	ldr	r2, [r3, #8]
 800e276:	4920      	ldr	r1, [pc, #128]	; (800e2f8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800e278:	400a      	ands	r2, r1
 800e27a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800e27c:	f7fd fde6 	bl	800be4c <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e280:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 800e282:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	68df      	ldr	r7, [r3, #12]
 800e28a:	9b01      	ldr	r3, [sp, #4]
 800e28c:	401f      	ands	r7, r3
 800e28e:	d007      	beq.n	800e2a0 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e290:	22ff      	movs	r2, #255	; 0xff
 800e292:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e294:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e296:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e298:	2301      	movs	r3, #1
 800e29a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800e29c:	77e8      	strb	r0, [r5, #31]

  return HAL_OK; 
}
 800e29e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e2a0:	f7fd fdd4 	bl	800be4c <HAL_GetTick>
 800e2a4:	9b00      	ldr	r3, [sp, #0]
 800e2a6:	1ac0      	subs	r0, r0, r3
 800e2a8:	23fa      	movs	r3, #250	; 0xfa
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4298      	cmp	r0, r3
 800e2ae:	d9ea      	bls.n	800e286 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2b0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2b2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2b8:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800e2ba:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 800e2bc:	e7ef      	b.n	800e29e <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e2be:	689a      	ldr	r2, [r3, #8]
 800e2c0:	490e      	ldr	r1, [pc, #56]	; (800e2fc <HAL_RTC_DeactivateAlarm+0xb8>)
 800e2c2:	400a      	ands	r2, r1
 800e2c4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800e2c6:	689a      	ldr	r2, [r3, #8]
 800e2c8:	490d      	ldr	r1, [pc, #52]	; (800e300 <HAL_RTC_DeactivateAlarm+0xbc>)
 800e2ca:	400a      	ands	r2, r1
 800e2cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800e2ce:	f7fd fdbd 	bl	800be4c <HAL_GetTick>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e2d2:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 800e2d4:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	68df      	ldr	r7, [r3, #12]
 800e2da:	9b01      	ldr	r3, [sp, #4]
 800e2dc:	401f      	ands	r7, r3
 800e2de:	d1d7      	bne.n	800e290 <HAL_RTC_DeactivateAlarm+0x4c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e2e0:	f7fd fdb4 	bl	800be4c <HAL_GetTick>
 800e2e4:	9b00      	ldr	r3, [sp, #0]
 800e2e6:	1ac0      	subs	r0, r0, r3
 800e2e8:	23fa      	movs	r3, #250	; 0xfa
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4298      	cmp	r0, r3
 800e2ee:	d9f2      	bls.n	800e2d6 <HAL_RTC_DeactivateAlarm+0x92>
 800e2f0:	e7de      	b.n	800e2b0 <HAL_RTC_DeactivateAlarm+0x6c>
 800e2f2:	46c0      	nop			; (mov r8, r8)
 800e2f4:	fffffeff 	.word	0xfffffeff
 800e2f8:	ffffefff 	.word	0xffffefff
 800e2fc:	fffffdff 	.word	0xfffffdff
 800e300:	ffffdfff 	.word	0xffffdfff

0800e304 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e304:	21a0      	movs	r1, #160	; 0xa0
 800e306:	6802      	ldr	r2, [r0, #0]
{
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e30a:	68d3      	ldr	r3, [r2, #12]
{
 800e30c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e30e:	438b      	bics	r3, r1
 800e310:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e312:	f7fd fd9b 	bl	800be4c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e316:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 800e318:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e31a:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e31c:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	422b      	tst	r3, r5
 800e324:	d001      	beq.n	800e32a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800e326:	2000      	movs	r0, #0
}
 800e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e32a:	f7fd fd8f 	bl	800be4c <HAL_GetTick>
 800e32e:	1b80      	subs	r0, r0, r6
 800e330:	42b8      	cmp	r0, r7
 800e332:	d9f4      	bls.n	800e31e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800e334:	2003      	movs	r0, #3
 800e336:	e7f7      	b.n	800e328 <HAL_RTC_WaitForSynchro+0x24>

0800e338 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e33a:	2440      	movs	r4, #64	; 0x40
 800e33c:	6803      	ldr	r3, [r0, #0]
{
 800e33e:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e340:	68da      	ldr	r2, [r3, #12]
 800e342:	4222      	tst	r2, r4
 800e344:	d001      	beq.n	800e34a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800e346:	2000      	movs	r0, #0
}
 800e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e34a:	2201      	movs	r2, #1
 800e34c:	4252      	negs	r2, r2
 800e34e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800e350:	f7fd fd7c 	bl	800be4c <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e354:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800e356:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e358:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e35a:	682b      	ldr	r3, [r5, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	4223      	tst	r3, r4
 800e360:	d1f1      	bne.n	800e346 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e362:	f7fd fd73 	bl	800be4c <HAL_GetTick>
 800e366:	1b80      	subs	r0, r0, r6
 800e368:	42b8      	cmp	r0, r7
 800e36a:	d9f6      	bls.n	800e35a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800e36c:	2003      	movs	r0, #3
 800e36e:	e7eb      	b.n	800e348 <RTC_EnterInitMode+0x10>

0800e370 <HAL_RTC_Init>:
{
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	0004      	movs	r4, r0
     return HAL_ERROR;
 800e374:	2001      	movs	r0, #1
  if(hrtc == NULL)
 800e376:	2c00      	cmp	r4, #0
 800e378:	d01b      	beq.n	800e3b2 <HAL_RTC_Init+0x42>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800e37a:	1ca5      	adds	r5, r4, #2
 800e37c:	7feb      	ldrb	r3, [r5, #31]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d104      	bne.n	800e38e <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 800e384:	1822      	adds	r2, r4, r0
 800e386:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 800e388:	0020      	movs	r0, r4
 800e38a:	f7fd fd7d 	bl	800be88 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e38e:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e390:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e392:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e394:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e396:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e398:	625a      	str	r2, [r3, #36]	; 0x24
 800e39a:	3a77      	subs	r2, #119	; 0x77
 800e39c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e39e:	f7ff ffcb 	bl	800e338 <RTC_EnterInitMode>
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d005      	beq.n	800e3b4 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3a8:	22ff      	movs	r2, #255	; 0xff
 800e3aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e3ac:	2304      	movs	r3, #4
    return HAL_ERROR;
 800e3ae:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e3b0:	77eb      	strb	r3, [r5, #31]
}
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e3b4:	689a      	ldr	r2, [r3, #8]
 800e3b6:	4912      	ldr	r1, [pc, #72]	; (800e400 <HAL_RTC_Init+0x90>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e3b8:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e3ba:	400a      	ands	r2, r1
 800e3bc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e3be:	6862      	ldr	r2, [r4, #4]
 800e3c0:	6899      	ldr	r1, [r3, #8]
 800e3c2:	4332      	orrs	r2, r6
 800e3c4:	69a6      	ldr	r6, [r4, #24]
 800e3c6:	4332      	orrs	r2, r6
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e3cc:	68e2      	ldr	r2, [r4, #12]
 800e3ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e3d0:	68a2      	ldr	r2, [r4, #8]
 800e3d2:	6919      	ldr	r1, [r3, #16]
 800e3d4:	0412      	lsls	r2, r2, #16
 800e3d6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e3d8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e3da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e3dc:	68da      	ldr	r2, [r3, #12]
 800e3de:	438a      	bics	r2, r1
 800e3e0:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3e4:	397d      	subs	r1, #125	; 0x7d
 800e3e6:	438a      	bics	r2, r1
 800e3e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e3ea:	69e2      	ldr	r2, [r4, #28]
 800e3ec:	6964      	ldr	r4, [r4, #20]
 800e3ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e3f0:	4322      	orrs	r2, r4
 800e3f2:	430a      	orrs	r2, r1
 800e3f4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3f6:	22ff      	movs	r2, #255	; 0xff
 800e3f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	77eb      	strb	r3, [r5, #31]
    return HAL_OK;
 800e3fe:	e7d8      	b.n	800e3b2 <HAL_RTC_Init+0x42>
 800e400:	ff8fffbf 	.word	0xff8fffbf

0800e404 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800e404:	2300      	movs	r3, #0

  while(Value >= 10U)
 800e406:	2809      	cmp	r0, #9
 800e408:	d803      	bhi.n	800e412 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800e40a:	011b      	lsls	r3, r3, #4
 800e40c:	4318      	orrs	r0, r3
 800e40e:	b2c0      	uxtb	r0, r0
}
 800e410:	4770      	bx	lr
    Value -= 10U;
 800e412:	380a      	subs	r0, #10
    bcdhigh++;
 800e414:	3301      	adds	r3, #1
    Value -= 10U;
 800e416:	b2c0      	uxtb	r0, r0
 800e418:	e7f5      	b.n	800e406 <RTC_ByteToBcd2+0x2>
	...

0800e41c <HAL_RTC_SetTime>:
{
 800e41c:	2302      	movs	r3, #2
 800e41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800e420:	1c47      	adds	r7, r0, #1
{
 800e422:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800e424:	7ff9      	ldrb	r1, [r7, #31]
{
 800e426:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800e428:	001e      	movs	r6, r3
 800e42a:	2901      	cmp	r1, #1
 800e42c:	d036      	beq.n	800e49c <HAL_RTC_SetTime+0x80>
 800e42e:	2101      	movs	r1, #1
 800e430:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e432:	18c1      	adds	r1, r0, r3
 800e434:	77cb      	strb	r3, [r1, #31]
 800e436:	9100      	str	r1, [sp, #0]
 800e438:	2140      	movs	r1, #64	; 0x40
 800e43a:	6803      	ldr	r3, [r0, #0]
 800e43c:	7866      	ldrb	r6, [r4, #1]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	7820      	ldrb	r0, [r4, #0]
 800e442:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800e444:	2a00      	cmp	r2, #0
 800e446:	d12b      	bne.n	800e4a0 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d100      	bne.n	800e44e <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 800e44c:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e44e:	f7ff ffd9 	bl	800e404 <RTC_ByteToBcd2>
 800e452:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e454:	0030      	movs	r0, r6
 800e456:	f7ff ffd5 	bl	800e404 <RTC_ByteToBcd2>
 800e45a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800e45c:	78a0      	ldrb	r0, [r4, #2]
 800e45e:	f7ff ffd1 	bl	800e404 <RTC_ByteToBcd2>
 800e462:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800e464:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e466:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800e468:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e46a:	4318      	orrs	r0, r3
 800e46c:	9b01      	ldr	r3, [sp, #4]
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	4318      	orrs	r0, r3
 800e472:	4330      	orrs	r0, r6
 800e474:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e476:	22ca      	movs	r2, #202	; 0xca
 800e478:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e47a:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e47c:	625a      	str	r2, [r3, #36]	; 0x24
 800e47e:	3a77      	subs	r2, #119	; 0x77
 800e480:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e482:	f7ff ff59 	bl	800e338 <RTC_EnterInitMode>
 800e486:	682b      	ldr	r3, [r5, #0]
 800e488:	1e06      	subs	r6, r0, #0
 800e48a:	d016      	beq.n	800e4ba <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e48c:	22ff      	movs	r2, #255	; 0xff
 800e48e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e490:	2304      	movs	r3, #4
 800e492:	9a00      	ldr	r2, [sp, #0]
 800e494:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800e496:	2300      	movs	r3, #0
 800e498:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800e49a:	2601      	movs	r6, #1
}
 800e49c:	0030      	movs	r0, r6
 800e49e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d100      	bne.n	800e4a6 <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 800e4a4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e4a6:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e4a8:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e4aa:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 800e4ac:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e4ae:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800e4b0:	78e0      	ldrb	r0, [r4, #3]
 800e4b2:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e4b4:	4306      	orrs	r6, r0
 800e4b6:	9601      	str	r6, [sp, #4]
 800e4b8:	e7dd      	b.n	800e476 <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e4ba:	4815      	ldr	r0, [pc, #84]	; (800e510 <HAL_RTC_SetTime+0xf4>)
 800e4bc:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800e4be:	4915      	ldr	r1, [pc, #84]	; (800e514 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e4c0:	4002      	ands	r2, r0
 800e4c2:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800e4c4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e4c6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800e4c8:	400a      	ands	r2, r1
 800e4ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e4cc:	68e2      	ldr	r2, [r4, #12]
 800e4ce:	6899      	ldr	r1, [r3, #8]
 800e4d0:	4302      	orrs	r2, r0
 800e4d2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e4d4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e4d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	438a      	bics	r2, r1
 800e4dc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	069b      	lsls	r3, r3, #26
 800e4e2:	d40c      	bmi.n	800e4fe <HAL_RTC_SetTime+0xe2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e4e4:	0028      	movs	r0, r5
 800e4e6:	f7ff ff0d 	bl	800e304 <HAL_RTC_WaitForSynchro>
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d007      	beq.n	800e4fe <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4ee:	22ff      	movs	r2, #255	; 0xff
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800e4f4:	2304      	movs	r3, #4
 800e4f6:	9a00      	ldr	r2, [sp, #0]
 800e4f8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800e4fa:	77fe      	strb	r6, [r7, #31]
 800e4fc:	e7cd      	b.n	800e49a <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4fe:	22ff      	movs	r2, #255	; 0xff
 800e500:	682b      	ldr	r3, [r5, #0]
 800e502:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800e504:	2301      	movs	r3, #1
 800e506:	9a00      	ldr	r2, [sp, #0]
 800e508:	77d3      	strb	r3, [r2, #31]
   __HAL_UNLOCK(hrtc); 
 800e50a:	2300      	movs	r3, #0
 800e50c:	77fb      	strb	r3, [r7, #31]
   return HAL_OK;
 800e50e:	e7c5      	b.n	800e49c <HAL_RTC_SetTime+0x80>
 800e510:	007f7f7f 	.word	0x007f7f7f
 800e514:	fffbffff 	.word	0xfffbffff

0800e518 <HAL_RTC_SetDate>:
{
 800e518:	2302      	movs	r3, #2
 800e51a:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800e51c:	1c47      	adds	r7, r0, #1
{
 800e51e:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 800e520:	7ff9      	ldrb	r1, [r7, #31]
{
 800e522:	b085      	sub	sp, #20
 800e524:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 800e526:	001e      	movs	r6, r3
 800e528:	2901      	cmp	r1, #1
 800e52a:	d035      	beq.n	800e598 <HAL_RTC_SetDate+0x80>
 800e52c:	2101      	movs	r1, #1
 800e52e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e530:	18c1      	adds	r1, r0, r3
 800e532:	9101      	str	r1, [sp, #4]
 800e534:	77cb      	strb	r3, [r1, #31]
 800e536:	786b      	ldrb	r3, [r5, #1]
 800e538:	78e8      	ldrb	r0, [r5, #3]
 800e53a:	78ae      	ldrb	r6, [r5, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e53c:	2a00      	cmp	r2, #0
 800e53e:	d14e      	bne.n	800e5de <HAL_RTC_SetDate+0xc6>
 800e540:	3210      	adds	r2, #16
 800e542:	4213      	tst	r3, r2
 800e544:	d002      	beq.n	800e54c <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e546:	4393      	bics	r3, r2
 800e548:	330a      	adds	r3, #10
 800e54a:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e54c:	f7ff ff5a 	bl	800e404 <RTC_ByteToBcd2>
 800e550:	9002      	str	r0, [sp, #8]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800e552:	7868      	ldrb	r0, [r5, #1]
 800e554:	f7ff ff56 	bl	800e404 <RTC_ByteToBcd2>
 800e558:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800e55a:	0030      	movs	r0, r6
 800e55c:	f7ff ff52 	bl	800e404 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e560:	9b02      	ldr	r3, [sp, #8]
                 ((uint32_t)sDate->WeekDay << 13U));
 800e562:	782d      	ldrb	r5, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e564:	041e      	lsls	r6, r3, #16
                 ((uint32_t)sDate->WeekDay << 13U));
 800e566:	036d      	lsls	r5, r5, #13
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800e568:	9b03      	ldr	r3, [sp, #12]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e56a:	4305      	orrs	r5, r0
 800e56c:	4335      	orrs	r5, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800e56e:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e570:	22ca      	movs	r2, #202	; 0xca
 800e572:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e574:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e576:	625a      	str	r2, [r3, #36]	; 0x24
 800e578:	3a77      	subs	r2, #119	; 0x77
 800e57a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e57c:	f7ff fedc 	bl	800e338 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e580:	4335      	orrs	r5, r6
 800e582:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e584:	1e06      	subs	r6, r0, #0
 800e586:	d00a      	beq.n	800e59e <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e588:	22ff      	movs	r2, #255	; 0xff
 800e58a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e58c:	2304      	movs	r3, #4
 800e58e:	9a01      	ldr	r2, [sp, #4]
 800e590:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800e592:	2300      	movs	r3, #0
 800e594:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800e596:	2601      	movs	r6, #1
}
 800e598:	0030      	movs	r0, r6
 800e59a:	b005      	add	sp, #20
 800e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e59e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e5a0:	4812      	ldr	r0, [pc, #72]	; (800e5ec <HAL_RTC_SetDate+0xd4>)
 800e5a2:	4005      	ands	r5, r0
 800e5a4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e5a6:	68da      	ldr	r2, [r3, #12]
 800e5a8:	438a      	bics	r2, r1
 800e5aa:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	069b      	lsls	r3, r3, #26
 800e5b0:	d40c      	bmi.n	800e5cc <HAL_RTC_SetDate+0xb4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e5b2:	0020      	movs	r0, r4
 800e5b4:	f7ff fea6 	bl	800e304 <HAL_RTC_WaitForSynchro>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d007      	beq.n	800e5cc <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800e5bc:	22ff      	movs	r2, #255	; 0xff
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800e5c2:	2304      	movs	r3, #4
 800e5c4:	9a01      	ldr	r2, [sp, #4]
 800e5c6:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800e5c8:	77fe      	strb	r6, [r7, #31]
 800e5ca:	e7e4      	b.n	800e596 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5cc:	22ff      	movs	r2, #255	; 0xff
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	9a01      	ldr	r2, [sp, #4]
 800e5d6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800e5d8:	2300      	movs	r3, #0
 800e5da:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800e5dc:	e7dc      	b.n	800e598 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e5de:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800e5e0:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 800e5e2:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e5e4:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 800e5e6:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800e5e8:	036d      	lsls	r5, r5, #13
 800e5ea:	e7c1      	b.n	800e570 <HAL_RTC_SetDate+0x58>
 800e5ec:	00ffff3f 	.word	0x00ffff3f

0800e5f0 <HAL_RTC_SetAlarm_IT>:
{
 800e5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800e5f2:	1c43      	adds	r3, r0, #1
 800e5f4:	9300      	str	r3, [sp, #0]
{
 800e5f6:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800e5f8:	7fd9      	ldrb	r1, [r3, #31]
 800e5fa:	2302      	movs	r3, #2
{
 800e5fc:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800e5fe:	0018      	movs	r0, r3
 800e600:	2901      	cmp	r1, #1
 800e602:	d100      	bne.n	800e606 <HAL_RTC_SetAlarm_IT+0x16>
 800e604:	e08d      	b.n	800e722 <HAL_RTC_SetAlarm_IT+0x132>
 800e606:	2101      	movs	r1, #1
 800e608:	1860      	adds	r0, r4, r1
 800e60a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e60c:	18e1      	adds	r1, r4, r3
 800e60e:	77cb      	strb	r3, [r1, #31]
 800e610:	2140      	movs	r1, #64	; 0x40
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	7828      	ldrb	r0, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	786e      	ldrb	r6, [r5, #1]
 800e61a:	78af      	ldrb	r7, [r5, #2]
 800e61c:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800e61e:	2a00      	cmp	r2, #0
 800e620:	d15d      	bne.n	800e6de <HAL_RTC_SetAlarm_IT+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e622:	2b00      	cmp	r3, #0
 800e624:	d100      	bne.n	800e628 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e626:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e628:	f7ff feec 	bl	800e404 <RTC_ByteToBcd2>
 800e62c:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800e62e:	0030      	movs	r0, r6
 800e630:	f7ff fee8 	bl	800e404 <RTC_ByteToBcd2>
 800e634:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e636:	0038      	movs	r0, r7
 800e638:	f7ff fee4 	bl	800e404 <RTC_ByteToBcd2>
 800e63c:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e63e:	1c6b      	adds	r3, r5, #1
 800e640:	7fd8      	ldrb	r0, [r3, #31]
 800e642:	f7ff fedf 	bl	800e404 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e646:	696a      	ldr	r2, [r5, #20]
 800e648:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800e64a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e64c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e64e:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e650:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e652:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e654:	4313      	orrs	r3, r2
 800e656:	431f      	orrs	r7, r3
 800e658:	9b01      	ldr	r3, [sp, #4]
 800e65a:	041b      	lsls	r3, r3, #16
 800e65c:	431f      	orrs	r7, r3
 800e65e:	4337      	orrs	r7, r6
 800e660:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e662:	69aa      	ldr	r2, [r5, #24]
 800e664:	686b      	ldr	r3, [r5, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e666:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e668:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e66a:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e66c:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	625a      	str	r2, [r3, #36]	; 0x24
 800e672:	3a77      	subs	r2, #119	; 0x77
 800e674:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e676:	32ad      	adds	r2, #173	; 0xad
 800e678:	4291      	cmp	r1, r2
 800e67a:	d153      	bne.n	800e724 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e67c:	689a      	ldr	r2, [r3, #8]
 800e67e:	493c      	ldr	r1, [pc, #240]	; (800e770 <HAL_RTC_SetAlarm_IT+0x180>)
 800e680:	400a      	ands	r2, r1
 800e682:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e684:	68d9      	ldr	r1, [r3, #12]
 800e686:	4a3b      	ldr	r2, [pc, #236]	; (800e774 <HAL_RTC_SetAlarm_IT+0x184>)
 800e688:	b2c9      	uxtb	r1, r1
 800e68a:	430a      	orrs	r2, r1
 800e68c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800e68e:	f7fd fbdd 	bl	800be4c <HAL_GetTick>
 800e692:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e694:	2201      	movs	r2, #1
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	68dd      	ldr	r5, [r3, #12]
 800e69a:	4015      	ands	r5, r2
 800e69c:	d032      	beq.n	800e704 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e69e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e6a0:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e6a2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e6a4:	2280      	movs	r2, #128	; 0x80
 800e6a6:	6899      	ldr	r1, [r3, #8]
 800e6a8:	0052      	lsls	r2, r2, #1
 800e6aa:	430a      	orrs	r2, r1
 800e6ac:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800e6ae:	2280      	movs	r2, #128	; 0x80
 800e6b0:	6899      	ldr	r1, [r3, #8]
 800e6b2:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e6b4:	430a      	orrs	r2, r1
 800e6b6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e6b8:	2280      	movs	r2, #128	; 0x80
 800e6ba:	4b2f      	ldr	r3, [pc, #188]	; (800e778 <HAL_RTC_SetAlarm_IT+0x188>)
 800e6bc:	0292      	lsls	r2, r2, #10
 800e6be:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800e6c0:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e6c2:	4311      	orrs	r1, r2
 800e6c4:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800e6c6:	6899      	ldr	r1, [r3, #8]
 800e6c8:	430a      	orrs	r2, r1
 800e6ca:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e6cc:	22ff      	movs	r2, #255	; 0xff
 800e6ce:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY; 
 800e6d0:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e6d2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 800e6dc:	e021      	b.n	800e722 <HAL_RTC_SetAlarm_IT+0x132>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d100      	bne.n	800e6e4 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e6e2:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800e6e4:	69eb      	ldr	r3, [r5, #28]
 800e6e6:	696a      	ldr	r2, [r5, #20]
 800e6e8:	0400      	lsls	r0, r0, #16
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800e6ee:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800e6f0:	4307      	orrs	r7, r0
 800e6f2:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e6f4:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e6f6:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e6f8:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800e6fa:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e6fc:	7fde      	ldrb	r6, [r3, #31]
 800e6fe:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800e700:	4337      	orrs	r7, r6
 800e702:	e7ae      	b.n	800e662 <HAL_RTC_SetAlarm_IT+0x72>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e704:	f7fd fba2 	bl	800be4c <HAL_GetTick>
 800e708:	23fa      	movs	r3, #250	; 0xfa
 800e70a:	1b80      	subs	r0, r0, r6
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4298      	cmp	r0, r3
 800e710:	d9c0      	bls.n	800e694 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e712:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e714:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e716:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e718:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e71a:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800e71c:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e71e:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 800e720:	77dd      	strb	r5, [r3, #31]
}
 800e722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e724:	689a      	ldr	r2, [r3, #8]
 800e726:	4915      	ldr	r1, [pc, #84]	; (800e77c <HAL_RTC_SetAlarm_IT+0x18c>)
 800e728:	400a      	ands	r2, r1
 800e72a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e72c:	68d9      	ldr	r1, [r3, #12]
 800e72e:	4a14      	ldr	r2, [pc, #80]	; (800e780 <HAL_RTC_SetAlarm_IT+0x190>)
 800e730:	b2c9      	uxtb	r1, r1
 800e732:	430a      	orrs	r2, r1
 800e734:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800e736:	f7fd fb89 	bl	800be4c <HAL_GetTick>
 800e73a:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e73c:	2202      	movs	r2, #2
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	68dd      	ldr	r5, [r3, #12]
 800e742:	4015      	ands	r5, r2
 800e744:	d00b      	beq.n	800e75e <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e746:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e748:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e74a:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e74c:	2280      	movs	r2, #128	; 0x80
 800e74e:	6899      	ldr	r1, [r3, #8]
 800e750:	0092      	lsls	r2, r2, #2
 800e752:	430a      	orrs	r2, r1
 800e754:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e756:	2280      	movs	r2, #128	; 0x80
 800e758:	6899      	ldr	r1, [r3, #8]
 800e75a:	0192      	lsls	r2, r2, #6
 800e75c:	e7aa      	b.n	800e6b4 <HAL_RTC_SetAlarm_IT+0xc4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e75e:	f7fd fb75 	bl	800be4c <HAL_GetTick>
 800e762:	23fa      	movs	r3, #250	; 0xfa
 800e764:	1b80      	subs	r0, r0, r6
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4298      	cmp	r0, r3
 800e76a:	d9e7      	bls.n	800e73c <HAL_RTC_SetAlarm_IT+0x14c>
 800e76c:	e7d1      	b.n	800e712 <HAL_RTC_SetAlarm_IT+0x122>
 800e76e:	46c0      	nop			; (mov r8, r8)
 800e770:	fffffeff 	.word	0xfffffeff
 800e774:	fffffe7f 	.word	0xfffffe7f
 800e778:	40010400 	.word	0x40010400
 800e77c:	fffffdff 	.word	0xfffffdff
 800e780:	fffffd7f 	.word	0xfffffd7f

0800e784 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800e784:	230a      	movs	r3, #10
 800e786:	0902      	lsrs	r2, r0, #4
 800e788:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 800e78a:	220f      	movs	r2, #15
 800e78c:	4010      	ands	r0, r2
 800e78e:	1818      	adds	r0, r3, r0
 800e790:	b2c0      	uxtb	r0, r0
}
 800e792:	4770      	bx	lr

0800e794 <HAL_RTC_GetTime>:
{
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800e798:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e79a:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800e79c:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e79e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e7a0:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e7a2:	690b      	ldr	r3, [r1, #16]
 800e7a4:	045b      	lsls	r3, r3, #17
 800e7a6:	0c5b      	lsrs	r3, r3, #17
 800e7a8:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e7aa:	680b      	ldr	r3, [r1, #0]
 800e7ac:	490d      	ldr	r1, [pc, #52]	; (800e7e4 <HAL_RTC_GetTime+0x50>)
 800e7ae:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800e7b0:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800e7b2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800e7b4:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800e7b6:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800e7b8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800e7ba:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800e7bc:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800e7be:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800e7c0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800e7c2:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800e7c4:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	d10a      	bne.n	800e7e0 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e7ca:	f7ff ffdb 	bl	800e784 <RTC_Bcd2ToByte>
 800e7ce:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e7d0:	0030      	movs	r0, r6
 800e7d2:	f7ff ffd7 	bl	800e784 <RTC_Bcd2ToByte>
 800e7d6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e7d8:	0028      	movs	r0, r5
 800e7da:	f7ff ffd3 	bl	800e784 <RTC_Bcd2ToByte>
 800e7de:	70a0      	strb	r0, [r4, #2]
}
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
 800e7e4:	007f7f7f 	.word	0x007f7f7f

0800e7e8 <HAL_RTC_GetDate>:
{
 800e7e8:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800e7ea:	253f      	movs	r5, #63	; 0x3f
{
 800e7ec:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e7ee:	6803      	ldr	r3, [r0, #0]
 800e7f0:	490d      	ldr	r1, [pc, #52]	; (800e828 <HAL_RTC_GetDate+0x40>)
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800e7f6:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800e7f8:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800e7fa:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800e7fc:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800e7fe:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800e800:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800e802:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800e804:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800e806:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800e808:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d10a      	bne.n	800e824 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e80e:	f7ff ffb9 	bl	800e784 <RTC_Bcd2ToByte>
 800e812:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e814:	0030      	movs	r0, r6
 800e816:	f7ff ffb5 	bl	800e784 <RTC_Bcd2ToByte>
 800e81a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e81c:	0028      	movs	r0, r5
 800e81e:	f7ff ffb1 	bl	800e784 <RTC_Bcd2ToByte>
 800e822:	70a0      	strb	r0, [r4, #2]
}
 800e824:	2000      	movs	r0, #0
 800e826:	bd70      	pop	{r4, r5, r6, pc}
 800e828:	00ffff3f 	.word	0x00ffff3f

0800e82c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800e82c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800e82e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800e830:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800e832:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e834:	600a      	str	r2, [r1, #0]
}
 800e836:	4770      	bx	lr

0800e838 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800e838:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800e83a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800e83c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800e83e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800e840:	6808      	ldr	r0, [r1, #0]
}
 800e842:	4770      	bx	lr

0800e844 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800e844:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e846:	1c41      	adds	r1, r0, #1
 800e848:	7fca      	ldrb	r2, [r1, #31]
{
 800e84a:	0003      	movs	r3, r0
 800e84c:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 800e84e:	2a01      	cmp	r2, #1
 800e850:	d010      	beq.n	800e874 <HAL_RTCEx_EnableBypassShadow+0x30>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e852:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e854:	181c      	adds	r4, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e856:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e858:	77e0      	strb	r0, [r4, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e85a:	625a      	str	r2, [r3, #36]	; 0x24
 800e85c:	3a77      	subs	r2, #119	; 0x77
 800e85e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800e860:	6898      	ldr	r0, [r3, #8]
 800e862:	3a33      	subs	r2, #51	; 0x33
 800e864:	4302      	orrs	r2, r0
 800e866:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e868:	22ff      	movs	r2, #255	; 0xff

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e86a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e86c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e86e:	2301      	movs	r3, #1
 800e870:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 800e872:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800e874:	bd10      	pop	{r4, pc}
	...

0800e878 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800e878:	2180      	movs	r1, #128	; 0x80
 800e87a:	4a27      	ldr	r2, [pc, #156]	; (800e918 <FLASH_SetErrorCode+0xa0>)
 800e87c:	0049      	lsls	r1, r1, #1
 800e87e:	6990      	ldr	r0, [r2, #24]
{
 800e880:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
 800e882:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800e884:	4208      	tst	r0, r1
 800e886:	d005      	beq.n	800e894 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e888:	4824      	ldr	r0, [pc, #144]	; (800e91c <FLASH_SetErrorCode+0xa4>)
 800e88a:	3302      	adds	r3, #2
 800e88c:	6944      	ldr	r4, [r0, #20]
 800e88e:	4323      	orrs	r3, r4
 800e890:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800e892:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800e894:	2080      	movs	r0, #128	; 0x80
 800e896:	6991      	ldr	r1, [r2, #24]
 800e898:	0080      	lsls	r0, r0, #2
 800e89a:	4201      	tst	r1, r0
 800e89c:	d005      	beq.n	800e8aa <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e89e:	2101      	movs	r1, #1
 800e8a0:	4c1e      	ldr	r4, [pc, #120]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_PGAERR;
 800e8a2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e8a4:	6965      	ldr	r5, [r4, #20]
 800e8a6:	4329      	orrs	r1, r5
 800e8a8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800e8aa:	2080      	movs	r0, #128	; 0x80
 800e8ac:	6991      	ldr	r1, [r2, #24]
 800e8ae:	00c0      	lsls	r0, r0, #3
 800e8b0:	4201      	tst	r1, r0
 800e8b2:	d005      	beq.n	800e8c0 <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800e8b4:	2108      	movs	r1, #8
 800e8b6:	4c19      	ldr	r4, [pc, #100]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 800e8b8:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800e8ba:	6965      	ldr	r5, [r4, #20]
 800e8bc:	4329      	orrs	r1, r5
 800e8be:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800e8c0:	2080      	movs	r0, #128	; 0x80
 800e8c2:	6991      	ldr	r1, [r2, #24]
 800e8c4:	0100      	lsls	r0, r0, #4
 800e8c6:	4201      	tst	r1, r0
 800e8c8:	d005      	beq.n	800e8d6 <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800e8ca:	2104      	movs	r1, #4
 800e8cc:	4c13      	ldr	r4, [pc, #76]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 800e8ce:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800e8d0:	6965      	ldr	r5, [r4, #20]
 800e8d2:	4329      	orrs	r1, r5
 800e8d4:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800e8d6:	2080      	movs	r0, #128	; 0x80
 800e8d8:	6991      	ldr	r1, [r2, #24]
 800e8da:	0180      	lsls	r0, r0, #6
 800e8dc:	4201      	tst	r1, r0
 800e8de:	d005      	beq.n	800e8ec <FLASH_SetErrorCode+0x74>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e8e0:	2110      	movs	r1, #16
 800e8e2:	4c0e      	ldr	r4, [pc, #56]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_RDERR;
 800e8e4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e8e6:	6965      	ldr	r5, [r4, #20]
 800e8e8:	4329      	orrs	r1, r5
 800e8ea:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800e8ec:	6991      	ldr	r1, [r2, #24]
 800e8ee:	0389      	lsls	r1, r1, #14
 800e8f0:	d505      	bpl.n	800e8fe <FLASH_SetErrorCode+0x86>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800e8f2:	2020      	movs	r0, #32
 800e8f4:	4c09      	ldr	r4, [pc, #36]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 800e8f6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800e8f8:	6961      	ldr	r1, [r4, #20]
 800e8fa:	4301      	orrs	r1, r0
 800e8fc:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800e8fe:	2080      	movs	r0, #128	; 0x80
 800e900:	6991      	ldr	r1, [r2, #24]
 800e902:	0240      	lsls	r0, r0, #9
 800e904:	4201      	tst	r1, r0
 800e906:	d005      	beq.n	800e914 <FLASH_SetErrorCode+0x9c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800e908:	2140      	movs	r1, #64	; 0x40
 800e90a:	4c04      	ldr	r4, [pc, #16]	; (800e91c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_NOTZEROERR;
 800e90c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800e90e:	6965      	ldr	r5, [r4, #20]
 800e910:	4329      	orrs	r1, r5
 800e912:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800e914:	6193      	str	r3, [r2, #24]
}  
 800e916:	bd30      	pop	{r4, r5, pc}
 800e918:	40022000 	.word	0x40022000
 800e91c:	20002240 	.word	0x20002240

0800e920 <FLASH_WaitForLastOperation>:
{
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e924:	f7fd fa92 	bl	800be4c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e928:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 800e92a:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e92c:	4a18      	ldr	r2, [pc, #96]	; (800e990 <FLASH_WaitForLastOperation+0x70>)
 800e92e:	0013      	movs	r3, r2
 800e930:	6991      	ldr	r1, [r2, #24]
 800e932:	4229      	tst	r1, r5
 800e934:	d11f      	bne.n	800e976 <FLASH_WaitForLastOperation+0x56>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e936:	2102      	movs	r1, #2
 800e938:	6990      	ldr	r0, [r2, #24]
 800e93a:	4208      	tst	r0, r1
 800e93c:	d000      	beq.n	800e940 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e93e:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e940:	699a      	ldr	r2, [r3, #24]
 800e942:	05d2      	lsls	r2, r2, #23
 800e944:	d413      	bmi.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e946:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e948:	0592      	lsls	r2, r2, #22
 800e94a:	d410      	bmi.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e94c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e94e:	0552      	lsls	r2, r2, #21
 800e950:	d40d      	bmi.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e952:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e954:	0512      	lsls	r2, r2, #20
 800e956:	d40a      	bmi.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e958:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e95a:	0492      	lsls	r2, r2, #18
 800e95c:	d407      	bmi.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e95e:	2280      	movs	r2, #128	; 0x80
 800e960:	6998      	ldr	r0, [r3, #24]
 800e962:	0292      	lsls	r2, r2, #10
 800e964:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e966:	d102      	bne.n	800e96e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800e968:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e96a:	03db      	lsls	r3, r3, #15
 800e96c:	d508      	bpl.n	800e980 <FLASH_WaitForLastOperation+0x60>
    FLASH_SetErrorCode();
 800e96e:	f7ff ff83 	bl	800e878 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e972:	2001      	movs	r0, #1
 800e974:	e004      	b.n	800e980 <FLASH_WaitForLastOperation+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800e976:	1c61      	adds	r1, r4, #1
 800e978:	d0da      	beq.n	800e930 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	d101      	bne.n	800e982 <FLASH_WaitForLastOperation+0x62>
        return HAL_TIMEOUT;
 800e97e:	2003      	movs	r0, #3
}
 800e980:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e982:	f7fd fa63 	bl	800be4c <HAL_GetTick>
 800e986:	1b80      	subs	r0, r0, r6
 800e988:	4284      	cmp	r4, r0
 800e98a:	d2cf      	bcs.n	800e92c <FLASH_WaitForLastOperation+0xc>
 800e98c:	e7f7      	b.n	800e97e <FLASH_WaitForLastOperation+0x5e>
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	40022000 	.word	0x40022000

0800e994 <HAL_FLASHEx_DATAEEPROM_Unlock>:
    FLASH->PEKEYR = FLASH_PEKEY1;
    FLASH->PEKEYR = FLASH_PEKEY2;
  }
  else
  {
    return HAL_ERROR;
 800e994:	2001      	movs	r0, #1
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>)
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	4202      	tst	r2, r0
 800e99c:	d004      	beq.n	800e9a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x14>
  }
  return HAL_OK;  
 800e99e:	2000      	movs	r0, #0
    FLASH->PEKEYR = FLASH_PEKEY1;
 800e9a0:	4a03      	ldr	r2, [pc, #12]	; (800e9b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 800e9a2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800e9a4:	4a03      	ldr	r2, [pc, #12]	; (800e9b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
 800e9a6:	60da      	str	r2, [r3, #12]
}
 800e9a8:	4770      	bx	lr
 800e9aa:	46c0      	nop			; (mov r8, r8)
 800e9ac:	40022000 	.word	0x40022000
 800e9b0:	89abcdef 	.word	0x89abcdef
 800e9b4:	02030405 	.word	0x02030405

0800e9b8 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	4a03      	ldr	r2, [pc, #12]	; (800e9c8 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800e9bc:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800e9be:	6851      	ldr	r1, [r2, #4]
 800e9c0:	430b      	orrs	r3, r1
 800e9c2:	6053      	str	r3, [r2, #4]
}
 800e9c4:	4770      	bx	lr
 800e9c6:	46c0      	nop			; (mov r8, r8)
 800e9c8:	40022000 	.word	0x40022000

0800e9cc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800e9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e9ce:	4d12      	ldr	r5, [pc, #72]	; (800ea18 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800e9d0:	0007      	movs	r7, r0
  __HAL_LOCK(&pFlash);
 800e9d2:	7c2b      	ldrb	r3, [r5, #16]
{
 800e9d4:	000e      	movs	r6, r1
 800e9d6:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 800e9d8:	2002      	movs	r0, #2
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d00c      	beq.n	800e9f8 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 800e9de:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e9e0:	480e      	ldr	r0, [pc, #56]	; (800ea1c <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800e9e2:	742b      	strb	r3, [r5, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e9e4:	f7ff ff9c 	bl	800e920 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d103      	bne.n	800e9f4 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e9ec:	6168      	str	r0, [r5, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800e9ee:	2f02      	cmp	r7, #2
 800e9f0:	d103      	bne.n	800e9fa <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800e9f2:	6034      	str	r4, [r6, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	742b      	strb	r3, [r5, #16]

  return status;
}
 800e9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800e9fa:	2f01      	cmp	r7, #1
 800e9fc:	d102      	bne.n	800ea04 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800e9fe:	b2a4      	uxth	r4, r4
 800ea00:	8034      	strh	r4, [r6, #0]
 800ea02:	e7f7      	b.n	800e9f4 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800ea04:	2f00      	cmp	r7, #0
 800ea06:	d102      	bne.n	800ea0e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800ea08:	b2e4      	uxtb	r4, r4
 800ea0a:	7034      	strb	r4, [r6, #0]
 800ea0c:	e7f2      	b.n	800e9f4 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ea0e:	4803      	ldr	r0, [pc, #12]	; (800ea1c <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800ea10:	f7ff ff86 	bl	800e920 <FLASH_WaitForLastOperation>
 800ea14:	e7ee      	b.n	800e9f4 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800ea16:	46c0      	nop			; (mov r8, r8)
 800ea18:	20002240 	.word	0x20002240
 800ea1c:	0000c350 	.word	0x0000c350

0800ea20 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 800ea20:	b530      	push	{r4, r5, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 800ea22:	4c28      	ldr	r4, [pc, #160]	; (800eac4 <certif_tx+0xa4>)
{
 800ea24:	b087      	sub	sp, #28
  if( certifParam.LinkCheck == true )
 800ea26:	0023      	movs	r3, r4
 800ea28:	3346      	adds	r3, #70	; 0x46
 800ea2a:	7819      	ldrb	r1, [r3, #0]
 800ea2c:	1da2      	adds	r2, r4, #6
 800ea2e:	2900      	cmp	r1, #0
 800ea30:	d026      	beq.n	800ea80 <certif_tx+0x60>
  {
    certifParam.LinkCheck = false;
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
    certifParam.DataBufferSize = 3;
 800ea36:	2303      	movs	r3, #3
 800ea38:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 800ea3a:	3302      	adds	r3, #2
 800ea3c:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 800ea3e:	0023      	movs	r3, r4
 800ea40:	3347      	adds	r3, #71	; 0x47
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 800ea46:	0023      	movs	r3, r4
 800ea48:	3348      	adds	r3, #72	; 0x48
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	71a3      	strb	r3, [r4, #6]
    certifParam.State = 1;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	7063      	strb	r3, [r4, #1]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ea52:	78e0      	ldrb	r0, [r4, #3]
 800ea54:	a901      	add	r1, sp, #4
 800ea56:	f002 f9d7 	bl	8010e08 <LoRaMacQueryTxPossible>
 800ea5a:	ad02      	add	r5, sp, #8
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d01c      	beq.n	800ea9a <certif_tx+0x7a>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800ea60:	2300      	movs	r3, #0
 800ea62:	702b      	strb	r3, [r5, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ea64:	60ab      	str	r3, [r5, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ea66:	81ab      	strh	r3, [r5, #12]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800ea68:	73ab      	strb	r3, [r5, #14]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 800ea6a:	4817      	ldr	r0, [pc, #92]	; (800eac8 <certif_tx+0xa8>)
 800ea6c:	f005 fa68 	bl	8013f40 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800ea70:	0028      	movs	r0, r5
 800ea72:	f002 fe77 	bl	8011764 <LoRaMacMcpsRequest>
 800ea76:	1e43      	subs	r3, r0, #1
 800ea78:	4198      	sbcs	r0, r3
 800ea7a:	b2c0      	uxtb	r0, r0
  {
      return false;
  }
    return true;
}
 800ea7c:	b007      	add	sp, #28
 800ea7e:	bd30      	pop	{r4, r5, pc}
    switch( certifParam.State )
 800ea80:	7863      	ldrb	r3, [r4, #1]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d002      	beq.n	800ea8c <certif_tx+0x6c>
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	d1e3      	bne.n	800ea52 <certif_tx+0x32>
 800ea8a:	e7e0      	b.n	800ea4e <certif_tx+0x2e>
      certifParam.DataBufferSize = 2;
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 800ea90:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800ea92:	0a1a      	lsrs	r2, r3, #8
 800ea94:	7122      	strb	r2, [r4, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 800ea96:	7163      	strb	r3, [r4, #5]
      break;
 800ea98:	e7db      	b.n	800ea52 <certif_tx+0x32>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800ea9a:	4b0c      	ldr	r3, [pc, #48]	; (800eacc <certif_tx+0xac>)
 800ea9c:	78e2      	ldrb	r2, [r4, #3]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	21e0      	movs	r1, #224	; 0xe0
 800eaa2:	3404      	adds	r4, #4
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d104      	bne.n	800eab2 <certif_tx+0x92>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 800eaa8:	702b      	strb	r3, [r5, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 800eaaa:	7129      	strb	r1, [r5, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 800eaac:	81aa      	strh	r2, [r5, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 800eaae:	60ac      	str	r4, [r5, #8]
 800eab0:	e7da      	b.n	800ea68 <certif_tx+0x48>
          mcpsReq.Type = MCPS_CONFIRMED;
 800eab2:	2301      	movs	r3, #1
 800eab4:	702b      	strb	r3, [r5, #0]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 800eab6:	3307      	adds	r3, #7
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 800eab8:	7129      	strb	r1, [r5, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 800eaba:	81aa      	strh	r2, [r5, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 800eabc:	60ac      	str	r4, [r5, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 800eabe:	73eb      	strb	r3, [r5, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800eac0:	73a8      	strb	r0, [r5, #14]
 800eac2:	e7d2      	b.n	800ea6a <certif_tx+0x4a>
 800eac4:	2000107a 	.word	0x2000107a
 800eac8:	20001064 	.word	0x20001064
 800eacc:	20001078 	.word	0x20001078

0800ead0 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void )
{
 800ead0:	b510      	push	{r4, lr}
    certif_tx( );
 800ead2:	f7ff ffa5 	bl	800ea20 <certif_tx>

}
 800ead6:	bd10      	pop	{r4, pc}

0800ead8 <certif_running>:
    return certifParam.Running;
 800ead8:	4b01      	ldr	r3, [pc, #4]	; (800eae0 <certif_running+0x8>)
 800eada:	7818      	ldrb	r0, [r3, #0]
}
 800eadc:	4770      	bx	lr
 800eade:	46c0      	nop			; (mov r8, r8)
 800eae0:	2000107a 	.word	0x2000107a

0800eae4 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 800eae4:	4b02      	ldr	r3, [pc, #8]	; (800eaf0 <certif_DownLinkIncrement+0xc>)
 800eae6:	3306      	adds	r3, #6
 800eae8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800eaea:	3201      	adds	r2, #1
 800eaec:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800eaee:	4770      	bx	lr
 800eaf0:	2000107a 	.word	0x2000107a

0800eaf4 <certif_linkCheck>:
  certifParam.LinkCheck = true;
 800eaf4:	4b06      	ldr	r3, [pc, #24]	; (800eb10 <certif_linkCheck+0x1c>)
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	001a      	movs	r2, r3
 800eafa:	3246      	adds	r2, #70	; 0x46
 800eafc:	7011      	strb	r1, [r2, #0]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 800eafe:	001a      	movs	r2, r3
 800eb00:	7a01      	ldrb	r1, [r0, #8]
 800eb02:	3247      	adds	r2, #71	; 0x47
 800eb04:	7011      	strb	r1, [r2, #0]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 800eb06:	7a42      	ldrb	r2, [r0, #9]
 800eb08:	3348      	adds	r3, #72	; 0x48
 800eb0a:	701a      	strb	r2, [r3, #0]
}
 800eb0c:	4770      	bx	lr
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	2000107a 	.word	0x2000107a

0800eb14 <certif_rx>:
{
 800eb14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 800eb16:	4c64      	ldr	r4, [pc, #400]	; (800eca8 <certif_rx+0x194>)
{
 800eb18:	b08b      	sub	sp, #44	; 0x2c
  if( certifParam.Running == false )
 800eb1a:	7823      	ldrb	r3, [r4, #0]
{
 800eb1c:	0002      	movs	r2, r0
 800eb1e:	000d      	movs	r5, r1
  if( certifParam.Running == false )
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d140      	bne.n	800eba6 <certif_rx+0x92>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800eb24:	7b01      	ldrb	r1, [r0, #12]
 800eb26:	2904      	cmp	r1, #4
 800eb28:	d138      	bne.n	800eb9c <certif_rx+0x88>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800eb2a:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800eb2c:	7811      	ldrb	r1, [r2, #0]
 800eb2e:	2901      	cmp	r1, #1
 800eb30:	d134      	bne.n	800eb9c <certif_rx+0x88>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800eb32:	7851      	ldrb	r1, [r2, #1]
 800eb34:	2901      	cmp	r1, #1
 800eb36:	d131      	bne.n	800eb9c <certif_rx+0x88>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800eb38:	7891      	ldrb	r1, [r2, #2]
 800eb3a:	2901      	cmp	r1, #1
 800eb3c:	d12e      	bne.n	800eb9c <certif_rx+0x88>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800eb3e:	78d6      	ldrb	r6, [r2, #3]
 800eb40:	2e01      	cmp	r6, #1
 800eb42:	d12b      	bne.n	800eb9c <certif_rx+0x88>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800eb44:	4a59      	ldr	r2, [pc, #356]	; (800ecac <certif_rx+0x198>)
          certifParam.DataBufferSize = 2;
 800eb46:	2702      	movs	r7, #2
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800eb48:	7013      	strb	r3, [r2, #0]
          certifParam.DownLinkCounter = 0;
 800eb4a:	1da2      	adds	r2, r4, #6
 800eb4c:	87d3      	strh	r3, [r2, #62]	; 0x3e
          certifParam.LinkCheck = false;
 800eb4e:	0022      	movs	r2, r4
 800eb50:	3246      	adds	r2, #70	; 0x46
 800eb52:	7013      	strb	r3, [r2, #0]
          certifParam.DemodMargin = 0;
 800eb54:	0022      	movs	r2, r4
 800eb56:	3247      	adds	r2, #71	; 0x47
 800eb58:	7013      	strb	r3, [r2, #0]
          certifParam.NbGateways = 0;
 800eb5a:	0022      	movs	r2, r4
          mibReq.Type = MIB_ADR;
 800eb5c:	ad04      	add	r5, sp, #16
          certifParam.NbGateways = 0;
 800eb5e:	3248      	adds	r2, #72	; 0x48
          LoRaMacMibGetRequestConfirm( &mibReq );
 800eb60:	0028      	movs	r0, r5
          certifParam.NbGateways = 0;
 800eb62:	7013      	strb	r3, [r2, #0]
          mibReq.Type = MIB_ADR;
 800eb64:	702f      	strb	r7, [r5, #0]
          certifParam.DataBufferSize = 2;
 800eb66:	70e7      	strb	r7, [r4, #3]
          certifParam.Running = true;
 800eb68:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 800eb6a:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800eb6c:	f002 f9ae 	bl	8010ecc <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 800eb70:	792a      	ldrb	r2, [r5, #4]
 800eb72:	4b4f      	ldr	r3, [pc, #316]	; (800ecb0 <certif_rx+0x19c>)
          LoRaMacMibSetRequestConfirm( &mibReq );
 800eb74:	0028      	movs	r0, r5
          AdrEnableInit=mibReq.Param.AdrEnable;
 800eb76:	701a      	strb	r2, [r3, #0]
          mibReq.Type = MIB_ADR;
 800eb78:	702f      	strb	r7, [r5, #0]
          mibReq.Param.AdrEnable = true;
 800eb7a:	712e      	strb	r6, [r5, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800eb7c:	f002 fa7c 	bl	8011078 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 800eb80:	4d4c      	ldr	r5, [pc, #304]	; (800ecb4 <certif_rx+0x1a0>)
 800eb82:	494d      	ldr	r1, [pc, #308]	; (800ecb8 <certif_rx+0x1a4>)
 800eb84:	0028      	movs	r0, r5
 800eb86:	f005 f9d3 	bl	8013f30 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 800eb8a:	494c      	ldr	r1, [pc, #304]	; (800ecbc <certif_rx+0x1a8>)
 800eb8c:	0028      	movs	r0, r5
 800eb8e:	f005 fa75 	bl	801407c <TimerSetValue>
        certif_tx( );
 800eb92:	f7ff ff45 	bl	800ea20 <certif_tx>
    if ( certifParam.Running == false )
 800eb96:	7823      	ldrb	r3, [r4, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <certif_rx+0x8e>
      TimerStop( &CertifTxNextPacketTimer );
 800eb9c:	4845      	ldr	r0, [pc, #276]	; (800ecb4 <certif_rx+0x1a0>)
 800eb9e:	f005 fa41 	bl	8014024 <TimerStop>
}
 800eba2:	b00b      	add	sp, #44	; 0x2c
 800eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 800eba6:	6883      	ldr	r3, [r0, #8]
 800eba8:	7818      	ldrb	r0, [r3, #0]
 800ebaa:	7060      	strb	r0, [r4, #1]
      switch( certifParam.State )
 800ebac:	280b      	cmp	r0, #11
 800ebae:	d8f2      	bhi.n	800eb96 <certif_rx+0x82>
 800ebb0:	f7f1 ffda 	bl	8000b68 <__gnu_thumb1_case_sqi>
 800ebb4:	1b161306 	.word	0x1b161306
 800ebb8:	47322e20 	.word	0x47322e20
 800ebbc:	77f1716c 	.word	0x77f1716c
          certifParam.DownLinkCounter = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	1da2      	adds	r2, r4, #6
 800ebc4:	87d3      	strh	r3, [r2, #62]	; 0x3e
          certifParam.Running = false;
 800ebc6:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 800ebc8:	a804      	add	r0, sp, #16
 800ebca:	3302      	adds	r3, #2
 800ebcc:	7003      	strb	r3, [r0, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 800ebce:	4b38      	ldr	r3, [pc, #224]	; (800ecb0 <certif_rx+0x19c>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
          mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];
 800ebd2:	7103      	strb	r3, [r0, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800ebd4:	f002 fa50 	bl	8011078 <LoRaMacMibSetRequestConfirm>
 800ebd8:	e7dd      	b.n	800eb96 <certif_rx+0x82>
          certifParam.DataBufferSize = 2;
 800ebda:	2302      	movs	r3, #2
 800ebdc:	70e3      	strb	r3, [r4, #3]
          break;
 800ebde:	e7da      	b.n	800eb96 <certif_rx+0x82>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	4a32      	ldr	r2, [pc, #200]	; (800ecac <certif_rx+0x198>)
 800ebe4:	7013      	strb	r3, [r2, #0]
          certifParam.State = 1;
 800ebe6:	7063      	strb	r3, [r4, #1]
          break;
 800ebe8:	e7d5      	b.n	800eb96 <certif_rx+0x82>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800ebea:	2200      	movs	r2, #0
 800ebec:	4b2f      	ldr	r3, [pc, #188]	; (800ecac <certif_rx+0x198>)
 800ebee:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e7f8      	b.n	800ebe6 <certif_rx+0xd2>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800ebf4:	7b15      	ldrb	r5, [r2, #12]
          certifParam.DataBuffer[0] = 4;
 800ebf6:	2204      	movs	r2, #4
 800ebf8:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800ebfa:	2200      	movs	r2, #0
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800ebfc:	70e5      	strb	r5, [r4, #3]
 800ebfe:	3201      	adds	r2, #1
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800ec00:	b2d1      	uxtb	r1, r2
 800ec02:	428d      	cmp	r5, r1
 800ec04:	d9c7      	bls.n	800eb96 <certif_rx+0x82>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ec06:	5c98      	ldrb	r0, [r3, r2]
 800ec08:	18a1      	adds	r1, r4, r2
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	7108      	strb	r0, [r1, #4]
 800ec0e:	e7f6      	b.n	800ebfe <certif_rx+0xea>
          mlmeReq.Type = MLME_LINK_CHECK;
 800ec10:	2303      	movs	r3, #3
 800ec12:	a804      	add	r0, sp, #16
          mlmeReq.Type = MLME_BEACON_TIMING;
 800ec14:	7003      	strb	r3, [r0, #0]
 800ec16:	e011      	b.n	800ec3c <certif_rx+0x128>
            certifParam.DownLinkCounter = 0;
 800ec18:	2600      	movs	r6, #0
 800ec1a:	1da3      	adds	r3, r4, #6
 800ec1c:	87de      	strh	r6, [r3, #62]	; 0x3e
            mibReq.Type = MIB_ADR;
 800ec1e:	2302      	movs	r3, #2
 800ec20:	a804      	add	r0, sp, #16
 800ec22:	7003      	strb	r3, [r0, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800ec24:	4b22      	ldr	r3, [pc, #136]	; (800ecb0 <certif_rx+0x19c>)
            certifParam.Running = false;
 800ec26:	7026      	strb	r6, [r4, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	7103      	strb	r3, [r0, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ec2c:	f002 fa24 	bl	8011078 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Type = MLME_JOIN;
 800ec30:	466b      	mov	r3, sp
 800ec32:	701e      	strb	r6, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 800ec34:	ab01      	add	r3, sp, #4
 800ec36:	cd07      	ldmia	r5!, {r0, r1, r2}
 800ec38:	c307      	stmia	r3!, {r0, r1, r2}
            LoRaMacMlmeRequest( &mlmeReq );
 800ec3a:	4668      	mov	r0, sp
          LoRaMacMlmeRequest( &mlmeReq );
 800ec3c:	f002 fc5e 	bl	80114fc <LoRaMacMlmeRequest>
 800ec40:	e7a9      	b.n	800eb96 <certif_rx+0x82>
          if( mcpsIndication->BufferSize == 3 )
 800ec42:	7b12      	ldrb	r2, [r2, #12]
 800ec44:	2a03      	cmp	r2, #3
 800ec46:	d10a      	bne.n	800ec5e <certif_rx+0x14a>
              mlmeReq.Type = MLME_TXCW;
 800ec48:	a804      	add	r0, sp, #16
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ec4e:	785a      	ldrb	r2, [r3, #1]
 800ec50:	789b      	ldrb	r3, [r3, #2]
 800ec52:	0212      	lsls	r2, r2, #8
 800ec54:	4313      	orrs	r3, r2
 800ec56:	8083      	strh	r3, [r0, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 800ec58:	f002 fc50 	bl	80114fc <LoRaMacMlmeRequest>
 800ec5c:	e7c8      	b.n	800ebf0 <certif_rx+0xdc>
          else if( mcpsIndication->BufferSize == 7 )
 800ec5e:	2a07      	cmp	r2, #7
 800ec60:	d1c6      	bne.n	800ebf0 <certif_rx+0xdc>
              mlmeReq.Type = MLME_TXCW_1;
 800ec62:	a804      	add	r0, sp, #16
 800ec64:	3a02      	subs	r2, #2
 800ec66:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ec68:	7859      	ldrb	r1, [r3, #1]
 800ec6a:	789a      	ldrb	r2, [r3, #2]
 800ec6c:	0209      	lsls	r1, r1, #8
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	8082      	strh	r2, [r0, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800ec72:	78da      	ldrb	r2, [r3, #3]
 800ec74:	7919      	ldrb	r1, [r3, #4]
 800ec76:	0412      	lsls	r2, r2, #16
 800ec78:	0209      	lsls	r1, r1, #8
 800ec7a:	430a      	orrs	r2, r1
 800ec7c:	7959      	ldrb	r1, [r3, #5]
 800ec7e:	430a      	orrs	r2, r1
 800ec80:	2164      	movs	r1, #100	; 0x64
 800ec82:	434a      	muls	r2, r1
 800ec84:	6082      	str	r2, [r0, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800ec86:	799b      	ldrb	r3, [r3, #6]
 800ec88:	7303      	strb	r3, [r0, #12]
 800ec8a:	e7e5      	b.n	800ec58 <certif_rx+0x144>
          mibReq.Type = MIB_DEVICE_CLASS;
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	a804      	add	r0, sp, #16
 800ec90:	7002      	strb	r2, [r0, #0]
          mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];
 800ec92:	785b      	ldrb	r3, [r3, #1]
 800ec94:	e79d      	b.n	800ebd2 <certif_rx+0xbe>
          mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ec96:	220c      	movs	r2, #12
 800ec98:	a804      	add	r0, sp, #16
 800ec9a:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ec9c:	785b      	ldrb	r3, [r3, #1]
 800ec9e:	7103      	strb	r3, [r0, #4]
 800eca0:	e7cc      	b.n	800ec3c <certif_rx+0x128>
          mlmeReq.Type = MLME_BEACON_TIMING;
 800eca2:	a804      	add	r0, sp, #16
 800eca4:	230d      	movs	r3, #13
 800eca6:	e7b5      	b.n	800ec14 <certif_rx+0x100>
 800eca8:	2000107a 	.word	0x2000107a
 800ecac:	20001078 	.word	0x20001078
 800ecb0:	20001061 	.word	0x20001061
 800ecb4:	20001064 	.word	0x20001064
 800ecb8:	0800ead1 	.word	0x0800ead1
 800ecbc:	00001388 	.word	0x00001388

0800ecc0 <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	4a02      	ldr	r2, [pc, #8]	; (800eccc <OnRadioRxError+0xc>)
 800ecc4:	7811      	ldrb	r1, [r2, #0]
 800ecc6:	430b      	orrs	r3, r1
 800ecc8:	7013      	strb	r3, [r2, #0]
}
 800ecca:	4770      	bx	lr
 800eccc:	200010c4 	.word	0x200010c4

0800ecd0 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800ecd0:	23d8      	movs	r3, #216	; 0xd8
 800ecd2:	4a05      	ldr	r2, [pc, #20]	; (800ece8 <CallNvmCtxCallback+0x18>)
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	58d3      	ldr	r3, [r2, r3]
{
 800ecd8:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d003      	beq.n	800ece6 <CallNvmCtxCallback+0x16>
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d000      	beq.n	800ece6 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800ece4:	4798      	blx	r3
    }
}
 800ece6:	bd10      	pop	{r4, pc}
 800ece8:	200010c8 	.word	0x200010c8

0800ecec <EventCryptoNvmCtxChanged>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
}

static void EventCryptoNvmCtxChanged( void )
{
 800ecec:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800ecee:	2002      	movs	r0, #2
 800ecf0:	f7ff ffee 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ecf4:	bd10      	pop	{r4, pc}

0800ecf6 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800ecf6:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800ecf8:	2003      	movs	r0, #3
 800ecfa:	f7ff ffe9 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ecfe:	bd10      	pop	{r4, pc}

0800ed00 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800ed00:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800ed02:	2004      	movs	r0, #4
 800ed04:	f7ff ffe4 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ed08:	bd10      	pop	{r4, pc}

0800ed0a <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800ed0a:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800ed0c:	2005      	movs	r0, #5
 800ed0e:	f7ff ffdf 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ed12:	bd10      	pop	{r4, pc}

0800ed14 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800ed14:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800ed16:	2006      	movs	r0, #6
 800ed18:	f7ff ffda 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ed1c:	bd10      	pop	{r4, pc}

0800ed1e <EventFCntHandlerNvmCtxChanged>:

void EventFCntHandlerNvmCtxChanged( void )
{
 800ed1e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
 800ed20:	2007      	movs	r0, #7
 800ed22:	f7ff ffd5 	bl	800ecd0 <CallNvmCtxCallback>
}
 800ed26:	bd10      	pop	{r4, pc}

0800ed28 <GetMaxAppPayloadWithoutFOptsLength>:
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ed28:	238c      	movs	r3, #140	; 0x8c
 800ed2a:	4a0b      	ldr	r2, [pc, #44]	; (800ed58 <GetMaxAppPayloadWithoutFOptsLength+0x30>)
 800ed2c:	00db      	lsls	r3, r3, #3
{
 800ed2e:	b513      	push	{r0, r1, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ed30:	58d3      	ldr	r3, [r2, r3]
 800ed32:	466c      	mov	r4, sp
 800ed34:	001a      	movs	r2, r3
 800ed36:	32ff      	adds	r2, #255	; 0xff
 800ed38:	7851      	ldrb	r1, [r2, #1]
    getPhy.Datarate = datarate;
 800ed3a:	7060      	strb	r0, [r4, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ed3c:	70a1      	strb	r1, [r4, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ed3e:	210c      	movs	r1, #12
 800ed40:	7021      	strb	r1, [r4, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800ed42:	7d92      	ldrb	r2, [r2, #22]
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	d001      	beq.n	800ed4c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ed48:	220d      	movs	r2, #13
 800ed4a:	7022      	strb	r2, [r4, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed4c:	7818      	ldrb	r0, [r3, #0]
 800ed4e:	4669      	mov	r1, sp
 800ed50:	f004 f82f 	bl	8012db2 <RegionGetPhyParam>
    return phyParam.Value;
 800ed54:	b2c0      	uxtb	r0, r0
}
 800ed56:	bd16      	pop	{r1, r2, r4, pc}
 800ed58:	200010c8 	.word	0x200010c8

0800ed5c <OnAckTimeoutTimerEvent>:
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ed5c:	23fb      	movs	r3, #251	; 0xfb
{
 800ed5e:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ed60:	4c0c      	ldr	r4, [pc, #48]	; (800ed94 <OnAckTimeoutTimerEvent+0x38>)
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	18e0      	adds	r0, r4, r3
 800ed66:	f005 f95d 	bl	8014024 <TimerStop>
    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800ed6a:	238c      	movs	r3, #140	; 0x8c
 800ed6c:	00db      	lsls	r3, r3, #3
 800ed6e:	58e3      	ldr	r3, [r4, r3]
 800ed70:	4a09      	ldr	r2, [pc, #36]	; (800ed98 <OnAckTimeoutTimerEvent+0x3c>)
 800ed72:	5c9a      	ldrb	r2, [r3, r2]
 800ed74:	2a00      	cmp	r2, #0
 800ed76:	d003      	beq.n	800ed80 <OnAckTimeoutTimerEvent+0x24>
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800ed78:	2286      	movs	r2, #134	; 0x86
 800ed7a:	2101      	movs	r1, #1
 800ed7c:	0092      	lsls	r2, r2, #2
 800ed7e:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ed80:	33c8      	adds	r3, #200	; 0xc8
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d104      	bne.n	800ed92 <OnAckTimeoutTimerEvent+0x36>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed88:	4a04      	ldr	r2, [pc, #16]	; (800ed9c <OnAckTimeoutTimerEvent+0x40>)
 800ed8a:	330e      	adds	r3, #14
 800ed8c:	5ca1      	ldrb	r1, [r4, r2]
 800ed8e:	430b      	orrs	r3, r1
 800ed90:	54a3      	strb	r3, [r4, r2]
}
 800ed92:	bd10      	pop	{r4, pc}
 800ed94:	200010c8 	.word	0x200010c8
 800ed98:	00000219 	.word	0x00000219
 800ed9c:	0000045d 	.word	0x0000045d

0800eda0 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800eda0:	22d6      	movs	r2, #214	; 0xd6
 800eda2:	2380      	movs	r3, #128	; 0x80
{
 800eda4:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800eda6:	4c0a      	ldr	r4, [pc, #40]	; (800edd0 <PrepareRxDoneAbort+0x30>)
 800eda8:	0092      	lsls	r2, r2, #2
 800edaa:	58a1      	ldr	r1, [r4, r2]
 800edac:	430b      	orrs	r3, r1
 800edae:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NvmCtx->NodeAckRequested )
 800edb0:	238c      	movs	r3, #140	; 0x8c
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	58e2      	ldr	r2, [r4, r3]
 800edb6:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <PrepareRxDoneAbort+0x34>)
 800edb8:	5cd3      	ldrb	r3, [r2, r3]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <PrepareRxDoneAbort+0x22>
        OnAckTimeoutTimerEvent( );
 800edbe:	f7ff ffcd 	bl	800ed5c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800edc2:	2112      	movs	r1, #18
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800edc4:	4a04      	ldr	r2, [pc, #16]	; (800edd8 <PrepareRxDoneAbort+0x38>)
 800edc6:	5ca3      	ldrb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800edc8:	430b      	orrs	r3, r1
 800edca:	54a3      	strb	r3, [r4, r2]
}
 800edcc:	bd10      	pop	{r4, pc}
 800edce:	46c0      	nop			; (mov r8, r8)
 800edd0:	200010c8 	.word	0x200010c8
 800edd4:	00000219 	.word	0x00000219
 800edd8:	0000045d 	.word	0x0000045d

0800eddc <ResetMacParameters>:
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800eddc:	238c      	movs	r3, #140	; 0x8c
{
 800edde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800ede0:	2289      	movs	r2, #137	; 0x89
 800ede2:	2400      	movs	r4, #0
 800ede4:	4e22      	ldr	r6, [pc, #136]	; (800ee70 <ResetMacParameters+0x94>)
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	58f3      	ldr	r3, [r6, r3]
 800edea:	0092      	lsls	r2, r2, #2
 800edec:	549c      	strb	r4, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800edee:	33cc      	adds	r3, #204	; 0xcc
 800edf0:	601c      	str	r4, [r3, #0]
    LoRaMacResetFCnts( );
 800edf2:	f003 ff01 	bl	8012bf8 <LoRaMacResetFCnts>
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800edf6:	238c      	movs	r3, #140	; 0x8c
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	58f3      	ldr	r3, [r6, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800edfc:	2101      	movs	r1, #1
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800edfe:	001a      	movs	r2, r3
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800ee00:	481c      	ldr	r0, [pc, #112]	; (800ee74 <ResetMacParameters+0x98>)
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800ee02:	32ff      	adds	r2, #255	; 0xff
 800ee04:	7454      	strb	r4, [r2, #17]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800ee06:	5419      	strb	r1, [r3, r0]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800ee08:	481b      	ldr	r0, [pc, #108]	; (800ee78 <ResetMacParameters+0x9c>)
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800ee0a:	3a03      	subs	r2, #3
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800ee0c:	5419      	strb	r1, [r3, r0]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800ee0e:	1840      	adds	r0, r0, r1
 800ee10:	541c      	strb	r4, [r3, r0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800ee12:	3004      	adds	r0, #4
    MacCtx.NvmCtx->MaxDCycle = 0;
 800ee14:	7554      	strb	r4, [r2, #21]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800ee16:	5219      	strh	r1, [r3, r0]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ee18:	0019      	movs	r1, r3
 800ee1a:	7918      	ldrb	r0, [r3, #4]
 800ee1c:	31d4      	adds	r1, #212	; 0xd4
 800ee1e:	7008      	strb	r0, [r1, #0]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ee20:	7958      	ldrb	r0, [r3, #5]
 800ee22:	7048      	strb	r0, [r1, #1]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800ee24:	1d98      	adds	r0, r3, #6
 800ee26:	7fc0      	ldrb	r0, [r0, #31]
 800ee28:	3121      	adds	r1, #33	; 0x21
 800ee2a:	7008      	strb	r0, [r1, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ee2c:	0018      	movs	r0, r3
 800ee2e:	39cd      	subs	r1, #205	; 0xcd
 800ee30:	30f8      	adds	r0, #248	; 0xf8
 800ee32:	c9a0      	ldmia	r1!, {r5, r7}
 800ee34:	c0a0      	stmia	r0!, {r5, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800ee36:	7809      	ldrb	r1, [r1, #0]
 800ee38:	7111      	strb	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800ee3a:	0019      	movs	r1, r3
 800ee3c:	3131      	adds	r1, #49	; 0x31
 800ee3e:	7809      	ldrb	r1, [r1, #0]
    params.NvmCtx = NULL;
 800ee40:	9400      	str	r4, [sp, #0]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800ee42:	7151      	strb	r1, [r2, #5]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800ee44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee46:	6091      	str	r1, [r2, #8]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ee48:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ee4a:	60d1      	str	r1, [r2, #12]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800ee4c:	4a0b      	ldr	r2, [pc, #44]	; (800ee7c <ResetMacParameters+0xa0>)
    params.Type = INIT_TYPE_APP_DEFAULTS;
 800ee4e:	4669      	mov	r1, sp
    MacCtx.NvmCtx->NodeAckRequested = false;
 800ee50:	549c      	strb	r4, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800ee52:	4a0b      	ldr	r2, [pc, #44]	; (800ee80 <ResetMacParameters+0xa4>)
 800ee54:	549c      	strb	r4, [r3, r2]
    params.Type = INIT_TYPE_APP_DEFAULTS;
 800ee56:	2202      	movs	r2, #2
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ee58:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_APP_DEFAULTS;
 800ee5a:	710a      	strb	r2, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ee5c:	f003 ffbc 	bl	8012dd8 <RegionInitDefaults>
    MacCtx.NvmCtx->Channel = 0;
 800ee60:	238c      	movs	r3, #140	; 0x8c
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	58f3      	ldr	r3, [r6, r3]
 800ee66:	33ff      	adds	r3, #255	; 0xff
 800ee68:	751c      	strb	r4, [r3, #20]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800ee6a:	755c      	strb	r4, [r3, #21]
}
 800ee6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ee6e:	46c0      	nop			; (mov r8, r8)
 800ee70:	200010c8 	.word	0x200010c8
 800ee74:	00000216 	.word	0x00000216
 800ee78:	00000217 	.word	0x00000217
 800ee7c:	00000219 	.word	0x00000219
 800ee80:	0000021a 	.word	0x0000021a

0800ee84 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ee84:	2301      	movs	r3, #1
{
 800ee86:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ee88:	4a08      	ldr	r2, [pc, #32]	; (800eeac <OnRadioRxTimeout+0x28>)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800ee8a:	4668      	mov	r0, sp
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ee8c:	7811      	ldrb	r1, [r2, #0]
 800ee8e:	430b      	orrs	r3, r1
 800ee90:	7013      	strb	r3, [r2, #0]
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800ee92:	f005 fb99 	bl	80145c8 <SysTimeGetMcuTime>
 800ee96:	466b      	mov	r3, sp
 800ee98:	9900      	ldr	r1, [sp, #0]
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	5e9a      	ldrsh	r2, [r3, r2]
 800ee9e:	4804      	ldr	r0, [pc, #16]	; (800eeb0 <OnRadioRxTimeout+0x2c>)
 800eea0:	f005 fbdc 	bl	801465c <TraceSend>
 800eea4:	4803      	ldr	r0, [pc, #12]	; (800eeb4 <OnRadioRxTimeout+0x30>)
 800eea6:	f005 fbd9 	bl	801465c <TraceSend>
}
 800eeaa:	bd07      	pop	{r0, r1, r2, pc}
 800eeac:	200010c4 	.word	0x200010c4
 800eeb0:	080185d1 	.word	0x080185d1
 800eeb4:	080185dc 	.word	0x080185dc

0800eeb8 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800eeb8:	2304      	movs	r3, #4
{
 800eeba:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800eebc:	4a08      	ldr	r2, [pc, #32]	; (800eee0 <OnRadioTxTimeout+0x28>)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 800eebe:	4668      	mov	r0, sp
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800eec0:	7811      	ldrb	r1, [r2, #0]
 800eec2:	430b      	orrs	r3, r1
 800eec4:	7013      	strb	r3, [r2, #0]
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 800eec6:	f005 fb7f 	bl	80145c8 <SysTimeGetMcuTime>
 800eeca:	466b      	mov	r3, sp
 800eecc:	9900      	ldr	r1, [sp, #0]
 800eece:	2204      	movs	r2, #4
 800eed0:	5e9a      	ldrsh	r2, [r3, r2]
 800eed2:	4804      	ldr	r0, [pc, #16]	; (800eee4 <OnRadioTxTimeout+0x2c>)
 800eed4:	f005 fbc2 	bl	801465c <TraceSend>
 800eed8:	4803      	ldr	r0, [pc, #12]	; (800eee8 <OnRadioTxTimeout+0x30>)
 800eeda:	f005 fbbf 	bl	801465c <TraceSend>
}
 800eede:	bd07      	pop	{r0, r1, r2, pc}
 800eee0:	200010c4 	.word	0x200010c4
 800eee4:	080185d1 	.word	0x080185d1
 800eee8:	080185f9 	.word	0x080185f9

0800eeec <OnRadioRxDone>:
{
 800eeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeee:	000e      	movs	r6, r1
 800eef0:	0015      	movs	r5, r2
 800eef2:	0007      	movs	r7, r0
 800eef4:	001c      	movs	r4, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800eef6:	f005 f8d2 	bl	801409e <TimerGetCurrentTime>
 800eefa:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <OnRadioRxDone+0x40>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 800eefc:	4a0c      	ldr	r2, [pc, #48]	; (800ef30 <OnRadioRxDone+0x44>)
    RxDoneParams.Payload = payload;
 800eefe:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 800ef00:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800ef02:	815d      	strh	r5, [r3, #10]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ef04:	6018      	str	r0, [r3, #0]
    RxDoneParams.Snr = snr;
 800ef06:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800ef08:	2308      	movs	r3, #8
 800ef0a:	7811      	ldrb	r1, [r2, #0]
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 800ef0c:	4668      	mov	r0, sp
    LoRaMacRadioEvents.Events.RxDone = 1;
 800ef0e:	430b      	orrs	r3, r1
 800ef10:	7013      	strb	r3, [r2, #0]
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 800ef12:	f005 fb59 	bl	80145c8 <SysTimeGetMcuTime>
 800ef16:	466b      	mov	r3, sp
 800ef18:	9900      	ldr	r1, [sp, #0]
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	5e9a      	ldrsh	r2, [r3, r2]
 800ef1e:	4805      	ldr	r0, [pc, #20]	; (800ef34 <OnRadioRxDone+0x48>)
 800ef20:	f005 fb9c 	bl	801465c <TraceSend>
 800ef24:	4804      	ldr	r0, [pc, #16]	; (800ef38 <OnRadioRxDone+0x4c>)
 800ef26:	f005 fb99 	bl	801465c <TraceSend>
}
 800ef2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ef2c:	2000225c 	.word	0x2000225c
 800ef30:	200010c4 	.word	0x200010c4
 800ef34:	080185d1 	.word	0x080185d1
 800ef38:	080185c4 	.word	0x080185c4

0800ef3c <OnRadioTxDone>:
{
 800ef3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ef3e:	f005 f8ae 	bl	801409e <TimerGetCurrentTime>
 800ef42:	4b0f      	ldr	r3, [pc, #60]	; (800ef80 <OnRadioTxDone+0x44>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ef44:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ef46:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ef48:	4668      	mov	r0, sp
 800ef4a:	f005 fb13 	bl	8014574 <SysTimeGet>
 800ef4e:	22d4      	movs	r2, #212	; 0xd4
 800ef50:	4b0c      	ldr	r3, [pc, #48]	; (800ef84 <OnRadioTxDone+0x48>)
 800ef52:	0092      	lsls	r2, r2, #2
 800ef54:	189b      	adds	r3, r3, r2
 800ef56:	cc06      	ldmia	r4!, {r1, r2}
 800ef58:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef5a:	2310      	movs	r3, #16
 800ef5c:	4a0a      	ldr	r2, [pc, #40]	; (800ef88 <OnRadioTxDone+0x4c>)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800ef5e:	ac02      	add	r4, sp, #8
    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef60:	7811      	ldrb	r1, [r2, #0]
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800ef62:	0020      	movs	r0, r4
    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef64:	430b      	orrs	r3, r1
 800ef66:	7013      	strb	r3, [r2, #0]
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800ef68:	f005 fb2e 	bl	80145c8 <SysTimeGetMcuTime>
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	5ee2      	ldrsh	r2, [r4, r3]
 800ef70:	9902      	ldr	r1, [sp, #8]
 800ef72:	4806      	ldr	r0, [pc, #24]	; (800ef8c <OnRadioTxDone+0x50>)
 800ef74:	f005 fb72 	bl	801465c <TraceSend>
 800ef78:	4805      	ldr	r0, [pc, #20]	; (800ef90 <OnRadioTxDone+0x54>)
 800ef7a:	f005 fb6f 	bl	801465c <TraceSend>
}
 800ef7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800ef80:	20002258 	.word	0x20002258
 800ef84:	200010c8 	.word	0x200010c8
 800ef88:	200010c4 	.word	0x200010c4
 800ef8c:	080185d1 	.word	0x080185d1
 800ef90:	080185ec 	.word	0x080185ec

0800ef94 <OnRxWindow1TimerEvent>:
    TimerStop( &MacCtx.RxWindowTimer1 );
 800ef94:	23e5      	movs	r3, #229	; 0xe5
{
 800ef96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &MacCtx.RxWindowTimer1 );
 800ef98:	4c1f      	ldr	r4, [pc, #124]	; (800f018 <OnRxWindow1TimerEvent+0x84>)
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	18e0      	adds	r0, r4, r3
    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800ef9e:	258c      	movs	r5, #140	; 0x8c
    TimerStop( &MacCtx.RxWindowTimer1 );
 800efa0:	f005 f840 	bl	8014024 <TimerStop>
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800efa4:	2200      	movs	r2, #0
 800efa6:	4b1d      	ldr	r3, [pc, #116]	; (800f01c <OnRxWindow1TimerEvent+0x88>)
    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800efa8:	00ed      	lsls	r5, r5, #3
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800efaa:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800efac:	5963      	ldr	r3, [r4, r5]
 800efae:	20f1      	movs	r0, #241	; 0xf1
 800efb0:	0019      	movs	r1, r3
 800efb2:	31ff      	adds	r1, #255	; 0xff
 800efb4:	7d0e      	ldrb	r6, [r1, #20]
 800efb6:	0080      	lsls	r0, r0, #2
 800efb8:	5426      	strb	r6, [r4, r0]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800efba:	0018      	movs	r0, r3
 800efbc:	30f5      	adds	r0, #245	; 0xf5
 800efbe:	7806      	ldrb	r6, [r0, #0]
 800efc0:	4817      	ldr	r0, [pc, #92]	; (800f020 <OnRxWindow1TimerEvent+0x8c>)
    MacCtx.RxWindow1Config.RxContinuous = false;
 800efc2:	4f18      	ldr	r7, [pc, #96]	; (800f024 <OnRxWindow1TimerEvent+0x90>)
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800efc4:	5426      	strb	r6, [r4, r0]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800efc6:	788e      	ldrb	r6, [r1, #2]
 800efc8:	300d      	adds	r0, #13
 800efca:	5426      	strb	r6, [r4, r0]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800efcc:	7d88      	ldrb	r0, [r1, #22]
 800efce:	4916      	ldr	r1, [pc, #88]	; (800f028 <OnRxWindow1TimerEvent+0x94>)
    MacCtx.RxWindow1Config.RxContinuous = false;
 800efd0:	55e2      	strb	r2, [r4, r7]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800efd2:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800efd4:	4815      	ldr	r0, [pc, #84]	; (800f02c <OnRxWindow1TimerEvent+0x98>)
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800efd6:	33c8      	adds	r3, #200	; 0xc8
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800efd8:	5422      	strb	r2, [r4, r0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	4e14      	ldr	r6, [pc, #80]	; (800f030 <OnRxWindow1TimerEvent+0x9c>)
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d102      	bne.n	800efe8 <OnRxWindow1TimerEvent+0x54>
        Radio.Standby( );
 800efe2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	4798      	blx	r3
    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
 800efe8:	2381      	movs	r3, #129	; 0x81
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	18e2      	adds	r2, r4, r3
 800efee:	3b44      	subs	r3, #68	; 0x44
 800eff0:	18e1      	adds	r1, r4, r3
 800eff2:	5963      	ldr	r3, [r4, r5]
 800eff4:	7818      	ldrb	r0, [r3, #0]
 800eff6:	f003 ff25 	bl	8012e44 <RegionRxConfig>
    if( rxContinuous == false )
 800effa:	5de3      	ldrb	r3, [r4, r7]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d107      	bne.n	800f010 <OnRxWindow1TimerEvent+0x7c>
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800f000:	5963      	ldr	r3, [r4, r5]
        Radio.Rx( maxRxWindow );
 800f002:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800f004:	33e0      	adds	r3, #224	; 0xe0
        Radio.Rx( maxRxWindow );
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	0013      	movs	r3, r2
 800f00a:	9201      	str	r2, [sp, #4]
        Radio.Rx( 0 ); // Continuous mode
 800f00c:	4798      	blx	r3
}
 800f00e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        Radio.Rx( 0 ); // Continuous mode
 800f010:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800f012:	2000      	movs	r0, #0
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	e7f9      	b.n	800f00c <OnRxWindow1TimerEvent+0x78>
 800f018:	200010c8 	.word	0x200010c8
 800f01c:	0000045c 	.word	0x0000045c
 800f020:	000003c7 	.word	0x000003c7
 800f024:	000003d6 	.word	0x000003d6
 800f028:	000003d5 	.word	0x000003d5
 800f02c:	000003d7 	.word	0x000003d7
 800f030:	08018acc 	.word	0x08018acc

0800f034 <StopRetransmission>:
    uint32_t fCntUp = 0;
 800f034:	2300      	movs	r3, #0
{
 800f036:	b507      	push	{r0, r1, r2, lr}
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800f038:	a801      	add	r0, sp, #4
    uint32_t fCntUp = 0;
 800f03a:	9301      	str	r3, [sp, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800f03c:	f003 fdc6 	bl	8012bcc <LoRaMacGetFCntUp>
 800f040:	2800      	cmp	r0, #0
 800f042:	d001      	beq.n	800f048 <StopRetransmission+0x14>
        return false;
 800f044:	2000      	movs	r0, #0
}
 800f046:	bd0e      	pop	{r1, r2, r3, pc}
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800f048:	9801      	ldr	r0, [sp, #4]
 800f04a:	f003 fdcb 	bl	8012be4 <LoRaMacSetFCntUp>
 800f04e:	2800      	cmp	r0, #0
 800f050:	d1f8      	bne.n	800f044 <StopRetransmission+0x10>
 800f052:	208c      	movs	r0, #140	; 0x8c
    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800f054:	4b10      	ldr	r3, [pc, #64]	; (800f098 <StopRetransmission+0x64>)
 800f056:	4a11      	ldr	r2, [pc, #68]	; (800f09c <StopRetransmission+0x68>)
 800f058:	00c0      	lsls	r0, r0, #3
 800f05a:	5c9a      	ldrb	r2, [r3, r2]
 800f05c:	0792      	lsls	r2, r2, #30
 800f05e:	d409      	bmi.n	800f074 <StopRetransmission+0x40>
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800f060:	581a      	ldr	r2, [r3, r0]
 800f062:	0011      	movs	r1, r2
 800f064:	31ca      	adds	r1, #202	; 0xca
 800f066:	7809      	ldrb	r1, [r1, #0]
 800f068:	2900      	cmp	r1, #0
 800f06a:	d003      	beq.n	800f074 <StopRetransmission+0x40>
            MacCtx.NvmCtx->AdrAckCounter++;
 800f06c:	32cc      	adds	r2, #204	; 0xcc
 800f06e:	6811      	ldr	r1, [r2, #0]
 800f070:	3101      	adds	r1, #1
 800f072:	6011      	str	r1, [r2, #0]
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800f074:	581a      	ldr	r2, [r3, r0]
 800f076:	2100      	movs	r1, #0
 800f078:	0010      	movs	r0, r2
 800f07a:	30ff      	adds	r0, #255	; 0xff
 800f07c:	7441      	strb	r1, [r0, #17]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800f07e:	4808      	ldr	r0, [pc, #32]	; (800f0a0 <StopRetransmission+0x6c>)
 800f080:	5411      	strb	r1, [r2, r0]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800f082:	3801      	subs	r0, #1
 800f084:	5411      	strb	r1, [r2, r0]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f086:	21d6      	movs	r1, #214	; 0xd6
 800f088:	2202      	movs	r2, #2
 800f08a:	0089      	lsls	r1, r1, #2
 800f08c:	5858      	ldr	r0, [r3, r1]
 800f08e:	4390      	bics	r0, r2
 800f090:	5058      	str	r0, [r3, r1]
 800f092:	2001      	movs	r0, #1
 800f094:	e7d7      	b.n	800f046 <StopRetransmission+0x12>
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	200010c8 	.word	0x200010c8
 800f09c:	0000045d 	.word	0x0000045d
 800f0a0:	00000219 	.word	0x00000219

0800f0a4 <OnRxWindow2TimerEvent>:
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f0a4:	23ea      	movs	r3, #234	; 0xea
{
 800f0a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f0a8:	4c22      	ldr	r4, [pc, #136]	; (800f134 <OnRxWindow2TimerEvent+0x90>)
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	18e0      	adds	r0, r4, r3
 800f0ae:	f004 ffb9 	bl	8014024 <TimerStop>
    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800f0b2:	238c      	movs	r3, #140	; 0x8c
 800f0b4:	00db      	lsls	r3, r3, #3
 800f0b6:	58e3      	ldr	r3, [r4, r3]
 800f0b8:	21f6      	movs	r1, #246	; 0xf6
 800f0ba:	001a      	movs	r2, r3
 800f0bc:	32ff      	adds	r2, #255	; 0xff
 800f0be:	7d10      	ldrb	r0, [r2, #20]
 800f0c0:	0089      	lsls	r1, r1, #2
 800f0c2:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800f0c4:	0019      	movs	r1, r3
 800f0c6:	31f8      	adds	r1, #248	; 0xf8
 800f0c8:	6808      	ldr	r0, [r1, #0]
 800f0ca:	21f7      	movs	r1, #247	; 0xf7
 800f0cc:	0089      	lsls	r1, r1, #2
 800f0ce:	5060      	str	r0, [r4, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f0d0:	7890      	ldrb	r0, [r2, #2]
 800f0d2:	310c      	adds	r1, #12
 800f0d4:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800f0d6:	7d91      	ldrb	r1, [r2, #22]
 800f0d8:	4a17      	ldr	r2, [pc, #92]	; (800f138 <OnRxWindow2TimerEvent+0x94>)
 800f0da:	4d18      	ldr	r5, [pc, #96]	; (800f13c <OnRxWindow2TimerEvent+0x98>)
 800f0dc:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f0de:	2201      	movs	r2, #1
 800f0e0:	4917      	ldr	r1, [pc, #92]	; (800f140 <OnRxWindow2TimerEvent+0x9c>)
 800f0e2:	5462      	strb	r2, [r4, r1]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f0e4:	0019      	movs	r1, r3
 800f0e6:	31c8      	adds	r1, #200	; 0xc8
 800f0e8:	7809      	ldrb	r1, [r1, #0]
 800f0ea:	2902      	cmp	r1, #2
 800f0ec:	d000      	beq.n	800f0f0 <OnRxWindow2TimerEvent+0x4c>
        MacCtx.RxWindow2Config.RxContinuous = false;
 800f0ee:	2200      	movs	r2, #0
        MacCtx.RxWindow2Config.RxContinuous = true;
 800f0f0:	5562      	strb	r2, [r4, r5]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800f0f2:	21f6      	movs	r1, #246	; 0xf6
 800f0f4:	2281      	movs	r2, #129	; 0x81
 800f0f6:	0089      	lsls	r1, r1, #2
 800f0f8:	00d2      	lsls	r2, r2, #3
 800f0fa:	18a2      	adds	r2, r4, r2
 800f0fc:	1861      	adds	r1, r4, r1
 800f0fe:	7818      	ldrb	r0, [r3, #0]
 800f100:	f003 fea0 	bl	8012e44 <RegionRxConfig>
 800f104:	2800      	cmp	r0, #0
 800f106:	d00f      	beq.n	800f128 <OnRxWindow2TimerEvent+0x84>
    if( rxContinuous == false )
 800f108:	5d63      	ldrb	r3, [r4, r5]
 800f10a:	4a0e      	ldr	r2, [pc, #56]	; (800f144 <OnRxWindow2TimerEvent+0xa0>)
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10c      	bne.n	800f12a <OnRxWindow2TimerEvent+0x86>
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800f110:	238c      	movs	r3, #140	; 0x8c
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	58e3      	ldr	r3, [r4, r3]
        Radio.Rx( maxRxWindow );
 800f116:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800f118:	33e0      	adds	r3, #224	; 0xe0
        Radio.Rx( maxRxWindow );
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	0013      	movs	r3, r2
 800f11e:	9201      	str	r2, [sp, #4]
        Radio.Rx( 0 ); // Continuous mode
 800f120:	4798      	blx	r3
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800f122:	2201      	movs	r2, #1
 800f124:	4b08      	ldr	r3, [pc, #32]	; (800f148 <OnRxWindow2TimerEvent+0xa4>)
 800f126:	54e2      	strb	r2, [r4, r3]
}
 800f128:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        Radio.Rx( 0 ); // Continuous mode
 800f12a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f12c:	2000      	movs	r0, #0
 800f12e:	9301      	str	r3, [sp, #4]
 800f130:	e7f6      	b.n	800f120 <OnRxWindow2TimerEvent+0x7c>
 800f132:	46c0      	nop			; (mov r8, r8)
 800f134:	200010c8 	.word	0x200010c8
 800f138:	000003e9 	.word	0x000003e9
 800f13c:	000003ea 	.word	0x000003ea
 800f140:	000003eb 	.word	0x000003eb
 800f144:	08018acc 	.word	0x08018acc
 800f148:	0000045c 	.word	0x0000045c

0800f14c <OpenContinuousRx2Window>:
{
 800f14c:	b510      	push	{r4, lr}
    OnRxWindow2TimerEvent( );
 800f14e:	f7ff ffa9 	bl	800f0a4 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f152:	2102      	movs	r1, #2
 800f154:	4b01      	ldr	r3, [pc, #4]	; (800f15c <OpenContinuousRx2Window+0x10>)
 800f156:	4a02      	ldr	r2, [pc, #8]	; (800f160 <OpenContinuousRx2Window+0x14>)
 800f158:	54d1      	strb	r1, [r2, r3]
}
 800f15a:	bd10      	pop	{r4, pc}
 800f15c:	0000045c 	.word	0x0000045c
 800f160:	200010c8 	.word	0x200010c8

0800f164 <HandleRadioRxErrorTimeout>:
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f164:	238c      	movs	r3, #140	; 0x8c
{
 800f166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f168:	4c3c      	ldr	r4, [pc, #240]	; (800f25c <HandleRadioRxErrorTimeout+0xf8>)
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	58e3      	ldr	r3, [r4, r3]
{
 800f16e:	9100      	str	r1, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f170:	33c8      	adds	r3, #200	; 0xc8
 800f172:	781b      	ldrb	r3, [r3, #0]
{
 800f174:	0006      	movs	r6, r0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f176:	2b02      	cmp	r3, #2
 800f178:	d003      	beq.n	800f182 <HandleRadioRxErrorTimeout+0x1e>
        Radio.Sleep( );
 800f17a:	4b39      	ldr	r3, [pc, #228]	; (800f260 <HandleRadioRxErrorTimeout+0xfc>)
 800f17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17e:	9301      	str	r3, [sp, #4]
 800f180:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f182:	f002 fc27 	bl	80119d4 <LoRaMacClassBIsBeaconExpected>
 800f186:	1e05      	subs	r5, r0, #0
 800f188:	d004      	beq.n	800f194 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f18a:	2002      	movs	r0, #2
 800f18c:	f002 fc18 	bl	80119c0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( );
 800f190:	f002 fc1b 	bl	80119ca <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f194:	238c      	movs	r3, #140	; 0x8c
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	58e3      	ldr	r3, [r4, r3]
 800f19a:	33c8      	adds	r3, #200	; 0xc8
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d11a      	bne.n	800f1d8 <HandleRadioRxErrorTimeout+0x74>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f1a2:	f002 fc19 	bl	80119d8 <LoRaMacClassBIsPingExpected>
 800f1a6:	1e07      	subs	r7, r0, #0
 800f1a8:	d005      	beq.n	800f1b6 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	f002 fc09 	bl	80119c2 <LoRaMacClassBSetPingSlotState>
            classBRx = true;
 800f1b0:	003d      	movs	r5, r7
            LoRaMacClassBPingSlotTimerEvent( );
 800f1b2:	f002 fc0b 	bl	80119cc <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f1b6:	f002 fc11 	bl	80119dc <LoRaMacClassBIsMulticastExpected>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d00c      	beq.n	800f1d8 <HandleRadioRxErrorTimeout+0x74>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f1be:	2000      	movs	r0, #0
 800f1c0:	f002 fc00 	bl	80119c4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( );
 800f1c4:	f002 fc03 	bl	80119ce <LoRaMacClassBMulticastSlotTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f1c8:	238c      	movs	r3, #140	; 0x8c
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	58e3      	ldr	r3, [r4, r3]
 800f1ce:	33c8      	adds	r3, #200	; 0xc8
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b02      	cmp	r3, #2
 800f1d4:	d03e      	beq.n	800f254 <HandleRadioRxErrorTimeout+0xf0>
}
 800f1d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 800f1d8:	2d00      	cmp	r5, #0
 800f1da:	d1f5      	bne.n	800f1c8 <HandleRadioRxErrorTimeout+0x64>
 800f1dc:	228c      	movs	r2, #140	; 0x8c
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f1de:	4b21      	ldr	r3, [pc, #132]	; (800f264 <HandleRadioRxErrorTimeout+0x100>)
 800f1e0:	00d2      	lsls	r2, r2, #3
 800f1e2:	5ce1      	ldrb	r1, [r4, r3]
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800f1e4:	58a2      	ldr	r2, [r4, r2]
 800f1e6:	4b20      	ldr	r3, [pc, #128]	; (800f268 <HandleRadioRxErrorTimeout+0x104>)
 800f1e8:	5cd3      	ldrb	r3, [r2, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	d122      	bne.n	800f234 <HandleRadioRxErrorTimeout+0xd0>
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <HandleRadioRxErrorTimeout+0x92>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f1f2:	4b1e      	ldr	r3, [pc, #120]	; (800f26c <HandleRadioRxErrorTimeout+0x108>)
 800f1f4:	54e6      	strb	r6, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f1f6:	0030      	movs	r0, r6
 800f1f8:	f003 fbd2 	bl	80129a0 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f1fc:	238c      	movs	r3, #140	; 0x8c
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	58e3      	ldr	r3, [r4, r3]
 800f202:	33c8      	adds	r3, #200	; 0xc8
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	2b02      	cmp	r3, #2
 800f208:	d024      	beq.n	800f254 <HandleRadioRxErrorTimeout+0xf0>
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f20a:	23d0      	movs	r3, #208	; 0xd0
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	58e0      	ldr	r0, [r4, r3]
 800f210:	f004 ff4b 	bl	80140aa <TimerGetElapsedTime>
 800f214:	23f0      	movs	r3, #240	; 0xf0
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	58e3      	ldr	r3, [r4, r3]
 800f21a:	4298      	cmp	r0, r3
 800f21c:	d3d4      	bcc.n	800f1c8 <HandleRadioRxErrorTimeout+0x64>
                    TimerStop( &MacCtx.RxWindowTimer2 );
 800f21e:	23ea      	movs	r3, #234	; 0xea
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	18e0      	adds	r0, r4, r3
 800f224:	f004 fefe 	bl	8014024 <TimerStop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f228:	2310      	movs	r3, #16
 800f22a:	4a11      	ldr	r2, [pc, #68]	; (800f270 <HandleRadioRxErrorTimeout+0x10c>)
 800f22c:	5ca1      	ldrb	r1, [r4, r2]
 800f22e:	430b      	orrs	r3, r1
 800f230:	54a3      	strb	r3, [r4, r2]
 800f232:	e7c9      	b.n	800f1c8 <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <HandleRadioRxErrorTimeout+0xdc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f238:	466a      	mov	r2, sp
 800f23a:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <HandleRadioRxErrorTimeout+0x108>)
 800f23c:	7812      	ldrb	r2, [r2, #0]
 800f23e:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f240:	9800      	ldr	r0, [sp, #0]
 800f242:	f003 fbad 	bl	80129a0 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f246:	238c      	movs	r3, #140	; 0x8c
 800f248:	00db      	lsls	r3, r3, #3
 800f24a:	58e3      	ldr	r3, [r4, r3]
 800f24c:	33c8      	adds	r3, #200	; 0xc8
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b02      	cmp	r3, #2
 800f252:	d1e9      	bne.n	800f228 <HandleRadioRxErrorTimeout+0xc4>
        OpenContinuousRx2Window( );
 800f254:	f7ff ff7a 	bl	800f14c <OpenContinuousRx2Window>
}
 800f258:	e7bd      	b.n	800f1d6 <HandleRadioRxErrorTimeout+0x72>
 800f25a:	46c0      	nop			; (mov r8, r8)
 800f25c:	200010c8 	.word	0x200010c8
 800f260:	08018acc 	.word	0x08018acc
 800f264:	0000045c 	.word	0x0000045c
 800f268:	00000219 	.word	0x00000219
 800f26c:	0000041d 	.word	0x0000041d
 800f270:	0000045d 	.word	0x0000045d

0800f274 <ProcessMacCommands.isra.1.constprop.7>:
    uint8_t status = 0;
 800f274:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
 800f276:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f278:	0007      	movs	r7, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f27a:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
 800f27c:	b091      	sub	sp, #68	; 0x44
 800f27e:	9205      	str	r2, [sp, #20]
    uint8_t status = 0;
 800f280:	aa06      	add	r2, sp, #24
 800f282:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f284:	aa07      	add	r2, sp, #28
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
 800f286:	9103      	str	r1, [sp, #12]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f288:	7013      	strb	r3, [r2, #0]
 800f28a:	7053      	strb	r3, [r2, #1]
    bool adrBlockFound = false;
 800f28c:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 800f28e:	9b03      	ldr	r3, [sp, #12]
 800f290:	429c      	cmp	r4, r3
 800f292:	d301      	bcc.n	800f298 <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 800f294:	b011      	add	sp, #68	; 0x44
 800f296:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
 800f298:	5d38      	ldrb	r0, [r7, r4]
 800f29a:	1c66      	adds	r6, r4, #1
 800f29c:	3802      	subs	r0, #2
 800f29e:	b2f6      	uxtb	r6, r6
 800f2a0:	2811      	cmp	r0, #17
 800f2a2:	d8f7      	bhi.n	800f294 <ProcessMacCommands.isra.1.constprop.7+0x20>
 800f2a4:	f7f1 fc74 	bl	8000b90 <__gnu_thumb1_case_shi>
 800f2a8:	00290012 	.word	0x00290012
 800f2ac:	00a60090 	.word	0x00a60090
 800f2b0:	010500ef 	.word	0x010500ef
 800f2b4:	01550132 	.word	0x01550132
 800f2b8:	fff60188 	.word	0xfff60188
 800f2bc:	01c2fff6 	.word	0x01c2fff6
 800f2c0:	fff6fff6 	.word	0xfff6fff6
 800f2c4:	020e0204 	.word	0x020e0204
 800f2c8:	02390229 	.word	0x02390229
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f2cc:	2003      	movs	r0, #3
 800f2ce:	f003 fb89 	bl	80129e4 <LoRaMacConfirmQueueIsCmdActive>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d00f      	beq.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f2d6:	2103      	movs	r1, #3
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f003 fb23 	bl	8012924 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f2de:	2287      	movs	r2, #135	; 0x87
 800f2e0:	5db9      	ldrb	r1, [r7, r6]
 800f2e2:	4bcd      	ldr	r3, [pc, #820]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f2e4:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f2e6:	1ce6      	adds	r6, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f2e8:	3402      	adds	r4, #2
 800f2ea:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f2ec:	b2e4      	uxtb	r4, r4
 800f2ee:	5d39      	ldrb	r1, [r7, r4]
 800f2f0:	4aca      	ldr	r2, [pc, #808]	; (800f61c <ProcessMacCommands.isra.1.constprop.7+0x3a8>)
 800f2f2:	b2f6      	uxtb	r6, r6
 800f2f4:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 800f2f6:	0034      	movs	r4, r6
 800f2f8:	e7c9      	b.n	800f28e <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 800f2fa:	2300      	movs	r3, #0
                uint8_t linkAdrNbRep = 0;
 800f2fc:	250b      	movs	r5, #11
                int8_t linkAdrDatarate = DR_0;
 800f2fe:	aa04      	add	r2, sp, #16
 800f300:	7253      	strb	r3, [r2, #9]
                int8_t linkAdrTxPower = TX_POWER_0;
 800f302:	7293      	strb	r3, [r2, #10]
                uint8_t linkAdrNbRep = 0;
 800f304:	18ad      	adds	r5, r5, r2
                uint8_t linkAdrNbBytesParsed = 0;
 800f306:	aa08      	add	r2, sp, #32
                uint8_t linkAdrNbRep = 0;
 800f308:	702b      	strb	r3, [r5, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800f30a:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 800f30c:	9b02      	ldr	r3, [sp, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d14f      	bne.n	800f3b2 <ProcessMacCommands.isra.1.constprop.7+0x13e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f312:	1e73      	subs	r3, r6, #1
 800f314:	a90c      	add	r1, sp, #48	; 0x30
 800f316:	18fb      	adds	r3, r7, r3
 800f318:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f31a:	9b03      	ldr	r3, [sp, #12]
 800f31c:	3301      	adds	r3, #1
 800f31e:	1b9b      	subs	r3, r3, r6
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800f320:	268c      	movs	r6, #140	; 0x8c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f322:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800f324:	4bbc      	ldr	r3, [pc, #752]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f326:	00f6      	lsls	r6, r6, #3
 800f328:	599b      	ldr	r3, [r3, r6]
 800f32a:	0018      	movs	r0, r3
 800f32c:	30ca      	adds	r0, #202	; 0xca
 800f32e:	7800      	ldrb	r0, [r0, #0]
 800f330:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f332:	0018      	movs	r0, r3
 800f334:	30ff      	adds	r0, #255	; 0xff
 800f336:	7840      	ldrb	r0, [r0, #1]
 800f338:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f33a:	0018      	movs	r0, r3
 800f33c:	30d5      	adds	r0, #213	; 0xd5
 800f33e:	7800      	ldrb	r0, [r0, #0]
 800f340:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f342:	0018      	movs	r0, r3
 800f344:	30d4      	adds	r0, #212	; 0xd4
 800f346:	7800      	ldrb	r0, [r0, #0]
 800f348:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800f34a:	0018      	movs	r0, r3
 800f34c:	30f4      	adds	r0, #244	; 0xf4
 800f34e:	7800      	ldrb	r0, [r0, #0]
 800f350:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800f352:	2088      	movs	r0, #136	; 0x88
 800f354:	0080      	lsls	r0, r0, #2
 800f356:	5818      	ldr	r0, [r3, r0]
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	9201      	str	r2, [sp, #4]
 800f35c:	469c      	mov	ip, r3
 800f35e:	230a      	movs	r3, #10
 800f360:	aa04      	add	r2, sp, #16
 800f362:	189b      	adds	r3, r3, r2
 800f364:	2209      	movs	r2, #9
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800f366:	900c      	str	r0, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800f368:	a804      	add	r0, sp, #16
 800f36a:	1812      	adds	r2, r2, r0
 800f36c:	9500      	str	r5, [sp, #0]
 800f36e:	4660      	mov	r0, ip
 800f370:	f003 fd7f 	bl	8012e72 <RegionLinkAdrReq>
 800f374:	ab04      	add	r3, sp, #16
 800f376:	7218      	strb	r0, [r3, #8]
                    if( ( status & 0x07 ) == 0x07 )
 800f378:	43c0      	mvns	r0, r0
 800f37a:	0743      	lsls	r3, r0, #29
 800f37c:	d10d      	bne.n	800f39a <ProcessMacCommands.isra.1.constprop.7+0x126>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800f37e:	4ba6      	ldr	r3, [pc, #664]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f380:	a904      	add	r1, sp, #16
 800f382:	599b      	ldr	r3, [r3, r6]
 800f384:	7a49      	ldrb	r1, [r1, #9]
 800f386:	001a      	movs	r2, r3
 800f388:	32d5      	adds	r2, #213	; 0xd5
 800f38a:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800f38c:	a904      	add	r1, sp, #16
 800f38e:	7a89      	ldrb	r1, [r1, #10]
 800f390:	3a01      	subs	r2, #1
 800f392:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f394:	782a      	ldrb	r2, [r5, #0]
 800f396:	33f4      	adds	r3, #244	; 0xf4
 800f398:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
 800f39a:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f39c:	ab08      	add	r3, sp, #32
 800f39e:	781e      	ldrb	r6, [r3, #0]
 800f3a0:	2105      	movs	r1, #5
 800f3a2:	0030      	movs	r0, r6
 800f3a4:	f7f1 fc08 	bl	8000bb8 <__udivsi3>
 800f3a8:	b2c0      	uxtb	r0, r0
 800f3aa:	4285      	cmp	r5, r0
 800f3ac:	d304      	bcc.n	800f3b8 <ProcessMacCommands.isra.1.constprop.7+0x144>
                    macIndex += linkAdrNbBytesParsed - 1;
 800f3ae:	19a6      	adds	r6, r4, r6
 800f3b0:	b2f6      	uxtb	r6, r6
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	9302      	str	r3, [sp, #8]
 800f3b6:	e79e      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	a906      	add	r1, sp, #24
 800f3bc:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f3be:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f3c0:	f003 f95a 	bl	8012678 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f3c4:	b2ed      	uxtb	r5, r5
 800f3c6:	e7e9      	b.n	800f39c <ProcessMacCommands.isra.1.constprop.7+0x128>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++];
 800f3c8:	238c      	movs	r3, #140	; 0x8c
 800f3ca:	4a93      	ldr	r2, [pc, #588]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f3cc:	00db      	lsls	r3, r3, #3
 800f3ce:	58d2      	ldr	r2, [r2, r3]
 800f3d0:	5db9      	ldrb	r1, [r7, r6]
 800f3d2:	0013      	movs	r3, r2
 800f3d4:	33ff      	adds	r3, #255	; 0xff
 800f3d6:	7499      	strb	r1, [r3, #18]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	408b      	lsls	r3, r1
 800f3dc:	2187      	movs	r1, #135	; 0x87
 800f3de:	0089      	lsls	r1, r1, #2
 800f3e0:	5253      	strh	r3, [r2, r1]
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++];
 800f3e2:	3402      	adds	r4, #2
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	a907      	add	r1, sp, #28
 800f3e8:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++];
 800f3ea:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f3ec:	f003 f944 	bl	8012678 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f3f0:	0026      	movs	r6, r4
 800f3f2:	e780      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                status = 0x07;
 800f3f4:	2207      	movs	r2, #7
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f3f6:	2107      	movs	r1, #7
                status = 0x07;
 800f3f8:	ab04      	add	r3, sp, #16
 800f3fa:	721a      	strb	r2, [r3, #8]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f3fc:	5dbb      	ldrb	r3, [r7, r6]
 800f3fe:	ad0c      	add	r5, sp, #48	; 0x30
 800f400:	091a      	lsrs	r2, r3, #4
 800f402:	400a      	ands	r2, r1
 800f404:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f406:	220f      	movs	r2, #15
 800f408:	4013      	ands	r3, r2
 800f40a:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f40c:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f40e:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f410:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f412:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f414:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f416:	5cba      	ldrb	r2, [r7, r2]
 800f418:	1d66      	adds	r6, r4, #5
                macIndex++;
 800f41a:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f41c:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f41e:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f420:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f422:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f424:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800f426:	248c      	movs	r4, #140	; 0x8c
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f428:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800f42a:	2264      	movs	r2, #100	; 0x64
 800f42c:	4353      	muls	r3, r2
 800f42e:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800f430:	4b79      	ldr	r3, [pc, #484]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f432:	00e4      	lsls	r4, r4, #3
 800f434:	591b      	ldr	r3, [r3, r4]
 800f436:	0029      	movs	r1, r5
 800f438:	7818      	ldrb	r0, [r3, #0]
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	f003 fd28 	bl	8012e90 <RegionRxParamSetupReq>
 800f440:	ab04      	add	r3, sp, #16
 800f442:	7218      	strb	r0, [r3, #8]
                if( ( status & 0x07 ) == 0x07 )
 800f444:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f446:	b2f6      	uxtb	r6, r6
                if( ( status & 0x07 ) == 0x07 )
 800f448:	4003      	ands	r3, r0
 800f44a:	2b07      	cmp	r3, #7
 800f44c:	d10b      	bne.n	800f466 <ProcessMacCommands.isra.1.constprop.7+0x1f2>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f44e:	4b72      	ldr	r3, [pc, #456]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f450:	7829      	ldrb	r1, [r5, #0]
 800f452:	591b      	ldr	r3, [r3, r4]
 800f454:	001a      	movs	r2, r3
 800f456:	32fc      	adds	r2, #252	; 0xfc
 800f458:	7011      	strb	r1, [r2, #0]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f45a:	6869      	ldr	r1, [r5, #4]
 800f45c:	3a04      	subs	r2, #4
 800f45e:	6011      	str	r1, [r2, #0]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f460:	786a      	ldrb	r2, [r5, #1]
 800f462:	33f5      	adds	r3, #245	; 0xf5
 800f464:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800f466:	a907      	add	r1, sp, #28
 800f468:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f46a:	2201      	movs	r2, #1
 800f46c:	2005      	movs	r0, #5
 800f46e:	f003 f903 	bl	8012678 <LoRaMacCommandsAddCmd>
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f472:	2106      	movs	r1, #6
 800f474:	4b68      	ldr	r3, [pc, #416]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f476:	4a6a      	ldr	r2, [pc, #424]	; (800f620 <ProcessMacCommands.isra.1.constprop.7+0x3ac>)
 800f478:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f47a:	2208      	movs	r2, #8
 800f47c:	4969      	ldr	r1, [pc, #420]	; (800f624 <ProcessMacCommands.isra.1.constprop.7+0x3b0>)
 800f47e:	5c58      	ldrb	r0, [r3, r1]
 800f480:	4302      	orrs	r2, r0
 800f482:	545a      	strb	r2, [r3, r1]
 800f484:	e737      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f486:	23d8      	movs	r3, #216	; 0xd8
 800f488:	4a63      	ldr	r2, [pc, #396]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f48e:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f490:	2b00      	cmp	r3, #0
 800f492:	d003      	beq.n	800f49c <ProcessMacCommands.isra.1.constprop.7+0x228>
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d000      	beq.n	800f49c <ProcessMacCommands.isra.1.constprop.7+0x228>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f49a:	4798      	blx	r3
                macCmdPayload[1] = snr & 0x3F;
 800f49c:	233f      	movs	r3, #63	; 0x3f
 800f49e:	9a05      	ldr	r2, [sp, #20]
                macCmdPayload[0] = batteryLevel;
 800f4a0:	a907      	add	r1, sp, #28
                macCmdPayload[1] = snr & 0x3F;
 800f4a2:	4013      	ands	r3, r2
                macCmdPayload[0] = batteryLevel;
 800f4a4:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f4a6:	2202      	movs	r2, #2
 800f4a8:	2006      	movs	r0, #6
                macCmdPayload[1] = snr & 0x3F;
 800f4aa:	704b      	strb	r3, [r1, #1]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f4ac:	f003 f8e4 	bl	8012678 <LoRaMacCommandsAddCmd>
 800f4b0:	e721      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                status = 0x03;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	ad06      	add	r5, sp, #24
 800f4b6:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 800f4b8:	5dbb      	ldrb	r3, [r7, r6]
 800f4ba:	a908      	add	r1, sp, #32
 800f4bc:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f4be:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	5cf8      	ldrb	r0, [r7, r3]
 800f4c4:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f4ca:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f4cc:	041b      	lsls	r3, r3, #16
 800f4ce:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 800f4d0:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f4d2:	b2c0      	uxtb	r0, r0
 800f4d4:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 800f4d6:	1da6      	adds	r6, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f4d8:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 800f4da:	2064      	movs	r0, #100	; 0x64
 800f4dc:	4343      	muls	r3, r0
 800f4de:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 800f4e0:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f4e2:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 800f4e4:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 800f4e6:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 800f4e8:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 800f4ea:	aa0c      	add	r2, sp, #48	; 0x30
                chParam.DrRange.Value = payload[macIndex++];
 800f4ec:	7213      	strb	r3, [r2, #8]
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800f4ee:	238c      	movs	r3, #140	; 0x8c
                newChannelReq.NewChannel = &chParam;
 800f4f0:	9208      	str	r2, [sp, #32]
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800f4f2:	4a49      	ldr	r2, [pc, #292]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	58d3      	ldr	r3, [r2, r3]
                chParam.DrRange.Value = payload[macIndex++];
 800f4f8:	b2f6      	uxtb	r6, r6
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800f4fa:	7818      	ldrb	r0, [r3, #0]
 800f4fc:	f003 fcd1 	bl	8012ea2 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 800f500:	a907      	add	r1, sp, #28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800f502:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 800f504:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f506:	2201      	movs	r2, #1
 800f508:	2007      	movs	r0, #7
 800f50a:	e7cf      	b.n	800f4ac <ProcessMacCommands.isra.1.constprop.7+0x238>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f50c:	230f      	movs	r3, #15
 800f50e:	5dba      	ldrb	r2, [r7, r6]
 800f510:	3402      	adds	r4, #2
 800f512:	b2e4      	uxtb	r4, r4
 800f514:	401a      	ands	r2, r3
                if( delay == 0 )
 800f516:	d100      	bne.n	800f51a <ProcessMacCommands.isra.1.constprop.7+0x2a6>
                    delay++;
 800f518:	3201      	adds	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800f51a:	238c      	movs	r3, #140	; 0x8c
 800f51c:	4d3e      	ldr	r5, [pc, #248]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
 800f51e:	00db      	lsls	r3, r3, #3
 800f520:	58e9      	ldr	r1, [r5, r3]
 800f522:	3b78      	subs	r3, #120	; 0x78
 800f524:	4353      	muls	r3, r2
 800f526:	000a      	movs	r2, r1
 800f528:	32e4      	adds	r2, #228	; 0xe4
 800f52a:	6013      	str	r3, [r2, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f52c:	22fa      	movs	r2, #250	; 0xfa
 800f52e:	0092      	lsls	r2, r2, #2
 800f530:	189b      	adds	r3, r3, r2
 800f532:	31e8      	adds	r1, #232	; 0xe8
 800f534:	600b      	str	r3, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f536:	2200      	movs	r2, #0
 800f538:	a907      	add	r1, sp, #28
 800f53a:	2008      	movs	r0, #8
 800f53c:	f003 f89c 	bl	8012678 <LoRaMacCommandsAddCmd>
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f540:	2206      	movs	r2, #6
 800f542:	4b37      	ldr	r3, [pc, #220]	; (800f620 <ProcessMacCommands.isra.1.constprop.7+0x3ac>)
 800f544:	54ea      	strb	r2, [r5, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f546:	2308      	movs	r3, #8
 800f548:	4a36      	ldr	r2, [pc, #216]	; (800f624 <ProcessMacCommands.isra.1.constprop.7+0x3b0>)
 800f54a:	5ca9      	ldrb	r1, [r5, r2]
 800f54c:	430b      	orrs	r3, r1
 800f54e:	54ab      	strb	r3, [r5, r2]
 800f550:	e74e      	b.n	800f3f0 <ProcessMacCommands.isra.1.constprop.7+0x17c>
                txParamSetupReq.UplinkDwellTime = 0;
 800f552:	2200      	movs	r2, #0
                uint8_t eirpDwellTime = payload[macIndex++];
 800f554:	3402      	adds	r4, #2
 800f556:	b2e3      	uxtb	r3, r4
 800f558:	9304      	str	r3, [sp, #16]
                txParamSetupReq.UplinkDwellTime = 0;
 800f55a:	ac0c      	add	r4, sp, #48	; 0x30
                uint8_t eirpDwellTime = payload[macIndex++];
 800f55c:	5dbb      	ldrb	r3, [r7, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800f55e:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f560:	3220      	adds	r2, #32
 800f562:	401a      	ands	r2, r3
 800f564:	d126      	bne.n	800f5b4 <ProcessMacCommands.isra.1.constprop.7+0x340>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f566:	7062      	strb	r2, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f568:	06da      	lsls	r2, r3, #27
 800f56a:	d501      	bpl.n	800f570 <ProcessMacCommands.isra.1.constprop.7+0x2fc>
                    txParamSetupReq.UplinkDwellTime = 1;
 800f56c:	2201      	movs	r2, #1
 800f56e:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f570:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800f572:	258c      	movs	r5, #140	; 0x8c
 800f574:	4e28      	ldr	r6, [pc, #160]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f576:	4013      	ands	r3, r2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800f578:	00ed      	lsls	r5, r5, #3
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f57a:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800f57c:	5973      	ldr	r3, [r6, r5]
 800f57e:	0021      	movs	r1, r4
 800f580:	7818      	ldrb	r0, [r3, #0]
 800f582:	f003 fc97 	bl	8012eb4 <RegionTxParamSetupReq>
 800f586:	1c43      	adds	r3, r0, #1
 800f588:	d012      	beq.n	800f5b0 <ProcessMacCommands.isra.1.constprop.7+0x33c>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f58a:	5975      	ldr	r5, [r6, r5]
 800f58c:	7822      	ldrb	r2, [r4, #0]
 800f58e:	002b      	movs	r3, r5
 800f590:	33ff      	adds	r3, #255	; 0xff
 800f592:	705a      	strb	r2, [r3, #1]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f594:	7862      	ldrb	r2, [r4, #1]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f596:	35fc      	adds	r5, #252	; 0xfc
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f598:	709a      	strb	r2, [r3, #2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f59a:	78a3      	ldrb	r3, [r4, #2]
 800f59c:	4a22      	ldr	r2, [pc, #136]	; (800f628 <ProcessMacCommands.isra.1.constprop.7+0x3b4>)
 800f59e:	5cd0      	ldrb	r0, [r2, r3]
 800f5a0:	f7f1 ff82 	bl	80014a8 <__aeabi_ui2f>
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5a4:	2200      	movs	r2, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f5a6:	60a8      	str	r0, [r5, #8]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5a8:	a907      	add	r1, sp, #28
 800f5aa:	2009      	movs	r0, #9
 800f5ac:	f003 f864 	bl	8012678 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 800f5b0:	9e04      	ldr	r6, [sp, #16]
 800f5b2:	e6a0      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	e7d6      	b.n	800f566 <ProcessMacCommands.isra.1.constprop.7+0x2f2>
                status = 0x03;
 800f5b8:	2303      	movs	r3, #3
 800f5ba:	ad06      	add	r5, sp, #24
 800f5bc:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 800f5be:	5dbb      	ldrb	r3, [r7, r6]
 800f5c0:	a90c      	add	r1, sp, #48	; 0x30
 800f5c2:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5c4:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5c6:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5c8:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5ca:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5cc:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5ce:	5cba      	ldrb	r2, [r7, r2]
 800f5d0:	1d66      	adds	r6, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 800f5d2:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5d4:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5d6:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5d8:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5da:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5dc:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800f5de:	4c0e      	ldr	r4, [pc, #56]	; (800f618 <ProcessMacCommands.isra.1.constprop.7+0x3a4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5e0:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800f5e2:	2264      	movs	r2, #100	; 0x64
 800f5e4:	4353      	muls	r3, r2
 800f5e6:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800f5e8:	238c      	movs	r3, #140	; 0x8c
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	58e3      	ldr	r3, [r4, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5ee:	b2f6      	uxtb	r6, r6
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800f5f0:	7818      	ldrb	r0, [r3, #0]
 800f5f2:	f003 fc68 	bl	8012ec6 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 800f5f6:	a907      	add	r1, sp, #28
 800f5f8:	7008      	strb	r0, [r1, #0]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800f5fa:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	200a      	movs	r0, #10
 800f600:	f003 f83a 	bl	8012678 <LoRaMacCommandsAddCmd>
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f604:	2206      	movs	r2, #6
 800f606:	4b06      	ldr	r3, [pc, #24]	; (800f620 <ProcessMacCommands.isra.1.constprop.7+0x3ac>)
 800f608:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f60a:	2308      	movs	r3, #8
 800f60c:	4a05      	ldr	r2, [pc, #20]	; (800f624 <ProcessMacCommands.isra.1.constprop.7+0x3b0>)
 800f60e:	5ca1      	ldrb	r1, [r4, r2]
 800f610:	430b      	orrs	r3, r1
 800f612:	54a3      	strb	r3, [r4, r2]
 800f614:	e66f      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	200010c8 	.word	0x200010c8
 800f61c:	00000439 	.word	0x00000439
 800f620:	00000444 	.word	0x00000444
 800f624:	0000045d 	.word	0x0000045d
 800f628:	080185b4 	.word	0x080185b4
                SysTime_t sysTime = { 0 };
 800f62c:	2208      	movs	r2, #8
 800f62e:	2100      	movs	r1, #0
 800f630:	a808      	add	r0, sp, #32
 800f632:	f7f0 fde5 	bl	8000200 <memset>
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f636:	1ca3      	adds	r3, r4, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	5cfd      	ldrb	r5, [r7, r3]
 800f63c:	1ce3      	adds	r3, r4, #3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f642:	022d      	lsls	r5, r5, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f644:	0409      	lsls	r1, r1, #16
 800f646:	430d      	orrs	r5, r1
 800f648:	1d23      	adds	r3, r4, #4
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f64a:	5db9      	ldrb	r1, [r7, r6]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f64c:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f64e:	430d      	orrs	r5, r1
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f650:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f652:	23fa      	movs	r3, #250	; 0xfa
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800f654:	1da6      	adds	r6, r4, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f656:	3405      	adds	r4, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800f658:	b2e4      	uxtb	r4, r4
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f65a:	5d3a      	ldrb	r2, [r7, r4]
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	4353      	muls	r3, r2
 800f660:	aa04      	add	r2, sp, #16
 800f662:	121b      	asrs	r3, r3, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f664:	0609      	lsls	r1, r1, #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f666:	8293      	strh	r3, [r2, #20]
                sysTimeCurrent = SysTimeGet( );
 800f668:	a80c      	add	r0, sp, #48	; 0x30
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f66a:	430d      	orrs	r5, r1
                sysTimeCurrent = SysTimeGet( );
 800f66c:	f004 ff82 	bl	8014574 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f670:	22d5      	movs	r2, #213	; 0xd5
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f672:	4b37      	ldr	r3, [pc, #220]	; (800f750 <ProcessMacCommands.isra.1.constprop.7+0x4dc>)
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f674:	0092      	lsls	r2, r2, #2
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f676:	18e9      	adds	r1, r5, r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f678:	4b36      	ldr	r3, [pc, #216]	; (800f754 <ProcessMacCommands.isra.1.constprop.7+0x4e0>)
 800f67a:	a80a      	add	r0, sp, #40	; 0x28
 800f67c:	189a      	adds	r2, r3, r2
 800f67e:	6812      	ldr	r2, [r2, #0]
 800f680:	9108      	str	r1, [sp, #32]
 800f682:	9200      	str	r2, [sp, #0]
 800f684:	22d4      	movs	r2, #212	; 0xd4
 800f686:	0092      	lsls	r2, r2, #2
 800f688:	589b      	ldr	r3, [r3, r2]
 800f68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f68c:	f004 ff3e 	bl	801450c <SysTimeSub>
 800f690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f692:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f69a:	a808      	add	r0, sp, #32
 800f69c:	f004 ff1c 	bl	80144d8 <SysTimeAdd>
                SysTimeSet( sysTime );
 800f6a0:	9808      	ldr	r0, [sp, #32]
 800f6a2:	9909      	ldr	r1, [sp, #36]	; 0x24
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800f6a4:	b2f6      	uxtb	r6, r6
                SysTimeSet( sysTime );
 800f6a6:	f004 ff47 	bl	8014538 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800f6aa:	f002 f9a8 	bl	80119fe <LoRaMacClassBDeviceTimeAns>
 800f6ae:	e622      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800f6b0:	4b29      	ldr	r3, [pc, #164]	; (800f758 <ProcessMacCommands.isra.1.constprop.7+0x4e4>)
 800f6b2:	4a28      	ldr	r2, [pc, #160]	; (800f754 <ProcessMacCommands.isra.1.constprop.7+0x4e0>)
 800f6b4:	5cd3      	ldrb	r3, [r2, r3]
 800f6b6:	3b03      	subs	r3, #3
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d800      	bhi.n	800f6be <ProcessMacCommands.isra.1.constprop.7+0x44a>
 800f6bc:	e61b      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                    LoRaMacClassBPingSlotInfoAns( );
 800f6be:	f002 f99a 	bl	80119f6 <LoRaMacClassBPingSlotInfoAns>
 800f6c2:	e618      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                frequency = ( uint32_t )payload[macIndex++];
 800f6c4:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	5cf9      	ldrb	r1, [r7, r3]
 800f6ca:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f6d0:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f6d2:	041b      	lsls	r3, r3, #16
 800f6d4:	4319      	orrs	r1, r3
                frequency *= 100;
 800f6d6:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 800f6d8:	5dba      	ldrb	r2, [r7, r6]
                datarate = payload[macIndex++] & 0x0F;
 800f6da:	1d66      	adds	r6, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f6dc:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 800f6de:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f6e0:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 800f6e2:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 800f6e4:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f6e6:	3b55      	subs	r3, #85	; 0x55
 800f6e8:	4018      	ands	r0, r3
 800f6ea:	f002 f985 	bl	80119f8 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800f6ee:	a907      	add	r1, sp, #28
 800f6f0:	7008      	strb	r0, [r1, #0]
                datarate = payload[macIndex++] & 0x0F;
 800f6f2:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	2011      	movs	r0, #17
 800f6f8:	e6d8      	b.n	800f4ac <ProcessMacCommands.isra.1.constprop.7+0x238>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f6fa:	1ca3      	adds	r3, r4, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	5cf8      	ldrb	r0, [r7, r3]
 800f700:	5dbb      	ldrb	r3, [r7, r6]
 800f702:	0200      	lsls	r0, r0, #8
 800f704:	4318      	orrs	r0, r3
                beaconTimingChannel = payload[macIndex++];
 800f706:	1d26      	adds	r6, r4, #4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f708:	4b14      	ldr	r3, [pc, #80]	; (800f75c <ProcessMacCommands.isra.1.constprop.7+0x4e8>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f70a:	3403      	adds	r4, #3
                beaconTimingChannel = payload[macIndex++];
 800f70c:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f70e:	5d39      	ldrb	r1, [r7, r4]
 800f710:	681a      	ldr	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800f712:	b2f6      	uxtb	r6, r6
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f714:	f002 f972 	bl	80119fc <LoRaMacClassBBeaconTimingAns>
 800f718:	e5ed      	b.n	800f2f6 <ProcessMacCommands.isra.1.constprop.7+0x82>
                    frequency = ( uint32_t )payload[macIndex++];
 800f71a:	5dba      	ldrb	r2, [r7, r6]
 800f71c:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f71e:	1d26      	adds	r6, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f720:	3403      	adds	r4, #3
 800f722:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f724:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f726:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f728:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f72a:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f72c:	041b      	lsls	r3, r3, #16
 800f72e:	4318      	orrs	r0, r3
                    frequency *= 100;
 800f730:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f732:	4310      	orrs	r0, r2
                    frequency *= 100;
 800f734:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f736:	f002 f963 	bl	8011a00 <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f73a:	b2f6      	uxtb	r6, r6
 800f73c:	a907      	add	r1, sp, #28
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f73e:	2800      	cmp	r0, #0
 800f740:	d004      	beq.n	800f74c <ProcessMacCommands.isra.1.constprop.7+0x4d8>
                        macCmdPayload[0] = 1;
 800f742:	2301      	movs	r3, #1
 800f744:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f746:	2201      	movs	r2, #1
 800f748:	2013      	movs	r0, #19
 800f74a:	e6af      	b.n	800f4ac <ProcessMacCommands.isra.1.constprop.7+0x238>
                        macCmdPayload[0] = 0;
 800f74c:	7008      	strb	r0, [r1, #0]
 800f74e:	e7fa      	b.n	800f746 <ProcessMacCommands.isra.1.constprop.7+0x4d2>
 800f750:	12d53d80 	.word	0x12d53d80
 800f754:	200010c8 	.word	0x200010c8
 800f758:	0000045c 	.word	0x0000045c
 800f75c:	2000225c 	.word	0x2000225c

0800f760 <PrepareFrame>:
{
 800f760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f762:	b087      	sub	sp, #28
 800f764:	001e      	movs	r6, r3
 800f766:	ab0c      	add	r3, sp, #48	; 0x30
 800f768:	881d      	ldrh	r5, [r3, #0]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800f76a:	238c      	movs	r3, #140	; 0x8c
    MacCtx.PktBufferLen = 0;
 800f76c:	2700      	movs	r7, #0
 800f76e:	4c5f      	ldr	r4, [pc, #380]	; (800f8ec <PrepareFrame+0x18c>)
    MacCtx.NvmCtx->NodeAckRequested = false;
 800f770:	00db      	lsls	r3, r3, #3
 800f772:	58e3      	ldr	r3, [r4, r3]
{
 800f774:	9202      	str	r2, [sp, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800f776:	4a5e      	ldr	r2, [pc, #376]	; (800f8f0 <PrepareFrame+0x190>)
 800f778:	9303      	str	r3, [sp, #12]
 800f77a:	549f      	strb	r7, [r3, r2]
        fBufferSize = 0;
 800f77c:	0033      	movs	r3, r6
 800f77e:	1e5a      	subs	r2, r3, #1
 800f780:	4193      	sbcs	r3, r2
{
 800f782:	9000      	str	r0, [sp, #0]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f784:	0020      	movs	r0, r4
        fBufferSize = 0;
 800f786:	425b      	negs	r3, r3
 800f788:	401d      	ands	r5, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f78a:	3041      	adds	r0, #65	; 0x41
{
 800f78c:	9101      	str	r1, [sp, #4]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f78e:	002a      	movs	r2, r5
 800f790:	30ff      	adds	r0, #255	; 0xff
 800f792:	0031      	movs	r1, r6
    MacCtx.PktBufferLen = 0;
 800f794:	8127      	strh	r7, [r4, #8]
    uint32_t fCntUp = 0;
 800f796:	9704      	str	r7, [sp, #16]
    size_t macCmdsSize = 0;
 800f798:	9705      	str	r7, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f79a:	f004 fcba 	bl	8014112 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f79e:	4b55      	ldr	r3, [pc, #340]	; (800f8f4 <PrepareFrame+0x194>)
 800f7a0:	b2ea      	uxtb	r2, r5
 800f7a2:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f7a4:	9b00      	ldr	r3, [sp, #0]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	72a3      	strb	r3, [r4, #10]
    switch( macHdr->Bits.MType )
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	095b      	lsrs	r3, r3, #5
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d041      	beq.n	800f838 <PrepareFrame+0xd8>
 800f7b4:	2b07      	cmp	r3, #7
 800f7b6:	d100      	bne.n	800f7ba <PrepareFrame+0x5a>
 800f7b8:	e089      	b.n	800f8ce <PrepareFrame+0x16e>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f7ba:	2002      	movs	r0, #2
    switch( macHdr->Bits.MType )
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	d139      	bne.n	800f834 <PrepareFrame+0xd4>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f7c0:	0025      	movs	r5, r4
 800f7c2:	2304      	movs	r3, #4
 800f7c4:	35ff      	adds	r5, #255	; 0xff
 800f7c6:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f7c8:	0026      	movs	r6, r4
 800f7ca:	0023      	movs	r3, r4
 800f7cc:	36fc      	adds	r6, #252	; 0xfc
 800f7ce:	330a      	adds	r3, #10
 800f7d0:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f7d2:	23ff      	movs	r3, #255	; 0xff
 800f7d4:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f7d6:	9b00      	ldr	r3, [sp, #0]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f7d8:	4669      	mov	r1, sp
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f7da:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800f7dc:	278c      	movs	r7, #140	; 0x8c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f7de:	75ab      	strb	r3, [r5, #22]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f7e0:	2398      	movs	r3, #152	; 0x98
 800f7e2:	7a09      	ldrb	r1, [r1, #8]
 800f7e4:	005b      	lsls	r3, r3, #1
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800f7e6:	00ff      	lsls	r7, r7, #3
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f7e8:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800f7ea:	59e3      	ldr	r3, [r4, r7]
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800f7ec:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800f7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f0:	61f3      	str	r3, [r6, #28]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f7f2:	9b01      	ldr	r3, [sp, #4]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	776b      	strb	r3, [r5, #29]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f7f8:	239c      	movs	r3, #156	; 0x9c
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f7fe:	0023      	movs	r3, r4
 800f800:	3341      	adds	r3, #65	; 0x41
 800f802:	33ff      	adds	r3, #255	; 0xff
 800f804:	63b3      	str	r3, [r6, #56]	; 0x38
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800f806:	f003 f9e1 	bl	8012bcc <LoRaMacGetFCntUp>
 800f80a:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f80c:	2013      	movs	r0, #19
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d110      	bne.n	800f834 <PrepareFrame+0xd4>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
 800f812:	0021      	movs	r1, r4
 800f814:	9a04      	ldr	r2, [sp, #16]
 800f816:	31fe      	adds	r1, #254	; 0xfe
 800f818:	840a      	strh	r2, [r1, #32]
            MacCtx.McpsConfirm.NbRetries = 0;
 800f81a:	4937      	ldr	r1, [pc, #220]	; (800f8f8 <PrepareFrame+0x198>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f81c:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.NbRetries = 0;
 800f81e:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.AckReceived = false;
 800f820:	3901      	subs	r1, #1
 800f822:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800f824:	2385      	movs	r3, #133	; 0x85
 800f826:	00db      	lsls	r3, r3, #3
 800f828:	50e2      	str	r2, [r4, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f82a:	f002 ffc3 	bl	80127b4 <LoRaMacCommandsGetSizeSerializedCmds>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d009      	beq.n	800f846 <PrepareFrame+0xe6>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f832:	2014      	movs	r0, #20
}
 800f834:	b007      	add	sp, #28
 800f836:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NvmCtx->NodeAckRequested = true;
 800f838:	238c      	movs	r3, #140	; 0x8c
 800f83a:	2101      	movs	r1, #1
 800f83c:	00db      	lsls	r3, r3, #3
 800f83e:	58e3      	ldr	r3, [r4, r3]
 800f840:	482b      	ldr	r0, [pc, #172]	; (800f8f0 <PrepareFrame+0x190>)
 800f842:	5419      	strb	r1, [r3, r0]
 800f844:	e7bc      	b.n	800f7c0 <PrepareFrame+0x60>
            if( macCmdsSize > 0 )
 800f846:	9b05      	ldr	r3, [sp, #20]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d101      	bne.n	800f850 <PrepareFrame+0xf0>
    return LORAMAC_STATUS_OK;
 800f84c:	2000      	movs	r0, #0
 800f84e:	e7f1      	b.n	800f834 <PrepareFrame+0xd4>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800f850:	20d5      	movs	r0, #213	; 0xd5
 800f852:	59e3      	ldr	r3, [r4, r7]
 800f854:	5618      	ldrsb	r0, [r3, r0]
 800f856:	f7ff fa67 	bl	800ed28 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f85a:	4b26      	ldr	r3, [pc, #152]	; (800f8f4 <PrepareFrame+0x194>)
 800f85c:	5ce3      	ldrb	r3, [r4, r3]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d020      	beq.n	800f8a4 <PrepareFrame+0x144>
 800f862:	9b05      	ldr	r3, [sp, #20]
 800f864:	2b0f      	cmp	r3, #15
 800f866:	d813      	bhi.n	800f890 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800f868:	0022      	movs	r2, r4
 800f86a:	3221      	adds	r2, #33	; 0x21
 800f86c:	32ff      	adds	r2, #255	; 0xff
 800f86e:	a905      	add	r1, sp, #20
 800f870:	200f      	movs	r0, #15
 800f872:	f002 ffab 	bl	80127cc <LoRaMacCommandsSerializeCmds>
 800f876:	2800      	cmp	r0, #0
 800f878:	d1db      	bne.n	800f832 <PrepareFrame+0xd2>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800f87a:	210f      	movs	r1, #15
 800f87c:	9b01      	ldr	r3, [sp, #4]
 800f87e:	9a05      	ldr	r2, [sp, #20]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	400a      	ands	r2, r1
 800f884:	438b      	bics	r3, r1
 800f886:	4313      	orrs	r3, r2
 800f888:	9a01      	ldr	r2, [sp, #4]
 800f88a:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f88c:	776b      	strb	r3, [r5, #29]
 800f88e:	e7d1      	b.n	800f834 <PrepareFrame+0xd4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f890:	59e2      	ldr	r2, [r4, r7]
 800f892:	a905      	add	r1, sp, #20
 800f894:	3217      	adds	r2, #23
 800f896:	32ff      	adds	r2, #255	; 0xff
 800f898:	f002 ff98 	bl	80127cc <LoRaMacCommandsSerializeCmds>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d1c8      	bne.n	800f832 <PrepareFrame+0xd2>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800f8a0:	300b      	adds	r0, #11
 800f8a2:	e7c7      	b.n	800f834 <PrepareFrame+0xd4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f8a4:	59e2      	ldr	r2, [r4, r7]
 800f8a6:	a905      	add	r1, sp, #20
 800f8a8:	3217      	adds	r2, #23
 800f8aa:	32ff      	adds	r2, #255	; 0xff
 800f8ac:	f002 ff8e 	bl	80127cc <LoRaMacCommandsSerializeCmds>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d1be      	bne.n	800f832 <PrepareFrame+0xd2>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800f8b4:	2398      	movs	r3, #152	; 0x98
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800f8ba:	59e3      	ldr	r3, [r4, r7]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f8bc:	aa04      	add	r2, sp, #16
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800f8be:	3317      	adds	r3, #23
 800f8c0:	33ff      	adds	r3, #255	; 0xff
 800f8c2:	63b3      	str	r3, [r6, #56]	; 0x38
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f8c4:	239c      	movs	r3, #156	; 0x9c
 800f8c6:	7912      	ldrb	r2, [r2, #4]
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	54e2      	strb	r2, [r4, r3]
 800f8cc:	e7b2      	b.n	800f834 <PrepareFrame+0xd4>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800f8ce:	2e00      	cmp	r6, #0
 800f8d0:	d0bc      	beq.n	800f84c <PrepareFrame+0xec>
 800f8d2:	2a00      	cmp	r2, #0
 800f8d4:	d0ba      	beq.n	800f84c <PrepareFrame+0xec>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800f8d6:	0020      	movs	r0, r4
 800f8d8:	b2ea      	uxtb	r2, r5
 800f8da:	300b      	adds	r0, #11
 800f8dc:	0031      	movs	r1, r6
 800f8de:	f004 fc18 	bl	8014112 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800f8e2:	4b04      	ldr	r3, [pc, #16]	; (800f8f4 <PrepareFrame+0x194>)
 800f8e4:	5ce3      	ldrb	r3, [r4, r3]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	8123      	strh	r3, [r4, #8]
 800f8ea:	e7af      	b.n	800f84c <PrepareFrame+0xec>
 800f8ec:	200010c8 	.word	0x200010c8
 800f8f0:	00000219 	.word	0x00000219
 800f8f4:	0000023f 	.word	0x0000023f
 800f8f8:	00000421 	.word	0x00000421

0800f8fc <SendFrameOnChannel>:
{
 800f8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8fe:	b089      	sub	sp, #36	; 0x24
    int8_t txPower = 0;
 800f900:	ab02      	add	r3, sp, #8
 800f902:	1dde      	adds	r6, r3, #7
 800f904:	2300      	movs	r3, #0
 800f906:	7033      	strb	r3, [r6, #0]
    txConfig.Channel = channel;
 800f908:	466b      	mov	r3, sp
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f90a:	278c      	movs	r7, #140	; 0x8c
{
 800f90c:	9001      	str	r0, [sp, #4]
    txConfig.Channel = channel;
 800f90e:	791b      	ldrb	r3, [r3, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f910:	4c35      	ldr	r4, [pc, #212]	; (800f9e8 <SendFrameOnChannel+0xec>)
    txConfig.Channel = channel;
 800f912:	ad04      	add	r5, sp, #16
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f914:	00ff      	lsls	r7, r7, #3
    txConfig.Channel = channel;
 800f916:	702b      	strb	r3, [r5, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f918:	59e3      	ldr	r3, [r4, r7]
 800f91a:	001a      	movs	r2, r3
 800f91c:	32d5      	adds	r2, #213	; 0xd5
 800f91e:	7812      	ldrb	r2, [r2, #0]
 800f920:	706a      	strb	r2, [r5, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f922:	001a      	movs	r2, r3
 800f924:	32d4      	adds	r2, #212	; 0xd4
 800f926:	7812      	ldrb	r2, [r2, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800f928:	33fc      	adds	r3, #252	; 0xfc
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f92a:	70aa      	strb	r2, [r5, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800f92c:	689a      	ldr	r2, [r3, #8]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800f92e:	68db      	ldr	r3, [r3, #12]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800f930:	606a      	str	r2, [r5, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800f932:	60ab      	str	r3, [r5, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f934:	8923      	ldrh	r3, [r4, #8]
 800f936:	81ab      	strh	r3, [r5, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f938:	f002 f84c 	bl	80119d4 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f93c:	230f      	movs	r3, #15
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f93e:	2800      	cmp	r0, #0
 800f940:	d109      	bne.n	800f956 <SendFrameOnChannel+0x5a>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f942:	59e3      	ldr	r3, [r4, r7]
 800f944:	33c8      	adds	r3, #200	; 0xc8
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d10d      	bne.n	800f968 <SendFrameOnChannel+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f94c:	f002 f844 	bl	80119d8 <LoRaMacClassBIsPingExpected>
 800f950:	2800      	cmp	r0, #0
 800f952:	d003      	beq.n	800f95c <SendFrameOnChannel+0x60>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f954:	2310      	movs	r3, #16
}
 800f956:	0018      	movs	r0, r3
 800f958:	b009      	add	sp, #36	; 0x24
 800f95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f95c:	f002 f83e 	bl	80119dc <LoRaMacClassBIsMulticastExpected>
 800f960:	2800      	cmp	r0, #0
 800f962:	d1f7      	bne.n	800f954 <SendFrameOnChannel+0x58>
            LoRaMacClassBStopRxSlots( );
 800f964:	f002 f850 	bl	8011a08 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f968:	278c      	movs	r7, #140	; 0x8c
 800f96a:	2380      	movs	r3, #128	; 0x80
 800f96c:	00ff      	lsls	r7, r7, #3
 800f96e:	59e2      	ldr	r2, [r4, r7]
 800f970:	00db      	lsls	r3, r3, #3
 800f972:	18e3      	adds	r3, r4, r3
 800f974:	0029      	movs	r1, r5
 800f976:	7810      	ldrb	r0, [r2, #0]
 800f978:	0032      	movs	r2, r6
 800f97a:	f003 fa6e 	bl	8012e5a <RegionTxConfig>
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
 800f97e:	2001      	movs	r0, #1
 800f980:	f003 f80e 	bl	80129a0 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f984:	2201      	movs	r2, #1
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f986:	2580      	movs	r5, #128	; 0x80
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f988:	4b18      	ldr	r3, [pc, #96]	; (800f9ec <SendFrameOnChannel+0xf0>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f98a:	00ed      	lsls	r5, r5, #3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f98c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f98e:	59e3      	ldr	r3, [r4, r7]
 800f990:	33d5      	adds	r3, #213	; 0xd5
 800f992:	781a      	ldrb	r2, [r3, #0]
 800f994:	4b16      	ldr	r3, [pc, #88]	; (800f9f0 <SendFrameOnChannel+0xf4>)
 800f996:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 800f998:	7832      	ldrb	r2, [r6, #0]
 800f99a:	4b16      	ldr	r3, [pc, #88]	; (800f9f4 <SendFrameOnChannel+0xf8>)
 800f99c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 800f99e:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <SendFrameOnChannel+0xfc>)
 800f9a0:	9a01      	ldr	r2, [sp, #4]
 800f9a2:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f9a4:	5963      	ldr	r3, [r4, r5]
 800f9a6:	4a15      	ldr	r2, [pc, #84]	; (800f9fc <SendFrameOnChannel+0x100>)
 800f9a8:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f9aa:	4a15      	ldr	r2, [pc, #84]	; (800fa00 <SendFrameOnChannel+0x104>)
 800f9ac:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f9ae:	f002 f817 	bl	80119e0 <LoRaMacClassBIsBeaconModeActive>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d110      	bne.n	800f9d8 <SendFrameOnChannel+0xdc>
    LoRaMacClassBHaltBeaconing( );
 800f9b6:	f002 f816 	bl	80119e6 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f9ba:	22d6      	movs	r2, #214	; 0xd6
 800f9bc:	2302      	movs	r3, #2
 800f9be:	480a      	ldr	r0, [pc, #40]	; (800f9e8 <SendFrameOnChannel+0xec>)
 800f9c0:	0092      	lsls	r2, r2, #2
 800f9c2:	5881      	ldr	r1, [r0, r2]
 800f9c4:	430b      	orrs	r3, r1
 800f9c6:	5083      	str	r3, [r0, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f9c8:	4b0e      	ldr	r3, [pc, #56]	; (800fa04 <SendFrameOnChannel+0x108>)
 800f9ca:	7a01      	ldrb	r1, [r0, #8]
 800f9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ce:	300a      	adds	r0, #10
 800f9d0:	9301      	str	r3, [sp, #4]
 800f9d2:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	e7be      	b.n	800f956 <SendFrameOnChannel+0x5a>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f9d8:	5960      	ldr	r0, [r4, r5]
 800f9da:	f002 f813 	bl	8011a04 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d0e9      	beq.n	800f9b6 <SendFrameOnChannel+0xba>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f9e2:	2311      	movs	r3, #17
 800f9e4:	e7b7      	b.n	800f956 <SendFrameOnChannel+0x5a>
 800f9e6:	46c0      	nop			; (mov r8, r8)
 800f9e8:	200010c8 	.word	0x200010c8
 800f9ec:	0000041d 	.word	0x0000041d
 800f9f0:	0000041e 	.word	0x0000041e
 800f9f4:	0000041f 	.word	0x0000041f
 800f9f8:	0000042c 	.word	0x0000042c
 800f9fc:	00000424 	.word	0x00000424
 800fa00:	00000434 	.word	0x00000434
 800fa04:	08018acc 	.word	0x08018acc

0800fa08 <ScheduleTx>:
    TimerTime_t dutyCycleTimeOff = 0;
 800fa08:	2300      	movs	r3, #0
{
 800fa0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa0c:	b08b      	sub	sp, #44	; 0x2c
    TimerTime_t dutyCycleTimeOff = 0;
 800fa0e:	9304      	str	r3, [sp, #16]
    size_t macCmdsSize = 0;
 800fa10:	9305      	str	r3, [sp, #20]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800fa12:	238c      	movs	r3, #140	; 0x8c
 800fa14:	4c89      	ldr	r4, [pc, #548]	; (800fc3c <ScheduleTx+0x234>)
 800fa16:	00db      	lsls	r3, r3, #3
{
 800fa18:	9003      	str	r0, [sp, #12]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800fa1a:	58e2      	ldr	r2, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa1c:	2089      	movs	r0, #137	; 0x89
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800fa1e:	0013      	movs	r3, r2
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa20:	0080      	lsls	r0, r0, #2
 800fa22:	5c12      	ldrb	r2, [r2, r0]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800fa24:	33ff      	adds	r3, #255	; 0xff
 800fa26:	7d59      	ldrb	r1, [r3, #21]
 800fa28:	ad07      	add	r5, sp, #28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa2a:	2a00      	cmp	r2, #0
 800fa2c:	d15e      	bne.n	800faec <ScheduleTx+0xe4>
        calcBackOff.Joined = true;
 800fa2e:	702a      	strb	r2, [r5, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800fa30:	7cdb      	ldrb	r3, [r3, #19]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fa32:	2680      	movs	r6, #128	; 0x80
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800fa34:	70ab      	strb	r3, [r5, #2]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800fa36:	23d3      	movs	r3, #211	; 0xd3
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	58e0      	ldr	r0, [r4, r3]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fa3c:	00f6      	lsls	r6, r6, #3
    calcBackOff.Channel = channel;
 800fa3e:	70e9      	strb	r1, [r5, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800fa40:	f004 fb33 	bl	80140aa <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fa44:	59a3      	ldr	r3, [r4, r6]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800fa46:	278c      	movs	r7, #140	; 0x8c
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fa48:	60ab      	str	r3, [r5, #8]
    calcBackOff.LastTxIsJoinRequest = MacCtx.LastTxIsJoinRequest;
 800fa4a:	23d2      	movs	r3, #210	; 0xd2
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800fa4c:	6068      	str	r0, [r5, #4]
    calcBackOff.LastTxIsJoinRequest = MacCtx.LastTxIsJoinRequest;
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	5ce3      	ldrb	r3, [r4, r3]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800fa52:	00ff      	lsls	r7, r7, #3
    calcBackOff.LastTxIsJoinRequest = MacCtx.LastTxIsJoinRequest;
 800fa54:	706b      	strb	r3, [r5, #1]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800fa56:	59e3      	ldr	r3, [r4, r7]
 800fa58:	0029      	movs	r1, r5
 800fa5a:	7818      	ldrb	r0, [r3, #0]
 800fa5c:	f003 fa45 	bl	8012eea <RegionCalcBackOff>
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fa60:	2287      	movs	r2, #135	; 0x87
 800fa62:	59e3      	ldr	r3, [r4, r7]
 800fa64:	0092      	lsls	r2, r2, #2
 800fa66:	5a99      	ldrh	r1, [r3, r2]
 800fa68:	59a2      	ldr	r2, [r4, r6]
 800fa6a:	3901      	subs	r1, #1
 800fa6c:	434a      	muls	r2, r1
 800fa6e:	21d1      	movs	r1, #209	; 0xd1
 800fa70:	0089      	lsls	r1, r1, #2
 800fa72:	5062      	str	r2, [r4, r1]
    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800fa74:	9207      	str	r2, [sp, #28]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fa76:	001a      	movs	r2, r3
 800fa78:	32d5      	adds	r2, #213	; 0xd5
 800fa7a:	7812      	ldrb	r2, [r2, #0]
 800fa7c:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800fa7e:	001a      	movs	r2, r3
 800fa80:	32ff      	adds	r2, #255	; 0xff
 800fa82:	7cd2      	ldrb	r2, [r2, #19]
 800fa84:	72aa      	strb	r2, [r5, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa86:	2289      	movs	r2, #137	; 0x89
 800fa88:	0092      	lsls	r2, r2, #2
 800fa8a:	5c9a      	ldrb	r2, [r3, r2]
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d12f      	bne.n	800faf0 <ScheduleTx+0xe8>
        nextChan.Joined = true;
 800fa90:	726a      	strb	r2, [r5, #9]
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800fa92:	22d0      	movs	r2, #208	; 0xd0
 800fa94:	0092      	lsls	r2, r2, #2
 800fa96:	58a2      	ldr	r2, [r4, r2]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800fa98:	7818      	ldrb	r0, [r3, #0]
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800fa9a:	606a      	str	r2, [r5, #4]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800fa9c:	001a      	movs	r2, r3
 800fa9e:	23d1      	movs	r3, #209	; 0xd1
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	18e3      	adds	r3, r4, r3
 800faa4:	3214      	adds	r2, #20
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	0029      	movs	r1, r5
 800faaa:	32ff      	adds	r2, #255	; 0xff
 800faac:	ab04      	add	r3, sp, #16
 800faae:	f003 fa23 	bl	8012ef8 <RegionNextChannel>
 800fab2:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800fab4:	d01e      	beq.n	800faf4 <ScheduleTx+0xec>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fab6:	280c      	cmp	r0, #12
 800fab8:	d115      	bne.n	800fae6 <ScheduleTx+0xde>
 800faba:	9b03      	ldr	r3, [sp, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d012      	beq.n	800fae6 <ScheduleTx+0xde>
            return LORAMAC_STATUS_OK;
 800fac0:	2500      	movs	r5, #0
            if( dutyCycleTimeOff != 0 )
 800fac2:	9904      	ldr	r1, [sp, #16]
 800fac4:	42a9      	cmp	r1, r5
 800fac6:	d00e      	beq.n	800fae6 <ScheduleTx+0xde>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fac8:	22d6      	movs	r2, #214	; 0xd6
 800faca:	2320      	movs	r3, #32
 800facc:	0092      	lsls	r2, r2, #2
 800face:	58a0      	ldr	r0, [r4, r2]
 800fad0:	4303      	orrs	r3, r0
 800fad2:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800fad4:	23e0      	movs	r3, #224	; 0xe0
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	18e4      	adds	r4, r4, r3
 800fada:	0020      	movs	r0, r4
 800fadc:	f004 face 	bl	801407c <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fae0:	0020      	movs	r0, r4
 800fae2:	f004 fa2d 	bl	8013f40 <TimerStart>
}
 800fae6:	0028      	movs	r0, r5
 800fae8:	b00b      	add	sp, #44	; 0x2c
 800faea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcBackOff.Joined = true;
 800faec:	2201      	movs	r2, #1
 800faee:	e79e      	b.n	800fa2e <ScheduleTx+0x26>
        nextChan.Joined = true;
 800faf0:	2201      	movs	r2, #1
 800faf2:	e7cd      	b.n	800fa90 <ScheduleTx+0x88>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800faf4:	268c      	movs	r6, #140	; 0x8c
 800faf6:	00f6      	lsls	r6, r6, #3
 800faf8:	59a1      	ldr	r1, [r4, r6]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800fafa:	000b      	movs	r3, r1
 800fafc:	000a      	movs	r2, r1
 800fafe:	33f5      	adds	r3, #245	; 0xf5
 800fb00:	32d5      	adds	r2, #213	; 0xd5
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fb02:	780d      	ldrb	r5, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	7812      	ldrb	r2, [r2, #0]
 800fb08:	31ff      	adds	r1, #255	; 0xff
 800fb0a:	b25b      	sxtb	r3, r3
 800fb0c:	b252      	sxtb	r2, r2
 800fb0e:	7889      	ldrb	r1, [r1, #2]
 800fb10:	0028      	movs	r0, r5
 800fb12:	f003 fa05 	bl	8012f20 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800fb16:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fb18:	b241      	sxtb	r1, r0
 800fb1a:	001f      	movs	r7, r3
 800fb1c:	33dc      	adds	r3, #220	; 0xdc
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	23f1      	movs	r3, #241	; 0xf1
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	18e3      	adds	r3, r4, r3
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	37d8      	adds	r7, #216	; 0xd8
 800fb2a:	0028      	movs	r0, r5
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	f003 f97e 	bl	8012e2e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fb32:	59a3      	ldr	r3, [r4, r6]
 800fb34:	7818      	ldrb	r0, [r3, #0]
 800fb36:	001d      	movs	r5, r3
 800fb38:	001a      	movs	r2, r3
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800fb3a:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fb3c:	23f6      	movs	r3, #246	; 0xf6
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800fb3e:	31fc      	adds	r1, #252	; 0xfc
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	7809      	ldrb	r1, [r1, #0]
 800fb44:	18e3      	adds	r3, r4, r3
 800fb46:	32dc      	adds	r2, #220	; 0xdc
 800fb48:	7812      	ldrb	r2, [r2, #0]
 800fb4a:	35d8      	adds	r5, #216	; 0xd8
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	682b      	ldr	r3, [r5, #0]
 800fb50:	b249      	sxtb	r1, r1
 800fb52:	f003 f96c 	bl	8012e2e <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fb56:	2289      	movs	r2, #137	; 0x89
 800fb58:	59a3      	ldr	r3, [r4, r6]
 800fb5a:	0092      	lsls	r2, r2, #2
 800fb5c:	5c9a      	ldrb	r2, [r3, r2]
 800fb5e:	2a00      	cmp	r2, #0
 800fb60:	d125      	bne.n	800fbae <ScheduleTx+0x1a6>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fb62:	001a      	movs	r2, r3
 800fb64:	21f4      	movs	r1, #244	; 0xf4
 800fb66:	32ec      	adds	r2, #236	; 0xec
 800fb68:	0089      	lsls	r1, r1, #2
 800fb6a:	5861      	ldr	r1, [r4, r1]
 800fb6c:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fb6e:	33f0      	adds	r3, #240	; 0xf0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fb70:	1852      	adds	r2, r2, r1
 800fb72:	21ef      	movs	r1, #239	; 0xef
 800fb74:	0089      	lsls	r1, r1, #2
 800fb76:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fb78:	22f9      	movs	r2, #249	; 0xf9
 800fb7a:	0092      	lsls	r2, r2, #2
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	58a2      	ldr	r2, [r4, r2]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800fb80:	27d5      	movs	r7, #213	; 0xd5
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fb82:	189b      	adds	r3, r3, r2
 800fb84:	22f0      	movs	r2, #240	; 0xf0
 800fb86:	0092      	lsls	r2, r2, #2
 800fb88:	50a3      	str	r3, [r4, r2]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800fb8a:	238c      	movs	r3, #140	; 0x8c
 800fb8c:	00db      	lsls	r3, r3, #3
 800fb8e:	58e3      	ldr	r3, [r4, r3]
    switch( MacCtx.TxMsg.Type )
 800fb90:	0026      	movs	r6, r4
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800fb92:	57df      	ldrsb	r7, [r3, r7]
 800fb94:	33ff      	adds	r3, #255	; 0xff
 800fb96:	7d1b      	ldrb	r3, [r3, #20]
    switch( MacCtx.TxMsg.Type )
 800fb98:	36ff      	adds	r6, #255	; 0xff
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800fb9a:	9303      	str	r3, [sp, #12]
    uint32_t fCntUp = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9306      	str	r3, [sp, #24]
    switch( MacCtx.TxMsg.Type )
 800fba0:	7b73      	ldrb	r3, [r6, #13]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d019      	beq.n	800fbda <ScheduleTx+0x1d2>
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	d02b      	beq.n	800fc02 <ScheduleTx+0x1fa>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fbaa:	2503      	movs	r5, #3
 800fbac:	e79b      	b.n	800fae6 <ScheduleTx+0xde>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fbae:	a805      	add	r0, sp, #20
 800fbb0:	f002 fe00 	bl	80127b4 <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fbb4:	2514      	movs	r5, #20
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d000      	beq.n	800fbbc <ScheduleTx+0x1b4>
 800fbba:	e794      	b.n	800fae6 <ScheduleTx+0xde>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fbbc:	20d5      	movs	r0, #213	; 0xd5
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800fbbe:	4b20      	ldr	r3, [pc, #128]	; (800fc40 <ScheduleTx+0x238>)
 800fbc0:	5ce5      	ldrb	r5, [r4, r3]
 800fbc2:	ab02      	add	r3, sp, #8
 800fbc4:	7b1f      	ldrb	r7, [r3, #12]
 800fbc6:	59a3      	ldr	r3, [r4, r6]
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fbc8:	19ed      	adds	r5, r5, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fbca:	5618      	ldrsb	r0, [r3, r0]
 800fbcc:	f7ff f8ac 	bl	800ed28 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fbd0:	b280      	uxth	r0, r0
 800fbd2:	42a8      	cmp	r0, r5
 800fbd4:	d225      	bcs.n	800fc22 <ScheduleTx+0x21a>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fbd6:	2508      	movs	r5, #8
 800fbd8:	e785      	b.n	800fae6 <ScheduleTx+0xde>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fbda:	0020      	movs	r0, r4
 800fbdc:	3011      	adds	r0, #17
 800fbde:	30ff      	adds	r0, #255	; 0xff
 800fbe0:	f002 f9ec 	bl	8011fbc <LoRaMacCryptoPrepareJoinRequest>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbe4:	2512      	movs	r5, #18
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d000      	beq.n	800fbec <ScheduleTx+0x1e4>
 800fbea:	e77c      	b.n	800fae6 <ScheduleTx+0xde>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fbec:	7d73      	ldrb	r3, [r6, #21]
 800fbee:	8123      	strh	r3, [r4, #8]
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800fbf0:	238c      	movs	r3, #140	; 0x8c
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	58e3      	ldr	r3, [r4, r3]
 800fbf6:	33ff      	adds	r3, #255	; 0xff
 800fbf8:	7d18      	ldrb	r0, [r3, #20]
 800fbfa:	f7ff fe7f 	bl	800f8fc <SendFrameOnChannel>
 800fbfe:	0005      	movs	r5, r0
 800fc00:	e771      	b.n	800fae6 <ScheduleTx+0xde>
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800fc02:	a806      	add	r0, sp, #24
 800fc04:	f002 ffe2 	bl	8012bcc <LoRaMacGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fc08:	2513      	movs	r5, #19
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d000      	beq.n	800fc10 <ScheduleTx+0x208>
 800fc0e:	e76a      	b.n	800fae6 <ScheduleTx+0xde>
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fc10:	0023      	movs	r3, r4
 800fc12:	3311      	adds	r3, #17
 800fc14:	33ff      	adds	r3, #255	; 0xff
 800fc16:	b2f9      	uxtb	r1, r7
 800fc18:	9a03      	ldr	r2, [sp, #12]
 800fc1a:	9806      	ldr	r0, [sp, #24]
 800fc1c:	f002 fae8 	bl	80121f0 <LoRaMacCryptoSecureMessage>
 800fc20:	e7e0      	b.n	800fbe4 <ScheduleTx+0x1dc>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc22:	59a3      	ldr	r3, [r4, r6]
 800fc24:	21f4      	movs	r1, #244	; 0xf4
 800fc26:	001a      	movs	r2, r3
 800fc28:	0089      	lsls	r1, r1, #2
 800fc2a:	32e4      	adds	r2, #228	; 0xe4
 800fc2c:	5861      	ldr	r1, [r4, r1]
 800fc2e:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc30:	33e8      	adds	r3, #232	; 0xe8
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc32:	1852      	adds	r2, r2, r1
 800fc34:	21ef      	movs	r1, #239	; 0xef
 800fc36:	0089      	lsls	r1, r1, #2
 800fc38:	5062      	str	r2, [r4, r1]
 800fc3a:	e79d      	b.n	800fb78 <ScheduleTx+0x170>
 800fc3c:	200010c8 	.word	0x200010c8
 800fc40:	0000023f 	.word	0x0000023f

0800fc44 <OnTxDelayedTimerEvent>:
    TimerStop( &MacCtx.TxDelayedTimer );
 800fc44:	23e0      	movs	r3, #224	; 0xe0
{
 800fc46:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800fc48:	4c12      	ldr	r4, [pc, #72]	; (800fc94 <OnTxDelayedTimerEvent+0x50>)
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	18e0      	adds	r0, r4, r3
 800fc4e:	f004 f9e9 	bl	8014024 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fc52:	22d6      	movs	r2, #214	; 0xd6
 800fc54:	2320      	movs	r3, #32
 800fc56:	0092      	lsls	r2, r2, #2
 800fc58:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 800fc5a:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fc5c:	4399      	bics	r1, r3
 800fc5e:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 800fc60:	f7ff fed2 	bl	800fa08 <ScheduleTx>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d014      	beq.n	800fc92 <OnTxDelayedTimerEvent+0x4e>
 800fc68:	280c      	cmp	r0, #12
 800fc6a:	d012      	beq.n	800fc92 <OnTxDelayedTimerEvent+0x4e>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fc6c:	238c      	movs	r3, #140	; 0x8c
 800fc6e:	00db      	lsls	r3, r3, #3
 800fc70:	58e3      	ldr	r3, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fc72:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fc74:	001a      	movs	r2, r3
 800fc76:	32d5      	adds	r2, #213	; 0xd5
 800fc78:	7811      	ldrb	r1, [r2, #0]
 800fc7a:	4a07      	ldr	r2, [pc, #28]	; (800fc98 <OnTxDelayedTimerEvent+0x54>)
 800fc7c:	54a1      	strb	r1, [r4, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800fc7e:	4a07      	ldr	r2, [pc, #28]	; (800fc9c <OnTxDelayedTimerEvent+0x58>)
 800fc80:	5c9a      	ldrb	r2, [r3, r2]
 800fc82:	4b07      	ldr	r3, [pc, #28]	; (800fca0 <OnTxDelayedTimerEvent+0x5c>)
 800fc84:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fc86:	4b07      	ldr	r3, [pc, #28]	; (800fca4 <OnTxDelayedTimerEvent+0x60>)
 800fc88:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fc8a:	f002 fe89 	bl	80129a0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fc8e:	f7ff f9d1 	bl	800f034 <StopRetransmission>
}
 800fc92:	bd10      	pop	{r4, pc}
 800fc94:	200010c8 	.word	0x200010c8
 800fc98:	0000041e 	.word	0x0000041e
 800fc9c:	00000217 	.word	0x00000217
 800fca0:	00000421 	.word	0x00000421
 800fca4:	0000041d 	.word	0x0000041d

0800fca8 <Send>:
{
 800fca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcaa:	001f      	movs	r7, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcac:	238c      	movs	r3, #140	; 0x8c
{
 800fcae:	0006      	movs	r6, r0
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcb0:	484c      	ldr	r0, [pc, #304]	; (800fde4 <Send+0x13c>)
{
 800fcb2:	b08f      	sub	sp, #60	; 0x3c
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcb4:	00db      	lsls	r3, r3, #3
{
 800fcb6:	9104      	str	r1, [sp, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcb8:	58c1      	ldr	r1, [r0, r3]
{
 800fcba:	9205      	str	r2, [sp, #20]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcbc:	000b      	movs	r3, r1
 800fcbe:	33d5      	adds	r3, #213	; 0xd5
 800fcc0:	781b      	ldrb	r3, [r3, #0]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fcc2:	2507      	movs	r5, #7
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fcc4:	b25b      	sxtb	r3, r3
 800fcc6:	9302      	str	r3, [sp, #8]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800fcc8:	000b      	movs	r3, r1
 800fcca:	33d4      	adds	r3, #212	; 0xd4
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	b25b      	sxtb	r3, r3
 800fcd0:	9303      	str	r3, [sp, #12]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800fcd2:	000b      	movs	r3, r1
 800fcd4:	33cc      	adds	r3, #204	; 0xcc
 800fcd6:	681a      	ldr	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fcd8:	2389      	movs	r3, #137	; 0x89
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800fcda:	9208      	str	r2, [sp, #32]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	5ccb      	ldrb	r3, [r1, r3]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d06e      	beq.n	800fdc2 <Send+0x11a>
    if( MacCtx.NvmCtx->MaxDCycle == 255 )
 800fce4:	000b      	movs	r3, r1
 800fce6:	33ff      	adds	r3, #255	; 0xff
 800fce8:	7c9b      	ldrb	r3, [r3, #18]
        return LORAMAC_STATUS_DEVICE_OFF;
 800fcea:	3502      	adds	r5, #2
    if( MacCtx.NvmCtx->MaxDCycle == 255 )
 800fcec:	2bff      	cmp	r3, #255	; 0xff
 800fcee:	d068      	beq.n	800fdc2 <Send+0x11a>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <Send+0x52>
        MacCtx.AggregatedTimeOff = 0;
 800fcf4:	24d1      	movs	r4, #209	; 0xd1
 800fcf6:	00a4      	lsls	r4, r4, #2
 800fcf8:	5103      	str	r3, [r0, r4]
    fCtrl.Value = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	a807      	add	r0, sp, #28
    fCtrl.Bits.FOptsLen      = 0;
 800fcfe:	7003      	strb	r3, [r0, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800fd00:	000b      	movs	r3, r1
 800fd02:	33ca      	adds	r3, #202	; 0xca
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2410      	movs	r4, #16
 800fd08:	469c      	mov	ip, r3
 800fd0a:	01db      	lsls	r3, r3, #7
 800fd0c:	7003      	strb	r3, [r0, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fd0e:	000b      	movs	r3, r1
 800fd10:	33c8      	adds	r3, #200	; 0xc8
 800fd12:	781d      	ldrb	r5, [r3, #0]
 800fd14:	7803      	ldrb	r3, [r0, #0]
 800fd16:	2d01      	cmp	r5, #1
 800fd18:	d156      	bne.n	800fdc8 <Send+0x120>
        fCtrl.Bits.FPending      = 1;
 800fd1a:	4323      	orrs	r3, r4
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800fd1c:	4c32      	ldr	r4, [pc, #200]	; (800fde8 <Send+0x140>)
        fCtrl.Bits.FPending      = 0;
 800fd1e:	7003      	strb	r3, [r0, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800fd20:	5d0b      	ldrb	r3, [r1, r4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d004      	beq.n	800fd30 <Send+0x88>
        fCtrl.Bits.Ack = 1;
 800fd26:	2320      	movs	r3, #32
 800fd28:	a807      	add	r0, sp, #28
 800fd2a:	7805      	ldrb	r5, [r0, #0]
 800fd2c:	432b      	orrs	r3, r5
 800fd2e:	7003      	strb	r3, [r0, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800fd30:	2388      	movs	r3, #136	; 0x88
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	58cb      	ldr	r3, [r1, r3]
 800fd36:	a809      	add	r0, sp, #36	; 0x24
 800fd38:	9309      	str	r3, [sp, #36]	; 0x24
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fd3a:	4663      	mov	r3, ip
    adrNext.UpdateChanMask = true;
 800fd3c:	2501      	movs	r5, #1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fd3e:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800fd40:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = true;
 800fd42:	7105      	strb	r5, [r0, #4]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800fd44:	6082      	str	r2, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800fd46:	33d0      	adds	r3, #208	; 0xd0
 800fd48:	881b      	ldrh	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800fd4a:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800fd4c:	8183      	strh	r3, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800fd4e:	000b      	movs	r3, r1
 800fd50:	33d2      	adds	r3, #210	; 0xd2
 800fd52:	881b      	ldrh	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800fd54:	32d4      	adds	r2, #212	; 0xd4
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800fd56:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fd58:	466b      	mov	r3, sp
 800fd5a:	7a1b      	ldrb	r3, [r3, #8]
 800fd5c:	7403      	strb	r3, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800fd5e:	466b      	mov	r3, sp
 800fd60:	7b1b      	ldrb	r3, [r3, #12]
 800fd62:	7443      	strb	r3, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fd64:	000b      	movs	r3, r1
 800fd66:	33ff      	adds	r3, #255	; 0xff
 800fd68:	785b      	ldrb	r3, [r3, #1]
 800fd6a:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800fd6c:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800fd6e:	31d5      	adds	r1, #213	; 0xd5
    adrNext.Region = MacCtx.NvmCtx->Region;
 800fd70:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800fd72:	ab08      	add	r3, sp, #32
 800fd74:	f001 fdbe 	bl	80118f4 <LoRaMacAdrCalcNext>
 800fd78:	2340      	movs	r3, #64	; 0x40
 800fd7a:	a907      	add	r1, sp, #28
 800fd7c:	4028      	ands	r0, r5
 800fd7e:	780d      	ldrb	r5, [r1, #0]
 800fd80:	0180      	lsls	r0, r0, #6
 800fd82:	439d      	bics	r5, r3
 800fd84:	4305      	orrs	r5, r0
 800fd86:	700d      	strb	r5, [r1, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fd88:	0030      	movs	r0, r6
 800fd8a:	9700      	str	r7, [sp, #0]
 800fd8c:	9b05      	ldr	r3, [sp, #20]
 800fd8e:	9a04      	ldr	r2, [sp, #16]
 800fd90:	f7ff fce6 	bl	800f760 <PrepareFrame>
 800fd94:	268c      	movs	r6, #140	; 0x8c
 800fd96:	0005      	movs	r5, r0
 800fd98:	4f12      	ldr	r7, [pc, #72]	; (800fde4 <Send+0x13c>)
 800fd9a:	00f6      	lsls	r6, r6, #3
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d001      	beq.n	800fda4 <Send+0xfc>
 800fda0:	280b      	cmp	r0, #11
 800fda2:	d104      	bne.n	800fdae <Send+0x106>
        status = ScheduleTx( false );
 800fda4:	2000      	movs	r0, #0
 800fda6:	f7ff fe2f 	bl	800fa08 <ScheduleTx>
 800fdaa:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800fdac:	d00e      	beq.n	800fdcc <Send+0x124>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800fdae:	59bb      	ldr	r3, [r7, r6]
 800fdb0:	4669      	mov	r1, sp
 800fdb2:	001a      	movs	r2, r3
 800fdb4:	7a09      	ldrb	r1, [r1, #8]
 800fdb6:	32d5      	adds	r2, #213	; 0xd5
 800fdb8:	7011      	strb	r1, [r2, #0]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800fdba:	466a      	mov	r2, sp
 800fdbc:	7b12      	ldrb	r2, [r2, #12]
 800fdbe:	33d4      	adds	r3, #212	; 0xd4
 800fdc0:	701a      	strb	r2, [r3, #0]
}
 800fdc2:	0028      	movs	r0, r5
 800fdc4:	b00f      	add	sp, #60	; 0x3c
 800fdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fCtrl.Bits.FPending      = 0;
 800fdc8:	43a3      	bics	r3, r4
 800fdca:	e7a7      	b.n	800fd1c <Send+0x74>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800fdcc:	59bb      	ldr	r3, [r7, r6]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800fdce:	9a08      	ldr	r2, [sp, #32]
        MacCtx.NvmCtx->SrvAckRequested = false;
 800fdd0:	5518      	strb	r0, [r3, r4]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800fdd2:	33cc      	adds	r3, #204	; 0xcc
 800fdd4:	601a      	str	r2, [r3, #0]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fdd6:	f002 fcc3 	bl	8012760 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d0f1      	beq.n	800fdc2 <Send+0x11a>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fdde:	2514      	movs	r5, #20
 800fde0:	e7ef      	b.n	800fdc2 <Send+0x11a>
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	200010c8 	.word	0x200010c8
 800fde8:	0000021a 	.word	0x0000021a

0800fdec <SendReJoinReq>:
{
 800fdec:	b570      	push	{r4, r5, r6, lr}
    macHdr.Value = 0;
 800fdee:	2500      	movs	r5, #0
    switch( joinReqType )
 800fdf0:	28ff      	cmp	r0, #255	; 0xff
 800fdf2:	d11c      	bne.n	800fe2e <SendReJoinReq+0x42>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fdf4:	4c0f      	ldr	r4, [pc, #60]	; (800fe34 <SendReJoinReq+0x48>)
 800fdf6:	0023      	movs	r3, r4
 800fdf8:	33ff      	adds	r3, #255	; 0xff
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fdfa:	7558      	strb	r0, [r3, #21]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fdfc:	0022      	movs	r2, r4
 800fdfe:	0021      	movs	r1, r4
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fe00:	0020      	movs	r0, r4
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fe02:	32fc      	adds	r2, #252	; 0xfc
 800fe04:	310a      	adds	r1, #10
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fe06:	3017      	adds	r0, #23
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fe08:	6151      	str	r1, [r2, #20]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fe0a:	30ff      	adds	r0, #255	; 0xff
 800fe0c:	2208      	movs	r2, #8
 800fe0e:	6861      	ldr	r1, [r4, #4]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fe10:	735d      	strb	r5, [r3, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fe12:	759d      	strb	r5, [r3, #22]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fe14:	f004 f97d 	bl	8014112 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
 800fe18:	0020      	movs	r0, r4
 800fe1a:	301f      	adds	r0, #31
 800fe1c:	30ff      	adds	r0, #255	; 0xff
 800fe1e:	2208      	movs	r2, #8
 800fe20:	6821      	ldr	r1, [r4, #0]
 800fe22:	f004 f976 	bl	8014112 <memcpy1>
            allowDelayedTx = false;
 800fe26:	0028      	movs	r0, r5
    status = ScheduleTx( allowDelayedTx );
 800fe28:	f7ff fdee 	bl	800fa08 <ScheduleTx>
}
 800fe2c:	bd70      	pop	{r4, r5, r6, pc}
    bool allowDelayedTx = true;
 800fe2e:	2001      	movs	r0, #1
 800fe30:	e7fa      	b.n	800fe28 <SendReJoinReq+0x3c>
 800fe32:	46c0      	nop			; (mov r8, r8)
 800fe34:	200010c8 	.word	0x200010c8

0800fe38 <SetTxContinuousWave>:
    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800fe38:	238c      	movs	r3, #140	; 0x8c
{
 800fe3a:	b510      	push	{r4, lr}
    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800fe3c:	4c13      	ldr	r4, [pc, #76]	; (800fe8c <SetTxContinuousWave+0x54>)
 800fe3e:	00db      	lsls	r3, r3, #3
 800fe40:	58e3      	ldr	r3, [r4, r3]
{
 800fe42:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800fe44:	001a      	movs	r2, r3
 800fe46:	32ff      	adds	r2, #255	; 0xff
 800fe48:	7d12      	ldrb	r2, [r2, #20]
 800fe4a:	a902      	add	r1, sp, #8
 800fe4c:	700a      	strb	r2, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fe4e:	001a      	movs	r2, r3
 800fe50:	32d5      	adds	r2, #213	; 0xd5
 800fe52:	7812      	ldrb	r2, [r2, #0]
 800fe54:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800fe56:	001a      	movs	r2, r3
 800fe58:	32d4      	adds	r2, #212	; 0xd4
 800fe5a:	7812      	ldrb	r2, [r2, #0]
 800fe5c:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800fe5e:	001a      	movs	r2, r3
 800fe60:	32fc      	adds	r2, #252	; 0xfc
 800fe62:	6891      	ldr	r1, [r2, #8]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800fe64:	68d2      	ldr	r2, [r2, #12]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800fe66:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800fe68:	9201      	str	r2, [sp, #4]
 800fe6a:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
 800fe6c:	aa02      	add	r2, sp, #8
 800fe6e:	8190      	strh	r0, [r2, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800fe70:	0011      	movs	r1, r2
 800fe72:	7818      	ldrb	r0, [r3, #0]
 800fe74:	f003 f84d 	bl	8012f12 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fe78:	22d6      	movs	r2, #214	; 0xd6
 800fe7a:	2302      	movs	r3, #2
}
 800fe7c:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fe7e:	0092      	lsls	r2, r2, #2
 800fe80:	58a1      	ldr	r1, [r4, r2]
 800fe82:	430b      	orrs	r3, r1
 800fe84:	50a3      	str	r3, [r4, r2]
}
 800fe86:	b006      	add	sp, #24
 800fe88:	bd10      	pop	{r4, pc}
 800fe8a:	46c0      	nop			; (mov r8, r8)
 800fe8c:	200010c8 	.word	0x200010c8

0800fe90 <SetTxContinuousWave1>:
{
 800fe90:	b510      	push	{r4, lr}
 800fe92:	0004      	movs	r4, r0
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fe94:	4b07      	ldr	r3, [pc, #28]	; (800feb4 <SetTxContinuousWave1+0x24>)
{
 800fe96:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fe98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe9a:	b251      	sxtb	r1, r2
 800fe9c:	0022      	movs	r2, r4
 800fe9e:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fea0:	22d6      	movs	r2, #214	; 0xd6
 800fea2:	2302      	movs	r3, #2
 800fea4:	4904      	ldr	r1, [pc, #16]	; (800feb8 <SetTxContinuousWave1+0x28>)
 800fea6:	0092      	lsls	r2, r2, #2
 800fea8:	5888      	ldr	r0, [r1, r2]
 800feaa:	4303      	orrs	r3, r0
 800feac:	508b      	str	r3, [r1, r2]
}
 800feae:	2000      	movs	r0, #0
 800feb0:	bd10      	pop	{r4, pc}
 800feb2:	46c0      	nop			; (mov r8, r8)
 800feb4:	08018acc 	.word	0x08018acc
 800feb8:	200010c8 	.word	0x200010c8

0800febc <GetCtxs>:
{
 800febc:	b513      	push	{r0, r1, r4, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 800febe:	4b15      	ldr	r3, [pc, #84]	; (800ff14 <GetCtxs+0x58>)
 800fec0:	4c15      	ldr	r4, [pc, #84]	; (800ff18 <GetCtxs+0x5c>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800fec2:	4816      	ldr	r0, [pc, #88]	; (800ff1c <GetCtxs+0x60>)
    Contexts.MacNvmCtx = &NvmMacCtx;
 800fec4:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800fec6:	238b      	movs	r3, #139	; 0x8b
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800fecc:	f002 f866 	bl	8011f9c <LoRaMacCryptoGetNvmCtx>
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800fed0:	238c      	movs	r3, #140	; 0x8c
 800fed2:	4a13      	ldr	r2, [pc, #76]	; (800ff20 <GetCtxs+0x64>)
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	58d3      	ldr	r3, [r2, r3]
 800fed8:	a901      	add	r1, sp, #4
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800feda:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800fedc:	7818      	ldrb	r0, [r3, #0]
 800fede:	f002 ff82 	bl	8012de6 <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800fee2:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800fee4:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800fee6:	480f      	ldr	r0, [pc, #60]	; (800ff24 <GetCtxs+0x68>)
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800fee8:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800feea:	f005 f82b 	bl	8014f44 <SecureElementGetNvmCtx>
 800feee:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800fef0:	480d      	ldr	r0, [pc, #52]	; (800ff28 <GetCtxs+0x6c>)
 800fef2:	f002 fbbb 	bl	801266c <LoRaMacCommandsGetNvmCtx>
 800fef6:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800fef8:	480c      	ldr	r0, [pc, #48]	; (800ff2c <GetCtxs+0x70>)
 800fefa:	f001 fd5d 	bl	80119b8 <LoRaMacClassBGetNvmCtx>
 800fefe:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800ff00:	480b      	ldr	r0, [pc, #44]	; (800ff30 <GetCtxs+0x74>)
 800ff02:	f002 fcc1 	bl	8012888 <LoRaMacConfirmQueueGetNvmCtx>
 800ff06:	6320      	str	r0, [r4, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
 800ff08:	480a      	ldr	r0, [pc, #40]	; (800ff34 <GetCtxs+0x78>)
 800ff0a:	f002 fdd9 	bl	8012ac0 <LoRaMacFCntHandlerGetNvmCtx>
 800ff0e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800ff10:	0020      	movs	r0, r4
 800ff12:	bd16      	pop	{r1, r2, r4, pc}
 800ff14:	2000152c 	.word	0x2000152c
 800ff18:	2000226c 	.word	0x2000226c
 800ff1c:	20002280 	.word	0x20002280
 800ff20:	200010c8 	.word	0x200010c8
 800ff24:	20002288 	.word	0x20002288
 800ff28:	20002290 	.word	0x20002290
 800ff2c:	20002298 	.word	0x20002298
 800ff30:	200022a0 	.word	0x200022a0
 800ff34:	200022a8 	.word	0x200022a8

0800ff38 <RestoreCtxs>:
{
 800ff38:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff3a:	2303      	movs	r3, #3
{
 800ff3c:	1e04      	subs	r4, r0, #0
    if( contexts == NULL )
 800ff3e:	d01f      	beq.n	800ff80 <RestoreCtxs+0x48>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ff40:	23d6      	movs	r3, #214	; 0xd6
 800ff42:	4d21      	ldr	r5, [pc, #132]	; (800ffc8 <RestoreCtxs+0x90>)
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	58ea      	ldr	r2, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 800ff48:	2301      	movs	r3, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d118      	bne.n	800ff80 <RestoreCtxs+0x48>
    if( contexts->MacNvmCtx != NULL )
 800ff4e:	6801      	ldr	r1, [r0, #0]
 800ff50:	2900      	cmp	r1, #0
 800ff52:	d003      	beq.n	800ff5c <RestoreCtxs+0x24>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800ff54:	8882      	ldrh	r2, [r0, #4]
 800ff56:	481d      	ldr	r0, [pc, #116]	; (800ffcc <RestoreCtxs+0x94>)
 800ff58:	f004 f8db 	bl	8014112 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800ff5c:	2303      	movs	r3, #3
 800ff5e:	466a      	mov	r2, sp
 800ff60:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800ff62:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ff64:	4669      	mov	r1, sp
    params.NvmCtx = contexts->RegionNvmCtx;
 800ff66:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ff68:	238c      	movs	r3, #140	; 0x8c
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	58eb      	ldr	r3, [r5, r3]
 800ff6e:	7818      	ldrb	r0, [r3, #0]
 800ff70:	f002 ff32 	bl	8012dd8 <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800ff74:	69a0      	ldr	r0, [r4, #24]
 800ff76:	f004 ffd7 	bl	8014f28 <SecureElementRestoreNvmCtx>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	d002      	beq.n	800ff84 <RestoreCtxs+0x4c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff7e:	2312      	movs	r3, #18
}
 800ff80:	0018      	movs	r0, r3
 800ff82:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800ff84:	6920      	ldr	r0, [r4, #16]
 800ff86:	f001 fffb 	bl	8011f80 <LoRaMacCryptoRestoreNvmCtx>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d1f7      	bne.n	800ff7e <RestoreCtxs+0x46>
    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800ff8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ff90:	f002 fd88 	bl	8012aa4 <LoRaMacFCntHandlerRestoreNvmCtx>
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff94:	2313      	movs	r3, #19
    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800ff96:	2800      	cmp	r0, #0
 800ff98:	d1f2      	bne.n	800ff80 <RestoreCtxs+0x48>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800ff9a:	6a20      	ldr	r0, [r4, #32]
 800ff9c:	f002 fb58 	bl	8012650 <LoRaMacCommandsRestoreNvmCtx>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ffa0:	2314      	movs	r3, #20
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d1ec      	bne.n	800ff80 <RestoreCtxs+0x48>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800ffa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ffa8:	f001 fd04 	bl	80119b4 <LoRaMacClassBRestoreNvmCtx>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800ffac:	2315      	movs	r3, #21
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0e6      	beq.n	800ff80 <RestoreCtxs+0x48>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800ffb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ffb4:	f002 fc5c 	bl	8012870 <LoRaMacConfirmQueueRestoreNvmCtx>
 800ffb8:	0002      	movs	r2, r0
    return LORAMAC_STATUS_OK;
 800ffba:	4250      	negs	r0, r2
 800ffbc:	4150      	adcs	r0, r2
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800ffbe:	2316      	movs	r3, #22
    return LORAMAC_STATUS_OK;
 800ffc0:	4240      	negs	r0, r0
 800ffc2:	4003      	ands	r3, r0
 800ffc4:	e7dc      	b.n	800ff80 <RestoreCtxs+0x48>
 800ffc6:	46c0      	nop			; (mov r8, r8)
 800ffc8:	200010c8 	.word	0x200010c8
 800ffcc:	2000152c 	.word	0x2000152c

0800ffd0 <DetermineFrameType>:
{
 800ffd0:	0002      	movs	r2, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffd2:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800ffd4:	2a00      	cmp	r2, #0
 800ffd6:	d00a      	beq.n	800ffee <DetermineFrameType+0x1e>
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	d008      	beq.n	800ffee <DetermineFrameType+0x1e>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800ffdc:	7b10      	ldrb	r0, [r2, #12]
 800ffde:	0703      	lsls	r3, r0, #28
 800ffe0:	d006      	beq.n	800fff0 <DetermineFrameType+0x20>
 800ffe2:	1c53      	adds	r3, r2, #1
 800ffe4:	7fdb      	ldrb	r3, [r3, #31]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d002      	beq.n	800fff0 <DetermineFrameType+0x20>
        *fType = FRAME_TYPE_A;
 800ffea:	2000      	movs	r0, #0
 800ffec:	7008      	strb	r0, [r1, #0]
}
 800ffee:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 800fff0:	0013      	movs	r3, r2
 800fff2:	3328      	adds	r3, #40	; 0x28
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d103      	bne.n	8010002 <DetermineFrameType+0x32>
        *fType = FRAME_TYPE_B;
 800fffa:	2201      	movs	r2, #1
        *fType = FRAME_TYPE_D;
 800fffc:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 800fffe:	0018      	movs	r0, r3
 8010000:	e7f5      	b.n	800ffee <DetermineFrameType+0x1e>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010002:	230f      	movs	r3, #15
 8010004:	4003      	ands	r3, r0
        return LORAMAC_STATUS_ERROR;
 8010006:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1f0      	bne.n	800ffee <DetermineFrameType+0x1e>
 801000c:	3201      	adds	r2, #1
 801000e:	7fd0      	ldrb	r0, [r2, #31]
        *fType = FRAME_TYPE_D;
 8010010:	2203      	movs	r2, #3
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010012:	2800      	cmp	r0, #0
 8010014:	d1f2      	bne.n	800fffc <DetermineFrameType+0x2c>
        *fType = FRAME_TYPE_C;
 8010016:	3302      	adds	r3, #2
 8010018:	700b      	strb	r3, [r1, #0]
 801001a:	e7e8      	b.n	800ffee <DetermineFrameType+0x1e>

0801001c <LoRaMacProcess>:
{
 801001c:	b5f0      	push	{r4, r5, r6, r7, lr}
    LoRaMacRadioEvents_t events = LoRaMacRadioEvents;
 801001e:	4ad0      	ldr	r2, [pc, #832]	; (8010360 <LoRaMacProcess+0x344>)
{
 8010020:	b0af      	sub	sp, #188	; 0xbc
    LoRaMacRadioEvents_t events = LoRaMacRadioEvents;
 8010022:	6813      	ldr	r3, [r2, #0]
 8010024:	9308      	str	r3, [sp, #32]
    if( events.Value != 0 )
 8010026:	2b00      	cmp	r3, #0
 8010028:	d100      	bne.n	801002c <LoRaMacProcess+0x10>
 801002a:	e110      	b.n	801024e <LoRaMacProcess+0x232>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801002c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010030:	b672      	cpsid	i
        LoRaMacRadioEvents.Value = 0;
 8010032:	2100      	movs	r1, #0
 8010034:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010036:	f383 8810 	msr	PRIMASK, r3
        if( events.Events.TxDone == 1 )
 801003a:	2220      	movs	r2, #32
 801003c:	466b      	mov	r3, sp
 801003e:	189b      	adds	r3, r3, r2
 8010040:	781d      	ldrb	r5, [r3, #0]
 8010042:	06eb      	lsls	r3, r5, #27
 8010044:	d57d      	bpl.n	8010142 <LoRaMacProcess+0x126>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010046:	238c      	movs	r3, #140	; 0x8c
 8010048:	4cc6      	ldr	r4, [pc, #792]	; (8010364 <LoRaMacProcess+0x348>)
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	58e3      	ldr	r3, [r4, r3]
 801004e:	33c8      	adds	r3, #200	; 0xc8
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b02      	cmp	r3, #2
 8010054:	d100      	bne.n	8010058 <LoRaMacProcess+0x3c>
 8010056:	e14d      	b.n	80102f4 <LoRaMacProcess+0x2d8>
        Radio.Sleep( );
 8010058:	4bc3      	ldr	r3, [pc, #780]	; (8010368 <LoRaMacProcess+0x34c>)
 801005a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801005c:	9304      	str	r3, [sp, #16]
 801005e:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8010060:	23e5      	movs	r3, #229	; 0xe5
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	18e6      	adds	r6, r4, r3
 8010066:	3328      	adds	r3, #40	; 0x28
 8010068:	58e1      	ldr	r1, [r4, r3]
 801006a:	0030      	movs	r0, r6
 801006c:	f004 f806 	bl	801407c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010070:	0030      	movs	r0, r6
 8010072:	f003 ff65 	bl	8013f40 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010076:	238c      	movs	r3, #140	; 0x8c
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	58e3      	ldr	r3, [r4, r3]
 801007c:	33c8      	adds	r3, #200	; 0xc8
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	2b02      	cmp	r3, #2
 8010082:	d00a      	beq.n	801009a <LoRaMacProcess+0x7e>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8010084:	23ea      	movs	r3, #234	; 0xea
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	18e6      	adds	r6, r4, r3
 801008a:	3318      	adds	r3, #24
 801008c:	0030      	movs	r0, r6
 801008e:	58e1      	ldr	r1, [r4, r3]
 8010090:	f003 fff4 	bl	801407c <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 8010094:	0030      	movs	r0, r6
 8010096:	f003 ff53 	bl	8013f40 <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 801009a:	238c      	movs	r3, #140	; 0x8c
 801009c:	00db      	lsls	r3, r3, #3
 801009e:	58e3      	ldr	r3, [r4, r3]
 80100a0:	4eb2      	ldr	r6, [pc, #712]	; (801036c <LoRaMacProcess+0x350>)
 80100a2:	001a      	movs	r2, r3
 80100a4:	32c8      	adds	r2, #200	; 0xc8
 80100a6:	7812      	ldrb	r2, [r2, #0]
 80100a8:	2a02      	cmp	r2, #2
 80100aa:	d002      	beq.n	80100b2 <LoRaMacProcess+0x96>
 80100ac:	5d9a      	ldrb	r2, [r3, r6]
 80100ae:	2a00      	cmp	r2, #0
 80100b0:	d012      	beq.n	80100d8 <LoRaMacProcess+0xbc>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80100b2:	2215      	movs	r2, #21
 80100b4:	a916      	add	r1, sp, #88	; 0x58
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80100b6:	7818      	ldrb	r0, [r3, #0]
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80100b8:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80100ba:	f002 fe7a 	bl	8012db2 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80100be:	23f0      	movs	r3, #240	; 0xf0
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	58e1      	ldr	r1, [r4, r3]
 80100c4:	332c      	adds	r3, #44	; 0x2c
 80100c6:	18e7      	adds	r7, r4, r3
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80100c8:	9018      	str	r0, [sp, #96]	; 0x60
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80100ca:	1809      	adds	r1, r1, r0
 80100cc:	0038      	movs	r0, r7
 80100ce:	f003 ffd5 	bl	801407c <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80100d2:	0038      	movs	r0, r7
 80100d4:	f003 ff34 	bl	8013f40 <TimerStart>
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( MacCtx.MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 80100d8:	4ba5      	ldr	r3, [pc, #660]	; (8010370 <LoRaMacProcess+0x354>)
 80100da:	5ce2      	ldrb	r2, [r4, r3]
 80100dc:	3b16      	subs	r3, #22
 80100de:	3bff      	subs	r3, #255	; 0xff
 80100e0:	0752      	lsls	r2, r2, #29
 80100e2:	d400      	bmi.n	80100e6 <LoRaMacProcess+0xca>
 80100e4:	e109      	b.n	80102fa <LoRaMacProcess+0x2de>
 80100e6:	2286      	movs	r2, #134	; 0x86
 80100e8:	00d2      	lsls	r2, r2, #3
 80100ea:	5ca2      	ldrb	r2, [r4, r2]
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	d000      	beq.n	80100f2 <LoRaMacProcess+0xd6>
 80100f0:	e103      	b.n	80102fa <LoRaMacProcess+0x2de>
        MacCtx.LastTxIsJoinRequest = true;
 80100f2:	3201      	adds	r2, #1
        MacCtx.LastTxIsJoinRequest = false;
 80100f4:	54e2      	strb	r2, [r4, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 80100f6:	238c      	movs	r3, #140	; 0x8c
 80100f8:	00db      	lsls	r3, r3, #3
 80100fa:	58e3      	ldr	r3, [r4, r3]
 80100fc:	0019      	movs	r1, r3
 80100fe:	31ff      	adds	r1, #255	; 0xff
 8010100:	7d0a      	ldrb	r2, [r1, #20]
 8010102:	754a      	strb	r2, [r1, #21]
    txDone.Channel = MacCtx.NvmCtx->Channel;
 8010104:	a922      	add	r1, sp, #136	; 0x88
 8010106:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010108:	2289      	movs	r2, #137	; 0x89
 801010a:	0092      	lsls	r2, r2, #2
 801010c:	5c9a      	ldrb	r2, [r3, r2]
 801010e:	2a00      	cmp	r2, #0
 8010110:	d000      	beq.n	8010114 <LoRaMacProcess+0xf8>
 8010112:	e0f4      	b.n	80102fe <LoRaMacProcess+0x2e2>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010114:	4f97      	ldr	r7, [pc, #604]	; (8010374 <LoRaMacProcess+0x358>)
        txDone.Joined  = true;
 8010116:	704a      	strb	r2, [r1, #1]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010118:	683a      	ldr	r2, [r7, #0]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 801011a:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 801011c:	604a      	str	r2, [r1, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 801011e:	f002 fe54 	bl	8012dca <RegionSetBandTxDone>
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 8010122:	23d0      	movs	r3, #208	; 0xd0
 8010124:	683a      	ldr	r2, [r7, #0]
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	50e2      	str	r2, [r4, r3]
    if( MacCtx.NvmCtx->NodeAckRequested == false )
 801012a:	3321      	adds	r3, #33	; 0x21
 801012c:	33ff      	adds	r3, #255	; 0xff
 801012e:	58e3      	ldr	r3, [r4, r3]
 8010130:	5d9a      	ldrb	r2, [r3, r6]
 8010132:	2a00      	cmp	r2, #0
 8010134:	d105      	bne.n	8010142 <LoRaMacProcess+0x126>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010136:	4990      	ldr	r1, [pc, #576]	; (8010378 <LoRaMacProcess+0x35c>)
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 8010138:	33ff      	adds	r3, #255	; 0xff
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801013a:	5462      	strb	r2, [r4, r1]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 801013c:	7c5a      	ldrb	r2, [r3, #17]
 801013e:	3201      	adds	r2, #1
 8010140:	745a      	strb	r2, [r3, #17]
        if( events.Events.RxDone == 1 )
 8010142:	072b      	lsls	r3, r5, #28
 8010144:	d55a      	bpl.n	80101fc <LoRaMacProcess+0x1e0>
    uint8_t *payload = RxDoneParams.Payload;
 8010146:	4b8d      	ldr	r3, [pc, #564]	; (801037c <LoRaMacProcess+0x360>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8010148:	258c      	movs	r5, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 801014a:	685a      	ldr	r2, [r3, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 801014c:	4e85      	ldr	r6, [pc, #532]	; (8010364 <LoRaMacProcess+0x348>)
    uint8_t *payload = RxDoneParams.Payload;
 801014e:	9205      	str	r2, [sp, #20]
    uint16_t size = RxDoneParams.Size;
 8010150:	891a      	ldrh	r2, [r3, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8010152:	00ed      	lsls	r5, r5, #3
    uint16_t size = RxDoneParams.Size;
 8010154:	9204      	str	r2, [sp, #16]
    int16_t rssi = RxDoneParams.Rssi;
 8010156:	210a      	movs	r1, #10
 8010158:	5e5a      	ldrsh	r2, [r3, r1]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 801015a:	5971      	ldr	r1, [r6, r5]
    int16_t rssi = RxDoneParams.Rssi;
 801015c:	9209      	str	r2, [sp, #36]	; 0x24
    int8_t snr = RxDoneParams.Snr;
 801015e:	220c      	movs	r2, #12
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8010160:	6c49      	ldr	r1, [r1, #68]	; 0x44
    int8_t snr = RxDoneParams.Snr;
 8010162:	569a      	ldrsb	r2, [r3, r2]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8010164:	910c      	str	r1, [sp, #48]	; 0x30
    MacCtx.McpsConfirm.AckReceived = false;
 8010166:	2184      	movs	r1, #132	; 0x84
    uint32_t downLinkCounter = 0;
 8010168:	2300      	movs	r3, #0
    MacCtx.McpsIndication.Rssi = rssi;
 801016a:	4668      	mov	r0, sp
    MacCtx.McpsConfirm.AckReceived = false;
 801016c:	00c9      	lsls	r1, r1, #3
 801016e:	5473      	strb	r3, [r6, r1]
    MacCtx.McpsIndication.Rssi = rssi;
 8010170:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8010172:	4983      	ldr	r1, [pc, #524]	; (8010380 <LoRaMacProcess+0x364>)
    MacCtx.McpsIndication.Snr = snr;
 8010174:	b2d2      	uxtb	r2, r2
    MacCtx.McpsIndication.Rssi = rssi;
 8010176:	5270      	strh	r0, [r6, r1]
    MacCtx.McpsIndication.Snr = snr;
 8010178:	4669      	mov	r1, sp
 801017a:	9206      	str	r2, [sp, #24]
 801017c:	7e09      	ldrb	r1, [r1, #24]
 801017e:	4a81      	ldr	r2, [pc, #516]	; (8010384 <LoRaMacProcess+0x368>)
    uint32_t downLinkCounter = 0;
 8010180:	9315      	str	r3, [sp, #84]	; 0x54
    MacCtx.McpsIndication.Snr = snr;
 8010182:	54b1      	strb	r1, [r6, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8010184:	4a80      	ldr	r2, [pc, #512]	; (8010388 <LoRaMacProcess+0x36c>)
 8010186:	4c81      	ldr	r4, [pc, #516]	; (801038c <LoRaMacProcess+0x370>)
 8010188:	5cb2      	ldrb	r2, [r6, r2]
    MacCtx.McpsIndication.RxData = false;
 801018a:	4f81      	ldr	r7, [pc, #516]	; (8010390 <LoRaMacProcess+0x374>)
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 801018c:	5532      	strb	r2, [r6, r4]
    MacCtx.McpsIndication.Port = 0;
 801018e:	4a81      	ldr	r2, [pc, #516]	; (8010394 <LoRaMacProcess+0x378>)
    MacCtx.McpsIndication.RxData = false;
 8010190:	55f3      	strb	r3, [r6, r7]
    MacCtx.McpsIndication.Port = 0;
 8010192:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8010194:	4a80      	ldr	r2, [pc, #512]	; (8010398 <LoRaMacProcess+0x37c>)
 8010196:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8010198:	4a80      	ldr	r2, [pc, #512]	; (801039c <LoRaMacProcess+0x380>)
 801019a:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 801019c:	4a80      	ldr	r2, [pc, #512]	; (80103a0 <LoRaMacProcess+0x384>)
 801019e:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80101a0:	3204      	adds	r2, #4
 80101a2:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80101a4:	4a7f      	ldr	r2, [pc, #508]	; (80103a4 <LoRaMacProcess+0x388>)
 80101a6:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80101a8:	3202      	adds	r2, #2
 80101aa:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80101ac:	4a7e      	ldr	r2, [pc, #504]	; (80103a8 <LoRaMacProcess+0x38c>)
 80101ae:	54b3      	strb	r3, [r6, r2]
    Radio.Sleep( );
 80101b0:	4b6d      	ldr	r3, [pc, #436]	; (8010368 <LoRaMacProcess+0x34c>)
 80101b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101b4:	9307      	str	r3, [sp, #28]
 80101b6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80101b8:	23ea      	movs	r3, #234	; 0xea
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	18f0      	adds	r0, r6, r3
 80101be:	f003 ff31 	bl	8014024 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80101c2:	9904      	ldr	r1, [sp, #16]
 80101c4:	9805      	ldr	r0, [sp, #20]
 80101c6:	f001 fc03 	bl	80119d0 <LoRaMacClassBRxBeacon>
 80101ca:	4b72      	ldr	r3, [pc, #456]	; (8010394 <LoRaMacProcess+0x378>)
 80101cc:	900d      	str	r0, [sp, #52]	; 0x34
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	4b71      	ldr	r3, [pc, #452]	; (8010398 <LoRaMacProcess+0x37c>)
 80101d2:	970e      	str	r7, [sp, #56]	; 0x38
 80101d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d6:	4b71      	ldr	r3, [pc, #452]	; (801039c <LoRaMacProcess+0x380>)
 80101d8:	9310      	str	r3, [sp, #64]	; 0x40
 80101da:	4b71      	ldr	r3, [pc, #452]	; (80103a0 <LoRaMacProcess+0x384>)
 80101dc:	930a      	str	r3, [sp, #40]	; 0x28
 80101de:	4b71      	ldr	r3, [pc, #452]	; (80103a4 <LoRaMacProcess+0x388>)
 80101e0:	9311      	str	r3, [sp, #68]	; 0x44
 80101e2:	4b71      	ldr	r3, [pc, #452]	; (80103a8 <LoRaMacProcess+0x38c>)
 80101e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d100      	bne.n	80101ec <LoRaMacProcess+0x1d0>
 80101ea:	e08a      	b.n	8010302 <LoRaMacProcess+0x2e6>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80101ec:	466a      	mov	r2, sp
 80101ee:	4b6f      	ldr	r3, [pc, #444]	; (80103ac <LoRaMacProcess+0x390>)
 80101f0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80101f2:	52f2      	strh	r2, [r6, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80101f4:	466a      	mov	r2, sp
 80101f6:	4b6e      	ldr	r3, [pc, #440]	; (80103b0 <LoRaMacProcess+0x394>)
 80101f8:	7e12      	ldrb	r2, [r2, #24]
 80101fa:	54f2      	strb	r2, [r6, r3]
        if( events.Events.TxTimeout == 1 )
 80101fc:	466b      	mov	r3, sp
 80101fe:	2220      	movs	r2, #32
 8010200:	189b      	adds	r3, r3, r2
 8010202:	781d      	ldrb	r5, [r3, #0]
 8010204:	076b      	lsls	r3, r5, #29
 8010206:	d516      	bpl.n	8010236 <LoRaMacProcess+0x21a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010208:	238c      	movs	r3, #140	; 0x8c
 801020a:	4c56      	ldr	r4, [pc, #344]	; (8010364 <LoRaMacProcess+0x348>)
 801020c:	00db      	lsls	r3, r3, #3
 801020e:	58e3      	ldr	r3, [r4, r3]
 8010210:	33c8      	adds	r3, #200	; 0xc8
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	2b02      	cmp	r3, #2
 8010216:	d100      	bne.n	801021a <LoRaMacProcess+0x1fe>
 8010218:	e2d0      	b.n	80107bc <LoRaMacProcess+0x7a0>
        Radio.Sleep( );
 801021a:	4b53      	ldr	r3, [pc, #332]	; (8010368 <LoRaMacProcess+0x34c>)
 801021c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801021e:	9304      	str	r3, [sp, #16]
 8010220:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010222:	2002      	movs	r0, #2
 8010224:	4b54      	ldr	r3, [pc, #336]	; (8010378 <LoRaMacProcess+0x35c>)
 8010226:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010228:	f002 fbba 	bl	80129a0 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 801022c:	2310      	movs	r3, #16
 801022e:	4a50      	ldr	r2, [pc, #320]	; (8010370 <LoRaMacProcess+0x354>)
 8010230:	5ca1      	ldrb	r1, [r4, r2]
 8010232:	430b      	orrs	r3, r1
 8010234:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 8010236:	07ab      	lsls	r3, r5, #30
 8010238:	d503      	bpl.n	8010242 <LoRaMacProcess+0x226>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 801023a:	2106      	movs	r1, #6
 801023c:	2005      	movs	r0, #5
 801023e:	f7fe ff91 	bl	800f164 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8010242:	07eb      	lsls	r3, r5, #31
 8010244:	d503      	bpl.n	801024e <LoRaMacProcess+0x232>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010246:	2104      	movs	r1, #4
 8010248:	2003      	movs	r0, #3
 801024a:	f7fe ff8b 	bl	800f164 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 801024e:	f001 fbdc 	bl	8011a0a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010252:	4d47      	ldr	r5, [pc, #284]	; (8010370 <LoRaMacProcess+0x354>)
 8010254:	4c43      	ldr	r4, [pc, #268]	; (8010364 <LoRaMacProcess+0x348>)
 8010256:	5d62      	ldrb	r2, [r4, r5]
 8010258:	06d3      	lsls	r3, r2, #27
 801025a:	d400      	bmi.n	801025e <LoRaMacProcess+0x242>
 801025c:	e2e2      	b.n	8010824 <LoRaMacProcess+0x808>
        if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801025e:	21d6      	movs	r1, #214	; 0xd6
 8010260:	0089      	lsls	r1, r1, #2
 8010262:	5863      	ldr	r3, [r4, r1]
 8010264:	0618      	lsls	r0, r3, #24
 8010266:	d502      	bpl.n	801026e <LoRaMacProcess+0x252>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010268:	2082      	movs	r0, #130	; 0x82
 801026a:	4383      	bics	r3, r0
 801026c:	5063      	str	r3, [r4, r1]
        if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) || ( ( MacCtx.MacFlags.Bits.McpsReq == 1 ) ) )
 801026e:	2305      	movs	r3, #5
 8010270:	421a      	tst	r2, r3
 8010272:	d000      	beq.n	8010276 <LoRaMacProcess+0x25a>
 8010274:	e2a5      	b.n	80107c2 <LoRaMacProcess+0x7a6>
            if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8010276:	5d63      	ldrb	r3, [r4, r5]
 8010278:	075b      	lsls	r3, r3, #29
 801027a:	d516      	bpl.n	80102aa <LoRaMacProcess+0x28e>
 801027c:	2000      	movs	r0, #0
 801027e:	f002 fbb1 	bl	80129e4 <LoRaMacConfirmQueueIsCmdActive>
 8010282:	2800      	cmp	r0, #0
 8010284:	d011      	beq.n	80102aa <LoRaMacProcess+0x28e>
                if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010286:	2000      	movs	r0, #0
 8010288:	f002 fb6a 	bl	8012960 <LoRaMacConfirmQueueGetStatus>
 801028c:	1e06      	subs	r6, r0, #0
 801028e:	d106      	bne.n	801029e <LoRaMacProcess+0x282>
                    LoRaMacResetFCnts( );
 8010290:	f002 fcb2 	bl	8012bf8 <LoRaMacResetFCnts>
                    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 8010294:	238c      	movs	r3, #140	; 0x8c
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	58e3      	ldr	r3, [r4, r3]
 801029a:	33ff      	adds	r3, #255	; 0xff
 801029c:	745e      	strb	r6, [r3, #17]
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801029e:	22d6      	movs	r2, #214	; 0xd6
 80102a0:	2302      	movs	r3, #2
 80102a2:	0092      	lsls	r2, r2, #2
 80102a4:	58a1      	ldr	r1, [r4, r2]
 80102a6:	4399      	bics	r1, r3
 80102a8:	50a1      	str	r1, [r4, r2]
            if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80102aa:	5d60      	ldrb	r0, [r4, r5]
 80102ac:	07c3      	lsls	r3, r0, #31
 80102ae:	d400      	bmi.n	80102b2 <LoRaMacProcess+0x296>
 80102b0:	e2b8      	b.n	8010824 <LoRaMacProcess+0x808>
 80102b2:	228c      	movs	r2, #140	; 0x8c
                if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80102b4:	4b3f      	ldr	r3, [pc, #252]	; (80103b4 <LoRaMacProcess+0x398>)
 80102b6:	00d2      	lsls	r2, r2, #3
 80102b8:	5ce3      	ldrb	r3, [r4, r3]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d002      	beq.n	80102c4 <LoRaMacProcess+0x2a8>
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d000      	beq.n	80102c4 <LoRaMacProcess+0x2a8>
 80102c2:	e31e      	b.n	8010902 <LoRaMacProcess+0x8e6>
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 80102c4:	58a3      	ldr	r3, [r4, r2]
 80102c6:	0019      	movs	r1, r3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80102c8:	001a      	movs	r2, r3
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 80102ca:	31ff      	adds	r1, #255	; 0xff
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80102cc:	32f4      	adds	r2, #244	; 0xf4
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 80102ce:	7c49      	ldrb	r1, [r1, #17]
 80102d0:	7812      	ldrb	r2, [r2, #0]
 80102d2:	4291      	cmp	r1, r2
 80102d4:	d20b      	bcs.n	80102ee <LoRaMacProcess+0x2d2>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80102d6:	0782      	lsls	r2, r0, #30
 80102d8:	d400      	bmi.n	80102dc <LoRaMacProcess+0x2c0>
 80102da:	e34a      	b.n	8010972 <LoRaMacProcess+0x956>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80102dc:	33c8      	adds	r3, #200	; 0xc8
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d004      	beq.n	80102ee <LoRaMacProcess+0x2d2>
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80102e4:	4b28      	ldr	r3, [pc, #160]	; (8010388 <LoRaMacProcess+0x36c>)
 80102e6:	5ce3      	ldrb	r3, [r4, r3]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d000      	beq.n	80102ee <LoRaMacProcess+0x2d2>
 80102ec:	e341      	b.n	8010972 <LoRaMacProcess+0x956>
                    StopRetransmission( );
 80102ee:	f7fe fea1 	bl	800f034 <StopRetransmission>
 80102f2:	e297      	b.n	8010824 <LoRaMacProcess+0x808>
        OpenContinuousRx2Window( );
 80102f4:	f7fe ff2a 	bl	800f14c <OpenContinuousRx2Window>
 80102f8:	e6b2      	b.n	8010060 <LoRaMacProcess+0x44>
        MacCtx.LastTxIsJoinRequest = false;
 80102fa:	2200      	movs	r2, #0
 80102fc:	e6fa      	b.n	80100f4 <LoRaMacProcess+0xd8>
        txDone.Joined  = true;
 80102fe:	2201      	movs	r2, #1
 8010300:	e708      	b.n	8010114 <LoRaMacProcess+0xf8>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010302:	5973      	ldr	r3, [r6, r5]
 8010304:	33c8      	adds	r3, #200	; 0xc8
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d10a      	bne.n	8010322 <LoRaMacProcess+0x306>
        if( LoRaMacClassBIsPingExpected( ) == true )
 801030c:	f001 fb64 	bl	80119d8 <LoRaMacClassBIsPingExpected>
 8010310:	1e05      	subs	r5, r0, #0
 8010312:	d019      	beq.n	8010348 <LoRaMacProcess+0x32c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010314:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010316:	f001 fb54 	bl	80119c2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( );
 801031a:	f001 fb57 	bl	80119cc <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 801031e:	2303      	movs	r3, #3
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 8010320:	5533      	strb	r3, [r6, r4]
    macHdr.Value = payload[pktHeaderLen++];
 8010322:	9b05      	ldr	r3, [sp, #20]
 8010324:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 8010326:	0958      	lsrs	r0, r3, #5
 8010328:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 801032a:	9309      	str	r3, [sp, #36]	; 0x24
    switch( macHdr.Bits.MType )
 801032c:	2806      	cmp	r0, #6
 801032e:	d900      	bls.n	8010332 <LoRaMacProcess+0x316>
 8010330:	e237      	b.n	80107a2 <LoRaMacProcess+0x786>
 8010332:	258c      	movs	r5, #140	; 0x8c
 8010334:	00ed      	lsls	r5, r5, #3
 8010336:	f7f0 fc35 	bl	8000ba4 <__gnu_thumb1_case_uhi>
 801033a:	003f      	.short	0x003f
 801033c:	00c80234 	.word	0x00c80234
 8010340:	00c50234 	.word	0x00c50234
 8010344:	02190234 	.word	0x02190234
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010348:	f001 fb48 	bl	80119dc <LoRaMacClassBIsMulticastExpected>
 801034c:	2800      	cmp	r0, #0
 801034e:	d0e8      	beq.n	8010322 <LoRaMacProcess+0x306>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010350:	0028      	movs	r0, r5
 8010352:	f001 fb37 	bl	80119c4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( );
 8010356:	f001 fb3a 	bl	80119ce <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 801035a:	2304      	movs	r3, #4
 801035c:	e7e0      	b.n	8010320 <LoRaMacProcess+0x304>
 801035e:	46c0      	nop			; (mov r8, r8)
 8010360:	200010c4 	.word	0x200010c4
 8010364:	200010c8 	.word	0x200010c8
 8010368:	08018acc 	.word	0x08018acc
 801036c:	00000219 	.word	0x00000219
 8010370:	0000045d 	.word	0x0000045d
 8010374:	20002258 	.word	0x20002258
 8010378:	0000041d 	.word	0x0000041d
 801037c:	2000225c 	.word	0x2000225c
 8010380:	00000412 	.word	0x00000412
 8010384:	00000414 	.word	0x00000414
 8010388:	0000045c 	.word	0x0000045c
 801038c:	00000415 	.word	0x00000415
 8010390:	00000411 	.word	0x00000411
 8010394:	00000407 	.word	0x00000407
 8010398:	00000406 	.word	0x00000406
 801039c:	00000409 	.word	0x00000409
 80103a0:	0000040c 	.word	0x0000040c
 80103a4:	00000416 	.word	0x00000416
 80103a8:	00000404 	.word	0x00000404
 80103ac:	00000452 	.word	0x00000452
 80103b0:	00000454 	.word	0x00000454
 80103b4:	0000041c 	.word	0x0000041c
            macMsgJoinAccept.Buffer = payload;
 80103b8:	9b05      	ldr	r3, [sp, #20]
 80103ba:	ac18      	add	r4, sp, #96	; 0x60
 80103bc:	9318      	str	r3, [sp, #96]	; 0x60
            macMsgJoinAccept.BufSize = size;
 80103be:	466b      	mov	r3, sp
 80103c0:	7c1b      	ldrb	r3, [r3, #16]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80103c2:	5972      	ldr	r2, [r6, r5]
            macMsgJoinAccept.BufSize = size;
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	466b      	mov	r3, sp
 80103c8:	7c1b      	ldrb	r3, [r3, #16]
 80103ca:	7123      	strb	r3, [r4, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80103cc:	2389      	movs	r3, #137	; 0x89
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	5cd7      	ldrb	r7, [r2, r3]
 80103d2:	2f00      	cmp	r7, #0
 80103d4:	d006      	beq.n	80103e4 <LoRaMacProcess+0x3c8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80103d6:	2101      	movs	r1, #1
 80103d8:	4bd6      	ldr	r3, [pc, #856]	; (8010734 <LoRaMacProcess+0x718>)
 80103da:	4ad7      	ldr	r2, [pc, #860]	; (8010738 <LoRaMacProcess+0x71c>)
 80103dc:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 80103de:	f7fe fcdf 	bl	800eda0 <PrepareRxDoneAbort>
 80103e2:	e70b      	b.n	80101fc <LoRaMacProcess+0x1e0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 80103e4:	0022      	movs	r2, r4
 80103e6:	6871      	ldr	r1, [r6, #4]
 80103e8:	20ff      	movs	r0, #255	; 0xff
 80103ea:	f001 fe1f 	bl	801202c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d160      	bne.n	80104b4 <LoRaMacProcess+0x498>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80103f2:	7aa2      	ldrb	r2, [r4, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80103f4:	7ae1      	ldrb	r1, [r4, #11]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80103f6:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80103f8:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80103fa:	5973      	ldr	r3, [r6, r5]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80103fc:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80103fe:	7a61      	ldrb	r1, [r4, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010400:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010402:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010404:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8010406:	68e2      	ldr	r2, [r4, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010408:	31f5      	adds	r1, #245	; 0xf5
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 801040a:	645a      	str	r2, [r3, #68]	; 0x44
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801040c:	7c22      	ldrb	r2, [r4, #16]
 801040e:	3911      	subs	r1, #17
 8010410:	0652      	lsls	r2, r2, #25
 8010412:	0f52      	lsrs	r2, r2, #29
 8010414:	744a      	strb	r2, [r1, #17]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010416:	7c22      	ldrb	r2, [r4, #16]
 8010418:	0712      	lsls	r2, r2, #28
 801041a:	0f12      	lsrs	r2, r2, #28
 801041c:	760a      	strb	r2, [r1, #24]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801041e:	7c62      	ldrb	r2, [r4, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8010420:	2a00      	cmp	r2, #0
 8010422:	d045      	beq.n	80104b0 <LoRaMacProcess+0x494>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8010424:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8010426:	22fa      	movs	r2, #250	; 0xfa
 8010428:	6808      	ldr	r0, [r1, #0]
 801042a:	0092      	lsls	r2, r2, #2
 801042c:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 801042e:	20fa      	movs	r0, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8010430:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010432:	0019      	movs	r1, r3
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8010434:	2400      	movs	r4, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010436:	0080      	lsls	r0, r0, #2
 8010438:	1812      	adds	r2, r2, r0
 801043a:	31e8      	adds	r1, #232	; 0xe8
 801043c:	600a      	str	r2, [r1, #0]
                applyCFList.Size = size - 17;
 801043e:	9d04      	ldr	r5, [sp, #16]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8010440:	4abe      	ldr	r2, [pc, #760]	; (801073c <LoRaMacProcess+0x720>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010442:	a916      	add	r1, sp, #88	; 0x58
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8010444:	549c      	strb	r4, [r3, r2]
                applyCFList.Size = size - 17;
 8010446:	3d11      	subs	r5, #17
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010448:	3ae9      	subs	r2, #233	; 0xe9
                applyCFList.Size = size - 17;
 801044a:	710d      	strb	r5, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801044c:	a80e      	add	r0, sp, #56	; 0x38
 801044e:	3aff      	subs	r2, #255	; 0xff
 8010450:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8010452:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010454:	9216      	str	r2, [sp, #88]	; 0x58
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8010456:	f002 fcda 	bl	8012e0e <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 801045a:	238c      	movs	r3, #140	; 0x8c
 801045c:	00db      	lsls	r3, r3, #3
 801045e:	58f2      	ldr	r2, [r6, r3]
 8010460:	2389      	movs	r3, #137	; 0x89
 8010462:	2102      	movs	r1, #2
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010468:	0020      	movs	r0, r4
 801046a:	f002 fabb 	bl	80129e4 <LoRaMacConfirmQueueIsCmdActive>
 801046e:	42a0      	cmp	r0, r4
 8010470:	d003      	beq.n	801047a <LoRaMacProcess+0x45e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8010472:	0021      	movs	r1, r4
 8010474:	0020      	movs	r0, r4
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010476:	f002 fa55 	bl	8012924 <LoRaMacConfirmQueueSetStatus>
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 801047a:	238c      	movs	r3, #140	; 0x8c
 801047c:	4cae      	ldr	r4, [pc, #696]	; (8010738 <LoRaMacProcess+0x71c>)
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	58e3      	ldr	r3, [r4, r3]
 8010482:	4aaf      	ldr	r2, [pc, #700]	; (8010740 <LoRaMacProcess+0x724>)
    if( nodeAckRequested == false )
 8010484:	5c9a      	ldrb	r2, [r3, r2]
 8010486:	2a00      	cmp	r2, #0
 8010488:	d000      	beq.n	801048c <LoRaMacProcess+0x470>
 801048a:	e190      	b.n	80107ae <LoRaMacProcess+0x792>
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 801048c:	33c8      	adds	r3, #200	; 0xc8
        if( devClass == CLASS_C )
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	2b02      	cmp	r3, #2
 8010492:	d101      	bne.n	8010498 <LoRaMacProcess+0x47c>
            OnAckTimeoutTimerEvent( );
 8010494:	f7fe fc62 	bl	800ed5c <OnAckTimeoutTimerEvent>
    if( MacCtx.AckTimeoutTimer.IsRunning == false )
 8010498:	23fd      	movs	r3, #253	; 0xfd
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	5ce3      	ldrb	r3, [r4, r3]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d000      	beq.n	80104a4 <LoRaMacProcess+0x488>
 80104a2:	e6ab      	b.n	80101fc <LoRaMacProcess+0x1e0>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80104a4:	4aa7      	ldr	r2, [pc, #668]	; (8010744 <LoRaMacProcess+0x728>)
 80104a6:	3310      	adds	r3, #16
 80104a8:	5ca1      	ldrb	r1, [r4, r2]
 80104aa:	430b      	orrs	r3, r1
 80104ac:	54a3      	strb	r3, [r4, r2]
 80104ae:	e6a5      	b.n	80101fc <LoRaMacProcess+0x1e0>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80104b0:	2201      	movs	r2, #1
 80104b2:	e7b7      	b.n	8010424 <LoRaMacProcess+0x408>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80104b4:	0038      	movs	r0, r7
 80104b6:	f002 fa95 	bl	80129e4 <LoRaMacConfirmQueueIsCmdActive>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d0dd      	beq.n	801047a <LoRaMacProcess+0x45e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80104be:	0039      	movs	r1, r7
 80104c0:	2007      	movs	r0, #7
 80104c2:	e7d8      	b.n	8010476 <LoRaMacProcess+0x45a>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80104c4:	2301      	movs	r3, #1
 80104c6:	4aa0      	ldr	r2, [pc, #640]	; (8010748 <LoRaMacProcess+0x72c>)
 80104c8:	54b3      	strb	r3, [r6, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80104ca:	4c9b      	ldr	r4, [pc, #620]	; (8010738 <LoRaMacProcess+0x71c>)
 80104cc:	a913      	add	r1, sp, #76	; 0x4c
 80104ce:	5963      	ldr	r3, [r4, r5]
 80104d0:	001a      	movs	r2, r3
 80104d2:	32ff      	adds	r2, #255	; 0xff
 80104d4:	7890      	ldrb	r0, [r2, #2]
 80104d6:	7088      	strb	r0, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80104d8:	2081      	movs	r0, #129	; 0x81
 80104da:	00c0      	lsls	r0, r0, #3
 80104dc:	5c20      	ldrb	r0, [r4, r0]
 80104de:	7048      	strb	r0, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80104e0:	200c      	movs	r0, #12
 80104e2:	7008      	strb	r0, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 80104e4:	7d92      	ldrb	r2, [r2, #22]
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	d001      	beq.n	80104ee <LoRaMacProcess+0x4d2>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80104ea:	220d      	movs	r2, #13
 80104ec:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80104ee:	7818      	ldrb	r0, [r3, #0]
 80104f0:	f002 fc5f 	bl	8012db2 <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value )
 80104f4:	9a04      	ldr	r2, [sp, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80104f6:	9014      	str	r0, [sp, #80]	; 0x50
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value )
 80104f8:	3a0d      	subs	r2, #13
 80104fa:	1c13      	adds	r3, r2, #0
 80104fc:	0412      	lsls	r2, r2, #16
 80104fe:	d500      	bpl.n	8010502 <LoRaMacProcess+0x4e6>
 8010500:	2300      	movs	r3, #0
 8010502:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010504:	b21b      	sxth	r3, r3
 8010506:	4293      	cmp	r3, r2
 8010508:	d900      	bls.n	801050c <LoRaMacProcess+0x4f0>
 801050a:	e764      	b.n	80103d6 <LoRaMacProcess+0x3ba>
            macMsgData.Buffer = payload;
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	ad22      	add	r5, sp, #136	; 0x88
 8010510:	9322      	str	r3, [sp, #136]	; 0x88
            macMsgData.BufSize = size;
 8010512:	466b      	mov	r3, sp
 8010514:	7c1b      	ldrb	r3, [r3, #16]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010516:	22ff      	movs	r2, #255	; 0xff
            macMsgData.BufSize = size;
 8010518:	712b      	strb	r3, [r5, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801051a:	2390      	movs	r3, #144	; 0x90
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	18e3      	adds	r3, r4, r3
 8010520:	626b      	str	r3, [r5, #36]	; 0x24
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010522:	0028      	movs	r0, r5
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010524:	ab2c      	add	r3, sp, #176	; 0xb0
 8010526:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010528:	f002 fbe4 	bl	8012cf4 <LoRaMacParserData>
 801052c:	2800      	cmp	r0, #0
 801052e:	d000      	beq.n	8010532 <LoRaMacProcess+0x516>
 8010530:	e751      	b.n	80103d6 <LoRaMacProcess+0x3ba>
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010532:	a916      	add	r1, sp, #88	; 0x58
 8010534:	0028      	movs	r0, r5
 8010536:	f7ff fd4b 	bl	800ffd0 <DetermineFrameType>
 801053a:	2800      	cmp	r0, #0
 801053c:	d000      	beq.n	8010540 <LoRaMacProcess+0x524>
 801053e:	e74a      	b.n	80103d6 <LoRaMacProcess+0x3ba>
            if( IsFPortAllowed( macMsgData.FPort ) == false )
 8010540:	2351      	movs	r3, #81	; 0x51
 8010542:	aa0e      	add	r2, sp, #56	; 0x38
 8010544:	189b      	adds	r3, r3, r2
    if( fPort > 224 )
 8010546:	7fdb      	ldrb	r3, [r3, #31]
 8010548:	2be0      	cmp	r3, #224	; 0xe0
 801054a:	d900      	bls.n	801054e <LoRaMacProcess+0x532>
 801054c:	e743      	b.n	80103d6 <LoRaMacProcess+0x3ba>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 801054e:	238c      	movs	r3, #140	; 0x8c
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	58e3      	ldr	r3, [r4, r3]
 8010554:	68aa      	ldr	r2, [r5, #8]
 8010556:	0019      	movs	r1, r3
            downLinkCounter = 0;
 8010558:	9015      	str	r0, [sp, #84]	; 0x54
 801055a:	314c      	adds	r1, #76	; 0x4c
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 801055c:	680c      	ldr	r4, [r1, #0]
 801055e:	4294      	cmp	r4, r2
 8010560:	d14a      	bne.n	80105f8 <LoRaMacProcess+0x5dc>
 8010562:	7a0c      	ldrb	r4, [r1, #8]
 8010564:	2c00      	cmp	r4, #0
 8010566:	d047      	beq.n	80105f8 <LoRaMacProcess+0x5dc>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 8010568:	0140      	lsls	r0, r0, #5
 801056a:	1818      	adds	r0, r3, r0
 801056c:	0001      	movs	r1, r0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 801056e:	920c      	str	r2, [sp, #48]	; 0x30
                    multicast = 1;
 8010570:	2201      	movs	r2, #1
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 8010572:	3148      	adds	r1, #72	; 0x48
 8010574:	7809      	ldrb	r1, [r1, #0]
 8010576:	9104      	str	r1, [sp, #16]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8010578:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801057a:	6809      	ldr	r1, [r1, #0]
 801057c:	9115      	str	r1, [sp, #84]	; 0x54
            multicast = 0;
 801057e:	9205      	str	r2, [sp, #20]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010580:	2214      	movs	r2, #20
 8010582:	a913      	add	r1, sp, #76	; 0x4c
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010584:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010586:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010588:	f002 fc13 	bl	8012db2 <RegionGetPhyParam>
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 801058c:	ab16      	add	r3, sp, #88	; 0x58
 801058e:	7819      	ldrb	r1, [r3, #0]
 8010590:	ab15      	add	r3, sp, #84	; 0x54
 8010592:	9302      	str	r3, [sp, #8]
 8010594:	2313      	movs	r3, #19
 8010596:	aa0e      	add	r2, sp, #56	; 0x38
 8010598:	278c      	movs	r7, #140	; 0x8c
 801059a:	189b      	adds	r3, r3, r2
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	2388      	movs	r3, #136	; 0x88
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80105a0:	9014      	str	r0, [sp, #80]	; 0x50
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80105a2:	4c65      	ldr	r4, [pc, #404]	; (8010738 <LoRaMacProcess+0x71c>)
 80105a4:	b280      	uxth	r0, r0
 80105a6:	9000      	str	r0, [sp, #0]
 80105a8:	00ff      	lsls	r7, r7, #3
 80105aa:	59e2      	ldr	r2, [r4, r7]
 80105ac:	ae22      	add	r6, sp, #136	; 0x88
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	58d3      	ldr	r3, [r2, r3]
 80105b2:	9804      	ldr	r0, [sp, #16]
 80105b4:	0032      	movs	r2, r6
 80105b6:	f002 fa89 	bl	8012acc <LoRaMacGetFCntDown>
 80105ba:	4d5e      	ldr	r5, [pc, #376]	; (8010734 <LoRaMacProcess+0x718>)
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 80105bc:	2800      	cmp	r0, #0
 80105be:	d028      	beq.n	8010612 <LoRaMacProcess+0x5f6>
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 80105c0:	2801      	cmp	r0, #1
 80105c2:	d120      	bne.n	8010606 <LoRaMacProcess+0x5ea>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80105c4:	2308      	movs	r3, #8
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 80105c6:	4a5d      	ldr	r2, [pc, #372]	; (801073c <LoRaMacProcess+0x720>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80105c8:	5563      	strb	r3, [r4, r5]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 80105ca:	59e3      	ldr	r3, [r4, r7]
 80105cc:	5c9a      	ldrb	r2, [r3, r2]
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	d10d      	bne.n	80105ee <LoRaMacProcess+0x5d2>
 80105d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105d4:	321f      	adds	r2, #31
 80105d6:	4391      	bics	r1, r2
 80105d8:	000a      	movs	r2, r1
 80105da:	29a0      	cmp	r1, #160	; 0xa0
 80105dc:	d107      	bne.n	80105ee <LoRaMacProcess+0x5d2>
 80105de:	3289      	adds	r2, #137	; 0x89
 80105e0:	32ff      	adds	r2, #255	; 0xff
 80105e2:	5899      	ldr	r1, [r3, r2]
 80105e4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80105e6:	4291      	cmp	r1, r2
 80105e8:	d101      	bne.n	80105ee <LoRaMacProcess+0x5d2>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 80105ea:	4a58      	ldr	r2, [pc, #352]	; (801074c <LoRaMacProcess+0x730>)
 80105ec:	5498      	strb	r0, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80105ee:	2383      	movs	r3, #131	; 0x83
 80105f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	50e2      	str	r2, [r4, r3]
 80105f6:	e6f2      	b.n	80103de <LoRaMacProcess+0x3c2>
 80105f8:	3001      	adds	r0, #1
 80105fa:	3120      	adds	r1, #32
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80105fc:	2804      	cmp	r0, #4
 80105fe:	d1ad      	bne.n	801055c <LoRaMacProcess+0x540>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010600:	9004      	str	r0, [sp, #16]
            multicast = 0;
 8010602:	2200      	movs	r2, #0
 8010604:	e7bb      	b.n	801057e <LoRaMacProcess+0x562>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8010606:	230a      	movs	r3, #10
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 8010608:	2802      	cmp	r0, #2
 801060a:	d000      	beq.n	801060e <LoRaMacProcess+0x5f2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801060c:	2301      	movs	r3, #1
 801060e:	5563      	strb	r3, [r4, r5]
 8010610:	e7ed      	b.n	80105ee <LoRaMacProcess+0x5d2>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010612:	ab0e      	add	r3, sp, #56	; 0x38
 8010614:	7cda      	ldrb	r2, [r3, #19]
 8010616:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010618:	9600      	str	r6, [sp, #0]
 801061a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801061c:	9804      	ldr	r0, [sp, #16]
 801061e:	f001 fe85 	bl	801232c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010622:	2800      	cmp	r0, #0
 8010624:	d005      	beq.n	8010632 <LoRaMacProcess+0x616>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010626:	230b      	movs	r3, #11
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8010628:	2802      	cmp	r0, #2
 801062a:	d000      	beq.n	801062e <LoRaMacProcess+0x612>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801062c:	230c      	movs	r3, #12
 801062e:	5563      	strb	r3, [r4, r5]
 8010630:	e6d5      	b.n	80103de <LoRaMacProcess+0x3c2>
            MacCtx.McpsIndication.Multicast = multicast;
 8010632:	466a      	mov	r2, sp
 8010634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010636:	7d12      	ldrb	r2, [r2, #20]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8010638:	9910      	ldr	r1, [sp, #64]	; 0x40
            MacCtx.McpsIndication.Multicast = multicast;
 801063a:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 801063c:	7b33      	ldrb	r3, [r6, #12]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801063e:	5560      	strb	r0, [r4, r5]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8010640:	06da      	lsls	r2, r3, #27
 8010642:	0fd2      	lsrs	r2, r2, #31
 8010644:	5462      	strb	r2, [r4, r1]
            MacCtx.McpsIndication.Buffer = NULL;
 8010646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010648:	9915      	ldr	r1, [sp, #84]	; 0x54
            MacCtx.McpsIndication.Buffer = NULL;
 801064a:	50a0      	str	r0, [r4, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 801064c:	2282      	movs	r2, #130	; 0x82
 801064e:	00d2      	lsls	r2, r2, #3
 8010650:	54a0      	strb	r0, [r4, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010652:	3208      	adds	r2, #8
 8010654:	50a1      	str	r1, [r4, r2]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010656:	069b      	lsls	r3, r3, #26
 8010658:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801065a:	0fdb      	lsrs	r3, r3, #31
 801065c:	54a3      	strb	r3, [r4, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801065e:	4a3c      	ldr	r2, [pc, #240]	; (8010750 <LoRaMacProcess+0x734>)
 8010660:	54a0      	strb	r0, [r4, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010662:	3203      	adds	r2, #3
 8010664:	54a3      	strb	r3, [r4, r2]
            MacCtx.NvmCtx->AdrAckCounter = 0;
 8010666:	59e3      	ldr	r3, [r4, r7]
 8010668:	001a      	movs	r2, r3
 801066a:	32cc      	adds	r2, #204	; 0xcc
 801066c:	6010      	str	r0, [r2, #0]
            if( multicast == 1 )
 801066e:	9a05      	ldr	r2, [sp, #20]
 8010670:	2a01      	cmp	r2, #1
 8010672:	d121      	bne.n	80106b8 <LoRaMacProcess+0x69c>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010674:	2302      	movs	r3, #2
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010678:	54a3      	strb	r3, [r4, r2]
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 801067a:	2313      	movs	r3, #19
 801067c:	aa0e      	add	r2, sp, #56	; 0x38
 801067e:	189b      	adds	r3, r3, r2
 8010680:	7818      	ldrb	r0, [r3, #0]
 8010682:	f002 fa7b 	bl	8012b7c <LoRaMacSetFCntDown>
 8010686:	2800      	cmp	r0, #0
 8010688:	d000      	beq.n	801068c <LoRaMacProcess+0x670>
 801068a:	e6a4      	b.n	80103d6 <LoRaMacProcess+0x3ba>
            if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801068c:	4b31      	ldr	r3, [pc, #196]	; (8010754 <LoRaMacProcess+0x738>)
 801068e:	5ce3      	ldrb	r3, [r4, r3]
 8010690:	2b01      	cmp	r3, #1
 8010692:	d103      	bne.n	801069c <LoRaMacProcess+0x680>
                if( macMsgData.FHDR.FCtrl.Bits.Ack == 1 )
 8010694:	ab22      	add	r3, sp, #136	; 0x88
 8010696:	7b1b      	ldrb	r3, [r3, #12]
 8010698:	069b      	lsls	r3, r3, #26
 801069a:	d501      	bpl.n	80106a0 <LoRaMacProcess+0x684>
                    LoRaMacCommandsRemoveStickyAnsCmds( );
 801069c:	f002 f874 	bl	8012788 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 80106a0:	ab16      	add	r3, sp, #88	; 0x58
 80106a2:	7818      	ldrb	r0, [r3, #0]
 80106a4:	2803      	cmp	r0, #3
 80106a6:	d85c      	bhi.n	8010762 <LoRaMacProcess+0x746>
 80106a8:	2651      	movs	r6, #81	; 0x51
 80106aa:	ab0e      	add	r3, sp, #56	; 0x38
 80106ac:	ad22      	add	r5, sp, #136	; 0x88
 80106ae:	18f6      	adds	r6, r6, r3
 80106b0:	f7f0 fa64 	bl	8000b7c <__gnu_thumb1_case_uqi>
 80106b4:	1f522f18 	.word	0x1f522f18
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80106b8:	221f      	movs	r2, #31
 80106ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80106bc:	4397      	bics	r7, r2
 80106be:	4a23      	ldr	r2, [pc, #140]	; (801074c <LoRaMacProcess+0x730>)
 80106c0:	2fa0      	cmp	r7, #160	; 0xa0
 80106c2:	d10b      	bne.n	80106dc <LoRaMacProcess+0x6c0>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80106c4:	2001      	movs	r0, #1
 80106c6:	5498      	strb	r0, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80106c8:	4a1c      	ldr	r2, [pc, #112]	; (801073c <LoRaMacProcess+0x720>)
 80106ca:	5c9a      	ldrb	r2, [r3, r2]
 80106cc:	2a00      	cmp	r2, #0
 80106ce:	d103      	bne.n	80106d8 <LoRaMacProcess+0x6bc>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80106d0:	228a      	movs	r2, #138	; 0x8a
 80106d2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80106d4:	0092      	lsls	r2, r2, #2
 80106d6:	5098      	str	r0, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80106d8:	2301      	movs	r3, #1
 80106da:	e7cc      	b.n	8010676 <LoRaMacProcess+0x65a>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80106dc:	5498      	strb	r0, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80106de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106e0:	54e0      	strb	r0, [r4, r3]
 80106e2:	e7ca      	b.n	801067a <LoRaMacProcess+0x65e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80106e4:	7b29      	ldrb	r1, [r5, #12]
 80106e6:	9a06      	ldr	r2, [sp, #24]
 80106e8:	0709      	lsls	r1, r1, #28
 80106ea:	0f09      	lsrs	r1, r1, #28
 80106ec:	a826      	add	r0, sp, #152	; 0x98
 80106ee:	f7fe fdc1 	bl	800f274 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80106f2:	7ff3      	ldrb	r3, [r6, #31]
 80106f4:	9a07      	ldr	r2, [sp, #28]
 80106f6:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80106f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80106fa:	9304      	str	r3, [sp, #16]
 80106fc:	9a04      	ldr	r2, [sp, #16]
 80106fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010700:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010702:	ab2c      	add	r3, sp, #176	; 0xb0
 8010704:	781a      	ldrb	r2, [r3, #0]
 8010706:	2382      	movs	r3, #130	; 0x82
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 801070c:	2301      	movs	r3, #1
 801070e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010710:	e008      	b.n	8010724 <LoRaMacProcess+0x708>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8010712:	7b29      	ldrb	r1, [r5, #12]
 8010714:	9a06      	ldr	r2, [sp, #24]
 8010716:	0709      	lsls	r1, r1, #28
 8010718:	0f09      	lsrs	r1, r1, #28
 801071a:	a826      	add	r0, sp, #152	; 0x98
 801071c:	f7fe fdaa 	bl	800f274 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010720:	7ff3      	ldrb	r3, [r6, #31]
 8010722:	9a07      	ldr	r2, [sp, #28]
 8010724:	54a3      	strb	r3, [r4, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010726:	2302      	movs	r3, #2
 8010728:	4a06      	ldr	r2, [pc, #24]	; (8010744 <LoRaMacProcess+0x728>)
 801072a:	5ca1      	ldrb	r1, [r4, r2]
 801072c:	430b      	orrs	r3, r1
 801072e:	54a3      	strb	r3, [r4, r2]
 8010730:	e6a3      	b.n	801047a <LoRaMacProcess+0x45e>
 8010732:	46c0      	nop			; (mov r8, r8)
 8010734:	00000405 	.word	0x00000405
 8010738:	200010c8 	.word	0x200010c8
 801073c:	00000222 	.word	0x00000222
 8010740:	00000219 	.word	0x00000219
 8010744:	0000045d 	.word	0x0000045d
 8010748:	00000404 	.word	0x00000404
 801074c:	0000021a 	.word	0x0000021a
 8010750:	0000041d 	.word	0x0000041d
 8010754:	0000041c 	.word	0x0000041c
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8010758:	ab2c      	add	r3, sp, #176	; 0xb0
 801075a:	7819      	ldrb	r1, [r3, #0]
 801075c:	9a06      	ldr	r2, [sp, #24]
 801075e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010760:	e7dc      	b.n	801071c <LoRaMacProcess+0x700>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	5563      	strb	r3, [r4, r5]
                    PrepareRxDoneAbort( );
 8010766:	f7fe fb1b 	bl	800eda0 <PrepareRxDoneAbort>
 801076a:	e7dc      	b.n	8010726 <LoRaMacProcess+0x70a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 801076c:	2390      	movs	r3, #144	; 0x90
 801076e:	9905      	ldr	r1, [sp, #20]
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	18f4      	adds	r4, r6, r3
 8010774:	3101      	adds	r1, #1
 8010776:	9a04      	ldr	r2, [sp, #16]
 8010778:	0020      	movs	r0, r4
 801077a:	f003 fcca 	bl	8014112 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801077e:	2303      	movs	r3, #3
 8010780:	4a93      	ldr	r2, [pc, #588]	; (80109d0 <LoRaMacProcess+0x9b4>)
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010782:	9d04      	ldr	r5, [sp, #16]
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8010784:	54b3      	strb	r3, [r6, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010786:	2200      	movs	r2, #0
 8010788:	4b92      	ldr	r3, [pc, #584]	; (80109d4 <LoRaMacProcess+0x9b8>)
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 801078a:	3d01      	subs	r5, #1
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801078c:	54f2      	strb	r2, [r6, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801078e:	4b92      	ldr	r3, [pc, #584]	; (80109d8 <LoRaMacProcess+0x9bc>)
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010790:	4a92      	ldr	r2, [pc, #584]	; (80109dc <LoRaMacProcess+0x9c0>)
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8010792:	50f4      	str	r4, [r6, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010794:	3304      	adds	r3, #4
 8010796:	54f5      	strb	r5, [r6, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010798:	2302      	movs	r3, #2
 801079a:	5cb1      	ldrb	r1, [r6, r2]
 801079c:	430b      	orrs	r3, r1
 801079e:	54b3      	strb	r3, [r6, r2]
 80107a0:	e66b      	b.n	801047a <LoRaMacProcess+0x45e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80107a2:	2201      	movs	r2, #1
 80107a4:	4b8b      	ldr	r3, [pc, #556]	; (80109d4 <LoRaMacProcess+0x9b8>)
 80107a6:	54f2      	strb	r2, [r6, r3]
            PrepareRxDoneAbort( );
 80107a8:	f7fe fafa 	bl	800eda0 <PrepareRxDoneAbort>
 80107ac:	e665      	b.n	801047a <LoRaMacProcess+0x45e>
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 80107ae:	2384      	movs	r3, #132	; 0x84
 80107b0:	00db      	lsls	r3, r3, #3
        if( ackReceived == 1 )
 80107b2:	5ce3      	ldrb	r3, [r4, r3]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d100      	bne.n	80107ba <LoRaMacProcess+0x79e>
 80107b8:	e66e      	b.n	8010498 <LoRaMacProcess+0x47c>
 80107ba:	e66b      	b.n	8010494 <LoRaMacProcess+0x478>
        OpenContinuousRx2Window( );
 80107bc:	f7fe fcc6 	bl	800f14c <OpenContinuousRx2Window>
 80107c0:	e52f      	b.n	8010222 <LoRaMacProcess+0x206>
            MacCtx.MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
 80107c2:	f002 f909 	bl	80129d8 <LoRaMacConfirmQueueGetStatusCmn>
 80107c6:	4b86      	ldr	r3, [pc, #536]	; (80109e0 <LoRaMacProcess+0x9c4>)
 80107c8:	54e0      	strb	r0, [r4, r3]
            if( ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 80107ca:	4b86      	ldr	r3, [pc, #536]	; (80109e4 <LoRaMacProcess+0x9c8>)
 80107cc:	5ce3      	ldrb	r3, [r4, r3]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d002      	beq.n	80107d8 <LoRaMacProcess+0x7bc>
    bool noTx = false;
 80107d2:	2600      	movs	r6, #0
            if( ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 80107d4:	2802      	cmp	r0, #2
 80107d6:	d113      	bne.n	8010800 <LoRaMacProcess+0x7e4>
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107d8:	22d6      	movs	r2, #214	; 0xd6
 80107da:	2302      	movs	r3, #2
 80107dc:	0092      	lsls	r2, r2, #2
 80107de:	58a1      	ldr	r1, [r4, r2]
                noTx = true;
 80107e0:	2601      	movs	r6, #1
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107e2:	4399      	bics	r1, r3
                MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 80107e4:	238c      	movs	r3, #140	; 0x8c
 80107e6:	00db      	lsls	r3, r3, #3
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107e8:	50a1      	str	r1, [r4, r2]
                MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 80107ea:	58e2      	ldr	r2, [r4, r3]
 80107ec:	4b7e      	ldr	r3, [pc, #504]	; (80109e8 <LoRaMacProcess+0x9cc>)
 80107ee:	5cd2      	ldrb	r2, [r2, r3]
 80107f0:	4b7e      	ldr	r3, [pc, #504]	; (80109ec <LoRaMacProcess+0x9d0>)
 80107f2:	54e2      	strb	r2, [r4, r3]
                MacCtx.McpsConfirm.AckReceived = false;
 80107f4:	2284      	movs	r2, #132	; 0x84
 80107f6:	2300      	movs	r3, #0
 80107f8:	00d2      	lsls	r2, r2, #3
 80107fa:	54a3      	strb	r3, [r4, r2]
                MacCtx.McpsConfirm.TxTimeOnAir = 0;
 80107fc:	4a7c      	ldr	r2, [pc, #496]	; (80109f0 <LoRaMacProcess+0x9d4>)
 80107fe:	50a3      	str	r3, [r4, r2]
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010800:	200b      	movs	r0, #11
 8010802:	f002 f8ef 	bl	80129e4 <LoRaMacConfirmQueueIsCmdActive>
 8010806:	2800      	cmp	r0, #0
 8010808:	d100      	bne.n	801080c <LoRaMacProcess+0x7f0>
 801080a:	e076      	b.n	80108fa <LoRaMacProcess+0x8de>
                ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801080c:	5d63      	ldrb	r3, [r4, r5]
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801080e:	07da      	lsls	r2, r3, #31
 8010810:	d500      	bpl.n	8010814 <LoRaMacProcess+0x7f8>
 8010812:	e072      	b.n	80108fa <LoRaMacProcess+0x8de>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010814:	075b      	lsls	r3, r3, #29
 8010816:	d505      	bpl.n	8010824 <LoRaMacProcess+0x808>
                    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010818:	22d6      	movs	r2, #214	; 0xd6
 801081a:	2302      	movs	r3, #2
 801081c:	0092      	lsls	r2, r2, #2
 801081e:	58a1      	ldr	r1, [r4, r2]
 8010820:	4399      	bics	r1, r3
 8010822:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8010824:	23d6      	movs	r3, #214	; 0xd6
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	58e3      	ldr	r3, [r4, r3]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d149      	bne.n	80108c2 <LoRaMacProcess+0x8a6>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801082e:	2201      	movs	r2, #1
 8010830:	5d63      	ldrb	r3, [r4, r5]
 8010832:	4213      	tst	r3, r2
 8010834:	d007      	beq.n	8010846 <LoRaMacProcess+0x82a>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010836:	4393      	bics	r3, r2
 8010838:	5563      	strb	r3, [r4, r5]
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801083a:	4b6e      	ldr	r3, [pc, #440]	; (80109f4 <LoRaMacProcess+0x9d8>)
 801083c:	18e0      	adds	r0, r4, r3
 801083e:	3bc0      	subs	r3, #192	; 0xc0
 8010840:	58e3      	ldr	r3, [r4, r3]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4798      	blx	r3
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010846:	2604      	movs	r6, #4
 8010848:	5d63      	ldrb	r3, [r4, r5]
 801084a:	4233      	tst	r3, r6
 801084c:	d00d      	beq.n	801086a <LoRaMacProcess+0x84e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801084e:	43b3      	bics	r3, r6
 8010850:	5563      	strb	r3, [r4, r5]
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010852:	2386      	movs	r3, #134	; 0x86
 8010854:	00db      	lsls	r3, r3, #3
 8010856:	18e0      	adds	r0, r4, r3
 8010858:	f002 f8de 	bl	8012a18 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 801085c:	f002 f908 	bl	8012a70 <LoRaMacConfirmQueueGetCnt>
 8010860:	2800      	cmp	r0, #0
 8010862:	d002      	beq.n	801086a <LoRaMacProcess+0x84e>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010864:	5d63      	ldrb	r3, [r4, r5]
 8010866:	431e      	orrs	r6, r3
 8010868:	5566      	strb	r6, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 801086a:	2608      	movs	r6, #8
 801086c:	5d63      	ldrb	r3, [r4, r5]
 801086e:	4233      	tst	r3, r6
 8010870:	d008      	beq.n	8010884 <LoRaMacProcess+0x868>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8010872:	4b61      	ldr	r3, [pc, #388]	; (80109f8 <LoRaMacProcess+0x9dc>)
 8010874:	18e0      	adds	r0, r4, r3
 8010876:	3be8      	subs	r3, #232	; 0xe8
 8010878:	58e3      	ldr	r3, [r4, r3]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
 801087e:	5d63      	ldrb	r3, [r4, r5]
 8010880:	43b3      	bics	r3, r6
 8010882:	5563      	strb	r3, [r4, r5]
        bool isStickyMacCommandPending = false;
 8010884:	2300      	movs	r3, #0
 8010886:	ae22      	add	r6, sp, #136	; 0x88
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010888:	0030      	movs	r0, r6
        bool isStickyMacCommandPending = false;
 801088a:	7033      	strb	r3, [r6, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 801088c:	f001 ffc2 	bl	8012814 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010890:	7833      	ldrb	r3, [r6, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00f      	beq.n	80108b6 <LoRaMacProcess+0x89a>
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8010896:	2206      	movs	r2, #6
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 8010898:	2608      	movs	r6, #8
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 801089a:	4b57      	ldr	r3, [pc, #348]	; (80109f8 <LoRaMacProcess+0x9dc>)
 801089c:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 801089e:	5d63      	ldrb	r3, [r4, r5]
 80108a0:	4333      	orrs	r3, r6
 80108a2:	5563      	strb	r3, [r4, r5]
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80108a4:	4b54      	ldr	r3, [pc, #336]	; (80109f8 <LoRaMacProcess+0x9dc>)
 80108a6:	18e0      	adds	r0, r4, r3
 80108a8:	3be8      	subs	r3, #232	; 0xe8
 80108aa:	58e3      	ldr	r3, [r4, r3]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
 80108b0:	5d63      	ldrb	r3, [r4, r5]
 80108b2:	43b3      	bics	r3, r6
 80108b4:	5563      	strb	r3, [r4, r5]
        MacCtx.MacFlags.Bits.MacDone = 0;
 80108b6:	2210      	movs	r2, #16
 80108b8:	5d63      	ldrb	r3, [r4, r5]
 80108ba:	4393      	bics	r3, r2
 80108bc:	5563      	strb	r3, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 80108be:	f001 f893 	bl	80119e8 <LoRaMacClassBResumeBeaconing>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80108c2:	2202      	movs	r2, #2
 80108c4:	5d63      	ldrb	r3, [r4, r5]
 80108c6:	4213      	tst	r3, r2
 80108c8:	d015      	beq.n	80108f6 <LoRaMacProcess+0x8da>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80108ca:	4393      	bics	r3, r2
 80108cc:	5563      	strb	r3, [r4, r5]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80108ce:	238c      	movs	r3, #140	; 0x8c
 80108d0:	00db      	lsls	r3, r3, #3
 80108d2:	58e3      	ldr	r3, [r4, r3]
 80108d4:	33c8      	adds	r3, #200	; 0xc8
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	4293      	cmp	r3, r2
 80108da:	d106      	bne.n	80108ea <LoRaMacProcess+0x8ce>
            if( MacCtx.MacState == LORAMAC_IDLE )
 80108dc:	23d6      	movs	r3, #214	; 0xd6
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	58e3      	ldr	r3, [r4, r3]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <LoRaMacProcess+0x8ce>
                OpenContinuousRx2Window( );
 80108e6:	f7fe fc31 	bl	800f14c <OpenContinuousRx2Window>
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80108ea:	4b39      	ldr	r3, [pc, #228]	; (80109d0 <LoRaMacProcess+0x9b4>)
 80108ec:	18e0      	adds	r0, r4, r3
 80108ee:	3ba8      	subs	r3, #168	; 0xa8
 80108f0:	58e3      	ldr	r3, [r4, r3]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	4798      	blx	r3
}
 80108f6:	b02f      	add	sp, #188	; 0xbc
 80108f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( noTx == false )
 80108fa:	2e00      	cmp	r6, #0
 80108fc:	d000      	beq.n	8010900 <LoRaMacProcess+0x8e4>
 80108fe:	e791      	b.n	8010824 <LoRaMacProcess+0x808>
 8010900:	e4b9      	b.n	8010276 <LoRaMacProcess+0x25a>
                else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010902:	2b01      	cmp	r3, #1
 8010904:	d135      	bne.n	8010972 <LoRaMacProcess+0x956>
                    if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 8010906:	58a3      	ldr	r3, [r4, r2]
 8010908:	2286      	movs	r2, #134	; 0x86
 801090a:	0092      	lsls	r2, r2, #2
 801090c:	5c99      	ldrb	r1, [r3, r2]
 801090e:	2900      	cmp	r1, #0
 8010910:	d100      	bne.n	8010914 <LoRaMacProcess+0x8f8>
 8010912:	e787      	b.n	8010824 <LoRaMacProcess+0x808>
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 8010914:	4f34      	ldr	r7, [pc, #208]	; (80109e8 <LoRaMacProcess+0x9cc>)
        MacCtx.NvmCtx->AckTimeoutRetries )
 8010916:	4e39      	ldr	r6, [pc, #228]	; (80109fc <LoRaMacProcess+0x9e0>)
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 8010918:	5dda      	ldrb	r2, [r3, r7]
        MacCtx.NvmCtx->AckTimeoutRetries )
 801091a:	5d9e      	ldrb	r6, [r3, r6]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 801091c:	42b2      	cmp	r2, r6
 801091e:	d205      	bcs.n	801092c <LoRaMacProcess+0x910>
    return false;
 8010920:	2100      	movs	r1, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010922:	0780      	lsls	r0, r0, #30
 8010924:	d502      	bpl.n	801092c <LoRaMacProcess+0x910>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010926:	2184      	movs	r1, #132	; 0x84
 8010928:	00c9      	lsls	r1, r1, #3
 801092a:	5c61      	ldrb	r1, [r4, r1]
                        if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 801092c:	4834      	ldr	r0, [pc, #208]	; (8010a00 <LoRaMacProcess+0x9e4>)
 801092e:	5c18      	ldrb	r0, [r3, r0]
 8010930:	2800      	cmp	r0, #0
 8010932:	d149      	bne.n	80109c8 <LoRaMacProcess+0x9ac>
                            if( stopRetransmission == false )
 8010934:	2900      	cmp	r1, #0
 8010936:	d12a      	bne.n	801098e <LoRaMacProcess+0x972>
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 8010938:	42b2      	cmp	r2, r6
 801093a:	d21a      	bcs.n	8010972 <LoRaMacProcess+0x956>
 801093c:	2a08      	cmp	r2, #8
 801093e:	d818      	bhi.n	8010972 <LoRaMacProcess+0x956>
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 8010940:	3201      	adds	r2, #1
 8010942:	b2d2      	uxtb	r2, r2
 8010944:	55da      	strb	r2, [r3, r7]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 8010946:	07d2      	lsls	r2, r2, #31
 8010948:	d513      	bpl.n	8010972 <LoRaMacProcess+0x956>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801094a:	2221      	movs	r2, #33	; 0x21
 801094c:	a918      	add	r1, sp, #96	; 0x60
 801094e:	700a      	strb	r2, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010950:	001a      	movs	r2, r3
 8010952:	32ff      	adds	r2, #255	; 0xff
 8010954:	7852      	ldrb	r2, [r2, #1]
 8010956:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010958:	001a      	movs	r2, r3
 801095a:	32d5      	adds	r2, #213	; 0xd5
 801095c:	7812      	ldrb	r2, [r2, #0]
 801095e:	704a      	strb	r2, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010960:	7818      	ldrb	r0, [r3, #0]
 8010962:	f002 fa26 	bl	8012db2 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8010966:	238c      	movs	r3, #140	; 0x8c
 8010968:	00db      	lsls	r3, r3, #3
 801096a:	58e3      	ldr	r3, [r4, r3]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801096c:	9022      	str	r0, [sp, #136]	; 0x88
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 801096e:	33d5      	adds	r3, #213	; 0xd5
 8010970:	7018      	strb	r0, [r3, #0]
                    MacCtx.MacFlags.Bits.MacDone = 0;
 8010972:	2210      	movs	r2, #16
 8010974:	5d63      	ldrb	r3, [r4, r5]
                    MacCtx.NvmCtx->AckTimeoutRetry = false;
 8010976:	2100      	movs	r1, #0
                    MacCtx.MacFlags.Bits.MacDone = 0;
 8010978:	4393      	bics	r3, r2
 801097a:	5563      	strb	r3, [r4, r5]
                    MacCtx.NvmCtx->AckTimeoutRetry = false;
 801097c:	238c      	movs	r3, #140	; 0x8c
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	58e2      	ldr	r2, [r4, r3]
 8010982:	2386      	movs	r3, #134	; 0x86
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	54d1      	strb	r1, [r2, r3]
                    OnTxDelayedTimerEvent( );
 8010988:	f7ff f95c 	bl	800fc44 <OnTxDelayedTimerEvent>
 801098c:	e74a      	b.n	8010824 <LoRaMacProcess+0x808>
    if( MacCtx.McpsConfirm.AckReceived == false )
 801098e:	2284      	movs	r2, #132	; 0x84
 8010990:	00d2      	lsls	r2, r2, #3
 8010992:	5ca6      	ldrb	r6, [r4, r2]
 8010994:	2e00      	cmp	r6, #0
 8010996:	d110      	bne.n	80109ba <LoRaMacProcess+0x99e>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8010998:	2201      	movs	r2, #1
 801099a:	a922      	add	r1, sp, #136	; 0x88
 801099c:	710a      	strb	r2, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 801099e:	4a19      	ldr	r2, [pc, #100]	; (8010a04 <LoRaMacProcess+0x9e8>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80109a0:	7818      	ldrb	r0, [r3, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80109a2:	6892      	ldr	r2, [r2, #8]
 80109a4:	9222      	str	r2, [sp, #136]	; 0x88
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80109a6:	f002 fa17 	bl	8012dd8 <RegionInitDefaults>
        MacCtx.NvmCtx->NodeAckRequested = false;
 80109aa:	238c      	movs	r3, #140	; 0x8c
 80109ac:	00db      	lsls	r3, r3, #3
 80109ae:	58e2      	ldr	r2, [r4, r3]
 80109b0:	4b15      	ldr	r3, [pc, #84]	; (8010a08 <LoRaMacProcess+0x9ec>)
 80109b2:	54d6      	strb	r6, [r2, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 80109b4:	2384      	movs	r3, #132	; 0x84
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 80109ba:	238c      	movs	r3, #140	; 0x8c
 80109bc:	00db      	lsls	r3, r3, #3
 80109be:	58e3      	ldr	r3, [r4, r3]
 80109c0:	5dda      	ldrb	r2, [r3, r7]
 80109c2:	4b0a      	ldr	r3, [pc, #40]	; (80109ec <LoRaMacProcess+0x9d0>)
 80109c4:	54e2      	strb	r2, [r4, r3]
 80109c6:	e492      	b.n	80102ee <LoRaMacProcess+0x2d2>
                if( stopRetransmission == true )
 80109c8:	2900      	cmp	r1, #0
 80109ca:	d000      	beq.n	80109ce <LoRaMacProcess+0x9b2>
 80109cc:	e48f      	b.n	80102ee <LoRaMacProcess+0x2d2>
 80109ce:	e7d0      	b.n	8010972 <LoRaMacProcess+0x956>
 80109d0:	00000404 	.word	0x00000404
 80109d4:	00000405 	.word	0x00000405
 80109d8:	0000040c 	.word	0x0000040c
 80109dc:	0000045d 	.word	0x0000045d
 80109e0:	00000431 	.word	0x00000431
 80109e4:	0000041d 	.word	0x0000041d
 80109e8:	00000217 	.word	0x00000217
 80109ec:	00000421 	.word	0x00000421
 80109f0:	00000424 	.word	0x00000424
 80109f4:	0000041c 	.word	0x0000041c
 80109f8:	00000444 	.word	0x00000444
 80109fc:	00000216 	.word	0x00000216
 8010a00:	00000222 	.word	0x00000222
 8010a04:	2000226c 	.word	0x2000226c
 8010a08:	00000219 	.word	0x00000219

08010a0c <LoRaMacInitialization>:
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a0c:	2303      	movs	r3, #3
{
 8010a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a10:	b093      	sub	sp, #76	; 0x4c
 8010a12:	1e07      	subs	r7, r0, #0
 8010a14:	9102      	str	r1, [sp, #8]
 8010a16:	9203      	str	r2, [sp, #12]
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a18:	9301      	str	r3, [sp, #4]
    if( ( primitives == NULL ) ||
 8010a1a:	d100      	bne.n	8010a1e <LoRaMacInitialization+0x12>
 8010a1c:	e16c      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
 8010a1e:	2900      	cmp	r1, #0
 8010a20:	d100      	bne.n	8010a24 <LoRaMacInitialization+0x18>
 8010a22:	e169      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010a24:	6803      	ldr	r3, [r0, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d100      	bne.n	8010a2c <LoRaMacInitialization+0x20>
 8010a2a:	e165      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
 8010a2c:	6843      	ldr	r3, [r0, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d100      	bne.n	8010a34 <LoRaMacInitialization+0x28>
 8010a32:	e161      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010a34:	6883      	ldr	r3, [r0, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d100      	bne.n	8010a3c <LoRaMacInitialization+0x30>
 8010a3a:	e15d      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010a3c:	68c3      	ldr	r3, [r0, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d100      	bne.n	8010a44 <LoRaMacInitialization+0x38>
 8010a42:	e159      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010a44:	0010      	movs	r0, r2
 8010a46:	f002 f9b0 	bl	8012daa <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010a4a:	230a      	movs	r3, #10
 8010a4c:	9301      	str	r3, [sp, #4]
    if( RegionIsActive( region ) == false )
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d100      	bne.n	8010a54 <LoRaMacInitialization+0x48>
 8010a52:	e151      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8010a54:	49cd      	ldr	r1, [pc, #820]	; (8010d8c <LoRaMacInitialization+0x380>)
 8010a56:	0038      	movs	r0, r7
 8010a58:	f001 fef2 	bl	8012840 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8010a5c:	228b      	movs	r2, #139	; 0x8b
 8010a5e:	4dcc      	ldr	r5, [pc, #816]	; (8010d90 <LoRaMacInitialization+0x384>)
 8010a60:	0092      	lsls	r2, r2, #2
 8010a62:	0028      	movs	r0, r5
 8010a64:	2100      	movs	r1, #0
 8010a66:	f003 fb69 	bl	801413c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010a6a:	4cca      	ldr	r4, [pc, #808]	; (8010d94 <LoRaMacInitialization+0x388>)
 8010a6c:	4aca      	ldr	r2, [pc, #808]	; (8010d98 <LoRaMacInitialization+0x38c>)
 8010a6e:	2100      	movs	r1, #0
 8010a70:	0020      	movs	r0, r4
 8010a72:	f003 fb63 	bl	801413c <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 8010a76:	2201      	movs	r2, #1
 8010a78:	4bc8      	ldr	r3, [pc, #800]	; (8010d9c <LoRaMacInitialization+0x390>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8010a7a:	268c      	movs	r6, #140	; 0x8c
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 8010a7c:	54ea      	strb	r2, [r5, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4bc7      	ldr	r3, [pc, #796]	; (8010da0 <LoRaMacInitialization+0x394>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8010a82:	00f6      	lsls	r6, r6, #3
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 8010a84:	54ea      	strb	r2, [r5, r3]
    MacCtx.NvmCtx->Region = region;
 8010a86:	466b      	mov	r3, sp
 8010a88:	7b1b      	ldrb	r3, [r3, #12]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8010a8a:	2200      	movs	r2, #0
    MacCtx.NvmCtx->Region = region;
 8010a8c:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8010a8e:	002b      	movs	r3, r5
 8010a90:	33c8      	adds	r3, #200	; 0xc8
 8010a92:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8010a94:	002b      	movs	r3, r5
 8010a96:	2200      	movs	r2, #0
 8010a98:	33ff      	adds	r3, #255	; 0xff
 8010a9a:	759a      	strb	r2, [r3, #22]
    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;
 8010a9c:	2388      	movs	r3, #136	; 0x88
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	54ea      	strb	r2, [r5, r3]
 8010aa4:	2203      	movs	r2, #3
 8010aa6:	4bbf      	ldr	r3, [pc, #764]	; (8010da4 <LoRaMacInitialization+0x398>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8010aa8:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8010aaa:	54ea      	strb	r2, [r5, r3]
 8010aac:	2200      	movs	r2, #0
 8010aae:	4bbe      	ldr	r3, [pc, #760]	; (8010da8 <LoRaMacInitialization+0x39c>)

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ab0:	9803      	ldr	r0, [sp, #12]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8010ab2:	54ea      	strb	r2, [r5, r3]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	4bbd      	ldr	r3, [pc, #756]	; (8010dac <LoRaMacInitialization+0x3a0>)
 8010ab8:	54ea      	strb	r2, [r5, r3]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010aba:	230e      	movs	r3, #14
 8010abc:	ad05      	add	r5, sp, #20
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010abe:	0029      	movs	r1, r5
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010ac0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ac2:	f002 f976 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8010ac6:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ac8:	9006      	str	r0, [sp, #24]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8010aca:	1e42      	subs	r2, r0, #1
 8010acc:	4190      	sbcs	r0, r2
 8010ace:	001a      	movs	r2, r3
 8010ad0:	32ff      	adds	r2, #255	; 0xff
 8010ad2:	74d0      	strb	r0, [r2, #19]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010ad4:	2209      	movs	r2, #9
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ad6:	0029      	movs	r1, r5
 8010ad8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010ada:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010adc:	f002 f969 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010ae0:	2205      	movs	r2, #5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8010ae2:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ae4:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8010ae6:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ae8:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010aea:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_DR;
 8010aec:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010aee:	f002 f960 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010af2:	220f      	movs	r2, #15
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8010af4:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010af6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8010af8:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010afa:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010afc:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010afe:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b00:	f002 f957 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010b04:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010b06:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b08:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010b0a:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b0c:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b0e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010b10:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b12:	f002 f94e 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010b16:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010b18:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b1a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010b1c:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b1e:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b20:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010b22:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b24:	f002 f945 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010b28:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010b2a:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b2c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010b2e:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b30:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b32:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010b34:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b36:	f002 f93c 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010b3a:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010b3c:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b3e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010b40:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b42:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b44:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010b46:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b48:	f002 f933 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010b4c:	2216      	movs	r2, #22
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010b4e:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b50:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010b52:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b54:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b56:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010b58:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b5a:	f002 f92a 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010b5e:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b60:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010b62:	1d9a      	adds	r2, r3, #6
 8010b64:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010b66:	2217      	movs	r2, #23
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b68:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b6a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010b6c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b6e:	f002 f920 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b72:	2218      	movs	r2, #24
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b74:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b76:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b78:	6298      	str	r0, [r3, #40]	; 0x28
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b7a:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b7c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b7e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b80:	f002 f917 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010b84:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b86:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010b88:	001a      	movs	r2, r3
 8010b8a:	322c      	adds	r2, #44	; 0x2c
 8010b8c:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010b8e:	221d      	movs	r2, #29
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b90:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b92:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010b94:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b96:	f002 f90c 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010b9a:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b9c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010b9e:	001a      	movs	r2, r3
 8010ba0:	3230      	adds	r2, #48	; 0x30
 8010ba2:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010ba4:	221e      	movs	r2, #30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ba6:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010ba8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010baa:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bac:	f002 f901 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010bb0:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bb2:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010bb4:	001a      	movs	r2, r3
 8010bb6:	3231      	adds	r2, #49	; 0x31
 8010bb8:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010bba:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bbc:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bbe:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010bc0:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bc2:	f002 f8f6 	bl	8012db2 <RegionGetPhyParam>
 8010bc6:	9006      	str	r0, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010bc8:	59a3      	ldr	r3, [r4, r6]
 8010bca:	9a06      	ldr	r2, [sp, #24]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bcc:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010bce:	635a      	str	r2, [r3, #52]	; 0x34
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010bd0:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bd2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010bd4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bd6:	f002 f8ec 	bl	8012db2 <RegionGetPhyParam>
 8010bda:	9006      	str	r0, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010bdc:	59a3      	ldr	r3, [r4, r6]
 8010bde:	9a06      	ldr	r2, [sp, #24]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010be0:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010be2:	639a      	str	r2, [r3, #56]	; 0x38
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010be4:	466a      	mov	r2, sp
 8010be6:	7912      	ldrb	r2, [r2, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010be8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010bea:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bec:	f002 f8e1 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 8010bf0:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bf2:	0029      	movs	r1, r5
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 8010bf4:	001a      	movs	r2, r3
 8010bf6:	32d0      	adds	r2, #208	; 0xd0
 8010bf8:	8010      	strh	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010bfa:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bfc:	9006      	str	r0, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010bfe:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010c00:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010c02:	f002 f8d6 	bl	8012db2 <RegionGetPhyParam>
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 8010c06:	59a3      	ldr	r3, [r4, r6]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8010c08:	2101      	movs	r1, #1
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 8010c0a:	001a      	movs	r2, r3
 8010c0c:	32d2      	adds	r2, #210	; 0xd2
 8010c0e:	8010      	strh	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8010c10:	1d5a      	adds	r2, r3, #5
 8010c12:	77d1      	strb	r1, [r2, #31]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8010c14:	220a      	movs	r2, #10
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8010c16:	0019      	movs	r1, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8010c18:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8010c1a:	31d8      	adds	r1, #216	; 0xd8
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8010c1c:	3a04      	subs	r2, #4
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010c1e:	9006      	str	r0, [sp, #24]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8010c20:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8010c22:	731a      	strb	r2, [r3, #12]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8010c24:	710a      	strb	r2, [r1, #4]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8010c26:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8010c28:	6008      	str	r0, [r1, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8010c2a:	6919      	ldr	r1, [r3, #16]
 8010c2c:	32e0      	adds	r2, #224	; 0xe0
 8010c2e:	6011      	str	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8010c30:	6959      	ldr	r1, [r3, #20]
 8010c32:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8010c34:	6999      	ldr	r1, [r3, #24]
 8010c36:	6091      	str	r1, [r2, #8]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8010c38:	69d9      	ldr	r1, [r3, #28]
 8010c3a:	60d1      	str	r1, [r2, #12]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8010c3c:	6a19      	ldr	r1, [r3, #32]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8010c3e:	33f4      	adds	r3, #244	; 0xf4
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8010c40:	6111      	str	r1, [r2, #16]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8010c42:	2201      	movs	r2, #1
 8010c44:	701a      	strb	r2, [r3, #0]

    ResetMacParameters( );
 8010c46:	f7fe f8c9 	bl	800eddc <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	59a3      	ldr	r3, [r4, r6]
    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
    MacCtx.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010c4e:	4958      	ldr	r1, [pc, #352]	; (8010db0 <LoRaMacInitialization+0x3a4>)
    MacCtx.NvmCtx->PublicNetwork = true;
 8010c50:	33c9      	adds	r3, #201	; 0xc9
 8010c52:	701a      	strb	r2, [r3, #0]
    MacCtx.MacPrimitives = primitives;
 8010c54:	23d7      	movs	r3, #215	; 0xd7
    MacCtx.MacCallbacks = callbacks;
 8010c56:	9a02      	ldr	r2, [sp, #8]
    MacCtx.MacPrimitives = primitives;
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	50e7      	str	r7, [r4, r3]
    MacCtx.MacCallbacks = callbacks;
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	50e2      	str	r2, [r4, r3]
    MacCtx.MacFlags.Value = 0;
 8010c60:	2200      	movs	r2, #0
 8010c62:	4b54      	ldr	r3, [pc, #336]	; (8010db4 <LoRaMacInitialization+0x3a8>)
 8010c64:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 8010c66:	2201      	movs	r2, #1
 8010c68:	3b06      	subs	r3, #6
 8010c6a:	3bff      	subs	r3, #255	; 0xff
 8010c6c:	50e2      	str	r2, [r4, r3]
    MacCtx.AggregatedLastTxDoneTime = 0;
 8010c6e:	2200      	movs	r2, #0
 8010c70:	3b18      	subs	r3, #24
 8010c72:	50e2      	str	r2, [r4, r3]
    MacCtx.AggregatedTimeOff = 0;
 8010c74:	3304      	adds	r3, #4
 8010c76:	50e2      	str	r2, [r4, r3]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010c78:	333c      	adds	r3, #60	; 0x3c
 8010c7a:	18e0      	adds	r0, r4, r3
 8010c7c:	f003 f958 	bl	8013f30 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010c80:	23e5      	movs	r3, #229	; 0xe5
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	18e0      	adds	r0, r4, r3
 8010c86:	494c      	ldr	r1, [pc, #304]	; (8010db8 <LoRaMacInitialization+0x3ac>)
 8010c88:	f003 f952 	bl	8013f30 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010c8c:	23ea      	movs	r3, #234	; 0xea
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	18e0      	adds	r0, r4, r3
 8010c92:	494a      	ldr	r1, [pc, #296]	; (8010dbc <LoRaMacInitialization+0x3b0>)
 8010c94:	f003 f94c 	bl	8013f30 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010c98:	23fb      	movs	r3, #251	; 0xfb
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	4948      	ldr	r1, [pc, #288]	; (8010dc0 <LoRaMacInitialization+0x3b4>)
 8010c9e:	18e0      	adds	r0, r4, r3
 8010ca0:	f003 f946 	bl	8013f30 <TimerInit>

    // Store the current initialization time
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 8010ca4:	f003 f9fb 	bl	801409e <TimerGetCurrentTime>
 8010ca8:	23d3      	movs	r3, #211	; 0xd3

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010caa:	4a46      	ldr	r2, [pc, #280]	; (8010dc4 <LoRaMacInitialization+0x3b8>)
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	50e0      	str	r0, [r4, r3]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010cb0:	3318      	adds	r3, #24
 8010cb2:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010cb4:	4a44      	ldr	r2, [pc, #272]	; (8010dc8 <LoRaMacInitialization+0x3bc>)
 8010cb6:	3308      	adds	r3, #8
 8010cb8:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010cba:	4a44      	ldr	r2, [pc, #272]	; (8010dcc <LoRaMacInitialization+0x3c0>)
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010cc0:	4a43      	ldr	r2, [pc, #268]	; (8010dd0 <LoRaMacInitialization+0x3c4>)
 8010cc2:	3b0c      	subs	r3, #12
 8010cc4:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010cc6:	4a43      	ldr	r2, [pc, #268]	; (8010dd4 <LoRaMacInitialization+0x3c8>)
 8010cc8:	3308      	adds	r3, #8
    Radio.Init( &MacCtx.RadioEvents );
 8010cca:	4d43      	ldr	r5, [pc, #268]	; (8010dd8 <LoRaMacInitialization+0x3cc>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010ccc:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8010cce:	3b0c      	subs	r3, #12
 8010cd0:	18e0      	adds	r0, r4, r3
 8010cd2:	68ab      	ldr	r3, [r5, #8]
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	a908      	add	r1, sp, #32
 8010cdc:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = NULL;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8010ce2:	59a3      	ldr	r3, [r4, r6]
 8010ce4:	7818      	ldrb	r0, [r3, #0]
 8010ce6:	f002 f877 	bl	8012dd8 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8010cea:	483c      	ldr	r0, [pc, #240]	; (8010ddc <LoRaMacInitialization+0x3d0>)
 8010cec:	f004 f8a8 	bl	8014e40 <SecureElementInit>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d004      	beq.n	8010cfe <LoRaMacInitialization+0x2f2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cf4:	2312      	movs	r3, #18
 8010cf6:	9301      	str	r3, [sp, #4]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    return LORAMAC_STATUS_OK;
}
 8010cf8:	9801      	ldr	r0, [sp, #4]
 8010cfa:	b013      	add	sp, #76	; 0x4c
 8010cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8010cfe:	4838      	ldr	r0, [pc, #224]	; (8010de0 <LoRaMacInitialization+0x3d4>)
 8010d00:	f001 f90c 	bl	8011f1c <LoRaMacCryptoInit>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d1f5      	bne.n	8010cf4 <LoRaMacInitialization+0x2e8>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8010d08:	4836      	ldr	r0, [pc, #216]	; (8010de4 <LoRaMacInitialization+0x3d8>)
 8010d0a:	f001 fc8f 	bl	801262c <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d0e:	2314      	movs	r3, #20
 8010d10:	9301      	str	r3, [sp, #4]
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d1f0      	bne.n	8010cf8 <LoRaMacInitialization+0x2ec>
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 8010d16:	4834      	ldr	r0, [pc, #208]	; (8010de8 <LoRaMacInitialization+0x3dc>)
 8010d18:	f001 ff82 	bl	8012c20 <LoRaMacFCntHandlerInit>
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010d1c:	2313      	movs	r3, #19
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 8010d1e:	1e06      	subs	r6, r0, #0
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010d20:	9301      	str	r3, [sp, #4]
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 8010d22:	d1e9      	bne.n	8010cf8 <LoRaMacInitialization+0x2ec>
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
 8010d24:	278c      	movs	r7, #140	; 0x8c
 8010d26:	00ff      	lsls	r7, r7, #3
 8010d28:	59e0      	ldr	r0, [r4, r7]
 8010d2a:	3048      	adds	r0, #72	; 0x48
 8010d2c:	f001 ff82 	bl	8012c34 <LoRaMacFCntHandlerSetMulticastReference>
    srand1( Radio.Random( ) );
 8010d30:	69eb      	ldr	r3, [r5, #28]
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	4798      	blx	r3
 8010d36:	f003 f9db 	bl	80140f0 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8010d3a:	59e3      	ldr	r3, [r4, r7]
 8010d3c:	33c9      	adds	r3, #201	; 0xc9
 8010d3e:	7818      	ldrb	r0, [r3, #0]
 8010d40:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8010d42:	9301      	str	r3, [sp, #4]
 8010d44:	4798      	blx	r3
    Radio.Sleep( );
 8010d46:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8010d4c:	9b02      	ldr	r3, [sp, #8]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8010d4e:	a907      	add	r1, sp, #28
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8010d50:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8010d52:	a80a      	add	r0, sp, #40	; 0x28
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8010d54:	9307      	str	r3, [sp, #28]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010d56:	4b25      	ldr	r3, [pc, #148]	; (8010dec <LoRaMacInitialization+0x3e0>)
 8010d58:	18e3      	adds	r3, r4, r3
 8010d5a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010d5c:	4b24      	ldr	r3, [pc, #144]	; (8010df0 <LoRaMacInitialization+0x3e4>)
 8010d5e:	18e3      	adds	r3, r4, r3
 8010d60:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010d62:	2386      	movs	r3, #134	; 0x86
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	18e3      	adds	r3, r4, r3
 8010d68:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010d6a:	4b12      	ldr	r3, [pc, #72]	; (8010db4 <LoRaMacInitialization+0x3a8>)
 8010d6c:	18e3      	adds	r3, r4, r3
 8010d6e:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8010d70:	59e3      	ldr	r3, [r4, r7]
 8010d72:	001a      	movs	r2, r3
 8010d74:	3244      	adds	r2, #68	; 0x44
 8010d76:	920e      	str	r2, [sp, #56]	; 0x38
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8010d78:	3290      	adds	r2, #144	; 0x90
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8010d7a:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8010d7c:	9210      	str	r2, [sp, #64]	; 0x40
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8010d7e:	3348      	adds	r3, #72	; 0x48
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <LoRaMacInitialization+0x3e8>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8010d82:	9311      	str	r3, [sp, #68]	; 0x44
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8010d84:	f000 fe15 	bl	80119b2 <LoRaMacClassBInit>
    return LORAMAC_STATUS_OK;
 8010d88:	9601      	str	r6, [sp, #4]
 8010d8a:	e7b5      	b.n	8010cf8 <LoRaMacInitialization+0x2ec>
 8010d8c:	0800ed15 	.word	0x0800ed15
 8010d90:	2000152c 	.word	0x2000152c
 8010d94:	200010c8 	.word	0x200010c8
 8010d98:	00000464 	.word	0x00000464
 8010d9c:	00000217 	.word	0x00000217
 8010da0:	00000216 	.word	0x00000216
 8010da4:	00000221 	.word	0x00000221
 8010da8:	00000222 	.word	0x00000222
 8010dac:	00000223 	.word	0x00000223
 8010db0:	0800fc45 	.word	0x0800fc45
 8010db4:	0000045d 	.word	0x0000045d
 8010db8:	0800ef95 	.word	0x0800ef95
 8010dbc:	0800f0a5 	.word	0x0800f0a5
 8010dc0:	0800ed5d 	.word	0x0800ed5d
 8010dc4:	0800ef3d 	.word	0x0800ef3d
 8010dc8:	0800eeed 	.word	0x0800eeed
 8010dcc:	0800ecc1 	.word	0x0800ecc1
 8010dd0:	0800eeb9 	.word	0x0800eeb9
 8010dd4:	0800ee85 	.word	0x0800ee85
 8010dd8:	08018acc 	.word	0x08018acc
 8010ddc:	0800ecf7 	.word	0x0800ecf7
 8010de0:	0800eced 	.word	0x0800eced
 8010de4:	0800ed01 	.word	0x0800ed01
 8010de8:	0800ed1f 	.word	0x0800ed1f
 8010dec:	00000444 	.word	0x00000444
 8010df0:	00000404 	.word	0x00000404
 8010df4:	0800ed0b 	.word	0x0800ed0b

08010df8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8010df8:	23d6      	movs	r3, #214	; 0xd6
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	4a01      	ldr	r2, [pc, #4]	; (8010e04 <LoRaMacStart+0xc>)
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 8010e02:	4770      	bx	lr
 8010e04:	200010c8 	.word	0x200010c8

08010e08 <LoRaMacQueryTxPossible>:
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010e08:	238c      	movs	r3, #140	; 0x8c
 8010e0a:	4a2f      	ldr	r2, [pc, #188]	; (8010ec8 <LoRaMacQueryTxPossible+0xc0>)
 8010e0c:	00db      	lsls	r3, r3, #3
{
 8010e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e10:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010e12:	58d1      	ldr	r1, [r2, r3]
{
 8010e14:	b089      	sub	sp, #36	; 0x24
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010e16:	000b      	movs	r3, r1
 8010e18:	33cc      	adds	r3, #204	; 0xcc
 8010e1a:	681f      	ldr	r7, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8010e1c:	466b      	mov	r3, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010e1e:	9701      	str	r7, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8010e20:	1c9e      	adds	r6, r3, #2
 8010e22:	794b      	ldrb	r3, [r1, #5]
{
 8010e24:	0005      	movs	r5, r0
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8010e26:	7033      	strb	r3, [r6, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8010e28:	466b      	mov	r3, sp
 8010e2a:	1cda      	adds	r2, r3, #3
 8010e2c:	790b      	ldrb	r3, [r1, #4]
 8010e2e:	7013      	strb	r3, [r2, #0]
    size_t macCmdsSize = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	469c      	mov	ip, r3
 8010e34:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e36:	3303      	adds	r3, #3
    if( txInfo == NULL )
 8010e38:	4564      	cmp	r4, ip
 8010e3a:	d03d      	beq.n	8010eb8 <LoRaMacQueryTxPossible+0xb0>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8010e3c:	2388      	movs	r3, #136	; 0x88
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	58cb      	ldr	r3, [r1, r3]
 8010e42:	a803      	add	r0, sp, #12
 8010e44:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = false;
 8010e46:	4663      	mov	r3, ip
 8010e48:	7103      	strb	r3, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010e4a:	000b      	movs	r3, r1
 8010e4c:	33ca      	adds	r3, #202	; 0xca
 8010e4e:	781b      	ldrb	r3, [r3, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010e50:	6087      	str	r7, [r0, #8]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010e52:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 8010e54:	000b      	movs	r3, r1
 8010e56:	33d0      	adds	r3, #208	; 0xd0
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	8183      	strh	r3, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 8010e5c:	000b      	movs	r3, r1
 8010e5e:	33d2      	adds	r3, #210	; 0xd2
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010e64:	000b      	movs	r3, r1
 8010e66:	33d5      	adds	r3, #213	; 0xd5
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	7403      	strb	r3, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010e6c:	000b      	movs	r3, r1
 8010e6e:	33d4      	adds	r3, #212	; 0xd4
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	7443      	strb	r3, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010e74:	000b      	movs	r3, r1
 8010e76:	33ff      	adds	r3, #255	; 0xff
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010e7c:	780b      	ldrb	r3, [r1, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010e7e:	0031      	movs	r1, r6
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010e80:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010e82:	ab01      	add	r3, sp, #4
 8010e84:	f000 fd36 	bl	80118f4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010e88:	2000      	movs	r0, #0
 8010e8a:	5630      	ldrsb	r0, [r6, r0]
 8010e8c:	f7fd ff4c 	bl	800ed28 <GetMaxAppPayloadWithoutFOptsLength>
 8010e90:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010e92:	a802      	add	r0, sp, #8
 8010e94:	f001 fc8e 	bl	80127b4 <LoRaMacCommandsGetSizeSerializedCmds>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e98:	2314      	movs	r3, #20
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d10c      	bne.n	8010eb8 <LoRaMacQueryTxPossible+0xb0>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010e9e:	9b02      	ldr	r3, [sp, #8]
 8010ea0:	2b0f      	cmp	r3, #15
 8010ea2:	d80c      	bhi.n	8010ebe <LoRaMacQueryTxPossible+0xb6>
 8010ea4:	7862      	ldrb	r2, [r4, #1]
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d809      	bhi.n	8010ebe <LoRaMacQueryTxPossible+0xb6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010eaa:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010eac:	18eb      	adds	r3, r5, r3
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	419b      	sbcs	r3, r3
 8010eb2:	425b      	negs	r3, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010eb4:	7021      	strb	r1, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010eb6:	00db      	lsls	r3, r3, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8010eb8:	0018      	movs	r0, r3
 8010eba:	b009      	add	sp, #36	; 0x24
 8010ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	e7f8      	b.n	8010eb8 <LoRaMacQueryTxPossible+0xb0>
 8010ec6:	46c0      	nop			; (mov r8, r8)
 8010ec8:	200010c8 	.word	0x200010c8

08010ecc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010ecc:	b513      	push	{r0, r1, r4, lr}
 8010ece:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ed0:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8010ed2:	2c00      	cmp	r4, #0
 8010ed4:	d02d      	beq.n	8010f32 <LoRaMacMibGetRequestConfirm+0x66>
    }

    switch( mibGet->Type )
 8010ed6:	7820      	ldrb	r0, [r4, #0]
 8010ed8:	282f      	cmp	r0, #47	; 0x2f
 8010eda:	d900      	bls.n	8010ede <LoRaMacMibGetRequestConfirm+0x12>
 8010edc:	e0c5      	b.n	801106a <LoRaMacMibGetRequestConfirm+0x19e>
 8010ede:	f7ef fe4d 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8010ee2:	1f18      	.short	0x1f18
 8010ee4:	c4362f29 	.word	0xc4362f29
 8010ee8:	c4c4c4c4 	.word	0xc4c4c4c4
 8010eec:	c4c4c4c4 	.word	0xc4c4c4c4
 8010ef0:	c4c4c4c4 	.word	0xc4c4c4c4
 8010ef4:	c4c4c4c4 	.word	0xc4c4c4c4
 8010ef8:	c4c4c4c4 	.word	0xc4c4c4c4
 8010efc:	5649423c 	.word	0x5649423c
 8010f00:	6a66685f 	.word	0x6a66685f
 8010f04:	837d7770 	.word	0x837d7770
 8010f08:	a1958f89 	.word	0xa1958f89
 8010f0c:	b3ada79b 	.word	0xb3ada79b
 8010f10:	bbbe      	.short	0xbbbe
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8010f12:	238c      	movs	r3, #140	; 0x8c
 8010f14:	4a57      	ldr	r2, [pc, #348]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f16:	00db      	lsls	r3, r3, #3
 8010f18:	58d3      	ldr	r3, [r2, r3]
 8010f1a:	33c8      	adds	r3, #200	; 0xc8
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
            break;
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	e006      	b.n	8010f2e <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8010f20:	238c      	movs	r3, #140	; 0x8c
 8010f22:	4a54      	ldr	r2, [pc, #336]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	58d2      	ldr	r2, [r2, r3]
 8010f28:	2389      	movs	r3, #137	; 0x89
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	5cd3      	ldrb	r3, [r2, r3]
 8010f2e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f30:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8010f32:	bd16      	pop	{r1, r2, r4, pc}
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8010f34:	238c      	movs	r3, #140	; 0x8c
 8010f36:	4a4f      	ldr	r2, [pc, #316]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f38:	00db      	lsls	r3, r3, #3
 8010f3a:	58d3      	ldr	r3, [r2, r3]
 8010f3c:	33ca      	adds	r3, #202	; 0xca
 8010f3e:	e7ed      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8010f40:	238c      	movs	r3, #140	; 0x8c
 8010f42:	4a4c      	ldr	r2, [pc, #304]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	58d3      	ldr	r3, [r2, r3]
 8010f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8010f4a:	6063      	str	r3, [r4, #4]
 8010f4c:	e7f0      	b.n	8010f30 <LoRaMacMibGetRequestConfirm+0x64>
 8010f4e:	238c      	movs	r3, #140	; 0x8c
 8010f50:	4a48      	ldr	r2, [pc, #288]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f52:	00db      	lsls	r3, r3, #3
 8010f54:	58d3      	ldr	r3, [r2, r3]
 8010f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f58:	e7f7      	b.n	8010f4a <LoRaMacMibGetRequestConfirm+0x7e>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8010f5a:	238c      	movs	r3, #140	; 0x8c
 8010f5c:	4a45      	ldr	r2, [pc, #276]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	58d3      	ldr	r3, [r2, r3]
 8010f62:	33c9      	adds	r3, #201	; 0xc9
 8010f64:	e7da      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010f66:	238c      	movs	r3, #140	; 0x8c
 8010f68:	4a42      	ldr	r2, [pc, #264]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f6a:	00db      	lsls	r3, r3, #3
 8010f6c:	58d3      	ldr	r3, [r2, r3]
 8010f6e:	33ff      	adds	r3, #255	; 0xff
 8010f70:	7d9b      	ldrb	r3, [r3, #22]
 8010f72:	e7dc      	b.n	8010f2e <LoRaMacMibGetRequestConfirm+0x62>
            getPhy.Attribute = PHY_CHANNELS;
 8010f74:	231c      	movs	r3, #28
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010f76:	466a      	mov	r2, sp
 8010f78:	7013      	strb	r3, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010f7a:	238c      	movs	r3, #140	; 0x8c
 8010f7c:	4a3d      	ldr	r2, [pc, #244]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f7e:	00db      	lsls	r3, r3, #3
 8010f80:	58d3      	ldr	r3, [r2, r3]
 8010f82:	4669      	mov	r1, sp
 8010f84:	7818      	ldrb	r0, [r3, #0]
 8010f86:	f001 ff14 	bl	8012db2 <RegionGetPhyParam>
            mibGet->Param.Contexts = GetCtxs( );
 8010f8a:	6060      	str	r0, [r4, #4]
 8010f8c:	e7d0      	b.n	8010f30 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010f8e:	238c      	movs	r3, #140	; 0x8c
 8010f90:	4a38      	ldr	r2, [pc, #224]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	58d3      	ldr	r3, [r2, r3]
 8010f96:	3404      	adds	r4, #4
 8010f98:	33f8      	adds	r3, #248	; 0xf8
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8010f9a:	cb06      	ldmia	r3!, {r1, r2}
 8010f9c:	c406      	stmia	r4!, {r1, r2}
 8010f9e:	e7c7      	b.n	8010f30 <LoRaMacMibGetRequestConfirm+0x64>
 8010fa0:	238c      	movs	r3, #140	; 0x8c
 8010fa2:	4a34      	ldr	r2, [pc, #208]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	58d3      	ldr	r3, [r2, r3]
 8010fa8:	3404      	adds	r4, #4
 8010faa:	3328      	adds	r3, #40	; 0x28
 8010fac:	e7f5      	b.n	8010f9a <LoRaMacMibGetRequestConfirm+0xce>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010fae:	231a      	movs	r3, #26
 8010fb0:	e7e1      	b.n	8010f76 <LoRaMacMibGetRequestConfirm+0xaa>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010fb2:	2319      	movs	r3, #25
 8010fb4:	e7df      	b.n	8010f76 <LoRaMacMibGetRequestConfirm+0xaa>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010fb6:	238c      	movs	r3, #140	; 0x8c
 8010fb8:	4a2e      	ldr	r2, [pc, #184]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fba:	00db      	lsls	r3, r3, #3
 8010fbc:	58d3      	ldr	r3, [r2, r3]
 8010fbe:	33f4      	adds	r3, #244	; 0xf4
 8010fc0:	e7ac      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8010fc2:	238c      	movs	r3, #140	; 0x8c
 8010fc4:	4a2b      	ldr	r2, [pc, #172]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fc6:	00db      	lsls	r3, r3, #3
 8010fc8:	58d3      	ldr	r3, [r2, r3]
 8010fca:	33e0      	adds	r3, #224	; 0xe0
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	e7bc      	b.n	8010f4a <LoRaMacMibGetRequestConfirm+0x7e>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8010fd0:	238c      	movs	r3, #140	; 0x8c
 8010fd2:	4a28      	ldr	r2, [pc, #160]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fd4:	00db      	lsls	r3, r3, #3
 8010fd6:	58d3      	ldr	r3, [r2, r3]
 8010fd8:	33e4      	adds	r3, #228	; 0xe4
 8010fda:	e7f7      	b.n	8010fcc <LoRaMacMibGetRequestConfirm+0x100>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8010fdc:	238c      	movs	r3, #140	; 0x8c
 8010fde:	4a25      	ldr	r2, [pc, #148]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fe0:	00db      	lsls	r3, r3, #3
 8010fe2:	58d3      	ldr	r3, [r2, r3]
 8010fe4:	33e8      	adds	r3, #232	; 0xe8
 8010fe6:	e7f1      	b.n	8010fcc <LoRaMacMibGetRequestConfirm+0x100>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8010fe8:	238c      	movs	r3, #140	; 0x8c
 8010fea:	4a22      	ldr	r2, [pc, #136]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	58d3      	ldr	r3, [r2, r3]
 8010ff0:	33ec      	adds	r3, #236	; 0xec
 8010ff2:	e7eb      	b.n	8010fcc <LoRaMacMibGetRequestConfirm+0x100>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8010ff4:	238c      	movs	r3, #140	; 0x8c
 8010ff6:	4a1f      	ldr	r2, [pc, #124]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	58d3      	ldr	r3, [r2, r3]
 8010ffc:	33f0      	adds	r3, #240	; 0xf0
 8010ffe:	e7e5      	b.n	8010fcc <LoRaMacMibGetRequestConfirm+0x100>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011000:	238c      	movs	r3, #140	; 0x8c
 8011002:	4a1c      	ldr	r2, [pc, #112]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011004:	00db      	lsls	r3, r3, #3
 8011006:	58d3      	ldr	r3, [r2, r3]
 8011008:	795b      	ldrb	r3, [r3, #5]
 801100a:	e790      	b.n	8010f2e <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801100c:	238c      	movs	r3, #140	; 0x8c
 801100e:	4a19      	ldr	r2, [pc, #100]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	58d3      	ldr	r3, [r2, r3]
 8011014:	33d5      	adds	r3, #213	; 0xd5
 8011016:	e781      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011018:	238c      	movs	r3, #140	; 0x8c
 801101a:	4a16      	ldr	r2, [pc, #88]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 801101c:	00db      	lsls	r3, r3, #3
 801101e:	58d3      	ldr	r3, [r2, r3]
 8011020:	791b      	ldrb	r3, [r3, #4]
 8011022:	e784      	b.n	8010f2e <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011024:	238c      	movs	r3, #140	; 0x8c
 8011026:	4a13      	ldr	r2, [pc, #76]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	58d3      	ldr	r3, [r2, r3]
 801102c:	33d4      	adds	r3, #212	; 0xd4
 801102e:	e775      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8011030:	238c      	movs	r3, #140	; 0x8c
 8011032:	4a10      	ldr	r2, [pc, #64]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011034:	00db      	lsls	r3, r3, #3
 8011036:	58d3      	ldr	r3, [r2, r3]
 8011038:	33d8      	adds	r3, #216	; 0xd8
 801103a:	e7c7      	b.n	8010fcc <LoRaMacMibGetRequestConfirm+0x100>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 801103c:	238c      	movs	r3, #140	; 0x8c
 801103e:	4a0d      	ldr	r2, [pc, #52]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	58d3      	ldr	r3, [r2, r3]
 8011044:	33dc      	adds	r3, #220	; 0xdc
 8011046:	e769      	b.n	8010f1c <LoRaMacMibGetRequestConfirm+0x50>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011048:	238c      	movs	r3, #140	; 0x8c
 801104a:	4a0a      	ldr	r2, [pc, #40]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 801104c:	00db      	lsls	r3, r3, #3
 801104e:	58d3      	ldr	r3, [r2, r3]
 8011050:	33fc      	adds	r3, #252	; 0xfc
 8011052:	68db      	ldr	r3, [r3, #12]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8011054:	6063      	str	r3, [r4, #4]
 8011056:	e76b      	b.n	8010f30 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.Contexts = GetCtxs( );
 8011058:	f7fe ff30 	bl	800febc <GetCtxs>
 801105c:	e795      	b.n	8010f8a <LoRaMacMibGetRequestConfirm+0xbe>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 801105e:	238c      	movs	r3, #140	; 0x8c
 8011060:	4a04      	ldr	r2, [pc, #16]	; (8011074 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8011062:	00db      	lsls	r3, r3, #3
 8011064:	58d3      	ldr	r3, [r2, r3]
 8011066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011068:	e7f4      	b.n	8011054 <LoRaMacMibGetRequestConfirm+0x188>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801106a:	0020      	movs	r0, r4
 801106c:	f000 fcbf 	bl	80119ee <LoRaMacClassBMibGetRequestConfirm>
            break;
 8011070:	e75f      	b.n	8010f32 <LoRaMacMibGetRequestConfirm+0x66>
 8011072:	46c0      	nop			; (mov r8, r8)
 8011074:	200010c8 	.word	0x200010c8

08011078 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801107a:	0004      	movs	r4, r0
 801107c:	b089      	sub	sp, #36	; 0x24
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801107e:	2603      	movs	r6, #3
    if( mibSet == NULL )
 8011080:	2800      	cmp	r0, #0
 8011082:	d100      	bne.n	8011086 <LoRaMacMibSetRequestConfirm+0xe>
 8011084:	e0ab      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x166>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011086:	23d6      	movs	r3, #214	; 0xd6
 8011088:	4d92      	ldr	r5, [pc, #584]	; (80112d4 <LoRaMacMibSetRequestConfirm+0x25c>)
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 801108e:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011090:	079b      	lsls	r3, r3, #30
 8011092:	d500      	bpl.n	8011096 <LoRaMacMibSetRequestConfirm+0x1e>
 8011094:	e0a3      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x166>
    }

    switch( mibSet->Type )
 8011096:	7800      	ldrb	r0, [r0, #0]
 8011098:	2830      	cmp	r0, #48	; 0x30
 801109a:	d900      	bls.n	801109e <LoRaMacMibSetRequestConfirm+0x26>
 801109c:	e228      	b.n	80114f0 <LoRaMacMibSetRequestConfirm+0x478>
 801109e:	f7ef fd81 	bl	8000ba4 <__gnu_thumb1_case_uhi>
 80110a2:	0031      	.short	0x0031
 80110a4:	00820078 	.word	0x00820078
 80110a8:	008f0089 	.word	0x008f0089
 80110ac:	00a10095 	.word	0x00a10095
 80110b0:	00ab00a6 	.word	0x00ab00a6
 80110b4:	00b500b0 	.word	0x00b500b0
 80110b8:	00bf00ba 	.word	0x00bf00ba
 80110bc:	00c900c4 	.word	0x00c900c4
 80110c0:	00d300ce 	.word	0x00d300ce
 80110c4:	00dd00d8 	.word	0x00dd00d8
 80110c8:	00e700e2 	.word	0x00e700e2
 80110cc:	00f100ec 	.word	0x00f100ec
 80110d0:	00fb00f6 	.word	0x00fb00f6
 80110d4:	01060100 	.word	0x01060100
 80110d8:	02270111 	.word	0x02270111
 80110dc:	015a011f 	.word	0x015a011f
 80110e0:	01710180 	.word	0x01710180
 80110e4:	018f0185 	.word	0x018f0185
 80110e8:	019b0196 	.word	0x019b0196
 80110ec:	01a501a0 	.word	0x01a501a0
 80110f0:	01bc01aa 	.word	0x01bc01aa
 80110f4:	01d201e4 	.word	0x01d201e4
 80110f8:	01fc01f5 	.word	0x01fc01f5
 80110fc:	020a0203 	.word	0x020a0203
 8011100:	02180210 	.word	0x02180210
    switch( MacCtx.NvmCtx->DeviceClass )
 8011104:	278c      	movs	r7, #140	; 0x8c
 8011106:	00ff      	lsls	r7, r7, #3
 8011108:	59ea      	ldr	r2, [r5, r7]
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801110a:	7924      	ldrb	r4, [r4, #4]
    switch( MacCtx.NvmCtx->DeviceClass )
 801110c:	0013      	movs	r3, r2
 801110e:	33c8      	adds	r3, #200	; 0xc8
 8011110:	781e      	ldrb	r6, [r3, #0]
 8011112:	2e01      	cmp	r6, #1
 8011114:	d007      	beq.n	8011126 <LoRaMacMibSetRequestConfirm+0xae>
 8011116:	2e00      	cmp	r6, #0
 8011118:	d003      	beq.n	8011122 <LoRaMacMibSetRequestConfirm+0xaa>
 801111a:	2e02      	cmp	r6, #2
 801111c:	d030      	beq.n	8011180 <LoRaMacMibSetRequestConfirm+0x108>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801111e:	2603      	movs	r6, #3
 8011120:	e027      	b.n	8011172 <LoRaMacMibSetRequestConfirm+0xfa>
            if( deviceClass == CLASS_B )
 8011122:	2c01      	cmp	r4, #1
 8011124:	d108      	bne.n	8011138 <LoRaMacMibSetRequestConfirm+0xc0>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011126:	0020      	movs	r0, r4
 8011128:	f000 fc5f 	bl	80119ea <LoRaMacClassBSwitchClass>
 801112c:	1e06      	subs	r6, r0, #0
            if( status == LORAMAC_STATUS_OK )
 801112e:	d120      	bne.n	8011172 <LoRaMacMibSetRequestConfirm+0xfa>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8011130:	59eb      	ldr	r3, [r5, r7]
 8011132:	33c8      	adds	r3, #200	; 0xc8
 8011134:	701c      	strb	r4, [r3, #0]
 8011136:	e01c      	b.n	8011172 <LoRaMacMibSetRequestConfirm+0xfa>
            if( deviceClass == CLASS_C )
 8011138:	2c02      	cmp	r4, #2
 801113a:	d1f0      	bne.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801113c:	701c      	strb	r4, [r3, #0]
                MacCtx.NvmCtx->NodeAckRequested = false;
 801113e:	4b66      	ldr	r3, [pc, #408]	; (80112d8 <LoRaMacMibSetRequestConfirm+0x260>)
 8011140:	54d6      	strb	r6, [r2, r3]
                Radio.Sleep( );
 8011142:	4b66      	ldr	r3, [pc, #408]	; (80112dc <LoRaMacMibSetRequestConfirm+0x264>)
 8011144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011146:	9303      	str	r3, [sp, #12]
 8011148:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801114a:	59eb      	ldr	r3, [r5, r7]
 801114c:	7818      	ldrb	r0, [r3, #0]
 801114e:	001c      	movs	r4, r3
 8011150:	001a      	movs	r2, r3
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011152:	0019      	movs	r1, r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011154:	23f6      	movs	r3, #246	; 0xf6
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011156:	31fc      	adds	r1, #252	; 0xfc
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	7809      	ldrb	r1, [r1, #0]
 801115c:	18ed      	adds	r5, r5, r3
 801115e:	32dc      	adds	r2, #220	; 0xdc
 8011160:	7812      	ldrb	r2, [r2, #0]
 8011162:	34d8      	adds	r4, #216	; 0xd8
 8011164:	9500      	str	r5, [sp, #0]
 8011166:	b249      	sxtb	r1, r1
 8011168:	6823      	ldr	r3, [r4, #0]
 801116a:	f001 fe60 	bl	8012e2e <RegionComputeRxWindowParameters>
                OpenContinuousRx2Window( );
 801116e:	f7fd ffed 	bl	800f14c <OpenContinuousRx2Window>
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8011172:	2001      	movs	r0, #1
 8011174:	f7fd fdac 	bl	800ecd0 <CallNvmCtxCallback>
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8011178:	2000      	movs	r0, #0
 801117a:	f7fd fda9 	bl	800ecd0 <CallNvmCtxCallback>
 801117e:	e02e      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x166>
            if( deviceClass == CLASS_A )
 8011180:	2c00      	cmp	r4, #0
 8011182:	d1cc      	bne.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8011184:	701c      	strb	r4, [r3, #0]
                Radio.Sleep( );
 8011186:	4b55      	ldr	r3, [pc, #340]	; (80112dc <LoRaMacMibSetRequestConfirm+0x264>)
 8011188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118a:	9303      	str	r3, [sp, #12]
 801118c:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801118e:	2600      	movs	r6, #0
            break;
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
            break;
 8011190:	e7ef      	b.n	8011172 <LoRaMacMibSetRequestConfirm+0xfa>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011192:	7923      	ldrb	r3, [r4, #4]
 8011194:	2b02      	cmp	r3, #2
 8011196:	d0c2      	beq.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8011198:	228c      	movs	r2, #140	; 0x8c
 801119a:	00d2      	lsls	r2, r2, #3
 801119c:	58a9      	ldr	r1, [r5, r2]
 801119e:	2289      	movs	r2, #137	; 0x89
 80111a0:	0092      	lsls	r2, r2, #2
 80111a2:	548b      	strb	r3, [r1, r2]
 80111a4:	e7f3      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 80111a6:	238c      	movs	r3, #140	; 0x8c
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	58eb      	ldr	r3, [r5, r3]
 80111ac:	7922      	ldrb	r2, [r4, #4]
 80111ae:	33ca      	adds	r3, #202	; 0xca
 80111b0:	701a      	strb	r2, [r3, #0]
 80111b2:	e7ec      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 80111b4:	238c      	movs	r3, #140	; 0x8c
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	58eb      	ldr	r3, [r5, r3]
 80111ba:	6862      	ldr	r2, [r4, #4]
 80111bc:	641a      	str	r2, [r3, #64]	; 0x40
 80111be:	e7e6      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            break;
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 80111c0:	238c      	movs	r3, #140	; 0x8c
 80111c2:	00db      	lsls	r3, r3, #3
 80111c4:	58eb      	ldr	r3, [r5, r3]
 80111c6:	6862      	ldr	r2, [r4, #4]
 80111c8:	645a      	str	r2, [r3, #68]	; 0x44
 80111ca:	e7e0      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80111cc:	6861      	ldr	r1, [r4, #4]
 80111ce:	2900      	cmp	r1, #0
 80111d0:	d0a5      	beq.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80111d2:	2000      	movs	r0, #0
 80111d4:	f000 fee8 	bl	8011fa8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80111d8:	2612      	movs	r6, #18
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80111da:	2800      	cmp	r0, #0
 80111dc:	d0d7      	beq.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
        }
    }
    EventRegionNvmCtxChanged( );
    EventMacNvmCtxChanged( );
    return status;
}
 80111de:	0030      	movs	r0, r6
 80111e0:	b009      	add	sp, #36	; 0x24
 80111e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( mibSet->Param.NwkKey != NULL )
 80111e4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80111e6:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 80111e8:	2900      	cmp	r1, #0
 80111ea:	d1f3      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 80111ec:	e797      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.JSIntKey != NULL )
 80111ee:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 80111f0:	2002      	movs	r0, #2
            if( mibSet->Param.JSIntKey != NULL )
 80111f2:	2900      	cmp	r1, #0
 80111f4:	d1ee      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 80111f6:	e792      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.JSEncKey != NULL )
 80111f8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 80111fa:	2003      	movs	r0, #3
            if( mibSet->Param.JSEncKey != NULL )
 80111fc:	2900      	cmp	r1, #0
 80111fe:	d1e9      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011200:	e78d      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8011202:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8011204:	2004      	movs	r0, #4
            if( mibSet->Param.FNwkSIntKey != NULL )
 8011206:	2900      	cmp	r1, #0
 8011208:	d1e4      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801120a:	e788      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.SNwkSIntKey != NULL )
 801120c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 801120e:	2005      	movs	r0, #5
            if( mibSet->Param.SNwkSIntKey != NULL )
 8011210:	2900      	cmp	r1, #0
 8011212:	d1df      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011214:	e783      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.NwkSEncKey != NULL )
 8011216:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8011218:	2006      	movs	r0, #6
            if( mibSet->Param.NwkSEncKey != NULL )
 801121a:	2900      	cmp	r1, #0
 801121c:	d1da      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801121e:	e77e      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.AppSKey != NULL )
 8011220:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011222:	2007      	movs	r0, #7
            if( mibSet->Param.AppSKey != NULL )
 8011224:	2900      	cmp	r1, #0
 8011226:	d1d5      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011228:	e779      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McKEKey != NULL )
 801122a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801122c:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 801122e:	2900      	cmp	r1, #0
 8011230:	d1d0      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011232:	e774      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McKey0 != NULL )
 8011234:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011236:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8011238:	2900      	cmp	r1, #0
 801123a:	d1cb      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801123c:	e76f      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McAppSKey0 != NULL )
 801123e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011240:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8011242:	2900      	cmp	r1, #0
 8011244:	d1c6      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011246:	e76a      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011248:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801124a:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 801124c:	2900      	cmp	r1, #0
 801124e:	d1c1      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011250:	e765      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McKey1 != NULL )
 8011252:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8011254:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 8011256:	2900      	cmp	r1, #0
 8011258:	d1bc      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801125a:	e760      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McAppSKey1 != NULL )
 801125c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 801125e:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 8011260:	2900      	cmp	r1, #0
 8011262:	d1b7      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011264:	e75b      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8011266:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8011268:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 801126a:	2900      	cmp	r1, #0
 801126c:	d1b2      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801126e:	e756      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McKey2 != NULL )
 8011270:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8011272:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 8011274:	2900      	cmp	r1, #0
 8011276:	d1ad      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011278:	e751      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McAppSKey2 != NULL )
 801127a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 801127c:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 801127e:	2900      	cmp	r1, #0
 8011280:	d1a8      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011282:	e74c      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8011284:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8011286:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 8011288:	2900      	cmp	r1, #0
 801128a:	d1a3      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 801128c:	e747      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McKey3 != NULL )
 801128e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8011290:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 8011292:	2900      	cmp	r1, #0
 8011294:	d19e      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 8011296:	e742      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McAppSKey3 != NULL )
 8011298:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 801129a:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 801129c:	2900      	cmp	r1, #0
 801129e:	d199      	bne.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 80112a0:	e73d      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            if( mibSet->Param.McNwkSKey3 != NULL )
 80112a2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 80112a4:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 80112a6:	2900      	cmp	r1, #0
 80112a8:	d000      	beq.n	80112ac <LoRaMacMibSetRequestConfirm+0x234>
 80112aa:	e793      	b.n	80111d4 <LoRaMacMibSetRequestConfirm+0x15c>
 80112ac:	e737      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80112ae:	238c      	movs	r3, #140	; 0x8c
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	58eb      	ldr	r3, [r5, r3]
 80112b4:	7920      	ldrb	r0, [r4, #4]
 80112b6:	33c9      	adds	r3, #201	; 0xc9
 80112b8:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80112ba:	4b08      	ldr	r3, [pc, #32]	; (80112dc <LoRaMacMibSetRequestConfirm+0x264>)
 80112bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112be:	9303      	str	r3, [sp, #12]
 80112c0:	4798      	blx	r3
 80112c2:	e764      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80112c4:	238c      	movs	r3, #140	; 0x8c
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	58eb      	ldr	r3, [r5, r3]
 80112ca:	7922      	ldrb	r2, [r4, #4]
 80112cc:	33ff      	adds	r3, #255	; 0xff
 80112ce:	759a      	strb	r2, [r3, #22]
 80112d0:	e75d      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
 80112d2:	46c0      	nop			; (mov r8, r8)
 80112d4:	200010c8 	.word	0x200010c8
 80112d8:	00000219 	.word	0x00000219
 80112dc:	08018acc 	.word	0x08018acc
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80112e0:	268c      	movs	r6, #140	; 0x8c
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80112e2:	7a23      	ldrb	r3, [r4, #8]
 80112e4:	a905      	add	r1, sp, #20
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80112e6:	00f6      	lsls	r6, r6, #3
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80112e8:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80112ea:	59ab      	ldr	r3, [r5, r6]
 80112ec:	001a      	movs	r2, r3
 80112ee:	32ff      	adds	r2, #255	; 0xff
 80112f0:	7892      	ldrb	r2, [r2, #2]
 80112f2:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80112f4:	7818      	ldrb	r0, [r3, #0]
 80112f6:	2206      	movs	r2, #6
 80112f8:	f001 fd7e 	bl	8012df8 <RegionVerify>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d100      	bne.n	8011302 <LoRaMacMibSetRequestConfirm+0x28a>
 8011300:	e70d      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011302:	59ab      	ldr	r3, [r5, r6]
 8011304:	3404      	adds	r4, #4
 8011306:	001a      	movs	r2, r3
 8011308:	32f8      	adds	r2, #248	; 0xf8
 801130a:	cc03      	ldmia	r4!, {r0, r1}
 801130c:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801130e:	3a38      	subs	r2, #56	; 0x38
 8011310:	7812      	ldrb	r2, [r2, #0]
 8011312:	2a02      	cmp	r2, #2
 8011314:	d000      	beq.n	8011318 <LoRaMacMibSetRequestConfirm+0x2a0>
 8011316:	e73a      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
 8011318:	2289      	movs	r2, #137	; 0x89
 801131a:	0092      	lsls	r2, r2, #2
 801131c:	5c9b      	ldrb	r3, [r3, r2]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d100      	bne.n	8011324 <LoRaMacMibSetRequestConfirm+0x2ac>
 8011322:	e734      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
                    Radio.Sleep( );
 8011324:	4b74      	ldr	r3, [pc, #464]	; (80114f8 <LoRaMacMibSetRequestConfirm+0x480>)
 8011326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011328:	9303      	str	r3, [sp, #12]
 801132a:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801132c:	59ab      	ldr	r3, [r5, r6]
 801132e:	7818      	ldrb	r0, [r3, #0]
 8011330:	001c      	movs	r4, r3
 8011332:	001a      	movs	r2, r3
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011334:	0019      	movs	r1, r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011336:	23f6      	movs	r3, #246	; 0xf6
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011338:	31fc      	adds	r1, #252	; 0xfc
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	18ed      	adds	r5, r5, r3
 801133e:	7809      	ldrb	r1, [r1, #0]
 8011340:	32dc      	adds	r2, #220	; 0xdc
 8011342:	7812      	ldrb	r2, [r2, #0]
 8011344:	34d8      	adds	r4, #216	; 0xd8
 8011346:	9500      	str	r5, [sp, #0]
 8011348:	b249      	sxtb	r1, r1
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	f001 fd6f 	bl	8012e2e <RegionComputeRxWindowParameters>
                    OpenContinuousRx2Window( );
 8011350:	f7fd fefc 	bl	800f14c <OpenContinuousRx2Window>
 8011354:	e71b      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011356:	268c      	movs	r6, #140	; 0x8c
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011358:	7a23      	ldrb	r3, [r4, #8]
 801135a:	a905      	add	r1, sp, #20
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801135c:	00f6      	lsls	r6, r6, #3
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801135e:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011360:	59ab      	ldr	r3, [r5, r6]
 8011362:	001a      	movs	r2, r3
 8011364:	32ff      	adds	r2, #255	; 0xff
 8011366:	7892      	ldrb	r2, [r2, #2]
 8011368:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801136a:	7818      	ldrb	r0, [r3, #0]
 801136c:	2206      	movs	r2, #6
 801136e:	f001 fd43 	bl	8012df8 <RegionVerify>
 8011372:	2800      	cmp	r0, #0
 8011374:	d100      	bne.n	8011378 <LoRaMacMibSetRequestConfirm+0x300>
 8011376:	e6d2      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011378:	59ab      	ldr	r3, [r5, r6]
 801137a:	3404      	adds	r4, #4
 801137c:	3328      	adds	r3, #40	; 0x28
 801137e:	cc06      	ldmia	r4!, {r1, r2}
 8011380:	c306      	stmia	r3!, {r1, r2}
 8011382:	e704      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011384:	6863      	ldr	r3, [r4, #4]
 8011386:	a906      	add	r1, sp, #24
 8011388:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801138a:	2301      	movs	r3, #1
 801138c:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 801138e:	238c      	movs	r3, #140	; 0x8c
 8011390:	00db      	lsls	r3, r3, #3
 8011392:	58eb      	ldr	r3, [r5, r3]
 8011394:	7818      	ldrb	r0, [r3, #0]
 8011396:	f001 fd41 	bl	8012e1c <RegionChanMaskSet>
 801139a:	2800      	cmp	r0, #0
 801139c:	d000      	beq.n	80113a0 <LoRaMacMibSetRequestConfirm+0x328>
 801139e:	e6f6      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
 80113a0:	e6bd      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80113a2:	6863      	ldr	r3, [r4, #4]
 80113a4:	a906      	add	r1, sp, #24
 80113a6:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e7ef      	b.n	801138c <LoRaMacMibSetRequestConfirm+0x314>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80113ac:	7922      	ldrb	r2, [r4, #4]
 80113ae:	1e53      	subs	r3, r2, #1
 80113b0:	2b0e      	cmp	r3, #14
 80113b2:	d900      	bls.n	80113b6 <LoRaMacMibSetRequestConfirm+0x33e>
 80113b4:	e6b3      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80113b6:	238c      	movs	r3, #140	; 0x8c
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	58eb      	ldr	r3, [r5, r3]
 80113bc:	33f4      	adds	r3, #244	; 0xf4
 80113be:	e6f7      	b.n	80111b0 <LoRaMacMibSetRequestConfirm+0x138>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80113c0:	238c      	movs	r3, #140	; 0x8c
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	58eb      	ldr	r3, [r5, r3]
 80113c6:	33e0      	adds	r3, #224	; 0xe0
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80113c8:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80113ca:	601a      	str	r2, [r3, #0]
 80113cc:	e6df      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80113ce:	238c      	movs	r3, #140	; 0x8c
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	58eb      	ldr	r3, [r5, r3]
 80113d4:	33e4      	adds	r3, #228	; 0xe4
 80113d6:	e7f7      	b.n	80113c8 <LoRaMacMibSetRequestConfirm+0x350>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80113d8:	238c      	movs	r3, #140	; 0x8c
 80113da:	00db      	lsls	r3, r3, #3
 80113dc:	58eb      	ldr	r3, [r5, r3]
 80113de:	33e8      	adds	r3, #232	; 0xe8
 80113e0:	e7f2      	b.n	80113c8 <LoRaMacMibSetRequestConfirm+0x350>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80113e2:	238c      	movs	r3, #140	; 0x8c
 80113e4:	00db      	lsls	r3, r3, #3
 80113e6:	58eb      	ldr	r3, [r5, r3]
 80113e8:	33ec      	adds	r3, #236	; 0xec
 80113ea:	e7ed      	b.n	80113c8 <LoRaMacMibSetRequestConfirm+0x350>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80113ec:	238c      	movs	r3, #140	; 0x8c
 80113ee:	00db      	lsls	r3, r3, #3
 80113f0:	58eb      	ldr	r3, [r5, r3]
 80113f2:	33f0      	adds	r3, #240	; 0xf0
 80113f4:	e7e8      	b.n	80113c8 <LoRaMacMibSetRequestConfirm+0x350>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80113f6:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80113f8:	248c      	movs	r4, #140	; 0x8c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80113fa:	ae05      	add	r6, sp, #20
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80113fc:	00e4      	lsls	r4, r4, #3
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80113fe:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8011400:	592b      	ldr	r3, [r5, r4]
 8011402:	2205      	movs	r2, #5
 8011404:	7818      	ldrb	r0, [r3, #0]
 8011406:	0031      	movs	r1, r6
 8011408:	f001 fcf6 	bl	8012df8 <RegionVerify>
 801140c:	2800      	cmp	r0, #0
 801140e:	d100      	bne.n	8011412 <LoRaMacMibSetRequestConfirm+0x39a>
 8011410:	e685      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011412:	592b      	ldr	r3, [r5, r4]
 8011414:	7832      	ldrb	r2, [r6, #0]
 8011416:	715a      	strb	r2, [r3, #5]
 8011418:	e6b9      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801141a:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801141c:	248c      	movs	r4, #140	; 0x8c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801141e:	ae05      	add	r6, sp, #20
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011420:	00e4      	lsls	r4, r4, #3
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011422:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011424:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8011426:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011428:	001a      	movs	r2, r3
 801142a:	32ff      	adds	r2, #255	; 0xff
 801142c:	7852      	ldrb	r2, [r2, #1]
 801142e:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8011430:	7818      	ldrb	r0, [r3, #0]
 8011432:	2204      	movs	r2, #4
 8011434:	f001 fce0 	bl	8012df8 <RegionVerify>
 8011438:	2800      	cmp	r0, #0
 801143a:	d100      	bne.n	801143e <LoRaMacMibSetRequestConfirm+0x3c6>
 801143c:	e66f      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801143e:	592b      	ldr	r3, [r5, r4]
 8011440:	33d5      	adds	r3, #213	; 0xd5
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8011442:	7832      	ldrb	r2, [r6, #0]
 8011444:	e6b4      	b.n	80111b0 <LoRaMacMibSetRequestConfirm+0x138>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011446:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011448:	248c      	movs	r4, #140	; 0x8c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801144a:	ae05      	add	r6, sp, #20
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 801144c:	00e4      	lsls	r4, r4, #3
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801144e:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011450:	592b      	ldr	r3, [r5, r4]
 8011452:	2209      	movs	r2, #9
 8011454:	7818      	ldrb	r0, [r3, #0]
 8011456:	0031      	movs	r1, r6
 8011458:	f001 fcce 	bl	8012df8 <RegionVerify>
 801145c:	2800      	cmp	r0, #0
 801145e:	d100      	bne.n	8011462 <LoRaMacMibSetRequestConfirm+0x3ea>
 8011460:	e65d      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8011462:	592b      	ldr	r3, [r5, r4]
 8011464:	7832      	ldrb	r2, [r6, #0]
 8011466:	711a      	strb	r2, [r3, #4]
 8011468:	e691      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801146a:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 801146c:	248c      	movs	r4, #140	; 0x8c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801146e:	ae05      	add	r6, sp, #20
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8011470:	00e4      	lsls	r4, r4, #3
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011472:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8011474:	592b      	ldr	r3, [r5, r4]
 8011476:	2208      	movs	r2, #8
 8011478:	7818      	ldrb	r0, [r3, #0]
 801147a:	0031      	movs	r1, r6
 801147c:	f001 fcbc 	bl	8012df8 <RegionVerify>
 8011480:	2800      	cmp	r0, #0
 8011482:	d100      	bne.n	8011486 <LoRaMacMibSetRequestConfirm+0x40e>
 8011484:	e64b      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8011486:	592b      	ldr	r3, [r5, r4]
 8011488:	33d4      	adds	r3, #212	; 0xd4
 801148a:	e7da      	b.n	8011442 <LoRaMacMibSetRequestConfirm+0x3ca>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801148c:	238c      	movs	r3, #140	; 0x8c
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	58eb      	ldr	r3, [r5, r3]
 8011492:	6862      	ldr	r2, [r4, #4]
 8011494:	609a      	str	r2, [r3, #8]
 8011496:	33d8      	adds	r3, #216	; 0xd8
 8011498:	e797      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x352>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801149a:	238c      	movs	r3, #140	; 0x8c
 801149c:	00db      	lsls	r3, r3, #3
 801149e:	58eb      	ldr	r3, [r5, r3]
 80114a0:	7922      	ldrb	r2, [r4, #4]
 80114a2:	731a      	strb	r2, [r3, #12]
 80114a4:	33dc      	adds	r3, #220	; 0xdc
 80114a6:	e683      	b.n	80111b0 <LoRaMacMibSetRequestConfirm+0x138>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80114a8:	238c      	movs	r3, #140	; 0x8c
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	58eb      	ldr	r3, [r5, r3]
 80114ae:	6862      	ldr	r2, [r4, #4]
 80114b0:	33fc      	adds	r3, #252	; 0xfc
 80114b2:	60da      	str	r2, [r3, #12]
 80114b4:	e66b      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80114b6:	238c      	movs	r3, #140	; 0x8c
 80114b8:	00db      	lsls	r3, r3, #3
 80114ba:	58eb      	ldr	r3, [r5, r3]
 80114bc:	6862      	ldr	r2, [r4, #4]
 80114be:	639a      	str	r2, [r3, #56]	; 0x38
 80114c0:	e665      	b.n	801118e <LoRaMacMibSetRequestConfirm+0x116>
            if( mibSet->Param.Contexts != 0 )
 80114c2:	6860      	ldr	r0, [r4, #4]
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d100      	bne.n	80114ca <LoRaMacMibSetRequestConfirm+0x452>
 80114c8:	e629      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                status = RestoreCtxs( mibSet->Param.Contexts );
 80114ca:	f7fe fd35 	bl	800ff38 <RestoreCtxs>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80114ce:	0006      	movs	r6, r0
            break;
 80114d0:	e64f      	b.n	8011172 <LoRaMacMibSetRequestConfirm+0xfa>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80114d2:	79a3      	ldrb	r3, [r4, #6]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d900      	bls.n	80114da <LoRaMacMibSetRequestConfirm+0x462>
 80114d8:	e621      	b.n	801111e <LoRaMacMibSetRequestConfirm+0xa6>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80114da:	238c      	movs	r3, #140	; 0x8c
 80114dc:	00db      	lsls	r3, r3, #3
 80114de:	58ea      	ldr	r2, [r5, r3]
 80114e0:	2388      	movs	r3, #136	; 0x88
 80114e2:	6861      	ldr	r1, [r4, #4]
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80114e8:	6860      	ldr	r0, [r4, #4]
 80114ea:	f000 fd43 	bl	8011f74 <LoRaMacCryptoSetLrWanVersion>
 80114ee:	e673      	b.n	80111d8 <LoRaMacMibSetRequestConfirm+0x160>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80114f0:	0020      	movs	r0, r4
 80114f2:	f000 fa7e 	bl	80119f2 <LoRaMacMibClassBSetRequestConfirm>
 80114f6:	e7ea      	b.n	80114ce <LoRaMacMibSetRequestConfirm+0x456>
 80114f8:	08018acc 	.word	0x08018acc

080114fc <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80114fc:	2300      	movs	r3, #0
{
 80114fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011500:	b085      	sub	sp, #20
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011502:	aa02      	add	r2, sp, #8
{
 8011504:	0005      	movs	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011506:	7013      	strb	r3, [r2, #0]
 8011508:	7053      	strb	r3, [r2, #1]

    if( mlmeRequest == NULL )
 801150a:	4298      	cmp	r0, r3
 801150c:	d103      	bne.n	8011516 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801150e:	2603      	movs	r6, #3
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 8011510:	0030      	movs	r0, r6
 8011512:	b005      	add	sp, #20
 8011514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8011516:	23d6      	movs	r3, #214	; 0xd6
 8011518:	4c8e      	ldr	r4, [pc, #568]	; (8011754 <LoRaMacMlmeRequest+0x258>)
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	58e3      	ldr	r3, [r4, r3]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8011522:	2601      	movs	r6, #1
 8011524:	e7f4      	b.n	8011510 <LoRaMacMlmeRequest+0x14>
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011526:	f001 faa9 	bl	8012a7c <LoRaMacConfirmQueueIsFull>
 801152a:	1e01      	subs	r1, r0, #0
 801152c:	d1f9      	bne.n	8011522 <LoRaMacMlmeRequest+0x26>
    memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801152e:	2386      	movs	r3, #134	; 0x86
 8011530:	00db      	lsls	r3, r3, #3
 8011532:	18e0      	adds	r0, r4, r3
 8011534:	2214      	movs	r2, #20
 8011536:	f002 fe01 	bl	801413c <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801153a:	2201      	movs	r2, #1
 801153c:	4b86      	ldr	r3, [pc, #536]	; (8011758 <LoRaMacMlmeRequest+0x25c>)
    switch( mlmeRequest->Type )
 801153e:	7828      	ldrb	r0, [r5, #0]
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011540:	54e2      	strb	r2, [r4, r3]
    switch( mlmeRequest->Type )
 8011542:	280d      	cmp	r0, #13
 8011544:	d900      	bls.n	8011548 <LoRaMacMlmeRequest+0x4c>
 8011546:	e103      	b.n	8011750 <LoRaMacMlmeRequest+0x254>
 8011548:	f7ef fb2c 	bl	8000ba4 <__gnu_thumb1_case_uhi>
 801154c:	0102000e 	.word	0x0102000e
 8011550:	00580102 	.word	0x00580102
 8011554:	00840072 	.word	0x00840072
 8011558:	01020102 	.word	0x01020102
 801155c:	00980102 	.word	0x00980102
 8011560:	00ec0102 	.word	0x00ec0102
 8011564:	00da00aa 	.word	0x00da00aa
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011568:	23d6      	movs	r3, #214	; 0xd6
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	58e2      	ldr	r2, [r4, r3]
 801156e:	2320      	movs	r3, #32
 8011570:	401a      	ands	r2, r3
 8011572:	9200      	str	r2, [sp, #0]
 8011574:	d1d5      	bne.n	8011522 <LoRaMacMlmeRequest+0x26>
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8011576:	686b      	ldr	r3, [r5, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d0c8      	beq.n	801150e <LoRaMacMlmeRequest+0x12>
 801157c:	68ab      	ldr	r3, [r5, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d0c5      	beq.n	801150e <LoRaMacMlmeRequest+0x12>
            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011582:	278c      	movs	r7, #140	; 0x8c
 8011584:	4669      	mov	r1, sp
 8011586:	2389      	movs	r3, #137	; 0x89
 8011588:	00ff      	lsls	r7, r7, #3
 801158a:	59e2      	ldr	r2, [r4, r7]
 801158c:	7809      	ldrb	r1, [r1, #0]
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	54d1      	strb	r1, [r2, r3]
            ResetMacParameters( );
 8011592:	f7fd fc23 	bl	800eddc <ResetMacParameters>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011596:	2304      	movs	r3, #4
 8011598:	4a70      	ldr	r2, [pc, #448]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.Request = mlmeRequest->Type;
 801159a:	ae03      	add	r6, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801159c:	5ca1      	ldrb	r1, [r4, r2]
 801159e:	430b      	orrs	r3, r1
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
 80115a0:	210c      	movs	r1, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 80115a2:	54a3      	strb	r3, [r4, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 80115a4:	782b      	ldrb	r3, [r5, #0]
 80115a6:	3a2d      	subs	r2, #45	; 0x2d
 80115a8:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 80115aa:	7033      	strb	r3, [r6, #0]
            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
 80115ac:	686b      	ldr	r3, [r5, #4]
 80115ae:	6023      	str	r3, [r4, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
 80115b0:	68ab      	ldr	r3, [r5, #8]
 80115b2:	6063      	str	r3, [r4, #4]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
 80115b4:	59e3      	ldr	r3, [r4, r7]
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	5669      	ldrsb	r1, [r5, r1]
 80115ba:	7818      	ldrb	r0, [r3, #0]
 80115bc:	f001 fc8c 	bl	8012ed8 <RegionAlternateDr>
 80115c0:	9b01      	ldr	r3, [sp, #4]
 80115c2:	33d5      	adds	r3, #213	; 0xd5
 80115c4:	7018      	strb	r0, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80115c6:	2307      	movs	r3, #7
 80115c8:	7073      	strb	r3, [r6, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 80115ca:	466b      	mov	r3, sp
 80115cc:	781b      	ldrb	r3, [r3, #0]
            LoRaMacConfirmQueueAdd( &queueElement );
 80115ce:	0030      	movs	r0, r6
            queueElement.RestrictCommonReadyToHandle = false;
 80115d0:	70f3      	strb	r3, [r6, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 80115d2:	f001 f95f 	bl	8012894 <LoRaMacConfirmQueueAdd>
            status = SendReJoinReq( JOIN_REQ );
 80115d6:	20ff      	movs	r0, #255	; 0xff
 80115d8:	f7fe fc08 	bl	800fdec <SendReJoinReq>
 80115dc:	1e06      	subs	r6, r0, #0
            if( status != LORAMAC_STATUS_OK )
 80115de:	d007      	beq.n	80115f0 <LoRaMacMlmeRequest+0xf4>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
 80115e0:	210c      	movs	r1, #12
 80115e2:	59e7      	ldr	r7, [r4, r7]
 80115e4:	5669      	ldrsb	r1, [r5, r1]
 80115e6:	7838      	ldrb	r0, [r7, #0]
 80115e8:	f001 fc76 	bl	8012ed8 <RegionAlternateDr>
 80115ec:	37d5      	adds	r7, #213	; 0xd5
 80115ee:	7038      	strb	r0, [r7, #0]
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80115f0:	2001      	movs	r0, #1
 80115f2:	f7fd fb6d 	bl	800ecd0 <CallNvmCtxCallback>
    if( status != LORAMAC_STATUS_OK )
 80115f6:	2e00      	cmp	r6, #0
 80115f8:	d015      	beq.n	8011626 <LoRaMacMlmeRequest+0x12a>
 80115fa:	e06f      	b.n	80116dc <LoRaMacMlmeRequest+0x1e0>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 80115fc:	2304      	movs	r3, #4
 80115fe:	4a57      	ldr	r2, [pc, #348]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.RestrictCommonReadyToHandle = false;
 8011600:	2500      	movs	r5, #0
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011602:	5ca1      	ldrb	r1, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 8011604:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011606:	430b      	orrs	r3, r1
 8011608:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 801160a:	2303      	movs	r3, #3
 801160c:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801160e:	3b02      	subs	r3, #2
 8011610:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 8011612:	70c5      	strb	r5, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 8011614:	f001 f93e 	bl	8012894 <LoRaMacConfirmQueueAdd>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011618:	002a      	movs	r2, r5
 801161a:	2002      	movs	r0, #2
 801161c:	a902      	add	r1, sp, #8
 801161e:	f001 f82b 	bl	8012678 <LoRaMacCommandsAddCmd>
 8011622:	42a8      	cmp	r0, r5
 8011624:	d159      	bne.n	80116da <LoRaMacMlmeRequest+0x1de>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011626:	2600      	movs	r6, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8011628:	2000      	movs	r0, #0
 801162a:	f7fd fb51 	bl	800ecd0 <CallNvmCtxCallback>
 801162e:	e76f      	b.n	8011510 <LoRaMacMlmeRequest+0x14>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011630:	2204      	movs	r2, #4
 8011632:	494a      	ldr	r1, [pc, #296]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.Request = mlmeRequest->Type;
 8011634:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011636:	5c63      	ldrb	r3, [r4, r1]
            queueElement.Request = mlmeRequest->Type;
 8011638:	7002      	strb	r2, [r0, #0]
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801163a:	4313      	orrs	r3, r2
 801163c:	5463      	strb	r3, [r4, r1]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801163e:	2301      	movs	r3, #1
 8011640:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 8011642:	2300      	movs	r3, #0
 8011644:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 8011646:	f001 f925 	bl	8012894 <LoRaMacConfirmQueueAdd>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801164a:	88a8      	ldrh	r0, [r5, #4]
 801164c:	f7fe fbf4 	bl	800fe38 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011650:	0006      	movs	r6, r0
            break;
 8011652:	e7d0      	b.n	80115f6 <LoRaMacMlmeRequest+0xfa>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011654:	2304      	movs	r3, #4
 8011656:	4a41      	ldr	r2, [pc, #260]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.Request = mlmeRequest->Type;
 8011658:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801165a:	5ca1      	ldrb	r1, [r4, r2]
 801165c:	430b      	orrs	r3, r1
 801165e:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 8011660:	2305      	movs	r3, #5
 8011662:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011664:	3b04      	subs	r3, #4
 8011666:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 8011668:	2300      	movs	r3, #0
 801166a:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 801166c:	f001 f912 	bl	8012894 <LoRaMacConfirmQueueAdd>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011670:	7b2a      	ldrb	r2, [r5, #12]
 8011672:	88a8      	ldrh	r0, [r5, #4]
 8011674:	68a9      	ldr	r1, [r5, #8]
 8011676:	f7fe fc0b 	bl	800fe90 <SetTxContinuousWave1>
 801167a:	e7e9      	b.n	8011650 <LoRaMacMlmeRequest+0x154>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801167c:	2304      	movs	r3, #4
 801167e:	4a37      	ldr	r2, [pc, #220]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.RestrictCommonReadyToHandle = false;
 8011680:	2500      	movs	r5, #0
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011682:	5ca1      	ldrb	r1, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 8011684:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011686:	430b      	orrs	r3, r1
 8011688:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 801168a:	2309      	movs	r3, #9
 801168c:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801168e:	3b08      	subs	r3, #8
 8011690:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 8011692:	70c5      	strb	r5, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 8011694:	f001 f8fe 	bl	8012894 <LoRaMacConfirmQueueAdd>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011698:	002a      	movs	r2, r5
 801169a:	a902      	add	r1, sp, #8
 801169c:	200d      	movs	r0, #13
 801169e:	e7be      	b.n	801161e <LoRaMacMlmeRequest+0x122>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 80116a0:	2304      	movs	r3, #4
 80116a2:	4a2e      	ldr	r2, [pc, #184]	; (801175c <LoRaMacMlmeRequest+0x260>)
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80116a4:	792f      	ldrb	r7, [r5, #4]
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 80116a6:	5ca1      	ldrb	r1, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 80116a8:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 80116aa:	430b      	orrs	r3, r1
 80116ac:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 80116ae:	230c      	movs	r3, #12
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80116b0:	2601      	movs	r6, #1
            queueElement.Request = mlmeRequest->Type;
 80116b2:	7003      	strb	r3, [r0, #0]
            queueElement.RestrictCommonReadyToHandle = false;
 80116b4:	2300      	movs	r3, #0
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80116b6:	7046      	strb	r6, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 80116b8:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 80116ba:	f001 f8eb 	bl	8012894 <LoRaMacConfirmQueueAdd>
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80116be:	7928      	ldrb	r0, [r5, #4]
 80116c0:	0740      	lsls	r0, r0, #29
 80116c2:	0f40      	lsrs	r0, r0, #29
 80116c4:	f000 f98e 	bl	80119e4 <LoRaMacClassBSetPingSlotInfo>
            macCmdPayload[0] = value;
 80116c8:	ab02      	add	r3, sp, #8
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80116ca:	0032      	movs	r2, r6
 80116cc:	0019      	movs	r1, r3
 80116ce:	2010      	movs	r0, #16
            macCmdPayload[0] = value;
 80116d0:	701f      	strb	r7, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80116d2:	f000 ffd1 	bl	8012678 <LoRaMacCommandsAddCmd>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0a5      	beq.n	8011626 <LoRaMacMlmeRequest+0x12a>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80116da:	2614      	movs	r6, #20
        MacCtx.NvmCtx->NodeAckRequested = false;
 80116dc:	238c      	movs	r3, #140	; 0x8c
 80116de:	2100      	movs	r1, #0
 80116e0:	00db      	lsls	r3, r3, #3
 80116e2:	58e2      	ldr	r2, [r4, r3]
 80116e4:	4b1e      	ldr	r3, [pc, #120]	; (8011760 <LoRaMacMlmeRequest+0x264>)
 80116e6:	54d1      	strb	r1, [r2, r3]
        LoRaMacConfirmQueueRemoveLast( );
 80116e8:	f001 f8f2 	bl	80128d0 <LoRaMacConfirmQueueRemoveLast>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80116ec:	f001 f9c0 	bl	8012a70 <LoRaMacConfirmQueueGetCnt>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d199      	bne.n	8011628 <LoRaMacMlmeRequest+0x12c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80116f4:	2104      	movs	r1, #4
 80116f6:	4a19      	ldr	r2, [pc, #100]	; (801175c <LoRaMacMlmeRequest+0x260>)
 80116f8:	5ca3      	ldrb	r3, [r4, r2]
 80116fa:	438b      	bics	r3, r1
 80116fc:	54a3      	strb	r3, [r4, r2]
 80116fe:	e793      	b.n	8011628 <LoRaMacMlmeRequest+0x12c>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011700:	2304      	movs	r3, #4
 8011702:	4a16      	ldr	r2, [pc, #88]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.RestrictCommonReadyToHandle = false;
 8011704:	2500      	movs	r5, #0
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011706:	5ca1      	ldrb	r1, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 8011708:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801170a:	430b      	orrs	r3, r1
 801170c:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 801170e:	230d      	movs	r3, #13
 8011710:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011712:	3b0c      	subs	r3, #12
 8011714:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
 8011716:	70c5      	strb	r5, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 8011718:	f001 f8bc 	bl	8012894 <LoRaMacConfirmQueueAdd>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801171c:	002a      	movs	r2, r5
 801171e:	a902      	add	r1, sp, #8
 8011720:	2012      	movs	r0, #18
 8011722:	e77c      	b.n	801161e <LoRaMacMlmeRequest+0x122>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011724:	2304      	movs	r3, #4
 8011726:	4a0d      	ldr	r2, [pc, #52]	; (801175c <LoRaMacMlmeRequest+0x260>)
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011728:	2601      	movs	r6, #1
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801172a:	5ca1      	ldrb	r1, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 801172c:	a803      	add	r0, sp, #12
            MacCtx.MacFlags.Bits.MlmeReq = 1;
 801172e:	430b      	orrs	r3, r1
 8011730:	54a3      	strb	r3, [r4, r2]
            queueElement.Request = mlmeRequest->Type;
 8011732:	230b      	movs	r3, #11
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011734:	7046      	strb	r6, [r0, #1]
            queueElement.Request = mlmeRequest->Type;
 8011736:	7003      	strb	r3, [r0, #0]
            queueElement.RestrictCommonReadyToHandle = true;
 8011738:	70c6      	strb	r6, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
 801173a:	f001 f8ab 	bl	8012894 <LoRaMacConfirmQueueAdd>
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801173e:	f000 f942 	bl	80119c6 <LoRaMacClassBIsAcquisitionInProgress>
 8011742:	2800      	cmp	r0, #0
 8011744:	d1ca      	bne.n	80116dc <LoRaMacMlmeRequest+0x1e0>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011746:	f000 f93b 	bl	80119c0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( );
 801174a:	f000 f93e 	bl	80119ca <LoRaMacClassBBeaconTimerEvent>
 801174e:	e76a      	b.n	8011626 <LoRaMacMlmeRequest+0x12a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011750:	2602      	movs	r6, #2
 8011752:	e7c3      	b.n	80116dc <LoRaMacMlmeRequest+0x1e0>
 8011754:	200010c8 	.word	0x200010c8
 8011758:	00000431 	.word	0x00000431
 801175c:	0000045d 	.word	0x0000045d
 8011760:	00000219 	.word	0x00000219

08011764 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8011764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011766:	0005      	movs	r5, r0
 8011768:	b089      	sub	sp, #36	; 0x24
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 801176a:	2800      	cmp	r0, #0
 801176c:	d103      	bne.n	8011776 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801176e:	2403      	movs	r4, #3
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 8011770:	0020      	movs	r0, r4
 8011772:	b009      	add	sp, #36	; 0x24
 8011774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8011776:	23d6      	movs	r3, #214	; 0xd6
 8011778:	4e4d      	ldr	r6, [pc, #308]	; (80118b0 <LoRaMacMcpsRequest+0x14c>)
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	58f3      	ldr	r3, [r6, r3]
        return LORAMAC_STATUS_BUSY;
 801177e:	2401      	movs	r4, #1
    if( MacCtx.MacState != LORAMAC_IDLE )
 8011780:	9301      	str	r3, [sp, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1f4      	bne.n	8011770 <LoRaMacMcpsRequest+0xc>
    macHdr.Value = 0;
 8011786:	466a      	mov	r2, sp
 8011788:	7912      	ldrb	r2, [r2, #4]
 801178a:	ab04      	add	r3, sp, #16
 801178c:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801178e:	4b49      	ldr	r3, [pc, #292]	; (80118b4 <LoRaMacMcpsRequest+0x150>)
 8011790:	2214      	movs	r2, #20
 8011792:	18f0      	adds	r0, r6, r3
 8011794:	9901      	ldr	r1, [sp, #4]
 8011796:	f002 fcd1 	bl	801413c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801179a:	4b47      	ldr	r3, [pc, #284]	; (80118b8 <LoRaMacMcpsRequest+0x154>)
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 801179c:	4a47      	ldr	r2, [pc, #284]	; (80118bc <LoRaMacMcpsRequest+0x158>)
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801179e:	54f4      	strb	r4, [r6, r3]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 80117a0:	3343      	adds	r3, #67	; 0x43
 80117a2:	58f3      	ldr	r3, [r6, r3]
 80117a4:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 80117a6:	782a      	ldrb	r2, [r5, #0]
 80117a8:	42a2      	cmp	r2, r4
 80117aa:	d02a      	beq.n	8011802 <LoRaMacMcpsRequest+0x9e>
 80117ac:	2a00      	cmp	r2, #0
 80117ae:	d005      	beq.n	80117bc <LoRaMacMcpsRequest+0x58>
 80117b0:	2a03      	cmp	r2, #3
 80117b2:	d030      	beq.n	8011816 <LoRaMacMcpsRequest+0xb2>
    bool readyToSend = false;
 80117b4:	9e01      	ldr	r6, [sp, #4]
    int8_t datarate = DR_0;
 80117b6:	0037      	movs	r7, r6
    switch( mcpsRequest->Type )
 80117b8:	0034      	movs	r4, r6
 80117ba:	e013      	b.n	80117e4 <LoRaMacMcpsRequest+0x80>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80117bc:	211f      	movs	r1, #31
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 80117be:	4a40      	ldr	r2, [pc, #256]	; (80118c0 <LoRaMacMcpsRequest+0x15c>)
 80117c0:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80117c2:	aa04      	add	r2, sp, #16
 80117c4:	7812      	ldrb	r2, [r2, #0]
 80117c6:	4011      	ands	r1, r2
 80117c8:	2240      	movs	r2, #64	; 0x40
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80117ca:	270e      	movs	r7, #14
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80117cc:	430a      	orrs	r2, r1
 80117ce:	a904      	add	r1, sp, #16
 80117d0:	700a      	strb	r2, [r1, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80117d2:	68aa      	ldr	r2, [r5, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80117d4:	792c      	ldrb	r4, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80117d6:	9202      	str	r2, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80117d8:	89aa      	ldrh	r2, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80117da:	57ef      	ldrsb	r7, [r5, r7]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80117dc:	9203      	str	r2, [sp, #12]
    if( fPort > 224 )
 80117de:	2601      	movs	r6, #1
 80117e0:	2ce0      	cmp	r4, #224	; 0xe0
 80117e2:	d8c4      	bhi.n	801176e <LoRaMacMcpsRequest+0xa>
    getPhy.Attribute = PHY_MIN_TX_DR;
 80117e4:	2201      	movs	r2, #1
 80117e6:	a906      	add	r1, sp, #24
 80117e8:	700a      	strb	r2, [r1, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80117ea:	001a      	movs	r2, r3
 80117ec:	32ff      	adds	r2, #255	; 0xff
 80117ee:	7852      	ldrb	r2, [r2, #1]
 80117f0:	708a      	strb	r2, [r1, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80117f2:	7818      	ldrb	r0, [r3, #0]
 80117f4:	f001 fadd 	bl	8012db2 <RegionGetPhyParam>
 80117f8:	9007      	str	r0, [sp, #28]
    if( readyToSend == true )
 80117fa:	2e00      	cmp	r6, #0
 80117fc:	d11d      	bne.n	801183a <LoRaMacMcpsRequest+0xd6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80117fe:	2402      	movs	r4, #2
 8011800:	e04b      	b.n	801189a <LoRaMacMcpsRequest+0x136>
            MacCtx.NvmCtx->AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 8011802:	7be9      	ldrb	r1, [r5, #15]
 8011804:	4a2e      	ldr	r2, [pc, #184]	; (80118c0 <LoRaMacMcpsRequest+0x15c>)
 8011806:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011808:	211f      	movs	r1, #31
 801180a:	aa04      	add	r2, sp, #16
 801180c:	7812      	ldrb	r2, [r2, #0]
 801180e:	4011      	ands	r1, r2
 8011810:	2280      	movs	r2, #128	; 0x80
 8011812:	4252      	negs	r2, r2
 8011814:	e7d9      	b.n	80117ca <LoRaMacMcpsRequest+0x66>
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 8011816:	4a2a      	ldr	r2, [pc, #168]	; (80118c0 <LoRaMacMcpsRequest+0x15c>)
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011818:	270a      	movs	r7, #10
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 801181a:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801181c:	aa04      	add	r2, sp, #16
 801181e:	7811      	ldrb	r1, [r2, #0]
 8011820:	2220      	movs	r2, #32
 8011822:	4252      	negs	r2, r2
 8011824:	430a      	orrs	r2, r1
 8011826:	a904      	add	r1, sp, #16
 8011828:	700a      	strb	r2, [r1, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801182a:	686a      	ldr	r2, [r5, #4]
            readyToSend = true;
 801182c:	0026      	movs	r6, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801182e:	9202      	str	r2, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011830:	892a      	ldrh	r2, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011832:	57ef      	ldrsb	r7, [r5, r7]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011834:	9203      	str	r2, [sp, #12]
            break;
 8011836:	9c01      	ldr	r4, [sp, #4]
 8011838:	e7d4      	b.n	80117e4 <LoRaMacMcpsRequest+0x80>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801183a:	238c      	movs	r3, #140	; 0x8c
 801183c:	4e1c      	ldr	r6, [pc, #112]	; (80118b0 <LoRaMacMcpsRequest+0x14c>)
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	58f3      	ldr	r3, [r6, r3]
 8011842:	001a      	movs	r2, r3
 8011844:	32ca      	adds	r2, #202	; 0xca
 8011846:	7812      	ldrb	r2, [r2, #0]
 8011848:	2a00      	cmp	r2, #0
 801184a:	d116      	bne.n	801187a <LoRaMacMcpsRequest+0x116>
    datarate = MAX( datarate, phyParam.Value );
 801184c:	42b8      	cmp	r0, r7
 801184e:	d200      	bcs.n	8011852 <LoRaMacMcpsRequest+0xee>
 8011850:	0038      	movs	r0, r7
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011852:	001a      	movs	r2, r3
            verify.DatarateParams.Datarate = datarate;
 8011854:	af05      	add	r7, sp, #20
 8011856:	7038      	strb	r0, [r7, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011858:	32ff      	adds	r2, #255	; 0xff
 801185a:	7852      	ldrb	r2, [r2, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 801185c:	0039      	movs	r1, r7
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801185e:	70ba      	strb	r2, [r7, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8011860:	7818      	ldrb	r0, [r3, #0]
 8011862:	2204      	movs	r2, #4
 8011864:	f001 fac8 	bl	8012df8 <RegionVerify>
 8011868:	2800      	cmp	r0, #0
 801186a:	d100      	bne.n	801186e <LoRaMacMcpsRequest+0x10a>
 801186c:	e77f      	b.n	801176e <LoRaMacMcpsRequest+0xa>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801186e:	238c      	movs	r3, #140	; 0x8c
 8011870:	00db      	lsls	r3, r3, #3
 8011872:	58f3      	ldr	r3, [r6, r3]
 8011874:	783a      	ldrb	r2, [r7, #0]
 8011876:	33d5      	adds	r3, #213	; 0xd5
 8011878:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 801187a:	0021      	movs	r1, r4
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	9a02      	ldr	r2, [sp, #8]
 8011880:	a804      	add	r0, sp, #16
 8011882:	f7fe fa11 	bl	800fca8 <Send>
 8011886:	1e04      	subs	r4, r0, #0
        if( status == LORAMAC_STATUS_OK )
 8011888:	d10b      	bne.n	80118a2 <LoRaMacMcpsRequest+0x13e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801188a:	782a      	ldrb	r2, [r5, #0]
 801188c:	4b09      	ldr	r3, [pc, #36]	; (80118b4 <LoRaMacMcpsRequest+0x150>)
 801188e:	54f2      	strb	r2, [r6, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011890:	2301      	movs	r3, #1
 8011892:	4a0c      	ldr	r2, [pc, #48]	; (80118c4 <LoRaMacMcpsRequest+0x160>)
 8011894:	5cb1      	ldrb	r1, [r6, r2]
 8011896:	430b      	orrs	r3, r1
 8011898:	54b3      	strb	r3, [r6, r2]
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 801189a:	2000      	movs	r0, #0
 801189c:	f7fd fa18 	bl	800ecd0 <CallNvmCtxCallback>
 80118a0:	e766      	b.n	8011770 <LoRaMacMcpsRequest+0xc>
            MacCtx.NvmCtx->NodeAckRequested = false;
 80118a2:	238c      	movs	r3, #140	; 0x8c
 80118a4:	2100      	movs	r1, #0
 80118a6:	00db      	lsls	r3, r3, #3
 80118a8:	58f2      	ldr	r2, [r6, r3]
 80118aa:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <LoRaMacMcpsRequest+0x164>)
 80118ac:	54d1      	strb	r1, [r2, r3]
 80118ae:	e7f4      	b.n	801189a <LoRaMacMcpsRequest+0x136>
 80118b0:	200010c8 	.word	0x200010c8
 80118b4:	0000041c 	.word	0x0000041c
 80118b8:	0000041d 	.word	0x0000041d
 80118bc:	00000217 	.word	0x00000217
 80118c0:	00000216 	.word	0x00000216
 80118c4:	0000045d 	.word	0x0000045d
 80118c8:	00000219 	.word	0x00000219

080118cc <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80118cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 80118ce:	258c      	movs	r5, #140	; 0x8c
 80118d0:	4e07      	ldr	r6, [pc, #28]	; (80118f0 <LoRaMacTestSetDutyCycleOn+0x24>)
 80118d2:	00ed      	lsls	r5, r5, #3
    verify.DutyCycle = enable;
 80118d4:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 80118d6:	5973      	ldr	r3, [r6, r5]
    verify.DutyCycle = enable;
 80118d8:	7008      	strb	r0, [r1, #0]
{
 80118da:	0004      	movs	r4, r0
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 80118dc:	220e      	movs	r2, #14
 80118de:	7818      	ldrb	r0, [r3, #0]
 80118e0:	f001 fa8a 	bl	8012df8 <RegionVerify>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d002      	beq.n	80118ee <LoRaMacTestSetDutyCycleOn+0x22>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 80118e8:	5973      	ldr	r3, [r6, r5]
 80118ea:	33ff      	adds	r3, #255	; 0xff
 80118ec:	74dc      	strb	r4, [r3, #19]
    }
}
 80118ee:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80118f0:	200010c8 	.word	0x200010c8

080118f4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80118f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 80118f6:	2500      	movs	r5, #0
{
 80118f8:	b08b      	sub	sp, #44	; 0x2c
 80118fa:	9104      	str	r1, [sp, #16]
 80118fc:	9205      	str	r2, [sp, #20]
 80118fe:	9303      	str	r3, [sp, #12]
    if( adrNext->Version.Fields.Minor == 0 )
 8011900:	7886      	ldrb	r6, [r0, #2]
{
 8011902:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 8011904:	42ae      	cmp	r6, r5
 8011906:	d120      	bne.n	801194a <LoRaMacAdrCalcNext+0x56>
    int8_t txPower = adrNext->TxPower;
 8011908:	2311      	movs	r3, #17
    int8_t datarate = adrNext->Datarate;
 801190a:	2710      	movs	r7, #16
    int8_t txPower = adrNext->TxPower;
 801190c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 801190e:	57c7      	ldrsb	r7, [r0, r7]
    *adrAckCounter = adrNext->AdrAckCounter;
 8011910:	6882      	ldr	r2, [r0, #8]
    int8_t txPower = adrNext->TxPower;
 8011912:	9302      	str	r3, [sp, #8]
    *adrAckCounter = adrNext->AdrAckCounter;
 8011914:	9b03      	ldr	r3, [sp, #12]
 8011916:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 8011918:	7945      	ldrb	r5, [r0, #5]
 801191a:	2d00      	cmp	r5, #0
 801191c:	d00f      	beq.n	801193e <LoRaMacAdrCalcNext+0x4a>
        getPhy.Attribute = PHY_MIN_TX_DR;
 801191e:	2301      	movs	r3, #1
 8011920:	aa06      	add	r2, sp, #24
 8011922:	7013      	strb	r3, [r2, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011924:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011926:	0011      	movs	r1, r2
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011928:	7093      	strb	r3, [r2, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801192a:	7cc0      	ldrb	r0, [r0, #19]
 801192c:	f001 fa41 	bl	8012db2 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8011930:	b243      	sxtb	r3, r0
 8011932:	9301      	str	r3, [sp, #4]
        if( datarate == minTxDatarate )
 8011934:	429f      	cmp	r7, r3
 8011936:	d10b      	bne.n	8011950 <LoRaMacAdrCalcNext+0x5c>
            *adrAckCounter = 0;
 8011938:	9b03      	ldr	r3, [sp, #12]
 801193a:	601e      	str	r6, [r3, #0]
                        adrAckReq = false;
 801193c:	2500      	movs	r5, #0
    *txPowOut = txPower;
 801193e:	466a      	mov	r2, sp
    *drOut = datarate;
 8011940:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 8011942:	7a12      	ldrb	r2, [r2, #8]
    *drOut = datarate;
 8011944:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 8011946:	9b05      	ldr	r3, [sp, #20]
 8011948:	701a      	strb	r2, [r3, #0]
}
 801194a:	0028      	movs	r0, r5
 801194c:	b00b      	add	sp, #44	; 0x2c
 801194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	68a2      	ldr	r2, [r4, #8]
 8011954:	429a      	cmp	r2, r3
 8011956:	d32a      	bcc.n	80119ae <LoRaMacAdrCalcNext+0xba>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011958:	2307      	movs	r3, #7
 801195a:	aa06      	add	r2, sp, #24
 801195c:	7013      	strb	r3, [r2, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801195e:	7ce0      	ldrb	r0, [r4, #19]
 8011960:	0011      	movs	r1, r2
 8011962:	f001 fa26 	bl	8012db2 <RegionGetPhyParam>
                txPower = phyParam.Value;
 8011966:	b243      	sxtb	r3, r0
 8011968:	9302      	str	r3, [sp, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801196a:	89e1      	ldrh	r1, [r4, #14]
 801196c:	89a3      	ldrh	r3, [r4, #12]
 801196e:	68a0      	ldr	r0, [r4, #8]
 8011970:	185b      	adds	r3, r3, r1
 8011972:	4298      	cmp	r0, r3
 8011974:	d3e3      	bcc.n	801193e <LoRaMacAdrCalcNext+0x4a>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011976:	f7ef f9a5 	bl	8000cc4 <__aeabi_uidivmod>
 801197a:	000e      	movs	r6, r1
 801197c:	2901      	cmp	r1, #1
 801197e:	d1de      	bne.n	801193e <LoRaMacAdrCalcNext+0x4a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011980:	2321      	movs	r3, #33	; 0x21
 8011982:	aa06      	add	r2, sp, #24
                    getPhy.Datarate = datarate;
 8011984:	7057      	strb	r7, [r2, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011986:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011988:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801198a:	0011      	movs	r1, r2
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801198c:	7093      	strb	r3, [r2, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801198e:	7ce0      	ldrb	r0, [r4, #19]
 8011990:	f001 fa0f 	bl	8012db2 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 8011994:	9b01      	ldr	r3, [sp, #4]
                    datarate = phyParam.Value;
 8011996:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 8011998:	42bb      	cmp	r3, r7
 801199a:	d1d0      	bne.n	801193e <LoRaMacAdrCalcNext+0x4a>
                        if( adrNext->UpdateChanMask == true )
 801199c:	7925      	ldrb	r5, [r4, #4]
 801199e:	2d00      	cmp	r5, #0
 80119a0:	d0cd      	beq.n	801193e <LoRaMacAdrCalcNext+0x4a>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80119a2:	a908      	add	r1, sp, #32
 80119a4:	710e      	strb	r6, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 80119a6:	7ce0      	ldrb	r0, [r4, #19]
 80119a8:	f001 fa16 	bl	8012dd8 <RegionInitDefaults>
 80119ac:	e7c6      	b.n	801193c <LoRaMacAdrCalcNext+0x48>
                adrAckReq = false;
 80119ae:	0035      	movs	r5, r6
 80119b0:	e7db      	b.n	801196a <LoRaMacAdrCalcNext+0x76>

080119b2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80119b2:	4770      	bx	lr

080119b4 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119b4:	2001      	movs	r0, #1
 80119b6:	4770      	bx	lr

080119b8 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 80119b8:	2300      	movs	r3, #0
 80119ba:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119bc:	0018      	movs	r0, r3
 80119be:	4770      	bx	lr

080119c0 <LoRaMacClassBSetBeaconState>:
 80119c0:	4770      	bx	lr

080119c2 <LoRaMacClassBSetPingSlotState>:
 80119c2:	4770      	bx	lr

080119c4 <LoRaMacClassBSetMulticastSlotState>:
 80119c4:	4770      	bx	lr

080119c6 <LoRaMacClassBIsAcquisitionInProgress>:
 80119c6:	2000      	movs	r0, #0
 80119c8:	4770      	bx	lr

080119ca <LoRaMacClassBBeaconTimerEvent>:
 80119ca:	4770      	bx	lr

080119cc <LoRaMacClassBPingSlotTimerEvent>:
 80119cc:	4770      	bx	lr

080119ce <LoRaMacClassBMulticastSlotTimerEvent>:
 80119ce:	4770      	bx	lr

080119d0 <LoRaMacClassBRxBeacon>:

    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119d0:	2000      	movs	r0, #0
 80119d2:	4770      	bx	lr

080119d4 <LoRaMacClassBIsBeaconExpected>:
 80119d4:	2000      	movs	r0, #0
 80119d6:	4770      	bx	lr

080119d8 <LoRaMacClassBIsPingExpected>:
 80119d8:	2000      	movs	r0, #0
 80119da:	4770      	bx	lr

080119dc <LoRaMacClassBIsMulticastExpected>:
 80119dc:	2000      	movs	r0, #0
 80119de:	4770      	bx	lr

080119e0 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119e0:	2000      	movs	r0, #0
 80119e2:	4770      	bx	lr

080119e4 <LoRaMacClassBSetPingSlotInfo>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80119e4:	4770      	bx	lr

080119e6 <LoRaMacClassBHaltBeaconing>:
 80119e6:	4770      	bx	lr

080119e8 <LoRaMacClassBResumeBeaconing>:
 80119e8:	4770      	bx	lr

080119ea <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119ea:	2002      	movs	r0, #2
 80119ec:	4770      	bx	lr

080119ee <LoRaMacClassBMibGetRequestConfirm>:
 80119ee:	2002      	movs	r0, #2
 80119f0:	4770      	bx	lr

080119f2 <LoRaMacMibClassBSetRequestConfirm>:
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119f2:	2002      	movs	r0, #2
 80119f4:	4770      	bx	lr

080119f6 <LoRaMacClassBPingSlotInfoAns>:
 80119f6:	4770      	bx	lr

080119f8 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80119f8:	2000      	movs	r0, #0
 80119fa:	4770      	bx	lr

080119fc <LoRaMacClassBBeaconTimingAns>:
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80119fc:	4770      	bx	lr

080119fe <LoRaMacClassBDeviceTimeAns>:
 80119fe:	4770      	bx	lr

08011a00 <LoRaMacClassBBeaconFreqReq>:
    NvmContextChange( );
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8011a00:	2000      	movs	r0, #0
 8011a02:	4770      	bx	lr

08011a04 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8011a04:	2000      	movs	r0, #0
 8011a06:	4770      	bx	lr

08011a08 <LoRaMacClassBStopRxSlots>:
 8011a08:	4770      	bx	lr

08011a0a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8011a0a:	4770      	bx	lr

08011a0c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8011a0c:	4770      	bx	lr
	...

08011a10 <DeriveLifeTimeSessionKey>:
{
 8011a10:	b530      	push	{r4, r5, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a12:	2307      	movs	r3, #7
{
 8011a14:	b085      	sub	sp, #20
 8011a16:	0004      	movs	r4, r0
 8011a18:	1e0d      	subs	r5, r1, #0
    if( devEUI == 0 )
 8011a1a:	d01f      	beq.n	8011a5c <DeriveLifeTimeSessionKey+0x4c>
    uint8_t compBase[16] = { 0 };
 8011a1c:	2210      	movs	r2, #16
 8011a1e:	2100      	movs	r1, #0
 8011a20:	4668      	mov	r0, sp
 8011a22:	f7ee fbed 	bl	8000200 <memset>
    switch( keyID )
 8011a26:	2c02      	cmp	r4, #2
 8011a28:	d003      	beq.n	8011a32 <DeriveLifeTimeSessionKey+0x22>
 8011a2a:	2c03      	cmp	r4, #3
 8011a2c:	d019      	beq.n	8011a62 <DeriveLifeTimeSessionKey+0x52>
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011a2e:	2308      	movs	r3, #8
 8011a30:	e014      	b.n	8011a5c <DeriveLifeTimeSessionKey+0x4c>
            compBase[0] = 0x06;
 8011a32:	2306      	movs	r3, #6
            compBase[0] = 0x05;
 8011a34:	466a      	mov	r2, sp
 8011a36:	7013      	strb	r3, [r2, #0]
    memcpyr( compBase + 1, devEUI, 8 );
 8011a38:	466b      	mov	r3, sp
 8011a3a:	2208      	movs	r2, #8
 8011a3c:	1c58      	adds	r0, r3, #1
 8011a3e:	0029      	movs	r1, r5
 8011a40:	f002 fb70 	bl	8014124 <memcpyr>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011a44:	4808      	ldr	r0, [pc, #32]	; (8011a68 <DeriveLifeTimeSessionKey+0x58>)
 8011a46:	0023      	movs	r3, r4
 8011a48:	2201      	movs	r2, #1
 8011a4a:	4669      	mov	r1, sp
 8011a4c:	6800      	ldr	r0, [r0, #0]
 8011a4e:	f003 fb11 	bl	8015074 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 8011a52:	1e42      	subs	r2, r0, #1
 8011a54:	4190      	sbcs	r0, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011a56:	230c      	movs	r3, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011a58:	4240      	negs	r0, r0
 8011a5a:	4003      	ands	r3, r0
}
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	b005      	add	sp, #20
 8011a60:	bd30      	pop	{r4, r5, pc}
            compBase[0] = 0x05;
 8011a62:	2305      	movs	r3, #5
 8011a64:	e7e6      	b.n	8011a34 <DeriveLifeTimeSessionKey+0x24>
 8011a66:	46c0      	nop			; (mov r8, r8)
 8011a68:	20001758 	.word	0x20001758

08011a6c <PayloadEncrypt>:
{
 8011a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6e:	b08d      	sub	sp, #52	; 0x34
 8011a70:	9001      	str	r0, [sp, #4]
 8011a72:	001e      	movs	r6, r3
 8011a74:	ab12      	add	r3, sp, #72	; 0x48
 8011a76:	781f      	ldrb	r7, [r3, #0]
    if( buffer == 0 )
 8011a78:	9b01      	ldr	r3, [sp, #4]
{
 8011a7a:	9102      	str	r1, [sp, #8]
 8011a7c:	9203      	str	r2, [sp, #12]
 8011a7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a80:	2007      	movs	r0, #7
    if( buffer == 0 )
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d033      	beq.n	8011aee <PayloadEncrypt+0x82>
    uint8_t aBlock[16] = { 0 };
 8011a86:	ac08      	add	r4, sp, #32
    uint8_t sBlock[16] = { 0 };
 8011a88:	2210      	movs	r2, #16
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	a804      	add	r0, sp, #16
 8011a8e:	f7ee fbb7 	bl	8000200 <memset>
    uint8_t aBlock[16] = { 0 };
 8011a92:	2210      	movs	r2, #16
 8011a94:	0020      	movs	r0, r4
 8011a96:	2100      	movs	r1, #0
 8011a98:	f7ee fbb2 	bl	8000200 <memset>
    aBlock[0] = 0x01;
 8011a9c:	2301      	movs	r3, #1
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011a9e:	0a32      	lsrs	r2, r6, #8
 8011aa0:	71e2      	strb	r2, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8011aa2:	0c32      	lsrs	r2, r6, #16
 8011aa4:	7222      	strb	r2, [r4, #8]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011aa6:	0a2a      	lsrs	r2, r5, #8
    aBlock[6] = address & 0xFF;
 8011aa8:	71a6      	strb	r6, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 8011aaa:	72a5      	strb	r5, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011aac:	72e2      	strb	r2, [r4, #11]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011aae:	0e36      	lsrs	r6, r6, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011ab0:	0c2a      	lsrs	r2, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011ab2:	0e2d      	lsrs	r5, r5, #24
 8011ab4:	7365      	strb	r5, [r4, #13]
    aBlock[0] = 0x01;
 8011ab6:	7023      	strb	r3, [r4, #0]
    aBlock[5] = dir;
 8011ab8:	7167      	strb	r7, [r4, #5]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011aba:	7266      	strb	r6, [r4, #9]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011abc:	7322      	strb	r2, [r4, #12]
    uint16_t ctr = 1;
 8011abe:	001c      	movs	r4, r3
    while( size >= 16 )
 8011ac0:	9d02      	ldr	r5, [sp, #8]
 8011ac2:	9b02      	ldr	r3, [sp, #8]
 8011ac4:	1b5f      	subs	r7, r3, r5
 8011ac6:	b2ff      	uxtb	r7, r7
 8011ac8:	2d0f      	cmp	r5, #15
 8011aca:	d803      	bhi.n	8011ad4 <PayloadEncrypt+0x68>
    if( size > 0 )
 8011acc:	2d00      	cmp	r5, #0
 8011ace:	d11c      	bne.n	8011b0a <PayloadEncrypt+0x9e>
    return LORAMAC_CRYPTO_SUCCESS;
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	e00c      	b.n	8011aee <PayloadEncrypt+0x82>
        aBlock[15] = ctr & 0xFF;
 8011ad4:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011ad6:	ae04      	add	r6, sp, #16
        aBlock[15] = ctr & 0xFF;
 8011ad8:	73c4      	strb	r4, [r0, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011ada:	0033      	movs	r3, r6
        ctr++;
 8011adc:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011ade:	9a03      	ldr	r2, [sp, #12]
 8011ae0:	2110      	movs	r1, #16
        ctr++;
 8011ae2:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011ae4:	f003 fa54 	bl	8014f90 <SecureElementAesEncrypt>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d002      	beq.n	8011af2 <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011aec:	200c      	movs	r0, #12
}
 8011aee:	b00d      	add	sp, #52	; 0x34
 8011af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011af2:	9b01      	ldr	r3, [sp, #4]
 8011af4:	19df      	adds	r7, r3, r7
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011af6:	5c3b      	ldrb	r3, [r7, r0]
 8011af8:	5d82      	ldrb	r2, [r0, r6]
 8011afa:	4053      	eors	r3, r2
 8011afc:	543b      	strb	r3, [r7, r0]
 8011afe:	3001      	adds	r0, #1
        for( uint8_t i = 0; i < 16; i++ )
 8011b00:	2810      	cmp	r0, #16
 8011b02:	d1f8      	bne.n	8011af6 <PayloadEncrypt+0x8a>
        size -= 16;
 8011b04:	3d10      	subs	r5, #16
 8011b06:	b2ad      	uxth	r5, r5
 8011b08:	e7db      	b.n	8011ac2 <PayloadEncrypt+0x56>
        aBlock[15] = ctr & 0xFF;
 8011b0a:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011b0c:	ab04      	add	r3, sp, #16
 8011b0e:	9a03      	ldr	r2, [sp, #12]
 8011b10:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 8011b12:	73c4      	strb	r4, [r0, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011b14:	f003 fa3c 	bl	8014f90 <SecureElementAesEncrypt>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d1e7      	bne.n	8011aec <PayloadEncrypt+0x80>
        for( uint8_t i = 0; i < size; i++ )
 8011b1c:	4285      	cmp	r5, r0
 8011b1e:	d9d7      	bls.n	8011ad0 <PayloadEncrypt+0x64>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011b20:	9a01      	ldr	r2, [sp, #4]
 8011b22:	183b      	adds	r3, r7, r0
 8011b24:	18d3      	adds	r3, r2, r3
 8011b26:	a904      	add	r1, sp, #16
 8011b28:	781a      	ldrb	r2, [r3, #0]
 8011b2a:	5c09      	ldrb	r1, [r1, r0]
        for( uint8_t i = 0; i < size; i++ )
 8011b2c:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011b2e:	404a      	eors	r2, r1
 8011b30:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8011b32:	b2c0      	uxtb	r0, r0
 8011b34:	e7f2      	b.n	8011b1c <PayloadEncrypt+0xb0>

08011b36 <FOptsEncrypt>:
{
 8011b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b38:	b08b      	sub	sp, #44	; 0x2c
 8011b3a:	9201      	str	r2, [sp, #4]
    if( buffer == 0 )
 8011b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
{
 8011b3e:	001e      	movs	r6, r3
 8011b40:	0007      	movs	r7, r0
 8011b42:	000d      	movs	r5, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011b44:	2307      	movs	r3, #7
    if( buffer == 0 )
 8011b46:	2a00      	cmp	r2, #0
 8011b48:	d032      	beq.n	8011bb0 <FOptsEncrypt+0x7a>
    uint8_t sBlock[16] = { 0 };
 8011b4a:	2210      	movs	r2, #16
 8011b4c:	2100      	movs	r1, #0
    uint8_t aBlock[16] = { 0 };
 8011b4e:	ac06      	add	r4, sp, #24
    uint8_t sBlock[16] = { 0 };
 8011b50:	a802      	add	r0, sp, #8
 8011b52:	f7ee fb55 	bl	8000200 <memset>
    uint8_t aBlock[16] = { 0 };
 8011b56:	2210      	movs	r2, #16
 8011b58:	2100      	movs	r1, #0
 8011b5a:	0020      	movs	r0, r4
 8011b5c:	f7ee fb50 	bl	8000200 <memset>
    aBlock[0] = 0x01;
 8011b60:	2301      	movs	r3, #1
 8011b62:	7023      	strb	r3, [r4, #0]
    switch( fCntID )
 8011b64:	429e      	cmp	r6, r3
 8011b66:	d026      	beq.n	8011bb6 <FOptsEncrypt+0x80>
 8011b68:	2e00      	cmp	r6, #0
 8011b6a:	d003      	beq.n	8011b74 <FOptsEncrypt+0x3e>
 8011b6c:	2e02      	cmp	r6, #2
 8011b6e:	d022      	beq.n	8011bb6 <FOptsEncrypt+0x80>
            return LORAMAC_CRYPTO_FAIL_PARAM;
 8011b70:	2306      	movs	r3, #6
 8011b72:	e01d      	b.n	8011bb0 <FOptsEncrypt+0x7a>
            aBlock[4] = 0x01;
 8011b74:	7123      	strb	r3, [r4, #4]
    aBlock[5] = dir;
 8011b76:	466b      	mov	r3, sp
    aBlock[10] = frameCounter & 0xFF;
 8011b78:	2238      	movs	r2, #56	; 0x38
    aBlock[5] = dir;
 8011b7a:	791b      	ldrb	r3, [r3, #4]
    aBlock[6] = address & 0xFF;
 8011b7c:	71a5      	strb	r5, [r4, #6]
    aBlock[5] = dir;
 8011b7e:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011b80:	0a2b      	lsrs	r3, r5, #8
 8011b82:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8011b84:	0c2b      	lsrs	r3, r5, #16
 8011b86:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 8011b88:	ab02      	add	r3, sp, #8
 8011b8a:	189b      	adds	r3, r3, r2
 8011b8c:	781b      	ldrb	r3, [r3, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011b8e:	0e2d      	lsrs	r5, r5, #24
    aBlock[10] = frameCounter & 0xFF;
 8011b90:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011b94:	7265      	strb	r5, [r4, #9]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011b96:	0a1b      	lsrs	r3, r3, #8
 8011b98:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b9c:	0c1b      	lsrs	r3, r3, #16
 8011b9e:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ba2:	0e1b      	lsrs	r3, r3, #24
 8011ba4:	7363      	strb	r3, [r4, #13]
    aBlock[15] = 0x01;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	73e3      	strb	r3, [r4, #15]
    if( size > 0 )
 8011baa:	2f00      	cmp	r7, #0
 8011bac:	d105      	bne.n	8011bba <FOptsEncrypt+0x84>
    return LORAMAC_CRYPTO_SUCCESS;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	b00b      	add	sp, #44	; 0x2c
 8011bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aBlock[4] = 0x02;
 8011bb6:	7126      	strb	r6, [r4, #4]
            break;
 8011bb8:	e7dd      	b.n	8011b76 <FOptsEncrypt+0x40>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011bba:	ab02      	add	r3, sp, #8
 8011bbc:	2206      	movs	r2, #6
 8011bbe:	2110      	movs	r1, #16
 8011bc0:	0020      	movs	r0, r4
 8011bc2:	f003 f9e5 	bl	8014f90 <SecureElementAesEncrypt>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011bc6:	230c      	movs	r3, #12
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d1f1      	bne.n	8011bb0 <FOptsEncrypt+0x7a>
        for( uint8_t i = 0; i < size; i++ )
 8011bcc:	4287      	cmp	r7, r0
 8011bce:	d9ee      	bls.n	8011bae <FOptsEncrypt+0x78>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bd2:	a902      	add	r1, sp, #8
 8011bd4:	181a      	adds	r2, r3, r0
 8011bd6:	7813      	ldrb	r3, [r2, #0]
 8011bd8:	5c09      	ldrb	r1, [r1, r0]
        for( uint8_t i = 0; i < size; i++ )
 8011bda:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011bdc:	404b      	eors	r3, r1
 8011bde:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 0; i < size; i++ )
 8011be0:	b2c0      	uxtb	r0, r0
 8011be2:	e7f3      	b.n	8011bcc <FOptsEncrypt+0x96>

08011be4 <DeriveSessionKey11x>:
{
 8011be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011be6:	b087      	sub	sp, #28
 8011be8:	001d      	movs	r5, r3
 8011bea:	9001      	str	r0, [sp, #4]
 8011bec:	000f      	movs	r7, r1
 8011bee:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011bf0:	2307      	movs	r3, #7
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 8011bf2:	2900      	cmp	r1, #0
 8011bf4:	d030      	beq.n	8011c58 <DeriveSessionKey11x+0x74>
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	d02e      	beq.n	8011c58 <DeriveSessionKey11x+0x74>
 8011bfa:	2d00      	cmp	r5, #0
 8011bfc:	d02c      	beq.n	8011c58 <DeriveSessionKey11x+0x74>
    uint8_t compBase[16] = { 0 };
 8011bfe:	2210      	movs	r2, #16
 8011c00:	2100      	movs	r1, #0
 8011c02:	a802      	add	r0, sp, #8
 8011c04:	f7ee fafc 	bl	8000200 <memset>
    switch( keyID )
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	1f18      	subs	r0, r3, #4
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011c0c:	2308      	movs	r3, #8
    switch( keyID )
 8011c0e:	2803      	cmp	r0, #3
 8011c10:	d822      	bhi.n	8011c58 <DeriveSessionKey11x+0x74>
 8011c12:	f7ee ffb3 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8011c16:	2402      	.short	0x2402
 8011c18:	2b29      	.short	0x2b29
            compBase[0] = 0x01;
 8011c1a:	2401      	movs	r4, #1
 8011c1c:	ab02      	add	r3, sp, #8
 8011c1e:	701c      	strb	r4, [r3, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 8011c20:	ab02      	add	r3, sp, #8
 8011c22:	1c58      	adds	r0, r3, #1
 8011c24:	2203      	movs	r2, #3
 8011c26:	0039      	movs	r1, r7
 8011c28:	f002 fa73 	bl	8014112 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 8011c2c:	2208      	movs	r2, #8
 8011c2e:	0031      	movs	r1, r6
 8011c30:	a803      	add	r0, sp, #12
 8011c32:	f002 fa77 	bl	8014124 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 8011c36:	2202      	movs	r2, #2
 8011c38:	0029      	movs	r1, r5
 8011c3a:	a805      	add	r0, sp, #20
 8011c3c:	f002 fa69 	bl	8014112 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011c40:	480d      	ldr	r0, [pc, #52]	; (8011c78 <DeriveSessionKey11x+0x94>)
 8011c42:	9b01      	ldr	r3, [sp, #4]
 8011c44:	0022      	movs	r2, r4
 8011c46:	a902      	add	r1, sp, #8
 8011c48:	6800      	ldr	r0, [r0, #0]
 8011c4a:	f003 fa13 	bl	8015074 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 8011c4e:	1e42      	subs	r2, r0, #1
 8011c50:	4190      	sbcs	r0, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011c52:	230c      	movs	r3, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011c54:	4240      	negs	r0, r0
 8011c56:	4003      	ands	r3, r0
}
 8011c58:	0018      	movs	r0, r3
 8011c5a:	b007      	add	sp, #28
 8011c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            compBase[0] = 0x03;
 8011c5e:	2303      	movs	r3, #3
            compBase[0] = 0x04;
 8011c60:	aa02      	add	r2, sp, #8
 8011c62:	7013      	strb	r3, [r2, #0]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8011c64:	2401      	movs	r4, #1
 8011c66:	e7db      	b.n	8011c20 <DeriveSessionKey11x+0x3c>
            compBase[0] = 0x04;
 8011c68:	2304      	movs	r3, #4
 8011c6a:	e7f9      	b.n	8011c60 <DeriveSessionKey11x+0x7c>
            compBase[0] = 0x02;
 8011c6c:	2302      	movs	r3, #2
 8011c6e:	aa02      	add	r2, sp, #8
 8011c70:	7013      	strb	r3, [r2, #0]
            rootKeyId = APP_KEY;
 8011c72:	2400      	movs	r4, #0
 8011c74:	e7d4      	b.n	8011c20 <DeriveSessionKey11x+0x3c>
 8011c76:	46c0      	nop			; (mov r8, r8)
 8011c78:	20001758 	.word	0x20001758

08011c7c <DeriveSessionKey10x>:
{
 8011c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c7e:	001d      	movs	r5, r3
 8011c80:	b085      	sub	sp, #20
 8011c82:	0004      	movs	r4, r0
 8011c84:	000f      	movs	r7, r1
 8011c86:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c88:	2307      	movs	r3, #7
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8011c8a:	2900      	cmp	r1, #0
 8011c8c:	d031      	beq.n	8011cf2 <DeriveSessionKey10x+0x76>
 8011c8e:	2a00      	cmp	r2, #0
 8011c90:	d02f      	beq.n	8011cf2 <DeriveSessionKey10x+0x76>
 8011c92:	2d00      	cmp	r5, #0
 8011c94:	d02d      	beq.n	8011cf2 <DeriveSessionKey10x+0x76>
    uint8_t compBase[16] = { 0 };
 8011c96:	2210      	movs	r2, #16
 8011c98:	2100      	movs	r1, #0
 8011c9a:	4668      	mov	r0, sp
 8011c9c:	f7ee fab0 	bl	8000200 <memset>
    switch( keyID )
 8011ca0:	2c04      	cmp	r4, #4
 8011ca2:	d304      	bcc.n	8011cae <DeriveSessionKey10x+0x32>
 8011ca4:	2c06      	cmp	r4, #6
 8011ca6:	d904      	bls.n	8011cb2 <DeriveSessionKey10x+0x36>
            compBase[0] = 0x02;
 8011ca8:	2302      	movs	r3, #2
    switch( keyID )
 8011caa:	2c07      	cmp	r4, #7
 8011cac:	d002      	beq.n	8011cb4 <DeriveSessionKey10x+0x38>
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011cae:	2308      	movs	r3, #8
 8011cb0:	e01f      	b.n	8011cf2 <DeriveSessionKey10x+0x76>
            compBase[0] = 0x01;
 8011cb2:	2301      	movs	r3, #1
            compBase[0] = 0x02;
 8011cb4:	466a      	mov	r2, sp
 8011cb6:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 8011cb8:	466b      	mov	r3, sp
 8011cba:	2203      	movs	r2, #3
 8011cbc:	1c58      	adds	r0, r3, #1
 8011cbe:	0039      	movs	r1, r7
 8011cc0:	f002 fa27 	bl	8014112 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8011cc4:	2203      	movs	r2, #3
 8011cc6:	0031      	movs	r1, r6
 8011cc8:	a801      	add	r0, sp, #4
 8011cca:	f002 fa22 	bl	8014112 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8011cce:	466b      	mov	r3, sp
 8011cd0:	2202      	movs	r2, #2
 8011cd2:	1dd8      	adds	r0, r3, #7
 8011cd4:	0029      	movs	r1, r5
 8011cd6:	f002 fa1c 	bl	8014112 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011cda:	4807      	ldr	r0, [pc, #28]	; (8011cf8 <DeriveSessionKey10x+0x7c>)
 8011cdc:	0023      	movs	r3, r4
 8011cde:	2201      	movs	r2, #1
 8011ce0:	4669      	mov	r1, sp
 8011ce2:	6800      	ldr	r0, [r0, #0]
 8011ce4:	f003 f9c6 	bl	8015074 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 8011ce8:	1e42      	subs	r2, r0, #1
 8011cea:	4190      	sbcs	r0, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011cec:	230c      	movs	r3, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011cee:	4240      	negs	r0, r0
 8011cf0:	4003      	ands	r3, r0
}
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	b005      	add	sp, #20
 8011cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cf8:	20001758 	.word	0x20001758

08011cfc <ComputeCmacB1.constprop.5>:
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
 8011cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfe:	b0c9      	sub	sp, #292	; 0x124
 8011d00:	9302      	str	r3, [sp, #8]
 8011d02:	ab4e      	add	r3, sp, #312	; 0x138
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	9001      	str	r0, [sp, #4]
 8011d08:	9303      	str	r3, [sp, #12]
 8011d0a:	000c      	movs	r4, r1
 8011d0c:	0017      	movs	r7, r2
 8011d0e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8011d10:	9d50      	ldr	r5, [sp, #320]	; 0x140
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d12:	2307      	movs	r3, #7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011d14:	2800      	cmp	r0, #0
 8011d16:	d045      	beq.n	8011da4 <ComputeCmacB1.constprop.5+0xa8>
 8011d18:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011d1a:	2a00      	cmp	r2, #0
 8011d1c:	d042      	beq.n	8011da4 <ComputeCmacB1.constprop.5+0xa8>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011d1e:	2280      	movs	r2, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011d20:	3304      	adds	r3, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011d22:	0052      	lsls	r2, r2, #1
 8011d24:	4291      	cmp	r1, r2
 8011d26:	d83d      	bhi.n	8011da4 <ComputeCmacB1.constprop.5+0xa8>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011d28:	3210      	adds	r2, #16
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	a804      	add	r0, sp, #16
 8011d2e:	f002 fa05 	bl	801413c <memset1>
    b1[0] = 0x49;
 8011d32:	2349      	movs	r3, #73	; 0x49
 8011d34:	aa04      	add	r2, sp, #16
 8011d36:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
 8011d38:	2f00      	cmp	r7, #0
 8011d3a:	d036      	beq.n	8011daa <ComputeCmacB1.constprop.5+0xae>
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 8011d3c:	4b1d      	ldr	r3, [pc, #116]	; (8011db4 <ComputeCmacB1.constprop.5+0xb8>)
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d42:	681b      	ldr	r3, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 8011d44:	7053      	strb	r3, [r2, #1]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8011d46:	0a1b      	lsrs	r3, r3, #8
 8011d48:	7093      	strb	r3, [r2, #2]
    b1[3] = txDr;
 8011d4a:	466a      	mov	r2, sp
 8011d4c:	7a12      	ldrb	r2, [r2, #8]
 8011d4e:	ab04      	add	r3, sp, #16
 8011d50:	70da      	strb	r2, [r3, #3]
    b1[4] = txCh;
 8011d52:	466a      	mov	r2, sp
 8011d54:	7b12      	ldrb	r2, [r2, #12]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8011d56:	a904      	add	r1, sp, #16
    b1[4] = txCh;
 8011d58:	711a      	strb	r2, [r3, #4]
    b1[5] = UPLINK;  // dir = Uplink
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	aa04      	add	r2, sp, #16
 8011d5e:	7153      	strb	r3, [r2, #5]
    b1[6] = devAddr & 0xFF;
 8011d60:	7196      	strb	r6, [r2, #6]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8011d62:	0a32      	lsrs	r2, r6, #8
 8011d64:	71ca      	strb	r2, [r1, #7]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 8011d66:	0c32      	lsrs	r2, r6, #16
 8011d68:	720a      	strb	r2, [r1, #8]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 8011d6a:	0a2a      	lsrs	r2, r5, #8
    b1[10] = fCntUp & 0xFF;
 8011d6c:	728d      	strb	r5, [r1, #10]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 8011d6e:	72ca      	strb	r2, [r1, #11]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8011d70:	0e36      	lsrs	r6, r6, #24
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8011d72:	0c2a      	lsrs	r2, r5, #16
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8011d74:	0e2d      	lsrs	r5, r5, #24
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8011d76:	730a      	strb	r2, [r1, #12]
    b1[14] = 0x00;
 8011d78:	738b      	strb	r3, [r1, #14]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8011d7a:	724e      	strb	r6, [r1, #9]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8011d7c:	734d      	strb	r5, [r1, #13]
    b1[15] = msgLen & 0xFF;
 8011d7e:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011d80:	0022      	movs	r2, r4
 8011d82:	9901      	ldr	r1, [sp, #4]
 8011d84:	a808      	add	r0, sp, #32
 8011d86:	f002 f9c4 	bl	8014112 <memcpy1>
    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011d8a:	0021      	movs	r1, r4
 8011d8c:	3110      	adds	r1, #16
 8011d8e:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8011d90:	2205      	movs	r2, #5
 8011d92:	b289      	uxth	r1, r1
 8011d94:	a804      	add	r0, sp, #16
 8011d96:	f003 f8dd 	bl	8014f54 <SecureElementComputeAesCmac>
    return LORAMAC_CRYPTO_SUCCESS;
 8011d9a:	1e42      	subs	r2, r0, #1
 8011d9c:	4190      	sbcs	r0, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011d9e:	230c      	movs	r3, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011da0:	4240      	negs	r0, r0
 8011da2:	4003      	ands	r3, r0
}
 8011da4:	0018      	movs	r0, r3
 8011da6:	b049      	add	sp, #292	; 0x124
 8011da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b1[1] = 0x00;
 8011daa:	ab04      	add	r3, sp, #16
 8011dac:	705f      	strb	r7, [r3, #1]
        b1[2] = 0x00;
 8011dae:	709f      	strb	r7, [r3, #2]
 8011db0:	e7cb      	b.n	8011d4a <ComputeCmacB1.constprop.5+0x4e>
 8011db2:	46c0      	nop			; (mov r8, r8)
 8011db4:	20001758 	.word	0x20001758

08011db8 <VerifyCmacB0.constprop.6>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8011db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dba:	b0c7      	sub	sp, #284	; 0x11c
 8011dbc:	9001      	str	r0, [sp, #4]
 8011dbe:	001f      	movs	r7, r3
    if( msg == 0 )
 8011dc0:	9b01      	ldr	r3, [sp, #4]
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 8011dc2:	000d      	movs	r5, r1
 8011dc4:	0014      	movs	r4, r2
 8011dc6:	9e4c      	ldr	r6, [sp, #304]	; 0x130
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011dc8:	2007      	movs	r0, #7
    if( msg == 0 )
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d041      	beq.n	8011e52 <VerifyCmacB0.constprop.6+0x9a>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011dce:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011dd0:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	4299      	cmp	r1, r3
 8011dd6:	d83c      	bhi.n	8011e52 <VerifyCmacB0.constprop.6+0x9a>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011dd8:	2288      	movs	r2, #136	; 0x88
 8011dda:	2100      	movs	r1, #0
 8011ddc:	0052      	lsls	r2, r2, #1
 8011dde:	a802      	add	r0, sp, #8
 8011de0:	f002 f9ac 	bl	801413c <memset1>
    b0[0] = 0x49;
 8011de4:	2349      	movs	r3, #73	; 0x49
 8011de6:	aa02      	add	r2, sp, #8
 8011de8:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
 8011dea:	2c00      	cmp	r4, #0
 8011dec:	d033      	beq.n	8011e56 <VerifyCmacB0.constprop.6+0x9e>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 8011dee:	4b1c      	ldr	r3, [pc, #112]	; (8011e60 <VerifyCmacB0.constprop.6+0xa8>)
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	689b      	ldr	r3, [r3, #8]
        b0[1] = confFCnt & 0xFF;
 8011df4:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8011df6:	0a1b      	lsrs	r3, r3, #8
 8011df8:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 8011dfa:	2400      	movs	r4, #0
 8011dfc:	ab02      	add	r3, sp, #8
 8011dfe:	70dc      	strb	r4, [r3, #3]
    b0[4] = 0x00;
 8011e00:	711c      	strb	r4, [r3, #4]
    b0[5] = dir;
 8011e02:	2301      	movs	r3, #1
 8011e04:	aa02      	add	r2, sp, #8
 8011e06:	7153      	strb	r3, [r2, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011e08:	0a3b      	lsrs	r3, r7, #8
 8011e0a:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011e0c:	0c3b      	lsrs	r3, r7, #16
 8011e0e:	7213      	strb	r3, [r2, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011e10:	0a33      	lsrs	r3, r6, #8
    b0[6] = devAddr & 0xFF;
 8011e12:	7197      	strb	r7, [r2, #6]
    b0[10] = fCnt & 0xFF;
 8011e14:	7296      	strb	r6, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011e16:	72d3      	strb	r3, [r2, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011e18:	0e3f      	lsrs	r7, r7, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011e1a:	0c33      	lsrs	r3, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011e1c:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011e1e:	7313      	strb	r3, [r2, #12]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011e20:	7257      	strb	r7, [r2, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011e22:	7356      	strb	r6, [r2, #13]
    b0[14] = 0x00;
 8011e24:	7394      	strb	r4, [r2, #14]
    b0[15] = msgLen & 0xFF;
 8011e26:	73d5      	strb	r5, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011e28:	9901      	ldr	r1, [sp, #4]
 8011e2a:	002a      	movs	r2, r5
 8011e2c:	a806      	add	r0, sp, #24
 8011e2e:	f002 f970 	bl	8014112 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011e32:	0029      	movs	r1, r5
 8011e34:	3110      	adds	r1, #16
 8011e36:	2305      	movs	r3, #5
 8011e38:	b289      	uxth	r1, r1
 8011e3a:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8011e3c:	a802      	add	r0, sp, #8
 8011e3e:	f003 f892 	bl	8014f66 <SecureElementVerifyAesCmac>
 8011e42:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_SUCCESS;
 8011e44:	0020      	movs	r0, r4
    if( retval == SECURE_ELEMENT_SUCCESS )
 8011e46:	42a3      	cmp	r3, r4
 8011e48:	d003      	beq.n	8011e52 <VerifyCmacB0.constprop.6+0x9a>
        return LORAMAC_CRYPTO_FAIL_MIC;
 8011e4a:	0018      	movs	r0, r3
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d000      	beq.n	8011e52 <VerifyCmacB0.constprop.6+0x9a>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e50:	200c      	movs	r0, #12
}
 8011e52:	b047      	add	sp, #284	; 0x11c
 8011e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 8011e56:	ab02      	add	r3, sp, #8
 8011e58:	705c      	strb	r4, [r3, #1]
        b0[2] = 0x00;
 8011e5a:	709c      	strb	r4, [r3, #2]
 8011e5c:	e7cd      	b.n	8011dfa <VerifyCmacB0.constprop.6+0x42>
 8011e5e:	46c0      	nop			; (mov r8, r8)
 8011e60:	20001758 	.word	0x20001758

08011e64 <ComputeCmacB0.part.4.constprop.8>:
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
 8011e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e66:	b0c7      	sub	sp, #284	; 0x11c
 8011e68:	9201      	str	r2, [sp, #4]
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e6a:	2288      	movs	r2, #136	; 0x88
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
 8011e6c:	9000      	str	r0, [sp, #0]
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e6e:	0052      	lsls	r2, r2, #1
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
 8011e70:	000c      	movs	r4, r1
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e72:	a802      	add	r0, sp, #8
 8011e74:	2100      	movs	r1, #0
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
 8011e76:	001f      	movs	r7, r3
 8011e78:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 8011e7a:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e7c:	f002 f95e 	bl	801413c <memset1>
    b0[0] = 0x49;
 8011e80:	2349      	movs	r3, #73	; 0x49
 8011e82:	aa02      	add	r2, sp, #8
 8011e84:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
 8011e86:	2f00      	cmp	r7, #0
 8011e88:	d030      	beq.n	8011eec <ComputeCmacB0.part.4.constprop.8+0x88>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 8011e8a:	4b1a      	ldr	r3, [pc, #104]	; (8011ef4 <ComputeCmacB0.part.4.constprop.8+0x90>)
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	695b      	ldr	r3, [r3, #20]
        b0[1] = confFCnt & 0xFF;
 8011e90:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8011e92:	0a1b      	lsrs	r3, r3, #8
 8011e94:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 8011e96:	2300      	movs	r3, #0
 8011e98:	aa02      	add	r2, sp, #8
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011e9a:	a902      	add	r1, sp, #8
    b0[3] = 0x00;
 8011e9c:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 8011e9e:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 8011ea0:	7153      	strb	r3, [r2, #5]
    b0[6] = devAddr & 0xFF;
 8011ea2:	7196      	strb	r6, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011ea4:	0a32      	lsrs	r2, r6, #8
 8011ea6:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011ea8:	0c32      	lsrs	r2, r6, #16
 8011eaa:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011eac:	0a2a      	lsrs	r2, r5, #8
    b0[10] = fCnt & 0xFF;
 8011eae:	728d      	strb	r5, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011eb0:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011eb2:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011eb4:	0c2a      	lsrs	r2, r5, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011eb6:	0e2d      	lsrs	r5, r5, #24
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011eb8:	724e      	strb	r6, [r1, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011eba:	730a      	strb	r2, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011ebc:	734d      	strb	r5, [r1, #13]
    b0[14] = 0x00;
 8011ebe:	738b      	strb	r3, [r1, #14]
    b0[15] = msgLen & 0xFF;
 8011ec0:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011ec2:	0022      	movs	r2, r4
 8011ec4:	9900      	ldr	r1, [sp, #0]
 8011ec6:	a806      	add	r0, sp, #24
 8011ec8:	f002 f923 	bl	8014112 <memcpy1>
    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011ecc:	0021      	movs	r1, r4
 8011ece:	3110      	adds	r1, #16
 8011ed0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8011ed2:	9a01      	ldr	r2, [sp, #4]
 8011ed4:	b289      	uxth	r1, r1
 8011ed6:	a802      	add	r0, sp, #8
 8011ed8:	f003 f83c 	bl	8014f54 <SecureElementComputeAesCmac>
 8011edc:	0003      	movs	r3, r0
    return LORAMAC_CRYPTO_SUCCESS;
 8011ede:	1e5a      	subs	r2, r3, #1
 8011ee0:	4193      	sbcs	r3, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011ee2:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011ee4:	425b      	negs	r3, r3
 8011ee6:	4018      	ands	r0, r3
}
 8011ee8:	b047      	add	sp, #284	; 0x11c
 8011eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 8011eec:	ab02      	add	r3, sp, #8
 8011eee:	705f      	strb	r7, [r3, #1]
        b0[2] = 0x00;
 8011ef0:	709f      	strb	r7, [r3, #2]
 8011ef2:	e7d0      	b.n	8011e96 <ComputeCmacB0.part.4.constprop.8+0x32>
 8011ef4:	20001758 	.word	0x20001758

08011ef8 <ResetFCnts>:
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011ef8:	2200      	movs	r2, #0
 8011efa:	4907      	ldr	r1, [pc, #28]	; (8011f18 <ResetFCnts+0x20>)
{
 8011efc:	b510      	push	{r4, lr}
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011efe:	688b      	ldr	r3, [r1, #8]
 8011f00:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f02:	3a01      	subs	r2, #1
 8011f04:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f06:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f08:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8011f0a:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8011f0c:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8011f0e:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8011f10:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011f12:	68cb      	ldr	r3, [r1, #12]
 8011f14:	4798      	blx	r3
}
 8011f16:	bd10      	pop	{r4, pc}
 8011f18:	20001758 	.word	0x20001758

08011f1c <LoRaMacCryptoInit>:
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 8011f1c:	2301      	movs	r3, #1
{
 8011f1e:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 8011f20:	4c11      	ldr	r4, [pc, #68]	; (8011f68 <LoRaMacCryptoInit+0x4c>)
 8011f22:	70e3      	strb	r3, [r4, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011f24:	70a3      	strb	r3, [r4, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	7063      	strb	r3, [r4, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
 8011f2a:	7023      	strb	r3, [r4, #0]
    CryptoCtx.RJcount0 = 0;
 8011f2c:	80a3      	strh	r3, [r4, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8011f2e:	4b0f      	ldr	r3, [pc, #60]	; (8011f6c <LoRaMacCryptoInit+0x50>)
 8011f30:	60a3      	str	r3, [r4, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d015      	beq.n	8011f62 <LoRaMacCryptoInit+0x46>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8011f36:	60e0      	str	r0, [r4, #12]
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8011f38:	0018      	movs	r0, r3
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	2230      	movs	r2, #48	; 0x30
 8011f3e:	f002 f8fd 	bl	801413c <memset1>

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
    CryptoCtx.NvmCtx->FCntUp = 0;
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f42:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011f44:	68a3      	ldr	r3, [r4, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f46:	4252      	negs	r2, r2
 8011f48:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f4a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f4c:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011f4e:	001a      	movs	r2, r3
    CryptoCtx.RJcount0 = 0;
 8011f50:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011f52:	3214      	adds	r2, #20
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011f54:	609d      	str	r5, [r3, #8]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011f56:	62da      	str	r2, [r3, #44]	; 0x2c
    CryptoCtx.RJcount0 = 0;
 8011f58:	80a5      	strh	r5, [r4, #4]
    ResetFCnts( );
 8011f5a:	f7ff ffcd 	bl	8011ef8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011f5e:	0028      	movs	r0, r5
 8011f60:	bd70      	pop	{r4, r5, r6, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8011f62:	4a03      	ldr	r2, [pc, #12]	; (8011f70 <LoRaMacCryptoInit+0x54>)
 8011f64:	60e2      	str	r2, [r4, #12]
 8011f66:	e7e7      	b.n	8011f38 <LoRaMacCryptoInit+0x1c>
 8011f68:	20001758 	.word	0x20001758
 8011f6c:	20001768 	.word	0x20001768
 8011f70:	08011a0d 	.word	0x08011a0d

08011f74 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoCtx.LrWanVersion = version;
 8011f74:	4b01      	ldr	r3, [pc, #4]	; (8011f7c <LoRaMacCryptoSetLrWanVersion+0x8>)
 8011f76:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 8011f78:	2000      	movs	r0, #0
 8011f7a:	4770      	bx	lr
 8011f7c:	20001758 	.word	0x20001758

08011f80 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8011f80:	0001      	movs	r1, r0
 8011f82:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
        return LORAMAC_CRYPTO_SUCCESS;
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f84:	2007      	movs	r0, #7
    if( cryptoNvmCtx != 0 )
 8011f86:	2900      	cmp	r1, #0
 8011f88:	d004      	beq.n	8011f94 <LoRaMacCryptoRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8011f8a:	4803      	ldr	r0, [pc, #12]	; (8011f98 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 8011f8c:	2230      	movs	r2, #48	; 0x30
 8011f8e:	f002 f8c0 	bl	8014112 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8011f92:	2000      	movs	r0, #0
    }
}
 8011f94:	bd10      	pop	{r4, pc}
 8011f96:	46c0      	nop			; (mov r8, r8)
 8011f98:	20001768 	.word	0x20001768

08011f9c <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8011f9c:	2330      	movs	r3, #48	; 0x30
 8011f9e:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
}
 8011fa0:	4800      	ldr	r0, [pc, #0]	; (8011fa4 <LoRaMacCryptoGetNvmCtx+0x8>)
 8011fa2:	4770      	bx	lr
 8011fa4:	20001768 	.word	0x20001768

08011fa8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8011fa8:	b510      	push	{r4, lr}
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011faa:	f003 f827 	bl	8014ffc <SecureElementSetKey>
 8011fae:	0003      	movs	r3, r0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011fb0:	1e5a      	subs	r2, r3, #1
 8011fb2:	4193      	sbcs	r3, r2
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011fb4:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
 8011fb6:	425b      	negs	r3, r3
 8011fb8:	4018      	ands	r0, r3
}
 8011fba:	bd10      	pop	{r4, pc}

08011fbc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8011fbc:	b570      	push	{r4, r5, r6, lr}
 8011fbe:	0005      	movs	r5, r0
    if( macMsg == 0 )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011fc0:	2407      	movs	r4, #7
    if( macMsg == 0 )
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d01d      	beq.n	8012002 <LoRaMacCryptoPrepareJoinRequest+0x46>

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 8011fc6:	4c18      	ldr	r4, [pc, #96]	; (8012028 <LoRaMacCryptoPrepareJoinRequest+0x6c>)
 8011fc8:	68a6      	ldr	r6, [r4, #8]
 8011fca:	f002 f87b 	bl	80140c4 <rand1>
 8011fce:	8030      	strh	r0, [r6, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 8011fd0:	002e      	movs	r6, r5
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011fd2:	68e3      	ldr	r3, [r4, #12]
 8011fd4:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8011fd6:	68a3      	ldr	r3, [r4, #8]
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 8011fd8:	360e      	adds	r6, #14
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8011fda:	881b      	ldrh	r3, [r3, #0]
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 8011fdc:	0031      	movs	r1, r6
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8011fde:	82eb      	strh	r3, [r5, #22]
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 8011fe0:	2002      	movs	r0, #2
 8011fe2:	f7ff fd15 	bl	8011a10 <DeriveLifeTimeSessionKey>
 8011fe6:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011fe8:	d10b      	bne.n	8012002 <LoRaMacCryptoPrepareJoinRequest+0x46>
    {
        return retval;
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 8011fea:	0031      	movs	r1, r6
 8011fec:	2003      	movs	r0, #3
 8011fee:	f7ff fd0f 	bl	8011a10 <DeriveLifeTimeSessionKey>
 8011ff2:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ff4:	d105      	bne.n	8012002 <LoRaMacCryptoPrepareJoinRequest+0x46>
    {
        return retval;
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011ff6:	0028      	movs	r0, r5
 8011ff8:	f000 fa3e 	bl	8012478 <LoRaMacSerializerJoinRequest>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d002      	beq.n	8012006 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012000:	240e      	movs	r4, #14
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8012002:	0020      	movs	r0, r4
 8012004:	bd70      	pop	{r4, r5, r6, pc}
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 8012006:	002b      	movs	r3, r5
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012008:	2201      	movs	r2, #1
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 801200a:	3318      	adds	r3, #24
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801200c:	2113      	movs	r1, #19
 801200e:	6828      	ldr	r0, [r5, #0]
 8012010:	f002 ffa0 	bl	8014f54 <SecureElementComputeAesCmac>
 8012014:	2800      	cmp	r0, #0
 8012016:	d001      	beq.n	801201c <LoRaMacCryptoPrepareJoinRequest+0x60>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012018:	240c      	movs	r4, #12
 801201a:	e7f2      	b.n	8012002 <LoRaMacCryptoPrepareJoinRequest+0x46>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801201c:	0028      	movs	r0, r5
 801201e:	f000 fa2b 	bl	8012478 <LoRaMacSerializerJoinRequest>
 8012022:	2800      	cmp	r0, #0
 8012024:	d1ec      	bne.n	8012000 <LoRaMacCryptoPrepareJoinRequest+0x44>
 8012026:	e7ec      	b.n	8012002 <LoRaMacCryptoPrepareJoinRequest+0x46>
 8012028:	20001758 	.word	0x20001758

0801202c <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801202e:	b0c9      	sub	sp, #292	; 0x124
 8012030:	9002      	str	r0, [sp, #8]
 8012032:	9101      	str	r1, [sp, #4]
 8012034:	0014      	movs	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012036:	2007      	movs	r0, #7
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012038:	2a00      	cmp	r2, #0
 801203a:	d01f      	beq.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
 801203c:	2900      	cmp	r1, #0
 801203e:	d01d      	beq.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 8012040:	4b6a      	ldr	r3, [pc, #424]	; (80121ec <LoRaMacCryptoHandleJoinAccept+0x1c0>)

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8012042:	9902      	ldr	r1, [sp, #8]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 8012044:	689a      	ldr	r2, [r3, #8]
    if( joinReqType == JOIN_REQ )
 8012046:	29ff      	cmp	r1, #255	; 0xff
 8012048:	d11a      	bne.n	8012080 <LoRaMacCryptoHandleJoinAccept+0x54>
    {
        encryptionKeyID = NWK_KEY;
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 801204a:	250c      	movs	r5, #12
        encryptionKeyID = NWK_KEY;
 801204c:	2601      	movs	r6, #1
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 801204e:	9200      	str	r2, [sp, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8012050:	b2ab      	uxth	r3, r5
 8012052:	9303      	str	r3, [sp, #12]
 8012054:	7922      	ldrb	r2, [r4, #4]
 8012056:	af05      	add	r7, sp, #20
 8012058:	189a      	adds	r2, r3, r2
 801205a:	2100      	movs	r1, #0
 801205c:	0038      	movs	r0, r7
 801205e:	f002 f86d 	bl	801413c <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8012062:	7921      	ldrb	r1, [r4, #4]
 8012064:	6823      	ldr	r3, [r4, #0]
 8012066:	197d      	adds	r5, r7, r5
 8012068:	3901      	subs	r1, #1
 801206a:	1c58      	adds	r0, r3, #1
 801206c:	b289      	uxth	r1, r1
 801206e:	002b      	movs	r3, r5
 8012070:	0032      	movs	r2, r6
 8012072:	f002 ff8d 	bl	8014f90 <SecureElementAesEncrypt>
 8012076:	2800      	cmp	r0, #0
 8012078:	d00e      	beq.n	8012098 <LoRaMacCryptoHandleJoinAccept+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801207a:	200c      	movs	r0, #12
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.EventCryptoNvmCtxChanged( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 801207c:	b049      	add	sp, #292	; 0x124
 801207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 8012080:	2102      	movs	r1, #2
 8012082:	9d02      	ldr	r5, [sp, #8]
 8012084:	438d      	bics	r5, r1
 8012086:	d004      	beq.n	8012092 <LoRaMacCryptoHandleJoinAccept+0x66>
    uint8_t micComputationOffset = 0;
 8012088:	2500      	movs	r5, #0
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 801208a:	3228      	adds	r2, #40	; 0x28
 801208c:	9200      	str	r2, [sp, #0]
        encryptionKeyID = J_S_ENC_KEY;
 801208e:	2603      	movs	r6, #3
 8012090:	e7de      	b.n	8012050 <LoRaMacCryptoHandleJoinAccept+0x24>
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 8012092:	3304      	adds	r3, #4
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	e7fa      	b.n	801208e <LoRaMacCryptoHandleJoinAccept+0x62>
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 8012098:	7922      	ldrb	r2, [r4, #4]
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	3a01      	subs	r2, #1
 801209e:	1c58      	adds	r0, r3, #1
 80120a0:	b292      	uxth	r2, r2
 80120a2:	0029      	movs	r1, r5
 80120a4:	f002 f835 	bl	8014112 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80120a8:	0020      	movs	r0, r4
 80120aa:	f000 fdd7 	bl	8012c5c <LoRaMacParserJoinAccept>
 80120ae:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80120b0:	200d      	movs	r0, #13
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1e2      	bne.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80120b6:	7c22      	ldrb	r2, [r4, #16]
 80120b8:	4d4c      	ldr	r5, [pc, #304]	; (80121ec <LoRaMacCryptoHandleJoinAccept+0x1c0>)
 80120ba:	2601      	movs	r6, #1
 80120bc:	2a7f      	cmp	r2, #127	; 0x7f
 80120be:	d940      	bls.n	8012142 <LoRaMacCryptoHandleJoinAccept+0x116>
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 80120c0:	70ae      	strb	r6, [r5, #2]
        micComputationKeyID = J_S_INT_KEY;
 80120c2:	19b6      	adds	r6, r6, r6
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 80120c4:	78ab      	ldrb	r3, [r5, #2]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d13d      	bne.n	8012146 <LoRaMacCryptoHandleJoinAccept+0x11a>
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 80120ca:	7921      	ldrb	r1, [r4, #4]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 80120cc:	0033      	movs	r3, r6
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 80120ce:	3904      	subs	r1, #4
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 80120d0:	b289      	uxth	r1, r1
 80120d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80120d4:	6820      	ldr	r0, [r4, #0]
 80120d6:	f002 ff46 	bl	8014f66 <SecureElementVerifyAesCmac>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d1cd      	bne.n	801207a <LoRaMacCryptoHandleJoinAccept+0x4e>
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 80120de:	4e43      	ldr	r6, [pc, #268]	; (80121ec <LoRaMacCryptoHandleJoinAccept+0x1c0>)
 80120e0:	1da5      	adds	r5, r4, #6
 80120e2:	78b3      	ldrb	r3, [r6, #2]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d15d      	bne.n	80121a4 <LoRaMacCryptoHandleJoinAccept+0x178>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 80120e8:	9b00      	ldr	r3, [sp, #0]
 80120ea:	9a01      	ldr	r2, [sp, #4]
 80120ec:	0029      	movs	r1, r5
 80120ee:	2004      	movs	r0, #4
 80120f0:	f7ff fd78 	bl	8011be4 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d1c1      	bne.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 80120f8:	9b00      	ldr	r3, [sp, #0]
 80120fa:	9a01      	ldr	r2, [sp, #4]
 80120fc:	0029      	movs	r1, r5
 80120fe:	3005      	adds	r0, #5
 8012100:	f7ff fd70 	bl	8011be4 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012104:	2800      	cmp	r0, #0
 8012106:	d1b9      	bne.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8012108:	9b00      	ldr	r3, [sp, #0]
 801210a:	9a01      	ldr	r2, [sp, #4]
 801210c:	0029      	movs	r1, r5
 801210e:	3006      	adds	r0, #6
 8012110:	f7ff fd68 	bl	8011be4 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012114:	2800      	cmp	r0, #0
 8012116:	d1b1      	bne.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8012118:	9b00      	ldr	r3, [sp, #0]
 801211a:	9a01      	ldr	r2, [sp, #4]
 801211c:	0029      	movs	r1, r5
 801211e:	3007      	adds	r0, #7
 8012120:	f7ff fd60 	bl	8011be4 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012124:	2800      	cmp	r0, #0
 8012126:	d1a9      	bne.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012128:	2201      	movs	r2, #1
    CryptoCtx.RJcount0 = 0;
 801212a:	2400      	movs	r4, #0
    CryptoCtx.NvmCtx->FCntUp = 0;
 801212c:	68b3      	ldr	r3, [r6, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 801212e:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->FCntUp = 0;
 8012130:	609c      	str	r4, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012132:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012134:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012136:	611a      	str	r2, [r3, #16]
    CryptoCtx.RJcount0 = 0;
 8012138:	80b4      	strh	r4, [r6, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801213a:	68f3      	ldr	r3, [r6, #12]
 801213c:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 801213e:	0020      	movs	r0, r4
 8012140:	e79c      	b.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 8012142:	70ab      	strb	r3, [r5, #2]
 8012144:	e7be      	b.n	80120c4 <LoRaMacCryptoHandleJoinAccept+0x98>
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8012146:	466b      	mov	r3, sp
 8012148:	7a1b      	ldrb	r3, [r3, #8]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801214a:	2208      	movs	r2, #8
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 801214c:	703b      	strb	r3, [r7, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801214e:	ab04      	add	r3, sp, #16
 8012150:	1d58      	adds	r0, r3, #5
 8012152:	9901      	ldr	r1, [sp, #4]
 8012154:	f001 ffe6 	bl	8014124 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8012158:	68ab      	ldr	r3, [r5, #8]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 801215a:	0038      	movs	r0, r7
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 801215c:	881a      	ldrh	r2, [r3, #0]
 801215e:	727a      	strb	r2, [r7, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8012160:	881b      	ldrh	r3, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012162:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8012164:	0a1b      	lsrs	r3, r3, #8
 8012166:	72bb      	strb	r3, [r7, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 8012168:	7963      	ldrb	r3, [r4, #5]
 801216a:	72fb      	strb	r3, [r7, #11]
        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 801216c:	7921      	ldrb	r1, [r4, #4]
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	3905      	subs	r1, #5
 8012172:	1859      	adds	r1, r3, r1
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012174:	b289      	uxth	r1, r1
 8012176:	0033      	movs	r3, r6
 8012178:	f002 fef5 	bl	8014f66 <SecureElementVerifyAesCmac>
 801217c:	2800      	cmp	r0, #0
 801217e:	d000      	beq.n	8012182 <LoRaMacCryptoHandleJoinAccept+0x156>
 8012180:	e77b      	b.n	801207a <LoRaMacCryptoHandleJoinAccept+0x4e>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8012182:	79e3      	ldrb	r3, [r4, #7]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8012184:	7a22      	ldrb	r2, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8012186:	021b      	lsls	r3, r3, #8
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8012188:	0412      	lsls	r2, r2, #16
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 801218a:	79a1      	ldrb	r1, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 801218c:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 801218e:	68aa      	ldr	r2, [r5, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8012190:	430b      	orrs	r3, r1
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8012192:	6851      	ldr	r1, [r2, #4]
 8012194:	428b      	cmp	r3, r1
 8012196:	d801      	bhi.n	801219c <LoRaMacCryptoHandleJoinAccept+0x170>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012198:	2003      	movs	r0, #3
 801219a:	e76f      	b.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 801219c:	6053      	str	r3, [r2, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 801219e:	68eb      	ldr	r3, [r5, #12]
 80121a0:	4798      	blx	r3
 80121a2:	e79c      	b.n	80120de <LoRaMacCryptoHandleJoinAccept+0xb2>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80121a4:	3409      	adds	r4, #9
 80121a6:	68b3      	ldr	r3, [r6, #8]
 80121a8:	0022      	movs	r2, r4
 80121aa:	0029      	movs	r1, r5
 80121ac:	2007      	movs	r0, #7
 80121ae:	f7ff fd65 	bl	8011c7c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d000      	beq.n	80121b8 <LoRaMacCryptoHandleJoinAccept+0x18c>
 80121b6:	e761      	b.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80121b8:	68b3      	ldr	r3, [r6, #8]
 80121ba:	0022      	movs	r2, r4
 80121bc:	0029      	movs	r1, r5
 80121be:	3006      	adds	r0, #6
 80121c0:	f7ff fd5c 	bl	8011c7c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d000      	beq.n	80121ca <LoRaMacCryptoHandleJoinAccept+0x19e>
 80121c8:	e758      	b.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80121ca:	68b3      	ldr	r3, [r6, #8]
 80121cc:	0022      	movs	r2, r4
 80121ce:	0029      	movs	r1, r5
 80121d0:	3004      	adds	r0, #4
 80121d2:	f7ff fd53 	bl	8011c7c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d000      	beq.n	80121dc <LoRaMacCryptoHandleJoinAccept+0x1b0>
 80121da:	e74f      	b.n	801207c <LoRaMacCryptoHandleJoinAccept+0x50>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80121dc:	68b3      	ldr	r3, [r6, #8]
 80121de:	0022      	movs	r2, r4
 80121e0:	0029      	movs	r1, r5
 80121e2:	3005      	adds	r0, #5
 80121e4:	f7ff fd4a 	bl	8011c7c <DeriveSessionKey10x>
 80121e8:	e79c      	b.n	8012124 <LoRaMacCryptoHandleJoinAccept+0xf8>
 80121ea:	46c0      	nop			; (mov r8, r8)
 80121ec:	20001758 	.word	0x20001758

080121f0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	b089      	sub	sp, #36	; 0x24
 80121f4:	0006      	movs	r6, r0
 80121f6:	9105      	str	r1, [sp, #20]
 80121f8:	0017      	movs	r7, r2
 80121fa:	1e1c      	subs	r4, r3, #0
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 80121fc:	d102      	bne.n	8012204 <LoRaMacCryptoSecureMessage+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121fe:	2007      	movs	r0, #7
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8012200:	b009      	add	sp, #36	; 0x24
 8012202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8012204:	4d48      	ldr	r5, [pc, #288]	; (8012328 <LoRaMacCryptoSecureMessage+0x138>)
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8012206:	2005      	movs	r0, #5
    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8012208:	68ab      	ldr	r3, [r5, #8]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	42b3      	cmp	r3, r6
 801220e:	d8f7      	bhi.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
    if( macMsg->FPort == 0 )
 8012210:	1c62      	adds	r2, r4, #1
 8012212:	7fd2      	ldrb	r2, [r2, #31]
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8012214:	1e51      	subs	r1, r2, #1
 8012216:	418a      	sbcs	r2, r1
 8012218:	3206      	adds	r2, #6
    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 801221a:	42b3      	cmp	r3, r6
 801221c:	d348      	bcc.n	80122b0 <LoRaMacCryptoSecureMessage+0xc0>
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 801221e:	68ab      	ldr	r3, [r5, #8]
 8012220:	609e      	str	r6, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8012222:	68eb      	ldr	r3, [r5, #12]
 8012224:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012226:	0020      	movs	r0, r4
 8012228:	f000 f95b 	bl	80124e2 <LoRaMacSerializerData>
 801222c:	1e03      	subs	r3, r0, #0
 801222e:	d13d      	bne.n	80122ac <LoRaMacCryptoSecureMessage+0xbc>
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8012230:	78aa      	ldrb	r2, [r5, #2]
 8012232:	2a01      	cmp	r2, #1
 8012234:	d15c      	bne.n	80122f0 <LoRaMacCryptoSecureMessage+0x100>
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 8012236:	ab06      	add	r3, sp, #24
 8012238:	9303      	str	r3, [sp, #12]
 801223a:	89e3      	ldrh	r3, [r4, #14]
 801223c:	7b22      	ldrb	r2, [r4, #12]
 801223e:	7921      	ldrb	r1, [r4, #4]
 8012240:	9302      	str	r3, [sp, #8]
 8012242:	68a3      	ldr	r3, [r4, #8]
 8012244:	0692      	lsls	r2, r2, #26
 8012246:	3904      	subs	r1, #4
        uint32_t cmacS = 0;
 8012248:	9006      	str	r0, [sp, #24]
        uint32_t cmacF = 0;
 801224a:	9007      	str	r0, [sp, #28]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 801224c:	9301      	str	r3, [sp, #4]
 801224e:	0fd2      	lsrs	r2, r2, #31
 8012250:	b289      	uxth	r1, r1
 8012252:	9700      	str	r7, [sp, #0]
 8012254:	9b05      	ldr	r3, [sp, #20]
 8012256:	6820      	ldr	r0, [r4, #0]
 8012258:	f7ff fd50 	bl	8011cfc <ComputeCmacB1.constprop.5>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801225c:	2800      	cmp	r0, #0
 801225e:	d1cf      	bne.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 8012260:	6825      	ldr	r5, [r4, #0]
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012262:	3007      	adds	r0, #7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012264:	2d00      	cmp	r5, #0
 8012266:	d0cb      	beq.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012268:	2380      	movs	r3, #128	; 0x80
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 801226a:	7921      	ldrb	r1, [r4, #4]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801226c:	005b      	lsls	r3, r3, #1
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 801226e:	3904      	subs	r1, #4
 8012270:	b289      	uxth	r1, r1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012272:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012274:	4299      	cmp	r1, r3
 8012276:	d8c3      	bhi.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
 8012278:	aa07      	add	r2, sp, #28
 801227a:	9202      	str	r2, [sp, #8]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 801227c:	89e2      	ldrh	r2, [r4, #14]
 801227e:	7b23      	ldrb	r3, [r4, #12]
 8012280:	9201      	str	r2, [sp, #4]
 8012282:	68a2      	ldr	r2, [r4, #8]
 8012284:	069b      	lsls	r3, r3, #26
 8012286:	9200      	str	r2, [sp, #0]
 8012288:	0fdb      	lsrs	r3, r3, #31
 801228a:	2204      	movs	r2, #4
 801228c:	0028      	movs	r0, r5
 801228e:	f7ff fde9 	bl	8011e64 <ComputeCmacB0.part.4.constprop.8>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012292:	2800      	cmp	r0, #0
 8012294:	d1b4      	bne.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8012296:	9b07      	ldr	r3, [sp, #28]
 8012298:	aa02      	add	r2, sp, #8
 801229a:	8a12      	ldrh	r2, [r2, #16]
 801229c:	041b      	lsls	r3, r3, #16
 801229e:	4313      	orrs	r3, r2
 80122a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80122a2:	0020      	movs	r0, r4
 80122a4:	f000 f91d 	bl	80124e2 <LoRaMacSerializerData>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	d0a9      	beq.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80122ac:	200e      	movs	r0, #14
 80122ae:	e7a7      	b.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80122b0:	0023      	movs	r3, r4
 80122b2:	3328      	adds	r3, #40	; 0x28
 80122b4:	7819      	ldrb	r1, [r3, #0]
 80122b6:	2300      	movs	r3, #0
 80122b8:	9601      	str	r6, [sp, #4]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80122be:	68a3      	ldr	r3, [r4, #8]
 80122c0:	f7ff fbd4 	bl	8011a6c <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d19b      	bne.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 80122c8:	78ab      	ldrb	r3, [r5, #2]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d1a7      	bne.n	801221e <LoRaMacCryptoSecureMessage+0x2e>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 80122ce:	7b23      	ldrb	r3, [r4, #12]
 80122d0:	0002      	movs	r2, r0
 80122d2:	071b      	lsls	r3, r3, #28
 80122d4:	0f1b      	lsrs	r3, r3, #28
 80122d6:	469c      	mov	ip, r3
 80122d8:	0023      	movs	r3, r4
 80122da:	3310      	adds	r3, #16
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	9600      	str	r6, [sp, #0]
 80122e0:	0003      	movs	r3, r0
 80122e2:	68a1      	ldr	r1, [r4, #8]
 80122e4:	4660      	mov	r0, ip
 80122e6:	f7ff fc26 	bl	8011b36 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d097      	beq.n	801221e <LoRaMacCryptoSecureMessage+0x2e>
 80122ee:	e787      	b.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 80122f0:	6825      	ldr	r5, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80122f2:	2d00      	cmp	r5, #0
 80122f4:	d100      	bne.n	80122f8 <LoRaMacCryptoSecureMessage+0x108>
 80122f6:	e782      	b.n	80121fe <LoRaMacCryptoSecureMessage+0xe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80122f8:	2280      	movs	r2, #128	; 0x80
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 80122fa:	7921      	ldrb	r1, [r4, #4]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80122fc:	0052      	lsls	r2, r2, #1
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 80122fe:	3904      	subs	r1, #4
 8012300:	b289      	uxth	r1, r1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012302:	200b      	movs	r0, #11
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012304:	4291      	cmp	r1, r2
 8012306:	d900      	bls.n	801230a <LoRaMacCryptoSecureMessage+0x11a>
 8012308:	e77a      	b.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 801230a:	0022      	movs	r2, r4
 801230c:	322c      	adds	r2, #44	; 0x2c
 801230e:	9202      	str	r2, [sp, #8]
 8012310:	89e2      	ldrh	r2, [r4, #14]
 8012312:	0028      	movs	r0, r5
 8012314:	9201      	str	r2, [sp, #4]
 8012316:	68a2      	ldr	r2, [r4, #8]
 8012318:	9200      	str	r2, [sp, #0]
 801231a:	2206      	movs	r2, #6
 801231c:	f7ff fda2 	bl	8011e64 <ComputeCmacB0.part.4.constprop.8>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012320:	2800      	cmp	r0, #0
 8012322:	d0be      	beq.n	80122a2 <LoRaMacCryptoSecureMessage+0xb2>
 8012324:	e76c      	b.n	8012200 <LoRaMacCryptoSecureMessage+0x10>
 8012326:	46c0      	nop			; (mov r8, r8)
 8012328:	20001758 	.word	0x20001758

0801232c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801232e:	b087      	sub	sp, #28
 8012330:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012332:	9003      	str	r0, [sp, #12]
 8012334:	9105      	str	r1, [sp, #20]
 8012336:	9204      	str	r2, [sp, #16]
 8012338:	001e      	movs	r6, r3
    if( macMsg == 0 )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801233a:	2507      	movs	r5, #7
    if( macMsg == 0 )
 801233c:	2c00      	cmp	r4, #0
 801233e:	d075      	beq.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
    switch( fCntID )
 8012340:	1e50      	subs	r0, r2, #1
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8012342:	3d02      	subs	r5, #2
    switch( fCntID )
 8012344:	2806      	cmp	r0, #6
 8012346:	d871      	bhi.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
 8012348:	4f49      	ldr	r7, [pc, #292]	; (8012470 <LoRaMacCryptoUnsecureMessage+0x144>)
 801234a:	f7ee fc17 	bl	8000b7c <__gnu_thumb1_case_uqi>
 801234e:	5504      	.short	0x5504
 8012350:	65625f5a 	.word	0x65625f5a
 8012354:	68          	.byte	0x68
 8012355:	00          	.byte	0x00
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 8012356:	68ba      	ldr	r2, [r7, #8]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 8012358:	0011      	movs	r1, r2
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 801235a:	68d3      	ldr	r3, [r2, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 801235c:	310c      	adds	r1, #12
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 801235e:	62d1      	str	r1, [r2, #44]	; 0x2c
    if( ( currentDown > lastDown ) ||
 8012360:	429e      	cmp	r6, r3
 8012362:	d802      	bhi.n	801236a <LoRaMacCryptoUnsecureMessage+0x3e>
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8012364:	2505      	movs	r5, #5
    if( ( currentDown > lastDown ) ||
 8012366:	3301      	adds	r3, #1
 8012368:	d160      	bne.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801236a:	0020      	movs	r0, r4
 801236c:	f000 fcc2 	bl	8012cf4 <LoRaMacParserData>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012370:	250d      	movs	r5, #13
        if( KeyAddrList[i].AddrID == addrID )
 8012372:	4940      	ldr	r1, [pc, #256]	; (8012474 <LoRaMacCryptoUnsecureMessage+0x148>)
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012374:	2800      	cmp	r0, #0
 8012376:	d159      	bne.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
        if( KeyAddrList[i].AddrID == addrID )
 8012378:	0083      	lsls	r3, r0, #2
 801237a:	5c5a      	ldrb	r2, [r3, r1]
 801237c:	9d03      	ldr	r5, [sp, #12]
 801237e:	42aa      	cmp	r2, r5
 8012380:	d150      	bne.n	8012424 <LoRaMacCryptoUnsecureMessage+0xf8>
        return retval;
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012382:	68a2      	ldr	r2, [r4, #8]
 8012384:	9805      	ldr	r0, [sp, #20]
 8012386:	9203      	str	r2, [sp, #12]
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012388:	2502      	movs	r5, #2
    if( address != macMsg->FHDR.DevAddr )
 801238a:	4282      	cmp	r2, r0
 801238c:	d14e      	bne.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 801238e:	78b8      	ldrb	r0, [r7, #2]
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8012390:	18cb      	adds	r3, r1, r3
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012392:	1e45      	subs	r5, r0, #1
 8012394:	41a8      	sbcs	r0, r5
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012396:	7b22      	ldrb	r2, [r4, #12]
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8012398:	785f      	ldrb	r7, [r3, #1]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801239a:	7921      	ldrb	r1, [r4, #4]
 801239c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        isAck = false;
 801239e:	0952      	lsrs	r2, r2, #5
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80123a0:	9301      	str	r3, [sp, #4]
 80123a2:	9600      	str	r6, [sp, #0]
 80123a4:	3904      	subs	r1, #4
        isAck = false;
 80123a6:	4002      	ands	r2, r0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80123a8:	b289      	uxth	r1, r1
 80123aa:	9b05      	ldr	r3, [sp, #20]
 80123ac:	6820      	ldr	r0, [r4, #0]
 80123ae:	f7ff fd03 	bl	8011db8 <VerifyCmacB0.constprop.6>
 80123b2:	1e05      	subs	r5, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80123b4:	d13a      	bne.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80123b6:	1c63      	adds	r3, r4, #1
 80123b8:	7fdb      	ldrb	r3, [r3, #31]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d100      	bne.n	80123c0 <LoRaMacCryptoUnsecureMessage+0x94>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 80123be:	2706      	movs	r7, #6
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80123c0:	0023      	movs	r3, r4
 80123c2:	3328      	adds	r3, #40	; 0x28
 80123c4:	7819      	ldrb	r1, [r3, #0]
 80123c6:	2301      	movs	r3, #1
 80123c8:	9601      	str	r6, [sp, #4]
 80123ca:	9300      	str	r3, [sp, #0]
 80123cc:	003a      	movs	r2, r7
 80123ce:	9b03      	ldr	r3, [sp, #12]
 80123d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80123d2:	f7ff fb4b 	bl	8011a6c <PayloadEncrypt>
 80123d6:	1e05      	subs	r5, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80123d8:	d128      	bne.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
    {
        return retval;
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 80123da:	4f25      	ldr	r7, [pc, #148]	; (8012470 <LoRaMacCryptoUnsecureMessage+0x144>)
 80123dc:	78ba      	ldrb	r2, [r7, #2]
 80123de:	2a01      	cmp	r2, #1
 80123e0:	d027      	beq.n	8012432 <LoRaMacCryptoUnsecureMessage+0x106>
    switch( fCntID )
 80123e2:	9804      	ldr	r0, [sp, #16]
 80123e4:	3801      	subs	r0, #1
 80123e6:	2806      	cmp	r0, #6
 80123e8:	d832      	bhi.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 80123ea:	68bb      	ldr	r3, [r7, #8]
    switch( fCntID )
 80123ec:	f7ee fbc6 	bl	8000b7c <__gnu_thumb1_case_uqi>
 80123f0:	3735332f 	.word	0x3735332f
 80123f4:	3b39      	.short	0x3b39
 80123f6:	3d          	.byte	0x3d
 80123f7:	00          	.byte	0x00
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 80123f8:	68ba      	ldr	r2, [r7, #8]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 80123fa:	0011      	movs	r1, r2
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 80123fc:	6913      	ldr	r3, [r2, #16]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 80123fe:	3110      	adds	r1, #16
 8012400:	e7ad      	b.n	801235e <LoRaMacCryptoUnsecureMessage+0x32>
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 8012402:	68ba      	ldr	r2, [r7, #8]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8012404:	0011      	movs	r1, r2
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 8012406:	6953      	ldr	r3, [r2, #20]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8012408:	3114      	adds	r1, #20
 801240a:	e7a8      	b.n	801235e <LoRaMacCryptoUnsecureMessage+0x32>
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	699b      	ldr	r3, [r3, #24]
 8012410:	e7a6      	b.n	8012360 <LoRaMacCryptoUnsecureMessage+0x34>
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	69db      	ldr	r3, [r3, #28]
 8012416:	e7a3      	b.n	8012360 <LoRaMacCryptoUnsecureMessage+0x34>
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	6a1b      	ldr	r3, [r3, #32]
 801241c:	e7a0      	b.n	8012360 <LoRaMacCryptoUnsecureMessage+0x34>
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012422:	e79d      	b.n	8012360 <LoRaMacCryptoUnsecureMessage+0x34>
 8012424:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012426:	2805      	cmp	r0, #5
 8012428:	d1a6      	bne.n	8012378 <LoRaMacCryptoUnsecureMessage+0x4c>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801242a:	2509      	movs	r5, #9
    }

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 801242c:	0028      	movs	r0, r5
 801242e:	b007      	add	sp, #28
 8012430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 8012432:	7b20      	ldrb	r0, [r4, #12]
 8012434:	3410      	adds	r4, #16
 8012436:	0700      	lsls	r0, r0, #28
 8012438:	0f00      	lsrs	r0, r0, #28
 801243a:	9401      	str	r4, [sp, #4]
 801243c:	9600      	str	r6, [sp, #0]
 801243e:	9b04      	ldr	r3, [sp, #16]
 8012440:	9903      	ldr	r1, [sp, #12]
 8012442:	f7ff fb78 	bl	8011b36 <FOptsEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012446:	2800      	cmp	r0, #0
 8012448:	d0cb      	beq.n	80123e2 <LoRaMacCryptoUnsecureMessage+0xb6>
 801244a:	0005      	movs	r5, r0
 801244c:	e7ee      	b.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 801244e:	60de      	str	r6, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	4798      	blx	r3
 8012454:	e7ea      	b.n	801242c <LoRaMacCryptoUnsecureMessage+0x100>
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 8012456:	611e      	str	r6, [r3, #16]
 8012458:	e7fa      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 801245a:	615e      	str	r6, [r3, #20]
 801245c:	e7f8      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 801245e:	619e      	str	r6, [r3, #24]
 8012460:	e7f6      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 8012462:	61de      	str	r6, [r3, #28]
 8012464:	e7f4      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 8012466:	621e      	str	r6, [r3, #32]
 8012468:	e7f2      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 801246a:	625e      	str	r6, [r3, #36]	; 0x24
 801246c:	e7f0      	b.n	8012450 <LoRaMacCryptoUnsecureMessage+0x124>
 801246e:	46c0      	nop			; (mov r8, r8)
 8012470:	20001758 	.word	0x20001758
 8012474:	20000ab8 	.word	0x20000ab8

08012478 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012478:	b510      	push	{r4, lr}
 801247a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801247c:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801247e:	2c00      	cmp	r4, #0
 8012480:	d02e      	beq.n	80124e0 <LoRaMacSerializerJoinRequest+0x68>
 8012482:	6823      	ldr	r3, [r4, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d02b      	beq.n	80124e0 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012488:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801248a:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801248c:	2a16      	cmp	r2, #22
 801248e:	d927      	bls.n	80124e0 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012490:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012492:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012494:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	2208      	movs	r2, #8
 801249a:	1c58      	adds	r0, r3, #1
 801249c:	f001 fe42 	bl	8014124 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80124a0:	0021      	movs	r1, r4
 80124a2:	6820      	ldr	r0, [r4, #0]
 80124a4:	2208      	movs	r2, #8
 80124a6:	3009      	adds	r0, #9
 80124a8:	310e      	adds	r1, #14
 80124aa:	f001 fe3b 	bl	8014124 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80124ae:	8ae3      	ldrh	r3, [r4, #22]
 80124b0:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 80124b2:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80124b4:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80124b6:	8ae3      	ldrh	r3, [r4, #22]
 80124b8:	6822      	ldr	r2, [r4, #0]
 80124ba:	0a1b      	lsrs	r3, r3, #8
 80124bc:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	7e22      	ldrb	r2, [r4, #24]
 80124c2:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80124c4:	69a3      	ldr	r3, [r4, #24]
 80124c6:	6822      	ldr	r2, [r4, #0]
 80124c8:	0a1b      	lsrs	r3, r3, #8
 80124ca:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80124cc:	69a3      	ldr	r3, [r4, #24]
 80124ce:	6822      	ldr	r2, [r4, #0]
 80124d0:	0c1b      	lsrs	r3, r3, #16
 80124d2:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80124d4:	69a3      	ldr	r3, [r4, #24]
 80124d6:	6822      	ldr	r2, [r4, #0]
 80124d8:	0e1b      	lsrs	r3, r3, #24
 80124da:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 80124dc:	2317      	movs	r3, #23
 80124de:	7123      	strb	r3, [r4, #4]
}
 80124e0:	bd10      	pop	{r4, pc}

080124e2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80124e2:	b570      	push	{r4, r5, r6, lr}
 80124e4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80124e6:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80124e8:	2c00      	cmp	r4, #0
 80124ea:	d069      	beq.n	80125c0 <LoRaMacSerializerData+0xde>
 80124ec:	6822      	ldr	r2, [r4, #0]
 80124ee:	2a00      	cmp	r2, #0
 80124f0:	d066      	beq.n	80125c0 <LoRaMacSerializerData+0xde>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 80124f2:	0025      	movs	r5, r4
 80124f4:	3528      	adds	r5, #40	; 0x28
 80124f6:	7828      	ldrb	r0, [r5, #0]
 80124f8:	7921      	ldrb	r1, [r4, #4]
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d158      	bne.n	80125b0 <LoRaMacSerializerData+0xce>
    {
        if( macMsg->BufSize < computedBufSize )
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80124fe:	3002      	adds	r0, #2
        if( macMsg->BufSize < computedBufSize )
 8012500:	2907      	cmp	r1, #7
 8012502:	d95d      	bls.n	80125c0 <LoRaMacSerializerData+0xde>
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012504:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012506:	7963      	ldrb	r3, [r4, #5]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012508:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801250a:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	7a22      	ldrb	r2, [r4, #8]
 8012510:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012512:	68a3      	ldr	r3, [r4, #8]
 8012514:	6822      	ldr	r2, [r4, #0]
 8012516:	0a1b      	lsrs	r3, r3, #8
 8012518:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801251a:	68a3      	ldr	r3, [r4, #8]
 801251c:	6822      	ldr	r2, [r4, #0]
 801251e:	0c1b      	lsrs	r3, r3, #16
 8012520:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012522:	68a3      	ldr	r3, [r4, #8]
 8012524:	6822      	ldr	r2, [r4, #0]
 8012526:	0e1b      	lsrs	r3, r3, #24
 8012528:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801252a:	7b23      	ldrb	r3, [r4, #12]
 801252c:	6822      	ldr	r2, [r4, #0]
 801252e:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012530:	89e3      	ldrh	r3, [r4, #14]
 8012532:	6822      	ldr	r2, [r4, #0]
 8012534:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012536:	89e3      	ldrh	r3, [r4, #14]
 8012538:	6822      	ldr	r2, [r4, #0]
 801253a:	0a1b      	lsrs	r3, r3, #8
 801253c:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801253e:	7b22      	ldrb	r2, [r4, #12]
 8012540:	6820      	ldr	r0, [r4, #0]
 8012542:	0712      	lsls	r2, r2, #28
 8012544:	0f12      	lsrs	r2, r2, #28
 8012546:	3008      	adds	r0, #8
 8012548:	f001 fde3 	bl	8014112 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801254c:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801254e:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012550:	071b      	lsls	r3, r3, #28
 8012552:	0f1b      	lsrs	r3, r3, #28
 8012554:	001e      	movs	r6, r3
 8012556:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 8012558:	2a00      	cmp	r2, #0
 801255a:	d005      	beq.n	8012568 <LoRaMacSerializerData+0x86>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801255c:	1c62      	adds	r2, r4, #1
 801255e:	7fd2      	ldrb	r2, [r2, #31]
 8012560:	6821      	ldr	r1, [r4, #0]
 8012562:	3309      	adds	r3, #9
 8012564:	558a      	strb	r2, [r1, r6]
 8012566:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012568:	6823      	ldr	r3, [r4, #0]
 801256a:	782a      	ldrb	r2, [r5, #0]
 801256c:	1998      	adds	r0, r3, r6
 801256e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012570:	f001 fdcf 	bl	8014112 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012574:	212c      	movs	r1, #44	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012576:	782b      	ldrb	r3, [r5, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012578:	1861      	adds	r1, r4, r1
 801257a:	7809      	ldrb	r1, [r1, #0]
 801257c:	6822      	ldr	r2, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801257e:	18f3      	adds	r3, r6, r3
 8012580:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012582:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012584:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012586:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012588:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801258a:	b292      	uxth	r2, r2
 801258c:	0a09      	lsrs	r1, r1, #8
 801258e:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012590:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012592:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012594:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012596:	b292      	uxth	r2, r2
 8012598:	0c09      	lsrs	r1, r1, #16
 801259a:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801259c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801259e:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80125a0:	6820      	ldr	r0, [r4, #0]
 80125a2:	b292      	uxth	r2, r2
 80125a4:	0e09      	lsrs	r1, r1, #24
 80125a6:	3304      	adds	r3, #4
 80125a8:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;
 80125aa:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80125ac:	2000      	movs	r0, #0
 80125ae:	e007      	b.n	80125c0 <LoRaMacSerializerData+0xde>
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 80125b0:	7b23      	ldrb	r3, [r4, #12]
 80125b2:	071b      	lsls	r3, r3, #28
 80125b4:	0f1b      	lsrs	r3, r3, #28
 80125b6:	3308      	adds	r3, #8
 80125b8:	181b      	adds	r3, r3, r0
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80125ba:	2002      	movs	r0, #2
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 80125bc:	428b      	cmp	r3, r1
 80125be:	dba1      	blt.n	8012504 <LoRaMacSerializerData+0x22>
}
 80125c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080125c4 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 80125c4:	4b03      	ldr	r3, [pc, #12]	; (80125d4 <NvmCtxCallback+0x10>)
{
 80125c6:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d000      	beq.n	80125d0 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 80125ce:	4798      	blx	r3
    }
}
 80125d0:	bd10      	pop	{r4, pc}
 80125d2:	46c0      	nop			; (mov r8, r8)
 80125d4:	20001798 	.word	0x20001798

080125d8 <isSlotFree>:
{
 80125d8:	0003      	movs	r3, r0
 80125da:	3310      	adds	r3, #16
        if( mem[size] != 0x00 )
 80125dc:	7802      	ldrb	r2, [r0, #0]
 80125de:	2a00      	cmp	r2, #0
 80125e0:	d104      	bne.n	80125ec <isSlotFree+0x14>
 80125e2:	3001      	adds	r0, #1
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80125e4:	4298      	cmp	r0, r3
 80125e6:	d1f9      	bne.n	80125dc <isSlotFree+0x4>
    return true;
 80125e8:	2001      	movs	r0, #1
}
 80125ea:	4770      	bx	lr
            return false;
 80125ec:	2000      	movs	r0, #0
 80125ee:	e7fc      	b.n	80125ea <isSlotFree+0x12>

080125f0 <mallocNewMacCommandSlot>:
{
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	4d08      	ldr	r5, [pc, #32]	; (8012614 <mallocNewMacCommandSlot+0x24>)
 80125f4:	002c      	movs	r4, r5
 80125f6:	35f8      	adds	r5, #248	; 0xf8
 80125f8:	3408      	adds	r4, #8
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 80125fa:	0020      	movs	r0, r4
 80125fc:	f7ff ffec 	bl	80125d8 <isSlotFree>
 8012600:	2800      	cmp	r0, #0
 8012602:	d001      	beq.n	8012608 <mallocNewMacCommandSlot+0x18>
}
 8012604:	0020      	movs	r0, r4
 8012606:	bd70      	pop	{r4, r5, r6, pc}
 8012608:	3410      	adds	r4, #16
        if( itr == NUM_OF_MAC_COMMANDS )
 801260a:	42ac      	cmp	r4, r5
 801260c:	d1f5      	bne.n	80125fa <mallocNewMacCommandSlot+0xa>
            return 0;
 801260e:	0004      	movs	r4, r0
 8012610:	e7f8      	b.n	8012604 <mallocNewMacCommandSlot+0x14>
 8012612:	46c0      	nop			; (mov r8, r8)
 8012614:	2000179c 	.word	0x2000179c

08012618 <freeMacCommandSlot>:
{
 8012618:	b510      	push	{r4, lr}
        return false;
 801261a:	1e03      	subs	r3, r0, #0
    if( slot == 0 )
 801261c:	d004      	beq.n	8012628 <freeMacCommandSlot+0x10>
    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 801261e:	2210      	movs	r2, #16
 8012620:	2100      	movs	r1, #0
 8012622:	f001 fd8b 	bl	801413c <memset1>
    return true;
 8012626:	2301      	movs	r3, #1
}
 8012628:	0018      	movs	r0, r3
 801262a:	bd10      	pop	{r4, pc}

0801262c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
 801262c:	b570      	push	{r4, r5, r6, lr}

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 801262e:	4c06      	ldr	r4, [pc, #24]	; (8012648 <LoRaMacCommandsInit+0x1c>)
{
 8012630:	0005      	movs	r5, r0
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 8012632:	22fc      	movs	r2, #252	; 0xfc
 8012634:	0020      	movs	r0, r4
 8012636:	2100      	movs	r1, #0
 8012638:	f001 fd80 	bl	801413c <memset1>
    list->First = 0;
 801263c:	2000      	movs	r0, #0

    linkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 801263e:	4b03      	ldr	r3, [pc, #12]	; (801264c <LoRaMacCommandsInit+0x20>)
    list->First = 0;
 8012640:	6020      	str	r0, [r4, #0]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8012642:	601d      	str	r5, [r3, #0]
    list->Last = 0;
 8012644:	6060      	str	r0, [r4, #4]

    return LORAMAC_COMMANDS_SUCCESS;
}
 8012646:	bd70      	pop	{r4, r5, r6, pc}
 8012648:	2000179c 	.word	0x2000179c
 801264c:	20001798 	.word	0x20001798

08012650 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8012650:	0001      	movs	r1, r0
 8012652:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012654:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 8012656:	2900      	cmp	r1, #0
 8012658:	d004      	beq.n	8012664 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
 801265a:	4803      	ldr	r0, [pc, #12]	; (8012668 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 801265c:	22fc      	movs	r2, #252	; 0xfc
 801265e:	f001 fd58 	bl	8014112 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8012662:	2000      	movs	r0, #0
    }
}
 8012664:	bd10      	pop	{r4, pc}
 8012666:	46c0      	nop			; (mov r8, r8)
 8012668:	2000179c 	.word	0x2000179c

0801266c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 801266c:	23fc      	movs	r3, #252	; 0xfc
 801266e:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 8012670:	4800      	ldr	r0, [pc, #0]	; (8012674 <LoRaMacCommandsGetNvmCtx+0x8>)
 8012672:	4770      	bx	lr
 8012674:	2000179c 	.word	0x2000179c

08012678 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 8012678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801267a:	0007      	movs	r7, r0
 801267c:	9101      	str	r1, [sp, #4]
 801267e:	0016      	movs	r6, r2
    if( payload == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012680:	2001      	movs	r0, #1
    if( payload == 0 )
 8012682:	2900      	cmp	r1, #0
 8012684:	d02c      	beq.n	80126e0 <LoRaMacCommandsAddCmd+0x68>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 8012686:	f7ff ffb3 	bl	80125f0 <mallocNewMacCommandSlot>
 801268a:	0004      	movs	r4, r0

    if( newCmd == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801268c:	2002      	movs	r0, #2
    if( newCmd == 0 )
 801268e:	2c00      	cmp	r4, #0
 8012690:	d026      	beq.n	80126e0 <LoRaMacCommandsAddCmd+0x68>
    if( list->First == 0 )
 8012692:	4d14      	ldr	r5, [pc, #80]	; (80126e4 <LoRaMacCommandsAddCmd+0x6c>)
 8012694:	682b      	ldr	r3, [r5, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d100      	bne.n	801269c <LoRaMacCommandsAddCmd+0x24>
        list->First = element;
 801269a:	602c      	str	r4, [r5, #0]
    if( list->Last )
 801269c:	686b      	ldr	r3, [r5, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d000      	beq.n	80126a4 <LoRaMacCommandsAddCmd+0x2c>
        list->Last->Next = element;
 80126a2:	601c      	str	r4, [r3, #0]
    element->Next = 0;
 80126a4:	2300      	movs	r3, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 80126a6:	60a6      	str	r6, [r4, #8]
    element->Next = 0;
 80126a8:	6023      	str	r3, [r4, #0]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 80126aa:	b2b2      	uxth	r2, r6
    list->Last = element;
 80126ac:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 80126ae:	1d60      	adds	r0, r4, #5
    newCmd->CID = cid;
 80126b0:	7127      	strb	r7, [r4, #4]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 80126b2:	9901      	ldr	r1, [sp, #4]
 80126b4:	f001 fd2d 	bl	8014112 <memcpy1>
            return false;
 80126b8:	2300      	movs	r3, #0
 80126ba:	2f0a      	cmp	r7, #10
 80126bc:	d807      	bhi.n	80126ce <LoRaMacCommandsAddCmd+0x56>
 80126be:	3301      	adds	r3, #1
 80126c0:	22a4      	movs	r2, #164	; 0xa4
 80126c2:	40bb      	lsls	r3, r7
 80126c4:	00d2      	lsls	r2, r2, #3
 80126c6:	4013      	ands	r3, r2
 80126c8:	1e5a      	subs	r2, r3, #1
 80126ca:	4193      	sbcs	r3, r2
 80126cc:	b2db      	uxtb	r3, r3
    newCmd->IsSticky = IsSticky( cid );

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80126ce:	35f8      	adds	r5, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 80126d0:	7323      	strb	r3, [r4, #12]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80126d2:	682b      	ldr	r3, [r5, #0]
 80126d4:	3301      	adds	r3, #1
 80126d6:	199e      	adds	r6, r3, r6
 80126d8:	602e      	str	r6, [r5, #0]

    NvmCtxCallback( );
 80126da:	f7ff ff73 	bl	80125c4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80126de:	2000      	movs	r0, #0
}
 80126e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80126e2:	46c0      	nop			; (mov r8, r8)
 80126e4:	2000179c 	.word	0x2000179c

080126e8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80126e8:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80126ea:	2301      	movs	r3, #1
    if( macCmd == NULL )
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d025      	beq.n	801273c <LoRaMacCommandsRemoveCmd+0x54>
    curElement = list->First;
 80126f0:	4a13      	ldr	r2, [pc, #76]	; (8012740 <LoRaMacCommandsRemoveCmd+0x58>)
 80126f2:	6813      	ldr	r3, [r2, #0]
    if( element != curElement)
 80126f4:	4298      	cmp	r0, r3
 80126f6:	d104      	bne.n	8012702 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 80126f8:	6803      	ldr	r3, [r0, #0]
 80126fa:	6013      	str	r3, [r2, #0]
        curElement = NULL;
 80126fc:	2300      	movs	r3, #0
 80126fe:	e005      	b.n	801270c <LoRaMacCommandsRemoveCmd+0x24>
        while(curElement && (curElement->Next != element))
 8012700:	000b      	movs	r3, r1
 8012702:	2b00      	cmp	r3, #0
 8012704:	d002      	beq.n	801270c <LoRaMacCommandsRemoveCmd+0x24>
 8012706:	6819      	ldr	r1, [r3, #0]
 8012708:	4288      	cmp	r0, r1
 801270a:	d1f9      	bne.n	8012700 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 801270c:	6851      	ldr	r1, [r2, #4]
 801270e:	4288      	cmp	r0, r1
 8012710:	d100      	bne.n	8012714 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 8012712:	6053      	str	r3, [r2, #4]
    if( PrevElement )
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 8012718:	6801      	ldr	r1, [r0, #0]
 801271a:	6019      	str	r1, [r3, #0]
    element->Next = 0;
 801271c:	2400      	movs	r4, #0
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801271e:	32f8      	adds	r2, #248	; 0xf8
 8012720:	6813      	ldr	r3, [r2, #0]
 8012722:	6881      	ldr	r1, [r0, #8]
 8012724:	3b01      	subs	r3, #1
 8012726:	1a5b      	subs	r3, r3, r1
    element->Next = 0;
 8012728:	6004      	str	r4, [r0, #0]
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801272a:	6013      	str	r3, [r2, #0]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 801272c:	f7ff ff74 	bl	8012618 <freeMacCommandSlot>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012730:	2305      	movs	r3, #5
    if( freeMacCommandSlot( macCmd ) == false )
 8012732:	42a0      	cmp	r0, r4
 8012734:	d002      	beq.n	801273c <LoRaMacCommandsRemoveCmd+0x54>
    }

    NvmCtxCallback( );
 8012736:	f7ff ff45 	bl	80125c4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801273a:	0023      	movs	r3, r4
}
 801273c:	0018      	movs	r0, r3
 801273e:	bd10      	pop	{r4, pc}
 8012740:	2000179c 	.word	0x2000179c

08012744 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8012744:	4b05      	ldr	r3, [pc, #20]	; (801275c <LoRaMacCommandsGetCmd+0x18>)

    // Loop through all elements until we find the element with the given CID
    while(curElement && ( curElement->CID != cid ) )
    {
        curElement = curElement->Next;
 8012746:	681b      	ldr	r3, [r3, #0]
    while(curElement && ( curElement->CID != cid ) )
 8012748:	2b00      	cmp	r3, #0
 801274a:	d005      	beq.n	8012758 <LoRaMacCommandsGetCmd+0x14>
 801274c:	791a      	ldrb	r2, [r3, #4]
 801274e:	4282      	cmp	r2, r0
 8012750:	d1f9      	bne.n	8012746 <LoRaMacCommandsGetCmd+0x2>
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    *macCmd = curElement;
 8012752:	600b      	str	r3, [r1, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8012754:	2000      	movs	r0, #0
 8012756:	e000      	b.n	801275a <LoRaMacCommandsGetCmd+0x16>
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012758:	2003      	movs	r0, #3
}
 801275a:	4770      	bx	lr
 801275c:	2000179c 	.word	0x2000179c

08012760 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8012760:	4b08      	ldr	r3, [pc, #32]	; (8012784 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 8012762:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 8012764:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement )
 8012766:	2c00      	cmp	r4, #0
 8012768:	d103      	bne.n	8012772 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 801276a:	f7ff ff2b 	bl	80125c4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 801276e:	0020      	movs	r0, r4
 8012770:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 8012772:	7b23      	ldrb	r3, [r4, #12]
 8012774:	6825      	ldr	r5, [r4, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d102      	bne.n	8012780 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 801277a:	0020      	movs	r0, r4
 801277c:	f7ff ffb4 	bl	80126e8 <LoRaMacCommandsRemoveCmd>
            curElement = curElement->Next;
 8012780:	002c      	movs	r4, r5
 8012782:	e7f0      	b.n	8012766 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 8012784:	2000179c 	.word	0x2000179c

08012788 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012788:	b513      	push	{r0, r1, r4, lr}
 801278a:	2400      	movs	r4, #0
    MacCommand_t* macCmd;

    for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
    {
        if( LoRaMacCommandsGetCmd( CIDsStickyAnsCmds[i], &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
 801278c:	4b08      	ldr	r3, [pc, #32]	; (80127b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 801278e:	a901      	add	r1, sp, #4
 8012790:	5ce0      	ldrb	r0, [r4, r3]
 8012792:	f7ff ffd7 	bl	8012744 <LoRaMacCommandsGetCmd>
 8012796:	2800      	cmp	r0, #0
 8012798:	d102      	bne.n	80127a0 <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
        {
            LoRaMacCommandsRemoveCmd( macCmd );
 801279a:	9801      	ldr	r0, [sp, #4]
 801279c:	f7ff ffa4 	bl	80126e8 <LoRaMacCommandsRemoveCmd>
 80127a0:	3401      	adds	r4, #1
    for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 80127a2:	2c03      	cmp	r4, #3
 80127a4:	d1f2      	bne.n	801278c <LoRaMacCommandsRemoveStickyAnsCmds+0x4>
        } else {
        }
    }

    NvmCtxCallback( );
 80127a6:	f7ff ff0d 	bl	80125c4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 80127aa:	2000      	movs	r0, #0
 80127ac:	bd16      	pop	{r1, r2, r4, pc}
 80127ae:	46c0      	nop			; (mov r8, r8)
 80127b0:	08018609 	.word	0x08018609

080127b4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80127b4:	2301      	movs	r3, #1
    if( size == NULL )
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d004      	beq.n	80127c4 <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80127ba:	4b03      	ldr	r3, [pc, #12]	; (80127c8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 80127bc:	33f8      	adds	r3, #248	; 0xf8
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80127c2:	2300      	movs	r3, #0

}
 80127c4:	0018      	movs	r0, r3
 80127c6:	4770      	bx	lr
 80127c8:	2000179c 	.word	0x2000179c

080127cc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
 80127cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ce:	0006      	movs	r6, r0
 80127d0:	0015      	movs	r5, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80127d2:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	d007      	beq.n	80127e8 <LoRaMacCommandsSerializeCmds+0x1c>
 80127d8:	2900      	cmp	r1, #0
 80127da:	d005      	beq.n	80127e8 <LoRaMacCommandsSerializeCmds+0x1c>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80127dc:	4b0c      	ldr	r3, [pc, #48]	; (8012810 <LoRaMacCommandsSerializeCmds+0x44>)
 80127de:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 80127e0:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement )
 80127e2:	2c00      	cmp	r4, #0
 80127e4:	d101      	bne.n	80127ea <LoRaMacCommandsSerializeCmds+0x1e>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80127e6:	2000      	movs	r0, #0
}
 80127e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80127ea:	68a2      	ldr	r2, [r4, #8]
 80127ec:	1af1      	subs	r1, r6, r3
 80127ee:	3201      	adds	r2, #1
 80127f0:	4291      	cmp	r1, r2
 80127f2:	d3f8      	bcc.n	80127e6 <LoRaMacCommandsSerializeCmds+0x1a>
            buffer[itr++] = curElement->CID;
 80127f4:	7922      	ldrb	r2, [r4, #4]
 80127f6:	1c5f      	adds	r7, r3, #1
 80127f8:	54ea      	strb	r2, [r5, r3]
 80127fa:	b2ff      	uxtb	r7, r7
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80127fc:	8922      	ldrh	r2, [r4, #8]
 80127fe:	1d61      	adds	r1, r4, #5
 8012800:	19e8      	adds	r0, r5, r7
 8012802:	f001 fc86 	bl	8014112 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8012806:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 8012808:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 801280a:	18ff      	adds	r7, r7, r3
 801280c:	b2fb      	uxtb	r3, r7
 801280e:	e7e8      	b.n	80127e2 <LoRaMacCommandsSerializeCmds+0x16>
 8012810:	2000179c 	.word	0x2000179c

08012814 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012814:	2301      	movs	r3, #1
    if( cmdsPending == NULL )
 8012816:	2800      	cmp	r0, #0
 8012818:	d00b      	beq.n	8012832 <LoRaMacCommandsStickyCmdsPending+0x1e>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;

    *cmdsPending = false;
 801281a:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 801281c:	4b07      	ldr	r3, [pc, #28]	; (801283c <LoRaMacCommandsStickyCmdsPending+0x28>)
 801281e:	681b      	ldr	r3, [r3, #0]
    *cmdsPending = false;
 8012820:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement )
 8012822:	2b00      	cmp	r3, #0
 8012824:	d005      	beq.n	8012832 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 8012826:	7b1a      	ldrb	r2, [r3, #12]
 8012828:	2a00      	cmp	r2, #0
 801282a:	d004      	beq.n	8012836 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801282c:	2301      	movs	r3, #1
 801282e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012830:	2300      	movs	r3, #0
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8012832:	0018      	movs	r0, r3
 8012834:	4770      	bx	lr
        curElement = curElement->Next;
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	e7f3      	b.n	8012822 <LoRaMacCommandsStickyCmdsPending+0xe>
 801283a:	46c0      	nop			; (mov r8, r8)
 801283c:	2000179c 	.word	0x2000179c

08012840 <LoRaMacConfirmQueueInit>:

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8012840:	2300      	movs	r3, #0
{
 8012842:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8012844:	4c08      	ldr	r4, [pc, #32]	; (8012868 <LoRaMacConfirmQueueInit+0x28>)
{
 8012846:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 8012848:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 801284a:	4808      	ldr	r0, [pc, #32]	; (801286c <LoRaMacConfirmQueueInit+0x2c>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 801284c:	2214      	movs	r2, #20
 801284e:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8012850:	7503      	strb	r3, [r0, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8012852:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8012854:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8012856:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8012858:	f001 fc70 	bl	801413c <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
 8012860:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012862:	7553      	strb	r3, [r2, #21]
}
 8012864:	bd70      	pop	{r4, r5, r6, pc}
 8012866:	46c0      	nop			; (mov r8, r8)
 8012868:	20001898 	.word	0x20001898
 801286c:	200018ac 	.word	0x200018ac

08012870 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8012870:	b510      	push	{r4, lr}
 8012872:	1e01      	subs	r1, r0, #0
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8012874:	d004      	beq.n	8012880 <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8012876:	4803      	ldr	r0, [pc, #12]	; (8012884 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 8012878:	2216      	movs	r2, #22
 801287a:	f001 fc4a 	bl	8014112 <memcpy1>
        return true;
 801287e:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 8012880:	bd10      	pop	{r4, pc}
 8012882:	46c0      	nop			; (mov r8, r8)
 8012884:	200018ac 	.word	0x200018ac

08012888 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8012888:	2316      	movs	r3, #22
 801288a:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 801288c:	4800      	ldr	r0, [pc, #0]	; (8012890 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 801288e:	4770      	bx	lr
 8012890:	200018ac 	.word	0x200018ac

08012894 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012894:	b530      	push	{r4, r5, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012896:	4c0d      	ldr	r4, [pc, #52]	; (80128cc <LoRaMacConfirmQueueAdd+0x38>)
    {
        // Protect the buffer against overwrites
        return false;
 8012898:	2100      	movs	r1, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801289a:	6922      	ldr	r2, [r4, #16]
 801289c:	7d13      	ldrb	r3, [r2, #20]
 801289e:	2b04      	cmp	r3, #4
 80128a0:	d812      	bhi.n	80128c8 <LoRaMacConfirmQueueAdd+0x34>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80128a2:	7805      	ldrb	r5, [r0, #0]
 80128a4:	68a3      	ldr	r3, [r4, #8]
 80128a6:	701d      	strb	r5, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80128a8:	7845      	ldrb	r5, [r0, #1]
 80128aa:	705d      	strb	r5, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80128ac:	78c0      	ldrb	r0, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80128ae:	7099      	strb	r1, [r3, #2]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80128b0:	70d8      	strb	r0, [r3, #3]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80128b2:	7d11      	ldrb	r1, [r2, #20]
        bufferPointer++;
 80128b4:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80128b6:	3101      	adds	r1, #1
 80128b8:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80128ba:	0011      	movs	r1, r2
 80128bc:	3110      	adds	r1, #16
 80128be:	428b      	cmp	r3, r1
 80128c0:	d100      	bne.n	80128c4 <LoRaMacConfirmQueueAdd+0x30>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80128c2:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 80128c4:	2101      	movs	r1, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80128c6:	60a0      	str	r0, [r4, #8]
}
 80128c8:	0008      	movs	r0, r1
 80128ca:	bd30      	pop	{r4, r5, pc}
 80128cc:	20001898 	.word	0x20001898

080128d0 <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    {
        return false;
 80128d0:	2000      	movs	r0, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 80128d2:	4a08      	ldr	r2, [pc, #32]	; (80128f4 <LoRaMacConfirmQueueRemoveLast+0x24>)
 80128d4:	6911      	ldr	r1, [r2, #16]
 80128d6:	7d0b      	ldrb	r3, [r1, #20]
 80128d8:	4283      	cmp	r3, r0
 80128da:	d009      	beq.n	80128f0 <LoRaMacConfirmQueueRemoveLast+0x20>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80128dc:	3b01      	subs	r3, #1
 80128de:	750b      	strb	r3, [r1, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferEnd = DecreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80128e0:	6893      	ldr	r3, [r2, #8]
        bufferPointer--;
 80128e2:	1f18      	subs	r0, r3, #4
    if( bufferPointer == ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue )
 80128e4:	428b      	cmp	r3, r1
 80128e6:	d101      	bne.n	80128ec <LoRaMacConfirmQueueRemoveLast+0x1c>
        bufferPointer = &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
 80128e8:	3310      	adds	r3, #16
 80128ea:	0018      	movs	r0, r3
    ConfirmQueueCtx.BufferEnd = DecreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80128ec:	6090      	str	r0, [r2, #8]

    return true;
 80128ee:	2001      	movs	r0, #1
}
 80128f0:	4770      	bx	lr
 80128f2:	46c0      	nop			; (mov r8, r8)
 80128f4:	20001898 	.word	0x20001898

080128f8 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    {
        return false;
 80128f8:	2000      	movs	r0, #0
{
 80128fa:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 80128fc:	4908      	ldr	r1, [pc, #32]	; (8012920 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 80128fe:	690b      	ldr	r3, [r1, #16]
 8012900:	7d1a      	ldrb	r2, [r3, #20]
 8012902:	4282      	cmp	r2, r0
 8012904:	d00a      	beq.n	801291c <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8012906:	3a01      	subs	r2, #1
 8012908:	751a      	strb	r2, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801290a:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801290c:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801290e:	3210      	adds	r2, #16
        bufferPointer++;
 8012910:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012912:	4294      	cmp	r4, r2
 8012914:	d100      	bne.n	8012918 <LoRaMacConfirmQueueRemoveFirst+0x20>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8012916:	0018      	movs	r0, r3
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012918:	6048      	str	r0, [r1, #4]

    return true;
 801291a:	2001      	movs	r0, #1
}
 801291c:	bd10      	pop	{r4, pc}
 801291e:	46c0      	nop			; (mov r8, r8)
 8012920:	20001898 	.word	0x20001898

08012924 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012924:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8012926:	4c0d      	ldr	r4, [pc, #52]	; (801295c <LoRaMacConfirmQueueSetStatus+0x38>)
 8012928:	6922      	ldr	r2, [r4, #16]
 801292a:	7d13      	ldrb	r3, [r2, #20]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d005      	beq.n	801293c <LoRaMacConfirmQueueSetStatus+0x18>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012930:	0015      	movs	r5, r2
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012932:	6863      	ldr	r3, [r4, #4]
 8012934:	68a4      	ldr	r4, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012936:	3510      	adds	r5, #16
    while( element != bufferEnd )
 8012938:	429c      	cmp	r4, r3
 801293a:	d100      	bne.n	801293e <LoRaMacConfirmQueueSetStatus+0x1a>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 801293c:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 801293e:	781e      	ldrb	r6, [r3, #0]
 8012940:	428e      	cmp	r6, r1
 8012942:	d005      	beq.n	8012950 <LoRaMacConfirmQueueSetStatus+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012944:	42ab      	cmp	r3, r5
 8012946:	d101      	bne.n	801294c <LoRaMacConfirmQueueSetStatus+0x28>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8012948:	0013      	movs	r3, r2
 801294a:	e7f5      	b.n	8012938 <LoRaMacConfirmQueueSetStatus+0x14>
        bufferPointer++;
 801294c:	3304      	adds	r3, #4
 801294e:	e7f3      	b.n	8012938 <LoRaMacConfirmQueueSetStatus+0x14>
        if( element != NULL )
 8012950:	2b00      	cmp	r3, #0
 8012952:	d0f3      	beq.n	801293c <LoRaMacConfirmQueueSetStatus+0x18>
            element->ReadyToHandle = true;
 8012954:	2201      	movs	r2, #1
            element->Status = status;
 8012956:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 8012958:	709a      	strb	r2, [r3, #2]
}
 801295a:	e7ef      	b.n	801293c <LoRaMacConfirmQueueSetStatus+0x18>
 801295c:	20001898 	.word	0x20001898

08012960 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012960:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8012962:	4c0e      	ldr	r4, [pc, #56]	; (801299c <LoRaMacConfirmQueueGetStatus+0x3c>)
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012964:	2201      	movs	r2, #1
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8012966:	6921      	ldr	r1, [r4, #16]
 8012968:	7d0b      	ldrb	r3, [r1, #20]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d006      	beq.n	801297c <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801296e:	6863      	ldr	r3, [r4, #4]
 8012970:	68a2      	ldr	r2, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012972:	000c      	movs	r4, r1
 8012974:	3410      	adds	r4, #16
    while( element != bufferEnd )
 8012976:	429a      	cmp	r2, r3
 8012978:	d102      	bne.n	8012980 <LoRaMacConfirmQueueGetStatus+0x20>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801297a:	2201      	movs	r2, #1
}
 801297c:	0010      	movs	r0, r2
 801297e:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 8012980:	781d      	ldrb	r5, [r3, #0]
 8012982:	4285      	cmp	r5, r0
 8012984:	d005      	beq.n	8012992 <LoRaMacConfirmQueueGetStatus+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012986:	42a3      	cmp	r3, r4
 8012988:	d101      	bne.n	801298e <LoRaMacConfirmQueueGetStatus+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801298a:	000b      	movs	r3, r1
 801298c:	e7f3      	b.n	8012976 <LoRaMacConfirmQueueGetStatus+0x16>
        bufferPointer++;
 801298e:	3304      	adds	r3, #4
 8012990:	e7f1      	b.n	8012976 <LoRaMacConfirmQueueGetStatus+0x16>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012992:	2201      	movs	r2, #1
        if( element != NULL )
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0f1      	beq.n	801297c <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 8012998:	785a      	ldrb	r2, [r3, #1]
 801299a:	e7ef      	b.n	801297c <LoRaMacConfirmQueueGetStatus+0x1c>
 801299c:	20001898 	.word	0x20001898

080129a0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80129a0:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80129a2:	490c      	ldr	r1, [pc, #48]	; (80129d4 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80129a4:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80129a6:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80129a8:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80129aa:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80129ac:	2c00      	cmp	r4, #0
 80129ae:	d00d      	beq.n	80129cc <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80129b0:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 80129b2:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 80129b4:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80129b6:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 80129b8:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 80129ba:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 80129bc:	2e00      	cmp	r6, #0
 80129be:	d100      	bne.n	80129c2 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 80129c0:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80129c2:	42a3      	cmp	r3, r4
 80129c4:	d103      	bne.n	80129ce <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80129c6:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 80129c8:	4299      	cmp	r1, r3
 80129ca:	d1f5      	bne.n	80129b8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 80129cc:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 80129ce:	3304      	adds	r3, #4
 80129d0:	e7fa      	b.n	80129c8 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 80129d2:	46c0      	nop			; (mov r8, r8)
 80129d4:	20001898 	.word	0x20001898

080129d8 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 80129d8:	4b01      	ldr	r3, [pc, #4]	; (80129e0 <LoRaMacConfirmQueueGetStatusCmn+0x8>)
 80129da:	691b      	ldr	r3, [r3, #16]
 80129dc:	7d58      	ldrb	r0, [r3, #21]
}
 80129de:	4770      	bx	lr
 80129e0:	20001898 	.word	0x20001898

080129e4 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80129e4:	4a0b      	ldr	r2, [pc, #44]	; (8012a14 <LoRaMacConfirmQueueIsCmdActive+0x30>)
{
 80129e6:	b530      	push	{r4, r5, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80129e8:	6853      	ldr	r3, [r2, #4]
 80129ea:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80129ec:	6912      	ldr	r2, [r2, #16]
 80129ee:	0014      	movs	r4, r2
 80129f0:	3410      	adds	r4, #16
    while( element != bufferEnd )
 80129f2:	4299      	cmp	r1, r3
 80129f4:	d101      	bne.n	80129fa <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 80129f6:	2000      	movs	r0, #0
}
 80129f8:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 80129fa:	781d      	ldrb	r5, [r3, #0]
 80129fc:	4285      	cmp	r5, r0
 80129fe:	d005      	beq.n	8012a0c <LoRaMacConfirmQueueIsCmdActive+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012a00:	42a3      	cmp	r3, r4
 8012a02:	d001      	beq.n	8012a08 <LoRaMacConfirmQueueIsCmdActive+0x24>
        bufferPointer++;
 8012a04:	3304      	adds	r3, #4
 8012a06:	e7f4      	b.n	80129f2 <LoRaMacConfirmQueueIsCmdActive+0xe>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8012a08:	0013      	movs	r3, r2
 8012a0a:	e7f2      	b.n	80129f2 <LoRaMacConfirmQueueIsCmdActive+0xe>
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012a0c:	1e58      	subs	r0, r3, #1
 8012a0e:	4183      	sbcs	r3, r0
 8012a10:	b2d8      	uxtb	r0, r3
 8012a12:	e7f1      	b.n	80129f8 <LoRaMacConfirmQueueIsCmdActive+0x14>
 8012a14:	20001898 	.word	0x20001898

08012a18 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a1a:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012a1c:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8012a1e:	4e13      	ldr	r6, [pc, #76]	; (8012a6c <LoRaMacConfirmQueueHandleCb+0x54>)
{
 8012a20:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8012a22:	6933      	ldr	r3, [r6, #16]
 8012a24:	7d1b      	ldrb	r3, [r3, #20]
 8012a26:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 8012a28:	9b01      	ldr	r3, [sp, #4]
 8012a2a:	429c      	cmp	r4, r3
 8012a2c:	d101      	bne.n	8012a32 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8012a2e:	b005      	add	sp, #20
 8012a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012a32:	6873      	ldr	r3, [r6, #4]
 8012a34:	7818      	ldrb	r0, [r3, #0]
 8012a36:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012a38:	7859      	ldrb	r1, [r3, #1]
 8012a3a:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012a3c:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 8012a3e:	2f00      	cmp	r7, #0
 8012a40:	d00d      	beq.n	8012a5e <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012a42:	6833      	ldr	r3, [r6, #0]
 8012a44:	0028      	movs	r0, r5
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 8012a4a:	f7ff ff55 	bl	80128f8 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 8012a4e:	2f00      	cmp	r7, #0
 8012a50:	d102      	bne.n	8012a58 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012a52:	a803      	add	r0, sp, #12
 8012a54:	f7ff ff1e 	bl	8012894 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012a58:	3401      	adds	r4, #1
 8012a5a:	b2e4      	uxtb	r4, r4
 8012a5c:	e7e4      	b.n	8012a28 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012a5e:	aa03      	add	r2, sp, #12
 8012a60:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012a62:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012a64:	78db      	ldrb	r3, [r3, #3]
 8012a66:	70d3      	strb	r3, [r2, #3]
 8012a68:	e7ef      	b.n	8012a4a <LoRaMacConfirmQueueHandleCb+0x32>
 8012a6a:	46c0      	nop			; (mov r8, r8)
 8012a6c:	20001898 	.word	0x20001898

08012a70 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8012a70:	4b01      	ldr	r3, [pc, #4]	; (8012a78 <LoRaMacConfirmQueueGetCnt+0x8>)
 8012a72:	691b      	ldr	r3, [r3, #16]
 8012a74:	7d18      	ldrb	r0, [r3, #20]
}
 8012a76:	4770      	bx	lr
 8012a78:	20001898 	.word	0x20001898

08012a7c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012a7c:	2004      	movs	r0, #4
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012a7e:	4b03      	ldr	r3, [pc, #12]	; (8012a8c <LoRaMacConfirmQueueIsFull+0x10>)
 8012a80:	691b      	ldr	r3, [r3, #16]
 8012a82:	7d1b      	ldrb	r3, [r3, #20]
 8012a84:	4298      	cmp	r0, r3
 8012a86:	4180      	sbcs	r0, r0
 8012a88:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 8012a8a:	4770      	bx	lr
 8012a8c:	20001898 	.word	0x20001898

08012a90 <NvmCtxChanged>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
    if( FCntHandlerNvmCtxChanged != NULL )
 8012a90:	4b03      	ldr	r3, [pc, #12]	; (8012aa0 <NvmCtxChanged+0x10>)
{
 8012a92:	b510      	push	{r4, lr}
    if( FCntHandlerNvmCtxChanged != NULL )
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d000      	beq.n	8012a9c <NvmCtxChanged+0xc>
    {
        FCntHandlerNvmCtxChanged( );
 8012a9a:	4798      	blx	r3
    }
}
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	46c0      	nop			; (mov r8, r8)
 8012aa0:	200018e4 	.word	0x200018e4

08012aa4 <LoRaMacFCntHandlerRestoreNvmCtx>:

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
 8012aa4:	0001      	movs	r1, r0
 8012aa6:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
        return LORAMAC_FCNT_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012aa8:	2004      	movs	r0, #4
    if( fCntHandlerNvmCtx != NULL )
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	d004      	beq.n	8012ab8 <LoRaMacFCntHandlerRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
 8012aae:	4803      	ldr	r0, [pc, #12]	; (8012abc <LoRaMacFCntHandlerRestoreNvmCtx+0x18>)
 8012ab0:	2220      	movs	r2, #32
 8012ab2:	f001 fb2e 	bl	8014112 <memcpy1>
        return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012ab6:	2000      	movs	r0, #0
    }
}
 8012ab8:	bd10      	pop	{r4, pc}
 8012aba:	46c0      	nop			; (mov r8, r8)
 8012abc:	200018c4 	.word	0x200018c4

08012ac0 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
 8012ac0:	2320      	movs	r3, #32
 8012ac2:	6003      	str	r3, [r0, #0]
    return &FCntHandlerNvmCtx;
}
 8012ac4:	4800      	ldr	r0, [pc, #0]	; (8012ac8 <LoRaMacFCntHandlerGetNvmCtx+0x8>)
 8012ac6:	4770      	bx	lr
 8012ac8:	200018c4 	.word	0x200018c4

08012acc <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ace:	ac08      	add	r4, sp, #32
 8012ad0:	8824      	ldrh	r4, [r4, #0]
 8012ad2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012ad4:	9401      	str	r4, [sp, #4]
    int32_t fCntDiff = 0;

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012ad6:	2604      	movs	r6, #4
{
 8012ad8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012ada:	2a00      	cmp	r2, #0
 8012adc:	d041      	beq.n	8012b62 <LoRaMacGetFCntDown+0x96>
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	d03f      	beq.n	8012b62 <LoRaMacGetFCntDown+0x96>
 8012ae2:	2c00      	cmp	r4, #0
 8012ae4:	d03d      	beq.n	8012b62 <LoRaMacGetFCntDown+0x96>
 8012ae6:	021b      	lsls	r3, r3, #8
 8012ae8:	0e1b      	lsrs	r3, r3, #24
 8012aea:	b2df      	uxtb	r7, r3
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 8012aec:	3601      	adds	r6, #1
    switch( addrID )
 8012aee:	2804      	cmp	r0, #4
 8012af0:	d837      	bhi.n	8012b62 <LoRaMacGetFCntDown+0x96>
 8012af2:	4e21      	ldr	r6, [pc, #132]	; (8012b78 <LoRaMacGetFCntDown+0xac>)
 8012af4:	f7ee f842 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8012af8:	27272723 	.word	0x27272723
 8012afc:	03          	.byte	0x03
 8012afd:	00          	.byte	0x00
            if( lrWanVersion.Fields.Minor == 1 )
 8012afe:	2f01      	cmp	r7, #1
 8012b00:	d119      	bne.n	8012b36 <LoRaMacGetFCntDown+0x6a>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012b02:	2900      	cmp	r1, #0
 8012b04:	d001      	beq.n	8012b0a <LoRaMacGetFCntDown+0x3e>
 8012b06:	2903      	cmp	r1, #3
 8012b08:	d112      	bne.n	8012b30 <LoRaMacGetFCntDown+0x64>
                    *fCntID = A_FCNT_DOWN;
 8012b0a:	2302      	movs	r3, #2
 8012b0c:	702b      	strb	r3, [r5, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 8012b0e:	68b3      	ldr	r3, [r6, #8]
 8012b10:	89d2      	ldrh	r2, [r2, #14]
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 8012b12:	1c59      	adds	r1, r3, #1
 8012b14:	d11b      	bne.n	8012b4e <LoRaMacGetFCntDown+0x82>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012b16:	2600      	movs	r6, #0
            *currentDown = previousDown + fCntDiff + ( 0x10000 + ( previousDown & 0xFFFF0000 ) );
 8012b18:	6022      	str	r2, [r4, #0]
    if( lrWanVersion.Fields.Minor == 0 )
 8012b1a:	42b7      	cmp	r7, r6
 8012b1c:	d121      	bne.n	8012b62 <LoRaMacGetFCntDown+0x96>
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 8012b1e:	6822      	ldr	r2, [r4, #0]
 8012b20:	1ad3      	subs	r3, r2, r3
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 8012b22:	9a01      	ldr	r2, [sp, #4]
 8012b24:	17de      	asrs	r6, r3, #31
 8012b26:	0fd0      	lsrs	r0, r2, #31
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	4146      	adcs	r6, r0
 8012b2c:	0076      	lsls	r6, r6, #1
 8012b2e:	e018      	b.n	8012b62 <LoRaMacGetFCntDown+0x96>
                    *fCntID = N_FCNT_DOWN;
 8012b30:	702b      	strb	r3, [r5, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 8012b32:	6873      	ldr	r3, [r6, #4]
 8012b34:	e7ec      	b.n	8012b10 <LoRaMacGetFCntDown+0x44>
                *fCntID = FCNT_DOWN;
 8012b36:	2303      	movs	r3, #3
 8012b38:	702b      	strb	r3, [r5, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 8012b3a:	68f3      	ldr	r3, [r6, #12]
 8012b3c:	e7e8      	b.n	8012b10 <LoRaMacGetFCntDown+0x44>
            *fCntID = MC_FCNT_DOWN_0;
 8012b3e:	2304      	movs	r3, #4
 8012b40:	702b      	strb	r3, [r5, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 8012b42:	6933      	ldr	r3, [r6, #16]
            break;
 8012b44:	e7e4      	b.n	8012b10 <LoRaMacGetFCntDown+0x44>
            *fCntID = MC_FCNT_DOWN_3;
 8012b46:	2307      	movs	r3, #7
 8012b48:	702b      	strb	r3, [r5, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8012b4a:	69f3      	ldr	r3, [r6, #28]
            break;
 8012b4c:	e7e0      	b.n	8012b10 <LoRaMacGetFCntDown+0x44>
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 8012b4e:	b299      	uxth	r1, r3
 8012b50:	1a52      	subs	r2, r2, r1
        if( fCntDiff > 0 )
 8012b52:	2a00      	cmp	r2, #0
 8012b54:	dd01      	ble.n	8012b5a <LoRaMacGetFCntDown+0x8e>
            *currentDown = previousDown + fCntDiff;
 8012b56:	18d2      	adds	r2, r2, r3
 8012b58:	e7dd      	b.n	8012b16 <LoRaMacGetFCntDown+0x4a>
        else if( fCntDiff == 0 )
 8012b5a:	2a00      	cmp	r2, #0
 8012b5c:	d103      	bne.n	8012b66 <LoRaMacGetFCntDown+0x9a>
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 8012b5e:	2601      	movs	r6, #1
            *currentDown = previousDown;
 8012b60:	6023      	str	r3, [r4, #0]
}
 8012b62:	0030      	movs	r0, r6
 8012b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = previousDown + fCntDiff + ( 0x10000 + ( previousDown & 0xFFFF0000 ) );
 8012b66:	2080      	movs	r0, #128	; 0x80
 8012b68:	0c19      	lsrs	r1, r3, #16
 8012b6a:	0240      	lsls	r0, r0, #9
 8012b6c:	0409      	lsls	r1, r1, #16
 8012b6e:	1818      	adds	r0, r3, r0
 8012b70:	1809      	adds	r1, r1, r0
 8012b72:	188a      	adds	r2, r1, r2
 8012b74:	e7cf      	b.n	8012b16 <LoRaMacGetFCntDown+0x4a>
 8012b76:	46c0      	nop			; (mov r8, r8)
 8012b78:	200018c4 	.word	0x200018c4

08012b7c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012b7c:	b510      	push	{r4, lr}
            break;
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
            break;
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 8012b7e:	2305      	movs	r3, #5
    switch( fCntID )
 8012b80:	2807      	cmp	r0, #7
 8012b82:	d80a      	bhi.n	8012b9a <LoRaMacSetFCntDown+0x1e>
 8012b84:	f7ed fffa 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8012b88:	0e0b041d 	.word	0x0e0b041d
 8012b8c:	1a171411 	.word	0x1a171411
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 8012b90:	4b0d      	ldr	r3, [pc, #52]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012b92:	6059      	str	r1, [r3, #4]
    }

    NvmCtxChanged( );
 8012b94:	f7ff ff7c 	bl	8012a90 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	0018      	movs	r0, r3
 8012b9c:	bd10      	pop	{r4, pc}
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 8012b9e:	4b0a      	ldr	r3, [pc, #40]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012ba0:	6099      	str	r1, [r3, #8]
            break;
 8012ba2:	e7f7      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 8012ba4:	4b08      	ldr	r3, [pc, #32]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012ba6:	60d9      	str	r1, [r3, #12]
            break;
 8012ba8:	e7f4      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 8012baa:	4b07      	ldr	r3, [pc, #28]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012bac:	6119      	str	r1, [r3, #16]
            break;
 8012bae:	e7f1      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 8012bb0:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012bb2:	6159      	str	r1, [r3, #20]
            break;
 8012bb4:	e7ee      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 8012bb6:	4b04      	ldr	r3, [pc, #16]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012bb8:	6199      	str	r1, [r3, #24]
            break;
 8012bba:	e7eb      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 8012bbc:	4b02      	ldr	r3, [pc, #8]	; (8012bc8 <LoRaMacSetFCntDown+0x4c>)
 8012bbe:	61d9      	str	r1, [r3, #28]
            break;
 8012bc0:	e7e8      	b.n	8012b94 <LoRaMacSetFCntDown+0x18>
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 8012bc2:	2303      	movs	r3, #3
 8012bc4:	e7e9      	b.n	8012b9a <LoRaMacSetFCntDown+0x1e>
 8012bc6:	46c0      	nop			; (mov r8, r8)
 8012bc8:	200018c4 	.word	0x200018c4

08012bcc <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012bcc:	2304      	movs	r3, #4
    if( currentUp == NULL )
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d004      	beq.n	8012bdc <LoRaMacGetFCntUp+0x10>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 8012bd2:	4b03      	ldr	r3, [pc, #12]	; (8012be0 <LoRaMacGetFCntUp+0x14>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	6003      	str	r3, [r0, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	0018      	movs	r0, r3
 8012bde:	4770      	bx	lr
 8012be0:	200018c4 	.word	0x200018c4

08012be4 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 8012be4:	b510      	push	{r4, lr}
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 8012be6:	4b03      	ldr	r3, [pc, #12]	; (8012bf4 <LoRaMacSetFCntUp+0x10>)
 8012be8:	6018      	str	r0, [r3, #0]

    NvmCtxChanged( );
 8012bea:	f7ff ff51 	bl	8012a90 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}
 8012bee:	2000      	movs	r0, #0
 8012bf0:	bd10      	pop	{r4, pc}
 8012bf2:	46c0      	nop			; (mov r8, r8)
 8012bf4:	200018c4 	.word	0x200018c4

08012bf8 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012bf8:	2201      	movs	r2, #1
{
 8012bfa:	b510      	push	{r4, lr}
    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 8012bfc:	2400      	movs	r4, #0
 8012bfe:	4b07      	ldr	r3, [pc, #28]	; (8012c1c <LoRaMacResetFCnts+0x24>)
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012c00:	4252      	negs	r2, r2
    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 8012c02:	601c      	str	r4, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012c04:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012c06:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012c08:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8012c0a:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8012c0c:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8012c0e:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8012c10:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 8012c12:	f7ff ff3d 	bl	8012a90 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}
 8012c16:	0020      	movs	r0, r4
 8012c18:	bd10      	pop	{r4, pc}
 8012c1a:	46c0      	nop			; (mov r8, r8)
 8012c1c:	200018c4 	.word	0x200018c4

08012c20 <LoRaMacFCntHandlerInit>:
{
 8012c20:	b510      	push	{r4, lr}
 8012c22:	0004      	movs	r4, r0
    LoRaMacResetFCnts( );
 8012c24:	f7ff ffe8 	bl	8012bf8 <LoRaMacResetFCnts>
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 8012c28:	4b01      	ldr	r3, [pc, #4]	; (8012c30 <LoRaMacFCntHandlerInit+0x10>)
}
 8012c2a:	2000      	movs	r0, #0
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 8012c2c:	601c      	str	r4, [r3, #0]
}
 8012c2e:	bd10      	pop	{r4, pc}
 8012c30:	200018e4 	.word	0x200018e4

08012c34 <LoRaMacFCntHandlerSetMulticastReference>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012c34:	0002      	movs	r2, r0
    if( multicastList == NULL )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012c36:	2004      	movs	r0, #4
    if( multicastList == NULL )
 8012c38:	2a00      	cmp	r2, #0
 8012c3a:	d00c      	beq.n	8012c56 <LoRaMacFCntHandlerSetMulticastReference+0x22>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 8012c3c:	4b06      	ldr	r3, [pc, #24]	; (8012c58 <LoRaMacFCntHandlerSetMulticastReference+0x24>)
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012c3e:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 8012c40:	0019      	movs	r1, r3
 8012c42:	3110      	adds	r1, #16
 8012c44:	6091      	str	r1, [r2, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
 8012c46:	0019      	movs	r1, r3
 8012c48:	3114      	adds	r1, #20
 8012c4a:	6291      	str	r1, [r2, #40]	; 0x28
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 8012c4c:	0019      	movs	r1, r3
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8012c4e:	331c      	adds	r3, #28
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 8012c50:	3118      	adds	r1, #24
 8012c52:	6491      	str	r1, [r2, #72]	; 0x48
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8012c54:	6693      	str	r3, [r2, #104]	; 0x68
}
 8012c56:	4770      	bx	lr
 8012c58:	200018c4 	.word	0x200018c4

08012c5c <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012c60:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c62:	2c00      	cmp	r4, #0
 8012c64:	d040      	beq.n	8012ce8 <LoRaMacParserJoinAccept+0x8c>
 8012c66:	6821      	ldr	r1, [r4, #0]
 8012c68:	2900      	cmp	r1, #0
 8012c6a:	d03d      	beq.n	8012ce8 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012c6c:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012c6e:	1da0      	adds	r0, r4, #6
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012c70:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012c72:	3101      	adds	r1, #1
 8012c74:	2203      	movs	r2, #3
 8012c76:	f001 fa4c 	bl	8014112 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012c7a:	0020      	movs	r0, r4
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	2203      	movs	r2, #3
 8012c80:	1d19      	adds	r1, r3, #4
 8012c82:	3009      	adds	r0, #9
 8012c84:	f001 fa45 	bl	8014112 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012c88:	6821      	ldr	r1, [r4, #0]
 8012c8a:	79ca      	ldrb	r2, [r1, #7]
 8012c8c:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012c8e:	7a0b      	ldrb	r3, [r1, #8]
 8012c90:	021b      	lsls	r3, r3, #8
 8012c92:	431a      	orrs	r2, r3
 8012c94:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012c96:	7a4b      	ldrb	r3, [r1, #9]
 8012c98:	041b      	lsls	r3, r3, #16
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012c9e:	7a8a      	ldrb	r2, [r1, #10]
 8012ca0:	0612      	lsls	r2, r2, #24
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012ca6:	7acb      	ldrb	r3, [r1, #11]
 8012ca8:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012caa:	7b0b      	ldrb	r3, [r1, #12]
 8012cac:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8012cae:	7923      	ldrb	r3, [r4, #4]
 8012cb0:	2b21      	cmp	r3, #33	; 0x21
 8012cb2:	d11a      	bne.n	8012cea <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8012cb4:	0020      	movs	r0, r4
 8012cb6:	310d      	adds	r1, #13
 8012cb8:	2210      	movs	r2, #16
 8012cba:	3012      	adds	r0, #18
 8012cbc:	f001 fa29 	bl	8014112 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8012cc0:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012cc2:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012cc4:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012cc6:	5cc1      	ldrb	r1, [r0, r3]
 8012cc8:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012cca:	5c82      	ldrb	r2, [r0, r2]
 8012ccc:	0212      	lsls	r2, r2, #8
 8012cce:	4311      	orrs	r1, r2
 8012cd0:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012cd2:	1c9a      	adds	r2, r3, #2
 8012cd4:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012cd6:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012cd8:	0412      	lsls	r2, r2, #16
 8012cda:	430a      	orrs	r2, r1
 8012cdc:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012cde:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 8012ce0:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012ce2:	061b      	lsls	r3, r3, #24
 8012ce4:	431a      	orrs	r2, r3
 8012ce6:	6262      	str	r2, [r4, #36]	; 0x24
}
 8012ce8:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 8012cea:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012cec:	2b11      	cmp	r3, #17
 8012cee:	dcfb      	bgt.n	8012ce8 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012cf0:	230d      	movs	r3, #13
 8012cf2:	e7e6      	b.n	8012cc2 <LoRaMacParserJoinAccept+0x66>

08012cf4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012cf8:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012cfa:	2c00      	cmp	r4, #0
 8012cfc:	d054      	beq.n	8012da8 <LoRaMacParserData+0xb4>
 8012cfe:	6821      	ldr	r1, [r4, #0]
 8012d00:	2900      	cmp	r1, #0
 8012d02:	d051      	beq.n	8012da8 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012d04:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d06:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012d08:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012d0a:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d0c:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012d0e:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012d10:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012d12:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012d14:	021b      	lsls	r3, r3, #8
 8012d16:	431a      	orrs	r2, r3
 8012d18:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012d1a:	78cb      	ldrb	r3, [r1, #3]
 8012d1c:	041b      	lsls	r3, r3, #16
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012d22:	790a      	ldrb	r2, [r1, #4]
 8012d24:	0612      	lsls	r2, r2, #24
 8012d26:	4313      	orrs	r3, r2
 8012d28:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012d2a:	794b      	ldrb	r3, [r1, #5]
 8012d2c:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012d2e:	798b      	ldrb	r3, [r1, #6]
 8012d30:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012d32:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d34:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012d36:	0212      	lsls	r2, r2, #8
 8012d38:	4313      	orrs	r3, r2
    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
 8012d3a:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012d3c:	81e3      	strh	r3, [r4, #14]
    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
 8012d3e:	0712      	lsls	r2, r2, #28
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d40:	0f12      	lsrs	r2, r2, #28
 8012d42:	f001 f9e6 	bl	8014112 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d46:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 8012d48:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 8012d4a:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d4c:	0709      	lsls	r1, r1, #28
 8012d4e:	0f09      	lsrs	r1, r1, #28
 8012d50:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 8012d52:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 8012d54:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 8012d56:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012d58:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d5a:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012d5c:	1b93      	subs	r3, r2, r6
 8012d5e:	2b04      	cmp	r3, #4
 8012d60:	dd0c      	ble.n	8012d7c <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012d66:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012d68:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012d6a:	1a52      	subs	r2, r2, r1
 8012d6c:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012d6e:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012d70:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012d72:	1859      	adds	r1, r3, r1
 8012d74:	b292      	uxth	r2, r2
 8012d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012d78:	f001 f9cb 	bl	8014112 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8012d7c:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012d7e:	6822      	ldr	r2, [r4, #0]
 8012d80:	7923      	ldrb	r3, [r4, #4]
 8012d82:	18d3      	adds	r3, r2, r3
 8012d84:	1f1a      	subs	r2, r3, #4
 8012d86:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012d88:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012d8a:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012d8c:	7812      	ldrb	r2, [r2, #0]
 8012d8e:	0212      	lsls	r2, r2, #8
 8012d90:	4311      	orrs	r1, r2
 8012d92:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012d94:	1e9a      	subs	r2, r3, #2
 8012d96:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012d98:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012d9a:	0412      	lsls	r2, r2, #16
 8012d9c:	430a      	orrs	r2, r1
 8012d9e:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	061b      	lsls	r3, r3, #24
 8012da4:	431a      	orrs	r2, r3
 8012da6:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8012da8:	bd70      	pop	{r4, r5, r6, pc}

08012daa <RegionIsActive>:
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012daa:	3808      	subs	r0, #8
 8012dac:	4243      	negs	r3, r0
 8012dae:	4158      	adcs	r0, r3
        }
    }
}
 8012db0:	4770      	bx	lr

08012db2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012db2:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 8012db4:	2808      	cmp	r0, #8
 8012db6:	d105      	bne.n	8012dc4 <RegionGetPhyParam+0x12>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8012db8:	0008      	movs	r0, r1
 8012dba:	f000 fac9 	bl	8013350 <RegionUS915GetPhyParam>
 8012dbe:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 8012dc0:	9801      	ldr	r0, [sp, #4]
 8012dc2:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9301      	str	r3, [sp, #4]
 8012dc8:	e7fa      	b.n	8012dc0 <RegionGetPhyParam+0xe>

08012dca <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012dca:	b510      	push	{r4, lr}
    switch( region )
 8012dcc:	2808      	cmp	r0, #8
 8012dce:	d102      	bne.n	8012dd6 <RegionSetBandTxDone+0xc>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8012dd0:	0008      	movs	r0, r1
 8012dd2:	f000 fb41 	bl	8013458 <RegionUS915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 8012dd6:	bd10      	pop	{r4, pc}

08012dd8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012dd8:	b510      	push	{r4, lr}
    switch( region )
 8012dda:	2808      	cmp	r0, #8
 8012ddc:	d102      	bne.n	8012de4 <RegionInitDefaults+0xc>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8012dde:	0008      	movs	r0, r1
 8012de0:	f000 fb4c 	bl	801347c <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 8012de4:	bd10      	pop	{r4, pc}

08012de6 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012de6:	b510      	push	{r4, lr}
    switch( region )
 8012de8:	2808      	cmp	r0, #8
 8012dea:	d103      	bne.n	8012df4 <RegionGetNvmCtx+0xe>
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
 8012dec:	0008      	movs	r0, r1
 8012dee:	f000 fbe1 	bl	80135b4 <RegionUS915GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 8012df2:	bd10      	pop	{r4, pc}
           return 0;
 8012df4:	2000      	movs	r0, #0
 8012df6:	e7fc      	b.n	8012df2 <RegionGetNvmCtx+0xc>

08012df8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012df8:	b510      	push	{r4, lr}
 8012dfa:	000b      	movs	r3, r1
    switch( region )
 8012dfc:	2808      	cmp	r0, #8
 8012dfe:	d104      	bne.n	8012e0a <RegionVerify+0x12>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8012e00:	0011      	movs	r1, r2
 8012e02:	0018      	movs	r0, r3
 8012e04:	f000 fbde 	bl	80135c4 <RegionUS915Verify>
        default:
        {
            return false;
        }
    }
}
 8012e08:	bd10      	pop	{r4, pc}
            return false;
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	e7fc      	b.n	8012e08 <RegionVerify+0x10>

08012e0e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012e0e:	b510      	push	{r4, lr}
    switch( region )
 8012e10:	2808      	cmp	r0, #8
 8012e12:	d102      	bne.n	8012e1a <RegionApplyCFList+0xc>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8012e14:	0008      	movs	r0, r1
 8012e16:	f000 fbf9 	bl	801360c <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 8012e1a:	bd10      	pop	{r4, pc}

08012e1c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012e1c:	b510      	push	{r4, lr}
    switch( region )
 8012e1e:	2808      	cmp	r0, #8
 8012e20:	d103      	bne.n	8012e2a <RegionChanMaskSet+0xe>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8012e22:	0008      	movs	r0, r1
 8012e24:	f000 fc14 	bl	8013650 <RegionUS915ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 8012e28:	bd10      	pop	{r4, pc}
            return false;
 8012e2a:	2000      	movs	r0, #0
 8012e2c:	e7fc      	b.n	8012e28 <RegionChanMaskSet+0xc>

08012e2e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012e2e:	b510      	push	{r4, lr}
 8012e30:	0004      	movs	r4, r0
 8012e32:	0008      	movs	r0, r1
 8012e34:	0011      	movs	r1, r2
 8012e36:	001a      	movs	r2, r3
    switch( region )
 8012e38:	2c08      	cmp	r4, #8
 8012e3a:	d102      	bne.n	8012e42 <RegionComputeRxWindowParameters+0x14>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012e3c:	9b02      	ldr	r3, [sp, #8]
 8012e3e:	f000 fc3d 	bl	80136bc <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 8012e42:	bd10      	pop	{r4, pc}

08012e44 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012e44:	b510      	push	{r4, lr}
 8012e46:	000b      	movs	r3, r1
    switch( region )
 8012e48:	2808      	cmp	r0, #8
 8012e4a:	d104      	bne.n	8012e56 <RegionRxConfig+0x12>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8012e4c:	0011      	movs	r1, r2
 8012e4e:	0018      	movs	r0, r3
 8012e50:	f000 fc70 	bl	8013734 <RegionUS915RxConfig>
        default:
        {
            return false;
        }
    }
}
 8012e54:	bd10      	pop	{r4, pc}
            return false;
 8012e56:	2000      	movs	r0, #0
 8012e58:	e7fc      	b.n	8012e54 <RegionRxConfig+0x10>

08012e5a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012e5a:	b510      	push	{r4, lr}
 8012e5c:	0004      	movs	r4, r0
 8012e5e:	0008      	movs	r0, r1
 8012e60:	0011      	movs	r1, r2
    switch( region )
 8012e62:	2c08      	cmp	r4, #8
 8012e64:	d103      	bne.n	8012e6e <RegionTxConfig+0x14>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8012e66:	001a      	movs	r2, r3
 8012e68:	f000 fcc0 	bl	80137ec <RegionUS915TxConfig>
        default:
        {
            return false;
        }
    }
}
 8012e6c:	bd10      	pop	{r4, pc}
            return false;
 8012e6e:	2000      	movs	r0, #0
 8012e70:	e7fc      	b.n	8012e6c <RegionTxConfig+0x12>

08012e72 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012e72:	b513      	push	{r0, r1, r4, lr}
 8012e74:	0004      	movs	r4, r0
 8012e76:	0008      	movs	r0, r1
 8012e78:	0011      	movs	r1, r2
 8012e7a:	001a      	movs	r2, r3
    switch( region )
 8012e7c:	2c08      	cmp	r4, #8
 8012e7e:	d105      	bne.n	8012e8c <RegionLinkAdrReq+0x1a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8012e80:	9b05      	ldr	r3, [sp, #20]
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	9b04      	ldr	r3, [sp, #16]
 8012e86:	f000 fd49 	bl	801391c <RegionUS915LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 8012e8a:	bd16      	pop	{r1, r2, r4, pc}
            return 0;
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	e7fc      	b.n	8012e8a <RegionLinkAdrReq+0x18>

08012e90 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012e90:	b510      	push	{r4, lr}
    switch( region )
 8012e92:	2808      	cmp	r0, #8
 8012e94:	d103      	bne.n	8012e9e <RegionRxParamSetupReq+0xe>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8012e96:	0008      	movs	r0, r1
 8012e98:	f000 fe34 	bl	8013b04 <RegionUS915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 8012e9c:	bd10      	pop	{r4, pc}
            return 0;
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	e7fc      	b.n	8012e9c <RegionRxParamSetupReq+0xc>

08012ea2 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8012ea2:	b510      	push	{r4, lr}
    switch( region )
 8012ea4:	2808      	cmp	r0, #8
 8012ea6:	d103      	bne.n	8012eb0 <RegionNewChannelReq+0xe>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8012ea8:	0008      	movs	r0, r1
 8012eaa:	f000 fe6d 	bl	8013b88 <RegionUS915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 8012eae:	bd10      	pop	{r4, pc}
            return 0;
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	e7fc      	b.n	8012eae <RegionNewChannelReq+0xc>

08012eb4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8012eb4:	b510      	push	{r4, lr}
    switch( region )
 8012eb6:	2808      	cmp	r0, #8
 8012eb8:	d103      	bne.n	8012ec2 <RegionTxParamSetupReq+0xe>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8012eba:	0008      	movs	r0, r1
 8012ebc:	f000 fe66 	bl	8013b8c <RegionUS915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 8012ec0:	bd10      	pop	{r4, pc}
            return 0;
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	e7fc      	b.n	8012ec0 <RegionTxParamSetupReq+0xc>

08012ec6 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8012ec6:	b510      	push	{r4, lr}
    switch( region )
 8012ec8:	2808      	cmp	r0, #8
 8012eca:	d103      	bne.n	8012ed4 <RegionDlChannelReq+0xe>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8012ecc:	0008      	movs	r0, r1
 8012ece:	f000 fe60 	bl	8013b92 <RegionUS915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 8012ed2:	bd10      	pop	{r4, pc}
            return 0;
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	e7fc      	b.n	8012ed2 <RegionDlChannelReq+0xc>

08012ed8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr )
{
 8012ed8:	b510      	push	{r4, lr}
    switch( region )
 8012eda:	2808      	cmp	r0, #8
 8012edc:	d103      	bne.n	8012ee6 <RegionAlternateDr+0xe>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8012ede:	0008      	movs	r0, r1
 8012ee0:	f000 fe5a 	bl	8013b98 <RegionUS915AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 8012ee4:	bd10      	pop	{r4, pc}
            return 0;
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	e7fc      	b.n	8012ee4 <RegionAlternateDr+0xc>

08012eea <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8012eea:	b510      	push	{r4, lr}
    switch( region )
 8012eec:	2808      	cmp	r0, #8
 8012eee:	d102      	bne.n	8012ef6 <RegionCalcBackOff+0xc>
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
        KR920_CALC_BACKOFF( );
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
 8012ef0:	0008      	movs	r0, r1
 8012ef2:	f000 fe65 	bl	8013bc0 <RegionUS915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 8012ef6:	bd10      	pop	{r4, pc}

08012ef8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012ef8:	b510      	push	{r4, lr}
 8012efa:	0004      	movs	r4, r0
 8012efc:	0008      	movs	r0, r1
 8012efe:	0011      	movs	r1, r2
 8012f00:	001a      	movs	r2, r3
    switch( region )
 8012f02:	2c08      	cmp	r4, #8
 8012f04:	d103      	bne.n	8012f0e <RegionNextChannel+0x16>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8012f06:	9b02      	ldr	r3, [sp, #8]
 8012f08:	f000 fe76 	bl	8013bf8 <RegionUS915NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8012f0c:	bd10      	pop	{r4, pc}
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012f0e:	200a      	movs	r0, #10
 8012f10:	e7fc      	b.n	8012f0c <RegionNextChannel+0x14>

08012f12 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8012f12:	b510      	push	{r4, lr}
    switch( region )
 8012f14:	2808      	cmp	r0, #8
 8012f16:	d102      	bne.n	8012f1e <RegionSetContinuousWave+0xc>
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
 8012f18:	0008      	movs	r0, r1
 8012f1a:	f000 ff6b 	bl	8013df4 <RegionUS915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 8012f1e:	bd10      	pop	{r4, pc}

08012f20 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012f20:	b510      	push	{r4, lr}
 8012f22:	0004      	movs	r4, r0
 8012f24:	0008      	movs	r0, r1
 8012f26:	0011      	movs	r1, r2
    switch( region )
 8012f28:	2c08      	cmp	r4, #8
 8012f2a:	d103      	bne.n	8012f34 <RegionApplyDrOffset+0x14>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8012f2c:	001a      	movs	r2, r3
 8012f2e:	f000 ffa3 	bl	8013e78 <RegionUS915ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 8012f32:	bd10      	pop	{r4, pc}
            return dr;
 8012f34:	b2d0      	uxtb	r0, r2
 8012f36:	e7fc      	b.n	8012f32 <RegionApplyDrOffset+0x12>

08012f38 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 8012f38:	4a06      	ldr	r2, [pc, #24]	; (8012f54 <RegionCommonGetJoinDc+0x1c>)
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8012f3a:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime < 3600000 )
 8012f3c:	4290      	cmp	r0, r2
 8012f3e:	d903      	bls.n	8012f48 <RegionCommonGetJoinDc+0x10>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8012f40:	4b05      	ldr	r3, [pc, #20]	; (8012f58 <RegionCommonGetJoinDc+0x20>)
 8012f42:	4298      	cmp	r0, r3
 8012f44:	d902      	bls.n	8012f4c <RegionCommonGetJoinDc+0x14>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8012f46:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <RegionCommonGetJoinDc+0x24>)
    }
    return dutyCycle;
}
 8012f48:	0018      	movs	r0, r3
 8012f4a:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_10_HOURS;
 8012f4c:	23fa      	movs	r3, #250	; 0xfa
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	e7fa      	b.n	8012f48 <RegionCommonGetJoinDc+0x10>
 8012f52:	46c0      	nop			; (mov r8, r8)
 8012f54:	0036ee7f 	.word	0x0036ee7f
 8012f58:	025c3f7f 	.word	0x025c3f7f
 8012f5c:	00002710 	.word	0x00002710

08012f60 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8012f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f62:	2500      	movs	r5, #0
 8012f64:	ac08      	add	r4, sp, #32
 8012f66:	9101      	str	r1, [sp, #4]
 8012f68:	5765      	ldrsb	r5, [r4, r5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 8012f6a:	2400      	movs	r4, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	db2a      	blt.n	8012fc6 <RegionCommonChanVerifyDr+0x66>
 8012f70:	42aa      	cmp	r2, r5
 8012f72:	dc28      	bgt.n	8012fc6 <RegionCommonChanVerifyDr+0x66>
 8012f74:	0023      	movs	r3, r4
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012f76:	340f      	adds	r4, #15
 8012f78:	46a4      	mov	ip, r4
 8012f7a:	011f      	lsls	r7, r3, #4
 8012f7c:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012f7e:	42b8      	cmp	r0, r7
 8012f80:	d923      	bls.n	8012fca <RegionCommonChanVerifyDr+0x6a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012f82:	2500      	movs	r5, #0
 8012f84:	9901      	ldr	r1, [sp, #4]
 8012f86:	005c      	lsls	r4, r3, #1
 8012f88:	5a61      	ldrh	r1, [r4, r1]
 8012f8a:	9100      	str	r1, [sp, #0]
 8012f8c:	9c00      	ldr	r4, [sp, #0]
 8012f8e:	2601      	movs	r6, #1
 8012f90:	412c      	asrs	r4, r5
 8012f92:	4234      	tst	r4, r6
 8012f94:	d010      	beq.n	8012fb8 <RegionCommonChanVerifyDr+0x58>
    if( ( value >= min ) && ( value <= max ) )
 8012f96:	4661      	mov	r1, ip
 8012f98:	360b      	adds	r6, #11
 8012f9a:	197c      	adds	r4, r7, r5
 8012f9c:	4374      	muls	r4, r6
 8012f9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012fa0:	1934      	adds	r4, r6, r4
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012fa2:	7a24      	ldrb	r4, [r4, #8]
 8012fa4:	b266      	sxtb	r6, r4
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012fa6:	0724      	lsls	r4, r4, #28
 8012fa8:	1724      	asrs	r4, r4, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012faa:	1136      	asrs	r6, r6, #4
    if( ( value >= min ) && ( value <= max ) )
 8012fac:	400c      	ands	r4, r1
 8012fae:	42a2      	cmp	r2, r4
 8012fb0:	db02      	blt.n	8012fb8 <RegionCommonChanVerifyDr+0x58>
 8012fb2:	400e      	ands	r6, r1
 8012fb4:	42b2      	cmp	r2, r6
 8012fb6:	dd05      	ble.n	8012fc4 <RegionCommonChanVerifyDr+0x64>
 8012fb8:	3501      	adds	r5, #1
        for( uint8_t j = 0; j < 16; j++ )
 8012fba:	2d10      	cmp	r5, #16
 8012fbc:	d1e6      	bne.n	8012f8c <RegionCommonChanVerifyDr+0x2c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	e7da      	b.n	8012f7a <RegionCommonChanVerifyDr+0x1a>
                    return true;
 8012fc4:	2401      	movs	r4, #1
}
 8012fc6:	0020      	movs	r0, r4
 8012fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return false;
 8012fca:	2400      	movs	r4, #0
 8012fcc:	e7fb      	b.n	8012fc6 <RegionCommonChanVerifyDr+0x66>

08012fce <RegionCommonValueInRange>:
{
 8012fce:	2300      	movs	r3, #0
    if( ( value >= min ) && ( value <= max ) )
 8012fd0:	4288      	cmp	r0, r1
 8012fd2:	db04      	blt.n	8012fde <RegionCommonValueInRange+0x10>
 8012fd4:	0fc3      	lsrs	r3, r0, #31
 8012fd6:	17d1      	asrs	r1, r2, #31
 8012fd8:	4282      	cmp	r2, r0
 8012fda:	414b      	adcs	r3, r1
 8012fdc:	b2db      	uxtb	r3, r3
    {
        return 1;
    }
    return 0;
}
 8012fde:	0018      	movs	r0, r3
 8012fe0:	4770      	bx	lr

08012fe2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8012fe2:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    {
        return false;
 8012fe4:	2300      	movs	r3, #0
    uint8_t index = id / 16;
 8012fe6:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012fe8:	0915      	lsrs	r5, r2, #4
 8012fea:	42ac      	cmp	r4, r5
 8012fec:	d80c      	bhi.n	8013008 <RegionCommonChanDisable+0x26>
 8012fee:	4291      	cmp	r1, r2
 8012ff0:	d20a      	bcs.n	8013008 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012ff2:	330f      	adds	r3, #15
 8012ff4:	4019      	ands	r1, r3
 8012ff6:	3b0e      	subs	r3, #14
 8012ff8:	001a      	movs	r2, r3
 8012ffa:	408a      	lsls	r2, r1
 8012ffc:	0011      	movs	r1, r2
 8012ffe:	0064      	lsls	r4, r4, #1
 8013000:	1900      	adds	r0, r0, r4
 8013002:	8802      	ldrh	r2, [r0, #0]
 8013004:	438a      	bics	r2, r1
 8013006:	8002      	strh	r2, [r0, #0]

    return true;
}
 8013008:	0018      	movs	r0, r3
 801300a:	bd30      	pop	{r4, r5, pc}

0801300c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801300c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
    {
        return 0;
 801300e:	1e06      	subs	r6, r0, #0
{
 8013010:	9201      	str	r2, [sp, #4]
    if( channelsMask == NULL )
 8013012:	d005      	beq.n	8013020 <RegionCommonCountChannels+0x14>
 8013014:	2600      	movs	r6, #0
 8013016:	004b      	lsls	r3, r1, #1
 8013018:	18c3      	adds	r3, r0, r3
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801301a:	9a01      	ldr	r2, [sp, #4]
 801301c:	4291      	cmp	r1, r2
 801301e:	d301      	bcc.n	8013024 <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 8013020:	0030      	movs	r0, r6
 8013022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013024:	2500      	movs	r5, #0
    uint8_t nbActiveBits = 0;
 8013026:	002c      	movs	r4, r5
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013028:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801302a:	2001      	movs	r0, #1
 801302c:	40a8      	lsls	r0, r5
 801302e:	0002      	movs	r2, r0
 8013030:	403a      	ands	r2, r7
 8013032:	4290      	cmp	r0, r2
 8013034:	d101      	bne.n	801303a <RegionCommonCountChannels+0x2e>
            nbActiveBits++;
 8013036:	3401      	adds	r4, #1
 8013038:	b2e4      	uxtb	r4, r4
 801303a:	3501      	adds	r5, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 801303c:	2d10      	cmp	r5, #16
 801303e:	d1f4      	bne.n	801302a <RegionCommonCountChannels+0x1e>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013040:	1936      	adds	r6, r6, r4
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013042:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013044:	b2f6      	uxtb	r6, r6
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013046:	b2c9      	uxtb	r1, r1
 8013048:	3302      	adds	r3, #2
 801304a:	e7e6      	b.n	801301a <RegionCommonCountChannels+0xe>

0801304c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801304c:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801304e:	2800      	cmp	r0, #0
 8013050:	d005      	beq.n	801305e <RegionCommonChanMaskCopy+0x12>
 8013052:	2900      	cmp	r1, #0
 8013054:	d003      	beq.n	801305e <RegionCommonChanMaskCopy+0x12>
 8013056:	2300      	movs	r3, #0
 8013058:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 801305a:	4293      	cmp	r3, r2
 801305c:	d100      	bne.n	8013060 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 801305e:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013060:	5acc      	ldrh	r4, [r1, r3]
 8013062:	52c4      	strh	r4, [r0, r3]
 8013064:	3302      	adds	r3, #2
 8013066:	e7f8      	b.n	801305a <RegionCommonChanMaskCopy+0xe>

08013068 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 8013068:	608a      	str	r2, [r1, #8]
    if( joined == true )
 801306a:	2800      	cmp	r0, #0
 801306c:	d000      	beq.n	8013070 <RegionCommonSetBandTxDone+0x8>
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 801306e:	4770      	bx	lr
        band->LastJoinTxDoneTime = lastTxDone;
 8013070:	604a      	str	r2, [r1, #4]
}
 8013072:	e7fc      	b.n	801306e <RegionCommonSetBandTxDone+0x6>

08013074 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8013074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 8013076:	2501      	movs	r5, #1
{
 8013078:	000f      	movs	r7, r1
 801307a:	011b      	lsls	r3, r3, #4
 801307c:	3304      	adds	r3, #4
 801307e:	18d3      	adds	r3, r2, r3
 8013080:	9001      	str	r0, [sp, #4]
 8013082:	1d14      	adds	r4, r2, #4
 8013084:	9300      	str	r3, [sp, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 8013086:	426d      	negs	r5, r5

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8013088:	9b00      	ldr	r3, [sp, #0]
 801308a:	42a3      	cmp	r3, r4
 801308c:	d101      	bne.n	8013092 <RegionCommonUpdateBandTimeOff+0x1e>
                bands[i].TimeOff = 0;
            }
        }
    }
    return nextTxDelay;
}
 801308e:	0028      	movs	r0, r5
 8013090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( joined == false )
 8013092:	9b01      	ldr	r3, [sp, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d11e      	bne.n	80130d6 <RegionCommonUpdateBandTimeOff+0x62>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 8013098:	6820      	ldr	r0, [r4, #0]
 801309a:	f001 f806 	bl	80140aa <TimerGetElapsedTime>
 801309e:	0006      	movs	r6, r0
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	d034      	beq.n	801310e <RegionCommonUpdateBandTimeOff+0x9a>
 80130a4:	6860      	ldr	r0, [r4, #4]
 80130a6:	f001 f800 	bl	80140aa <TimerGetElapsedTime>
 80130aa:	4286      	cmp	r6, r0
 80130ac:	d911      	bls.n	80130d2 <RegionCommonUpdateBandTimeOff+0x5e>
 80130ae:	6820      	ldr	r0, [r4, #0]
 80130b0:	f000 fffb 	bl	80140aa <TimerGetElapsedTime>
 80130b4:	0006      	movs	r6, r0
            if( bands[i].TimeOff <= txDoneTime )
 80130b6:	68a3      	ldr	r3, [r4, #8]
 80130b8:	429e      	cmp	r6, r3
 80130ba:	d301      	bcc.n	80130c0 <RegionCommonUpdateBandTimeOff+0x4c>
                bands[i].TimeOff = 0;
 80130bc:	2300      	movs	r3, #0
 80130be:	60a3      	str	r3, [r4, #8]
            if( bands[i].TimeOff != 0 )
 80130c0:	68a3      	ldr	r3, [r4, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d003      	beq.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 80130c6:	1b9e      	subs	r6, r3, r6
 80130c8:	42b5      	cmp	r5, r6
 80130ca:	d900      	bls.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
 80130cc:	0035      	movs	r5, r6
 80130ce:	3410      	adds	r4, #16
 80130d0:	e7da      	b.n	8013088 <RegionCommonUpdateBandTimeOff+0x14>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 80130d2:	6860      	ldr	r0, [r4, #4]
 80130d4:	e7ec      	b.n	80130b0 <RegionCommonUpdateBandTimeOff+0x3c>
            if( dutyCycle == true )
 80130d6:	2f00      	cmp	r7, #0
 80130d8:	d016      	beq.n	8013108 <RegionCommonUpdateBandTimeOff+0x94>
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 80130da:	6860      	ldr	r0, [r4, #4]
 80130dc:	68a6      	ldr	r6, [r4, #8]
 80130de:	f000 ffe4 	bl	80140aa <TimerGetElapsedTime>
 80130e2:	4286      	cmp	r6, r0
 80130e4:	d801      	bhi.n	80130ea <RegionCommonUpdateBandTimeOff+0x76>
                    bands[i].TimeOff = 0;
 80130e6:	2300      	movs	r3, #0
 80130e8:	60a3      	str	r3, [r4, #8]
                if( bands[i].TimeOff != 0 )
 80130ea:	68a6      	ldr	r6, [r4, #8]
 80130ec:	2e00      	cmp	r6, #0
 80130ee:	d0ee      	beq.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 80130f0:	6860      	ldr	r0, [r4, #4]
 80130f2:	f000 ffda 	bl	80140aa <TimerGetElapsedTime>
 80130f6:	1a36      	subs	r6, r6, r0
 80130f8:	42b5      	cmp	r5, r6
 80130fa:	d9e8      	bls.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
 80130fc:	6860      	ldr	r0, [r4, #4]
 80130fe:	68a5      	ldr	r5, [r4, #8]
 8013100:	f000 ffd3 	bl	80140aa <TimerGetElapsedTime>
 8013104:	1a2d      	subs	r5, r5, r0
 8013106:	e7e2      	b.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
                bands[i].TimeOff = 0;
 8013108:	60a7      	str	r7, [r4, #8]
                nextTxDelay = 0;
 801310a:	003d      	movs	r5, r7
 801310c:	e7df      	b.n	80130ce <RegionCommonUpdateBandTimeOff+0x5a>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 801310e:	2800      	cmp	r0, #0
 8013110:	d0d1      	beq.n	80130b6 <RegionCommonUpdateBandTimeOff+0x42>
 8013112:	e7cc      	b.n	80130ae <RegionCommonUpdateBandTimeOff+0x3a>

08013114 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013114:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013116:	7802      	ldrb	r2, [r0, #0]
{
 8013118:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 801311a:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801311c:	2a03      	cmp	r2, #3
 801311e:	d113      	bne.n	8013148 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8013120:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013122:	300f      	adds	r0, #15
 8013124:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013126:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013128:	4004      	ands	r4, r0
 801312a:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801312c:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801312e:	789a      	ldrb	r2, [r3, #2]
 8013130:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013132:	78dc      	ldrb	r4, [r3, #3]
 8013134:	0224      	lsls	r4, r4, #8
 8013136:	4322      	orrs	r2, r4
 8013138:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801313a:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801313c:	065a      	lsls	r2, r3, #25
 801313e:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 8013140:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013142:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013144:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013146:	380a      	subs	r0, #10
    }
    return retIndex;
}
 8013148:	bd10      	pop	{r4, pc}

0801314a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801314a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801314c:	b087      	sub	sp, #28
 801314e:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 8013150:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 8013152:	2707      	movs	r7, #7
{
 8013154:	9103      	str	r1, [sp, #12]
 8013156:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 8013158:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 801315a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 801315c:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801315e:	7943      	ldrb	r3, [r0, #5]
{
 8013160:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 8013162:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013164:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 8013166:	2b00      	cmp	r3, #0
 8013168:	d02c      	beq.n	80131c4 <RegionCommonLinkAdrReqVerifyParams+0x7a>
    int8_t nbRepetitions = verifyParams->NbRep;
 801316a:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 801316c:	2d00      	cmp	r5, #0
 801316e:	d01e      	beq.n	80131ae <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013170:	69a2      	ldr	r2, [r4, #24]
 8013172:	2314      	movs	r3, #20
 8013174:	9201      	str	r2, [sp, #4]
 8013176:	2215      	movs	r2, #21
 8013178:	56a2      	ldrsb	r2, [r4, r2]
 801317a:	56e3      	ldrsb	r3, [r4, r3]
 801317c:	9200      	str	r2, [sp, #0]
 801317e:	7b20      	ldrb	r0, [r4, #12]
 8013180:	9a02      	ldr	r2, [sp, #8]
 8013182:	6921      	ldr	r1, [r4, #16]
 8013184:	f7ff feec 	bl	8012f60 <RegionCommonChanVerifyDr>
 8013188:	2800      	cmp	r0, #0
 801318a:	d101      	bne.n	8013190 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 801318c:	2302      	movs	r3, #2
 801318e:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013190:	231d      	movs	r3, #29
 8013192:	221c      	movs	r2, #28
 8013194:	56e3      	ldrsb	r3, [r4, r3]
 8013196:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 8013198:	429f      	cmp	r7, r3
 801319a:	db1b      	blt.n	80131d4 <RegionCommonLinkAdrReqVerifyParams+0x8a>
 801319c:	4297      	cmp	r7, r2
 801319e:	dd01      	ble.n	80131a4 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80131a0:	2304      	movs	r3, #4
 80131a2:	439d      	bics	r5, r3
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80131a4:	2d07      	cmp	r5, #7
 80131a6:	d102      	bne.n	80131ae <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        if( nbRepetitions == 0 )
 80131a8:	2e00      	cmp	r6, #0
 80131aa:	d100      	bne.n	80131ae <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80131ac:	3601      	adds	r6, #1
        }
    }

    // Apply changes
    *dr = datarate;
 80131ae:	466a      	mov	r2, sp
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 80131b0:	0028      	movs	r0, r5
    *dr = datarate;
 80131b2:	9b03      	ldr	r3, [sp, #12]
 80131b4:	7a12      	ldrb	r2, [r2, #8]
 80131b6:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80131b8:	9b04      	ldr	r3, [sp, #16]
 80131ba:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 80131bc:	9b05      	ldr	r3, [sp, #20]
 80131be:	701e      	strb	r6, [r3, #0]
}
 80131c0:	b007      	add	sp, #28
 80131c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 80131c4:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 80131c6:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 80131c8:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 80131ca:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 80131cc:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 80131ce:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 80131d0:	57c7      	ldrsb	r7, [r0, r7]
 80131d2:	e7cb      	b.n	801316c <RegionCommonLinkAdrReqVerifyParams+0x22>
    if( ( value >= min ) && ( value <= max ) )
 80131d4:	001f      	movs	r7, r3
 80131d6:	e7e5      	b.n	80131a4 <RegionCommonLinkAdrReqVerifyParams+0x5a>

080131d8 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 80131d8:	2301      	movs	r3, #1
 80131da:	4083      	lsls	r3, r0
{
 80131dc:	b5d0      	push	{r4, r6, r7, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 80131de:	0018      	movs	r0, r3
{
 80131e0:	000c      	movs	r4, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 80131e2:	f7ef feb5 	bl	8002f50 <__aeabi_i2d>
 80131e6:	0006      	movs	r6, r0
 80131e8:	0020      	movs	r0, r4
 80131ea:	000f      	movs	r7, r1
 80131ec:	f7ef fef2 	bl	8002fd4 <__aeabi_ui2d>
 80131f0:	0002      	movs	r2, r0
 80131f2:	000b      	movs	r3, r1
 80131f4:	0030      	movs	r0, r6
 80131f6:	0039      	movs	r1, r7
 80131f8:	f7ee fcac 	bl	8001b54 <__aeabi_ddiv>
 80131fc:	2200      	movs	r2, #0
 80131fe:	4b02      	ldr	r3, [pc, #8]	; (8013208 <RegionCommonComputeSymbolTimeLoRa+0x30>)
 8013200:	f7ef f8dc 	bl	80023bc <__aeabi_dmul>
}
 8013204:	bdd0      	pop	{r4, r6, r7, pc}
 8013206:	46c0      	nop			; (mov r8, r8)
 8013208:	408f4000 	.word	0x408f4000

0801320c <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 801320c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801320e:	0004      	movs	r4, r0
 8013210:	000d      	movs	r5, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8013212:	1f10      	subs	r0, r2, #4
 8013214:	0040      	lsls	r0, r0, #1
{
 8013216:	9200      	str	r2, [sp, #0]
 8013218:	9301      	str	r3, [sp, #4]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 801321a:	f7ef fe99 	bl	8002f50 <__aeabi_i2d>
 801321e:	0022      	movs	r2, r4
 8013220:	002b      	movs	r3, r5
 8013222:	f7ef f8cb 	bl	80023bc <__aeabi_dmul>
 8013226:	9b01      	ldr	r3, [sp, #4]
 8013228:	0006      	movs	r6, r0
 801322a:	0058      	lsls	r0, r3, #1
 801322c:	000f      	movs	r7, r1
 801322e:	f7ef fed1 	bl	8002fd4 <__aeabi_ui2d>
 8013232:	0002      	movs	r2, r0
 8013234:	000b      	movs	r3, r1
 8013236:	0030      	movs	r0, r6
 8013238:	0039      	movs	r1, r7
 801323a:	f7ee f97b 	bl	8001534 <__aeabi_dadd>
 801323e:	002b      	movs	r3, r5
 8013240:	0022      	movs	r2, r4
 8013242:	f7ee fc87 	bl	8001b54 <__aeabi_ddiv>
 8013246:	0006      	movs	r6, r0
 8013248:	000f      	movs	r7, r1
 801324a:	f7f5 f861 	bl	8008310 <ceil>
 801324e:	f7ed feb1 	bl	8000fb4 <__aeabi_d2uiz>
 8013252:	9b00      	ldr	r3, [sp, #0]
 8013254:	4298      	cmp	r0, r3
 8013256:	d906      	bls.n	8013266 <RegionCommonComputeRxWindowParameters+0x5a>
 8013258:	0030      	movs	r0, r6
 801325a:	0039      	movs	r1, r7
 801325c:	f7f5 f858 	bl	8008310 <ceil>
 8013260:	f7ed fea8 	bl	8000fb4 <__aeabi_d2uiz>
 8013264:	9000      	str	r0, [sp, #0]
 8013266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013268:	9a00      	ldr	r2, [sp, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801326a:	0020      	movs	r0, r4
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 801326c:	601a      	str	r2, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801326e:	0029      	movs	r1, r5
 8013270:	2200      	movs	r2, #0
 8013272:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <RegionCommonComputeRxWindowParameters+0xb8>)
 8013274:	f7ef f8a2 	bl	80023bc <__aeabi_dmul>
 8013278:	0006      	movs	r6, r0
 801327a:	9800      	ldr	r0, [sp, #0]
 801327c:	000f      	movs	r7, r1
 801327e:	f7ef fea9 	bl	8002fd4 <__aeabi_ui2d>
 8013282:	0022      	movs	r2, r4
 8013284:	002b      	movs	r3, r5
 8013286:	f7ef f899 	bl	80023bc <__aeabi_dmul>
 801328a:	2200      	movs	r2, #0
 801328c:	4b0e      	ldr	r3, [pc, #56]	; (80132c8 <RegionCommonComputeRxWindowParameters+0xbc>)
 801328e:	f7ef f895 	bl	80023bc <__aeabi_dmul>
 8013292:	0002      	movs	r2, r0
 8013294:	000b      	movs	r3, r1
 8013296:	0030      	movs	r0, r6
 8013298:	0039      	movs	r1, r7
 801329a:	f7ef fb0f 	bl	80028bc <__aeabi_dsub>
 801329e:	0004      	movs	r4, r0
 80132a0:	9808      	ldr	r0, [sp, #32]
 80132a2:	000d      	movs	r5, r1
 80132a4:	f7ef fe96 	bl	8002fd4 <__aeabi_ui2d>
 80132a8:	0002      	movs	r2, r0
 80132aa:	000b      	movs	r3, r1
 80132ac:	0020      	movs	r0, r4
 80132ae:	0029      	movs	r1, r5
 80132b0:	f7ef fb04 	bl	80028bc <__aeabi_dsub>
 80132b4:	f7f5 f82c 	bl	8008310 <ceil>
 80132b8:	f7ef fe16 	bl	8002ee8 <__aeabi_d2iz>
 80132bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132be:	6018      	str	r0, [r3, #0]
}
 80132c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80132c2:	46c0      	nop			; (mov r8, r8)
 80132c4:	40100000 	.word	0x40100000
 80132c8:	3fe00000 	.word	0x3fe00000

080132cc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80132cc:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80132ce:	0040      	lsls	r0, r0, #1
{
 80132d0:	1c14      	adds	r4, r2, #0
 80132d2:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80132d4:	f7ee f8e8 	bl	80014a8 <__aeabi_ui2f>
 80132d8:	1c01      	adds	r1, r0, #0
 80132da:	1c28      	adds	r0, r5, #0
 80132dc:	f7ed ff48 	bl	8001170 <__aeabi_fsub>
 80132e0:	1c21      	adds	r1, r4, #0
 80132e2:	f7ed ff45 	bl	8001170 <__aeabi_fsub>
 80132e6:	f7ef fead 	bl	8003044 <__aeabi_f2d>
 80132ea:	f7f5 f8a5 	bl	8008438 <floor>
 80132ee:	f7ef fdfb 	bl	8002ee8 <__aeabi_d2iz>

    return phyTxPower;
 80132f2:	b240      	sxtb	r0, r0
}
 80132f4:	bd70      	pop	{r4, r5, r6, pc}

080132f6 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 80132f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 80132f8:	230c      	movs	r3, #12
 80132fa:	7ac2      	ldrb	r2, [r0, #11]
{
 80132fc:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 80132fe:	4353      	muls	r3, r2
 8013300:	6802      	ldr	r2, [r0, #0]
 8013302:	18d3      	adds	r3, r2, r3
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8013304:	7a5d      	ldrb	r5, [r3, #9]
 8013306:	6843      	ldr	r3, [r0, #4]
 8013308:	012d      	lsls	r5, r5, #4
 801330a:	195d      	adds	r5, r3, r5
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 8013310:	7a43      	ldrb	r3, [r0, #9]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8013312:	882e      	ldrh	r6, [r5, #0]
 8013314:	7a87      	ldrb	r7, [r0, #10]
    if( calcBackOffParams->Joined == false )
 8013316:	2b00      	cmp	r3, #0
 8013318:	d112      	bne.n	8013340 <RegionCommonCalcBackOff+0x4a>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 801331a:	68c0      	ldr	r0, [r0, #12]
 801331c:	f7ff fe0c 	bl	8012f38 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8013320:	2f00      	cmp	r7, #0
 8013322:	d102      	bne.n	801332a <RegionCommonCalcBackOff+0x34>
 8013324:	7a23      	ldrb	r3, [r4, #8]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d009      	beq.n	801333e <RegionCommonCalcBackOff+0x48>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801332a:	b282      	uxth	r2, r0
 801332c:	1c33      	adds	r3, r6, #0
 801332e:	4296      	cmp	r6, r2
 8013330:	d200      	bcs.n	8013334 <RegionCommonCalcBackOff+0x3e>
 8013332:	1c03      	adds	r3, r0, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013334:	6922      	ldr	r2, [r4, #16]
 8013336:	b29b      	uxth	r3, r3
 8013338:	3b01      	subs	r3, #1
 801333a:	4353      	muls	r3, r2
 801333c:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 801333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 8013340:	2f00      	cmp	r7, #0
 8013342:	d0fc      	beq.n	801333e <RegionCommonCalcBackOff+0x48>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013344:	6903      	ldr	r3, [r0, #16]
 8013346:	3e01      	subs	r6, #1
 8013348:	435e      	muls	r6, r3
 801334a:	60ee      	str	r6, [r5, #12]
}
 801334c:	e7f7      	b.n	801333e <RegionCommonCalcBackOff+0x48>
	...

08013350 <RegionUS915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8013350:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 8013352:	2200      	movs	r2, #0
{
 8013354:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 8013356:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 8013358:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 801335a:	2834      	cmp	r0, #52	; 0x34
 801335c:	d84b      	bhi.n	80133f6 <RegionUS915GetPhyParam+0xa6>
 801335e:	f7ed fc0d 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8013362:	4a67      	.short	0x4a67
 8013364:	4a4a4a4a 	.word	0x4a4a4a4a
 8013368:	4a4a4a4a 	.word	0x4a4a4a4a
 801336c:	2e292725 	.word	0x2e292725
 8013370:	3734324a 	.word	0x3734324a
 8013374:	413e3c3a 	.word	0x413e3c3a
 8013378:	4c675b4a 	.word	0x4c675b4a
 801337c:	4a565451 	.word	0x4a565451
 8013380:	1b58584a 	.word	0x1b58584a
 8013384:	4a4a4a4a 	.word	0x4a4a4a4a
 8013388:	4a4a4a4a 	.word	0x4a4a4a4a
 801338c:	4a4a4a4a 	.word	0x4a4a4a4a
 8013390:	675d5b4a 	.word	0x675d5b4a
 8013394:	6765      	.short	0x6765
 8013396:	67          	.byte	0x67
 8013397:	00          	.byte	0x00
            phyParam.Value = US915_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, US915_TX_MIN_DATARATE );
 8013398:	2201      	movs	r2, #1
 801339a:	569a      	ldrsb	r2, [r3, r2]
        nextLowerDr = minDr;
 801339c:	2300      	movs	r3, #0
    if( dr == minDr )
 801339e:	429a      	cmp	r2, r3
 80133a0:	d001      	beq.n	80133a6 <RegionUS915GetPhyParam+0x56>
        nextLowerDr = dr - 1;
 80133a2:	3a01      	subs	r2, #1
 80133a4:	b2d3      	uxtb	r3, r2
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, US915_TX_MIN_DATARATE );
 80133a6:	b25b      	sxtb	r3, r3
            phyParam.Value = US915_BEACON_NB_CHANNELS;
            break;
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80133a8:	9300      	str	r3, [sp, #0]
            break;
 80133aa:	e024      	b.n	80133f6 <RegionUS915GetPhyParam+0xa6>
            phyParam.Value = US915_ADR_ACK_LIMIT;
 80133ac:	2340      	movs	r3, #64	; 0x40
 80133ae:	e7fb      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_ADR_ACK_DELAY;
 80133b0:	2320      	movs	r3, #32
 80133b2:	e7f9      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80133b4:	785b      	ldrb	r3, [r3, #1]
 80133b6:	4a1f      	ldr	r2, [pc, #124]	; (8013434 <RegionUS915GetPhyParam+0xe4>)
 80133b8:	b25b      	sxtb	r3, r3
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80133ba:	5cd3      	ldrb	r3, [r2, r3]
 80133bc:	e7f4      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
 80133be:	785b      	ldrb	r3, [r3, #1]
 80133c0:	4a1d      	ldr	r2, [pc, #116]	; (8013438 <RegionUS915GetPhyParam+0xe8>)
 80133c2:	b25b      	sxtb	r3, r3
 80133c4:	e7f9      	b.n	80133ba <RegionUS915GetPhyParam+0x6a>
            phyParam.Value = US915_MAX_RX_WINDOW;
 80133c6:	4b1d      	ldr	r3, [pc, #116]	; (801343c <RegionUS915GetPhyParam+0xec>)
 80133c8:	e7ee      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_RECEIVE_DELAY1;
 80133ca:	23fa      	movs	r3, #250	; 0xfa
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	e7eb      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_RECEIVE_DELAY2;
 80133d0:	23fa      	movs	r3, #250	; 0xfa
 80133d2:	00db      	lsls	r3, r3, #3
 80133d4:	e7e8      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_JOIN_ACCEPT_DELAY1;
 80133d6:	4b1a      	ldr	r3, [pc, #104]	; (8013440 <RegionUS915GetPhyParam+0xf0>)
 80133d8:	e7e6      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_JOIN_ACCEPT_DELAY2;
 80133da:	4b1a      	ldr	r3, [pc, #104]	; (8013444 <RegionUS915GetPhyParam+0xf4>)
 80133dc:	e7e4      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_MAX_FCNT_GAP;
 80133de:	2380      	movs	r3, #128	; 0x80
 80133e0:	01db      	lsls	r3, r3, #7
 80133e2:	e7e1      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = ( US915_ACKTIMEOUT + randr( -US915_ACK_TIMEOUT_RND, US915_ACK_TIMEOUT_RND ) );
 80133e4:	21fa      	movs	r1, #250	; 0xfa
 80133e6:	4818      	ldr	r0, [pc, #96]	; (8013448 <RegionUS915GetPhyParam+0xf8>)
 80133e8:	0089      	lsls	r1, r1, #2
 80133ea:	f000 fe87 	bl	80140fc <randr>
 80133ee:	23fa      	movs	r3, #250	; 0xfa
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	18c0      	adds	r0, r0, r3
 80133f4:	9000      	str	r0, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 80133f6:	9800      	ldr	r0, [sp, #0]
 80133f8:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80133fa:	22dc      	movs	r2, #220	; 0xdc
 80133fc:	4b13      	ldr	r3, [pc, #76]	; (801344c <RegionUS915GetPhyParam+0xfc>)
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80133fe:	0092      	lsls	r2, r2, #2
 8013400:	189b      	adds	r3, r3, r2
 8013402:	e7d1      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
 8013404:	4b11      	ldr	r3, [pc, #68]	; (801344c <RegionUS915GetPhyParam+0xfc>)
 8013406:	22e2      	movs	r2, #226	; 0xe2
 8013408:	e7f9      	b.n	80133fe <RegionUS915GetPhyParam+0xae>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801340a:	2348      	movs	r3, #72	; 0x48
 801340c:	e7cc      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Channels = NvmCtx.Channels;
 801340e:	4b0f      	ldr	r3, [pc, #60]	; (801344c <RegionUS915GetPhyParam+0xfc>)
 8013410:	e7ca      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.fValue = 0;
 8013412:	2300      	movs	r3, #0
 8013414:	9300      	str	r3, [sp, #0]
            break;
 8013416:	e7ee      	b.n	80133f6 <RegionUS915GetPhyParam+0xa6>
            phyParam.Value = US915_BEACON_CHANNEL_FREQ;
 8013418:	4b0d      	ldr	r3, [pc, #52]	; (8013450 <RegionUS915GetPhyParam+0x100>)
 801341a:	e7c5      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801341c:	466a      	mov	r2, sp
 801341e:	2317      	movs	r3, #23
 8013420:	7013      	strb	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8013422:	3b12      	subs	r3, #18
 8013424:	7053      	strb	r3, [r2, #1]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8013426:	3b02      	subs	r3, #2
 8013428:	7093      	strb	r3, [r2, #2]
            break;
 801342a:	e7e4      	b.n	80133f6 <RegionUS915GetPhyParam+0xa6>
            phyParam.Value = US915_BEACON_CHANNEL_STEPWIDTH;
 801342c:	4b09      	ldr	r3, [pc, #36]	; (8013454 <RegionUS915GetPhyParam+0x104>)
 801342e:	e7bb      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8013430:	2308      	movs	r3, #8
 8013432:	e7b9      	b.n	80133a8 <RegionUS915GetPhyParam+0x58>
 8013434:	08018680 	.word	0x08018680
 8013438:	08018670 	.word	0x08018670
 801343c:	00000bb8 	.word	0x00000bb8
 8013440:	00001388 	.word	0x00001388
 8013444:	00001770 	.word	0x00001770
 8013448:	fffffc18 	.word	0xfffffc18
 801344c:	200018e8 	.word	0x200018e8
 8013450:	370870a0 	.word	0x370870a0
 8013454:	000927c0 	.word	0x000927c0

08013458 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8013458:	230c      	movs	r3, #12
 801345a:	7801      	ldrb	r1, [r0, #0]
 801345c:	4a06      	ldr	r2, [pc, #24]	; (8013478 <RegionUS915SetBandTxDone+0x20>)
 801345e:	434b      	muls	r3, r1
{
 8013460:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8013462:	18d3      	adds	r3, r2, r3
 8013464:	7a59      	ldrb	r1, [r3, #9]
 8013466:	7843      	ldrb	r3, [r0, #1]
 8013468:	3136      	adds	r1, #54	; 0x36
 801346a:	0109      	lsls	r1, r1, #4
 801346c:	1851      	adds	r1, r2, r1
 801346e:	6842      	ldr	r2, [r0, #4]
 8013470:	0018      	movs	r0, r3
 8013472:	f7ff fdf9 	bl	8013068 <RegionCommonSetBandTxDone>
}
 8013476:	bd10      	pop	{r4, pc}
 8013478:	200018e8 	.word	0x200018e8

0801347c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801347c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[US915_MAX_NB_BANDS] =
 801347e:	2301      	movs	r3, #1
 8013480:	4669      	mov	r1, sp
 8013482:	800b      	strh	r3, [r1, #0]
 8013484:	2300      	movs	r3, #0
 8013486:	708b      	strb	r3, [r1, #2]
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	9302      	str	r3, [sp, #8]
 801348c:	9303      	str	r3, [sp, #12]
{
 801348e:	0002      	movs	r2, r0
    {
       US915_BAND0
    };

    switch( params->Type )
 8013490:	7900      	ldrb	r0, [r0, #4]
 8013492:	2803      	cmp	r0, #3
 8013494:	d856      	bhi.n	8013544 <RegionUS915InitDefaults+0xc8>
 8013496:	f7ed fb71 	bl	8000b7c <__gnu_thumb1_case_uqi>
 801349a:	5602      	.short	0x5602
 801349c:	4d6f      	.short	0x4d6f
    {
        case INIT_TYPE_INIT:
        {
            // Initialize bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801349e:	23d8      	movs	r3, #216	; 0xd8
 80134a0:	4c39      	ldr	r4, [pc, #228]	; (8013588 <RegionUS915InitDefaults+0x10c>)
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	18e0      	adds	r0, r4, r3
 80134a6:	2210      	movs	r2, #16
 80134a8:	4669      	mov	r1, sp
 80134aa:	f000 fe32 	bl	8014112 <memcpy1>

            // Initialize 8 bit channel groups index
            NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 80134ae:	23e5      	movs	r3, #229	; 0xe5
 80134b0:	2100      	movs	r1, #0

            // Initialize the join trials counter
            NvmCtx.JoinTrialsCounter = 1;
 80134b2:	2201      	movs	r2, #1
            NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	54e1      	strb	r1, [r4, r3]
            NvmCtx.JoinTrialsCounter = 1;
 80134b8:	4b34      	ldr	r3, [pc, #208]	; (801358c <RegionUS915InitDefaults+0x110>)
            // Channels
            // 125 kHz channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
            {
                NvmCtx.Channels[i].Frequency = 902300000 + i * 200000;
                NvmCtx.Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80134ba:	2530      	movs	r5, #48	; 0x30
            NvmCtx.JoinTrialsCounter = 1;
 80134bc:	54e2      	strb	r2, [r4, r3]
 80134be:	0023      	movs	r3, r4
 80134c0:	4a33      	ldr	r2, [pc, #204]	; (8013590 <RegionUS915InitDefaults+0x114>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80134c2:	4834      	ldr	r0, [pc, #208]	; (8013594 <RegionUS915InitDefaults+0x118>)
 80134c4:	4e34      	ldr	r6, [pc, #208]	; (8013598 <RegionUS915InitDefaults+0x11c>)
                NvmCtx.Channels[i].Frequency = 902300000 + i * 200000;
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80134ca:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 80134cc:	7259      	strb	r1, [r3, #9]
 80134ce:	330c      	adds	r3, #12
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80134d0:	4282      	cmp	r2, r0
 80134d2:	d1f7      	bne.n	80134c4 <RegionUS915InitDefaults+0x48>
 80134d4:	23c0      	movs	r3, #192	; 0xc0
            }
            // 500 kHz channels
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
            {
                NvmCtx.Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
                NvmCtx.Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80134d6:	2544      	movs	r5, #68	; 0x44
                NvmCtx.Channels[i].Band = 0;
 80134d8:	2100      	movs	r1, #0
 80134da:	009b      	lsls	r3, r3, #2
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80134dc:	4a2f      	ldr	r2, [pc, #188]	; (801359c <RegionUS915InitDefaults+0x120>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80134de:	4830      	ldr	r0, [pc, #192]	; (80135a0 <RegionUS915InitDefaults+0x124>)
 80134e0:	18e3      	adds	r3, r4, r3
 80134e2:	4e30      	ldr	r6, [pc, #192]	; (80135a4 <RegionUS915InitDefaults+0x128>)
                NvmCtx.Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80134e4:	601a      	str	r2, [r3, #0]
 80134e6:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80134e8:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 80134ea:	7259      	strb	r1, [r3, #9]
 80134ec:	330c      	adds	r3, #12
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80134ee:	4282      	cmp	r2, r0
 80134f0:	d1f7      	bne.n	80134e2 <RegionUS915InitDefaults+0x66>
            }

            // ChannelsMask
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 80134f2:	2301      	movs	r3, #1
 80134f4:	22e2      	movs	r2, #226	; 0xe2
 80134f6:	425b      	negs	r3, r3
 80134f8:	0092      	lsls	r2, r2, #2
 80134fa:	52a3      	strh	r3, [r4, r2]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 80134fc:	4a2a      	ldr	r2, [pc, #168]	; (80135a8 <RegionUS915InitDefaults+0x12c>)
 80134fe:	52a3      	strh	r3, [r4, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 8013500:	3202      	adds	r2, #2
 8013502:	52a3      	strh	r3, [r4, r2]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 8013504:	4a29      	ldr	r2, [pc, #164]	; (80135ac <RegionUS915InitDefaults+0x130>)
 8013506:	52a3      	strh	r3, [r4, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0x00FF;
 8013508:	23e4      	movs	r3, #228	; 0xe4
 801350a:	22ff      	movs	r2, #255	; 0xff
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	52e2      	strh	r2, [r4, r3]
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 8013510:	4b27      	ldr	r3, [pc, #156]	; (80135b0 <RegionUS915InitDefaults+0x134>)

            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8013512:	3af9      	subs	r2, #249	; 0xf9
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 8013514:	52e1      	strh	r1, [r4, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8013516:	3b0a      	subs	r3, #10
 8013518:	18e1      	adds	r1, r4, r3
 801351a:	3b18      	subs	r3, #24
 801351c:	18e5      	adds	r5, r4, r3
            break;
        }
        case INIT_TYPE_APP_DEFAULTS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801351e:	0028      	movs	r0, r5
 8013520:	f7ff fd94 	bl	801304c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 8013524:	23df      	movs	r3, #223	; 0xdf
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	18e0      	adds	r0, r4, r3
 801352a:	2206      	movs	r2, #6
 801352c:	0029      	movs	r1, r5
 801352e:	f7ff fd8d 	bl	801304c <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 8013532:	e007      	b.n	8013544 <RegionUS915InitDefaults+0xc8>
            if( params->NvmCtx != 0 )
 8013534:	6811      	ldr	r1, [r2, #0]
 8013536:	2900      	cmp	r1, #0
 8013538:	d004      	beq.n	8013544 <RegionUS915InitDefaults+0xc8>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801353a:	22e6      	movs	r2, #230	; 0xe6
 801353c:	4812      	ldr	r0, [pc, #72]	; (8013588 <RegionUS915InitDefaults+0x10c>)
 801353e:	0092      	lsls	r2, r2, #2
 8013540:	f000 fde7 	bl	8014112 <memcpy1>
}
 8013544:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8013546:	23e2      	movs	r3, #226	; 0xe2
 8013548:	4c0f      	ldr	r4, [pc, #60]	; (8013588 <RegionUS915InitDefaults+0x10c>)
 801354a:	009b      	lsls	r3, r3, #2
 801354c:	18e1      	adds	r1, r4, r3
 801354e:	3b18      	subs	r3, #24
 8013550:	18e0      	adds	r0, r4, r3
 8013552:	2206      	movs	r2, #6
 8013554:	f7ff fd7a 	bl	801304c <RegionCommonChanMaskCopy>
 8013558:	2300      	movs	r3, #0
 801355a:	21df      	movs	r1, #223	; 0xdf
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 801355c:	20dc      	movs	r0, #220	; 0xdc
 801355e:	18e2      	adds	r2, r4, r3
 8013560:	0080      	lsls	r0, r0, #2
 8013562:	0089      	lsls	r1, r1, #2
 8013564:	1851      	adds	r1, r2, r1
 8013566:	1812      	adds	r2, r2, r0
 8013568:	8810      	ldrh	r0, [r2, #0]
 801356a:	880a      	ldrh	r2, [r1, #0]
 801356c:	3302      	adds	r3, #2
 801356e:	4002      	ands	r2, r0
 8013570:	800a      	strh	r2, [r1, #0]
            for( uint8_t i = 0; i < 6; i++ )
 8013572:	2b0c      	cmp	r3, #12
 8013574:	d1f1      	bne.n	801355a <RegionUS915InitDefaults+0xde>
 8013576:	e7e5      	b.n	8013544 <RegionUS915InitDefaults+0xc8>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8013578:	23e2      	movs	r3, #226	; 0xe2
 801357a:	4c03      	ldr	r4, [pc, #12]	; (8013588 <RegionUS915InitDefaults+0x10c>)
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	18e1      	adds	r1, r4, r3
 8013580:	3b18      	subs	r3, #24
 8013582:	18e5      	adds	r5, r4, r3
 8013584:	2206      	movs	r2, #6
 8013586:	e7ca      	b.n	801351e <RegionUS915InitDefaults+0xa2>
 8013588:	200018e8 	.word	0x200018e8
 801358c:	00000395 	.word	0x00000395
 8013590:	35c80160 	.word	0x35c80160
 8013594:	368b5160 	.word	0x368b5160
 8013598:	00030d40 	.word	0x00030d40
 801359c:	35d2afc0 	.word	0x35d2afc0
 80135a0:	3695ffc0 	.word	0x3695ffc0
 80135a4:	00186a00 	.word	0x00186a00
 80135a8:	0000038a 	.word	0x0000038a
 80135ac:	0000038e 	.word	0x0000038e
 80135b0:	00000392 	.word	0x00000392

080135b4 <RegionUS915GetNvmCtx>:

void* RegionUS915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionUS915NvmCtx_t );
 80135b4:	23e6      	movs	r3, #230	; 0xe6
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 80135ba:	4801      	ldr	r0, [pc, #4]	; (80135c0 <RegionUS915GetNvmCtx+0xc>)
 80135bc:	4770      	bx	lr
 80135be:	46c0      	nop			; (mov r8, r8)
 80135c0:	200018e8 	.word	0x200018e8

080135c4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80135c4:	0003      	movs	r3, r0
    switch( phyAttribute )
 80135c6:	1f08      	subs	r0, r1, #4
{
 80135c8:	b510      	push	{r4, lr}
    switch( phyAttribute )
 80135ca:	2805      	cmp	r0, #5
 80135cc:	d81b      	bhi.n	8013606 <RegionUS915Verify+0x42>
 80135ce:	f7ed fad5 	bl	8000b7c <__gnu_thumb1_case_uqi>
 80135d2:	0803      	.short	0x0803
 80135d4:	16161a0c 	.word	0x16161a0c
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80135d8:	2000      	movs	r0, #0
 80135da:	2204      	movs	r2, #4
 80135dc:	5618      	ldrsb	r0, [r3, r0]
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80135de:	2100      	movs	r1, #0
 80135e0:	e007      	b.n	80135f2 <RegionUS915Verify+0x2e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80135e2:	2000      	movs	r0, #0
 80135e4:	2205      	movs	r2, #5
 80135e6:	5618      	ldrsb	r0, [r3, r0]
 80135e8:	e7f9      	b.n	80135de <RegionUS915Verify+0x1a>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80135ea:	2000      	movs	r0, #0
 80135ec:	220d      	movs	r2, #13
 80135ee:	2108      	movs	r1, #8
 80135f0:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80135f2:	f7ff fcec 	bl	8012fce <RegionCommonValueInRange>
 80135f6:	1e43      	subs	r3, r0, #1
 80135f8:	4198      	sbcs	r0, r3
 80135fa:	b2c0      	uxtb	r0, r0
            return US915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 80135fc:	bd10      	pop	{r4, pc}
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80135fe:	2000      	movs	r0, #0
 8013600:	220a      	movs	r2, #10
 8013602:	5618      	ldrsb	r0, [r3, r0]
 8013604:	e7eb      	b.n	80135de <RegionUS915Verify+0x1a>
            return US915_DUTY_CYCLE_ENABLED;
 8013606:	2000      	movs	r0, #0
 8013608:	e7f8      	b.n	80135fc <RegionUS915Verify+0x38>
	...

0801360c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801360c:	b570      	push	{r4, r5, r6, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801360e:	7903      	ldrb	r3, [r0, #4]
 8013610:	2b10      	cmp	r3, #16
 8013612:	d119      	bne.n	8013648 <RegionUS915ApplyCFList+0x3c>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8013614:	6804      	ldr	r4, [r0, #0]
 8013616:	7be3      	ldrb	r3, [r4, #15]
 8013618:	2b01      	cmp	r3, #1
 801361a:	d115      	bne.n	8013648 <RegionUS915ApplyCFList+0x3c>
 801361c:	2300      	movs	r3, #0
 801361e:	4d0b      	ldr	r5, [pc, #44]	; (801364c <RegionUS915ApplyCFList+0x40>)
 8013620:	20dc      	movs	r0, #220	; 0xdc
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8013622:	5ce1      	ldrb	r1, [r4, r3]
 8013624:	18ea      	adds	r2, r5, r3
 8013626:	0080      	lsls	r0, r0, #2
 8013628:	1816      	adds	r6, r2, r0
 801362a:	8031      	strh	r1, [r6, #0]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801362c:	18e0      	adds	r0, r4, r3
 801362e:	7840      	ldrb	r0, [r0, #1]
 8013630:	3302      	adds	r3, #2
 8013632:	0200      	lsls	r0, r0, #8
 8013634:	4301      	orrs	r1, r0
 8013636:	20df      	movs	r0, #223	; 0xdf
 8013638:	0080      	lsls	r0, r0, #2
 801363a:	8031      	strh	r1, [r6, #0]
 801363c:	1812      	adds	r2, r2, r0
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 801363e:	8810      	ldrh	r0, [r2, #0]
 8013640:	4001      	ands	r1, r0
 8013642:	8011      	strh	r1, [r2, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8013644:	2b0a      	cmp	r3, #10
 8013646:	d1eb      	bne.n	8013620 <RegionUS915ApplyCFList+0x14>
    }
}
 8013648:	bd70      	pop	{r4, r5, r6, pc}
 801364a:	46c0      	nop			; (mov r8, r8)
 801364c:	200018e8 	.word	0x200018e8

08013650 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013650:	b570      	push	{r4, r5, r6, lr}
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8013652:	2204      	movs	r2, #4
{
 8013654:	0005      	movs	r5, r0
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8013656:	2100      	movs	r1, #0
 8013658:	6800      	ldr	r0, [r0, #0]
 801365a:	f7ff fcd7 	bl	801300c <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
        ( nbChannels > 0 ) )
    {
        return false;
 801365e:	2400      	movs	r4, #0
    if( ( nbChannels < 2 ) &&
 8013660:	2801      	cmp	r0, #1
 8013662:	d01d      	beq.n	80136a0 <RegionUS915ChanMaskSet+0x50>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8013664:	792c      	ldrb	r4, [r5, #4]
 8013666:	2c00      	cmp	r4, #0
 8013668:	d003      	beq.n	8013672 <RegionUS915ChanMaskSet+0x22>
 801366a:	2c01      	cmp	r4, #1
 801366c:	d01a      	beq.n	80136a4 <RegionUS915ChanMaskSet+0x54>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        default:
            return false;
 801366e:	2400      	movs	r4, #0
 8013670:	e016      	b.n	80136a0 <RegionUS915ChanMaskSet+0x50>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013672:	23dc      	movs	r3, #220	; 0xdc
 8013674:	4e10      	ldr	r6, [pc, #64]	; (80136b8 <RegionUS915ChanMaskSet+0x68>)
 8013676:	009b      	lsls	r3, r3, #2
 8013678:	18f0      	adds	r0, r6, r3
 801367a:	2206      	movs	r2, #6
 801367c:	6829      	ldr	r1, [r5, #0]
 801367e:	f7ff fce5 	bl	801304c <RegionCommonChanMaskCopy>
 8013682:	22df      	movs	r2, #223	; 0xdf
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 8013684:	21dc      	movs	r1, #220	; 0xdc
 8013686:	1933      	adds	r3, r6, r4
 8013688:	0089      	lsls	r1, r1, #2
 801368a:	0092      	lsls	r2, r2, #2
 801368c:	189a      	adds	r2, r3, r2
 801368e:	185b      	adds	r3, r3, r1
 8013690:	8819      	ldrh	r1, [r3, #0]
 8013692:	8813      	ldrh	r3, [r2, #0]
 8013694:	3402      	adds	r4, #2
 8013696:	400b      	ands	r3, r1
 8013698:	8013      	strh	r3, [r2, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801369a:	2c0c      	cmp	r4, #12
 801369c:	d1f1      	bne.n	8013682 <RegionUS915ChanMaskSet+0x32>
    }
    return true;
 801369e:	3c0b      	subs	r4, #11
}
 80136a0:	0020      	movs	r0, r4
 80136a2:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80136a4:	23e2      	movs	r3, #226	; 0xe2
 80136a6:	4804      	ldr	r0, [pc, #16]	; (80136b8 <RegionUS915ChanMaskSet+0x68>)
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	2206      	movs	r2, #6
 80136ac:	6829      	ldr	r1, [r5, #0]
 80136ae:	18c0      	adds	r0, r0, r3
 80136b0:	f7ff fccc 	bl	801304c <RegionCommonChanMaskCopy>
            break;
 80136b4:	e7f4      	b.n	80136a0 <RegionUS915ChanMaskSet+0x50>
 80136b6:	46c0      	nop			; (mov r8, r8)
 80136b8:	200018e8 	.word	0x200018e8

080136bc <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80136bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136be:	b087      	sub	sp, #28
 80136c0:	001c      	movs	r4, r3
 80136c2:	9104      	str	r1, [sp, #16]
 80136c4:	0015      	movs	r5, r2
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80136c6:	1c03      	adds	r3, r0, #0
 80136c8:	280d      	cmp	r0, #13
 80136ca:	dd00      	ble.n	80136ce <RegionUS915ComputeRxWindowParameters+0x12>
 80136cc:	230d      	movs	r3, #13
 80136ce:	b258      	sxtb	r0, r3
    switch( BandwidthsUS915[drIndex] )
 80136d0:	4913      	ldr	r1, [pc, #76]	; (8013720 <RegionUS915ComputeRxWindowParameters+0x64>)
 80136d2:	0082      	lsls	r2, r0, #2
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80136d4:	7063      	strb	r3, [r4, #1]
    switch( BandwidthsUS915[drIndex] )
 80136d6:	4f13      	ldr	r7, [pc, #76]	; (8013724 <RegionUS915ComputeRxWindowParameters+0x68>)
 80136d8:	5853      	ldr	r3, [r2, r1]
            return 1;
 80136da:	2601      	movs	r6, #1
    switch( BandwidthsUS915[drIndex] )
 80136dc:	42bb      	cmp	r3, r7
 80136de:	d004      	beq.n	80136ea <RegionUS915ComputeRxWindowParameters+0x2e>
            return 0;
 80136e0:	4e11      	ldr	r6, [pc, #68]	; (8013728 <RegionUS915ComputeRxWindowParameters+0x6c>)
 80136e2:	199b      	adds	r3, r3, r6
 80136e4:	425e      	negs	r6, r3
 80136e6:	415e      	adcs	r6, r3
 80136e8:	0076      	lsls	r6, r6, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80136ea:	4b10      	ldr	r3, [pc, #64]	; (801372c <RegionUS915ComputeRxWindowParameters+0x70>)
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80136ec:	70a6      	strb	r6, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80136ee:	5889      	ldr	r1, [r1, r2]
 80136f0:	5c18      	ldrb	r0, [r3, r0]
 80136f2:	f7ff fd71 	bl	80131d8 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80136f6:	4b0e      	ldr	r3, [pc, #56]	; (8013730 <RegionUS915ComputeRxWindowParameters+0x74>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80136f8:	0006      	movs	r6, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80136fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80136fc:	000f      	movs	r7, r1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80136fe:	9305      	str	r3, [sp, #20]
 8013700:	4798      	blx	r3
 8013702:	0023      	movs	r3, r4
 8013704:	3408      	adds	r4, #8
 8013706:	330c      	adds	r3, #12
 8013708:	9302      	str	r3, [sp, #8]
 801370a:	9000      	str	r0, [sp, #0]
 801370c:	9401      	str	r4, [sp, #4]
 801370e:	002b      	movs	r3, r5
 8013710:	9a04      	ldr	r2, [sp, #16]
 8013712:	0030      	movs	r0, r6
 8013714:	0039      	movs	r1, r7
 8013716:	f7ff fd79 	bl	801320c <RegionCommonComputeRxWindowParameters>
}
 801371a:	b007      	add	sp, #28
 801371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801371e:	46c0      	nop			; (mov r8, r8)
 8013720:	0801860c 	.word	0x0801860c
 8013724:	0003d090 	.word	0x0003d090
 8013728:	fff85ee0 	.word	0xfff85ee0
 801372c:	08018660 	.word	0x08018660
 8013730:	08018acc 	.word	0x08018acc

08013734 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013734:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 8013736:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8013738:	4f25      	ldr	r7, [pc, #148]	; (80137d0 <RegionUS915RxConfig+0x9c>)
{
 801373a:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 801373c:	68fb      	ldr	r3, [r7, #12]
{
 801373e:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 8013740:	5786      	ldrsb	r6, [r0, r6]
{
 8013742:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 8013744:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 8013746:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 8013748:	4798      	blx	r3
    {
        return false;
 801374a:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 801374c:	4298      	cmp	r0, r3
 801374e:	d13a      	bne.n	80137c6 <RegionUS915RxConfig+0x92>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8013750:	7ce3      	ldrb	r3, [r4, #19]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d106      	bne.n	8013764 <RegionUS915RxConfig+0x30>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8013756:	7825      	ldrb	r5, [r4, #0]
 8013758:	3307      	adds	r3, #7
 801375a:	402b      	ands	r3, r5
 801375c:	4d1d      	ldr	r5, [pc, #116]	; (80137d4 <RegionUS915RxConfig+0xa0>)
 801375e:	435d      	muls	r5, r3
 8013760:	4b1d      	ldr	r3, [pc, #116]	; (80137d8 <RegionUS915RxConfig+0xa4>)
 8013762:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8013764:	4b1d      	ldr	r3, [pc, #116]	; (80137dc <RegionUS915RxConfig+0xa8>)

    Radio.SetChannel( frequency );
 8013766:	0028      	movs	r0, r5
    phyDr = DataratesUS915[dr];
 8013768:	579b      	ldrsb	r3, [r3, r6]
 801376a:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	930d      	str	r3, [sp, #52]	; 0x34
 8013770:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8013772:	7ca3      	ldrb	r3, [r4, #18]
 8013774:	8922      	ldrh	r2, [r4, #8]
 8013776:	9309      	str	r3, [sp, #36]	; 0x24
 8013778:	2300      	movs	r3, #0
 801377a:	2001      	movs	r0, #1
 801377c:	9202      	str	r2, [sp, #8]
 801377e:	2208      	movs	r2, #8
 8013780:	9307      	str	r3, [sp, #28]
 8013782:	9306      	str	r3, [sp, #24]
 8013784:	9305      	str	r3, [sp, #20]
 8013786:	9304      	str	r3, [sp, #16]
 8013788:	9303      	str	r3, [sp, #12]
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	6a3b      	ldr	r3, [r7, #32]
 801378e:	9201      	str	r2, [sp, #4]
 8013790:	930d      	str	r3, [sp, #52]	; 0x34
 8013792:	78a1      	ldrb	r1, [r4, #2]
 8013794:	0003      	movs	r3, r0
 8013796:	9008      	str	r0, [sp, #32]
 8013798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801379a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801379c:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 801379e:	7c63      	ldrb	r3, [r4, #17]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d013      	beq.n	80137cc <RegionUS915RxConfig+0x98>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80137a4:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <RegionUS915RxConfig+0xac>)
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80137a6:	5d99      	ldrb	r1, [r3, r6]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80137a8:	4b09      	ldr	r3, [pc, #36]	; (80137d0 <RegionUS915RxConfig+0x9c>)
 80137aa:	310d      	adds	r1, #13
 80137ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137ae:	b2c9      	uxtb	r1, r1
 80137b0:	2001      	movs	r0, #1
 80137b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80137b4:	4798      	blx	r3
    // TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );
 80137b6:	0032      	movs	r2, r6
 80137b8:	0029      	movs	r1, r5
 80137ba:	480a      	ldr	r0, [pc, #40]	; (80137e4 <RegionUS915RxConfig+0xb0>)
 80137bc:	f000 ff4e 	bl	801465c <TraceSend>

    *datarate = (uint8_t) dr;
 80137c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137c2:	701e      	strb	r6, [r3, #0]
    return true;
 80137c4:	2301      	movs	r3, #1
}
 80137c6:	0018      	movs	r0, r3
 80137c8:	b00f      	add	sp, #60	; 0x3c
 80137ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80137cc:	4b06      	ldr	r3, [pc, #24]	; (80137e8 <RegionUS915RxConfig+0xb4>)
 80137ce:	e7ea      	b.n	80137a6 <RegionUS915RxConfig+0x72>
 80137d0:	08018acc 	.word	0x08018acc
 80137d4:	000927c0 	.word	0x000927c0
 80137d8:	370870a0 	.word	0x370870a0
 80137dc:	08018660 	.word	0x08018660
 80137e0:	08018670 	.word	0x08018670
 80137e4:	08018690 	.word	0x08018690
 80137e8:	08018680 	.word	0x08018680

080137ec <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80137ec:	2301      	movs	r3, #1
{
 80137ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80137f0:	2602      	movs	r6, #2
{
 80137f2:	b091      	sub	sp, #68	; 0x44
 80137f4:	920d      	str	r2, [sp, #52]	; 0x34
 80137f6:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80137f8:	56c3      	ldrsb	r3, [r0, r3]
 80137fa:	4a3f      	ldr	r2, [pc, #252]	; (80138f8 <RegionUS915TxConfig+0x10c>)
{
 80137fc:	0005      	movs	r5, r0
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80137fe:	56d2      	ldrsb	r2, [r2, r3]
 8013800:	920b      	str	r2, [sp, #44]	; 0x2c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8013802:	5786      	ldrsb	r6, [r0, r6]
    if( datarate == DR_4 )
 8013804:	2b04      	cmp	r3, #4
 8013806:	d157      	bne.n	80138b8 <RegionUS915TxConfig+0xcc>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8013808:	1c34      	adds	r4, r6, #0
 801380a:	2e02      	cmp	r6, #2
 801380c:	da00      	bge.n	8013810 <RegionUS915TxConfig+0x24>
 801380e:	2402      	movs	r4, #2
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8013810:	2301      	movs	r3, #1
            return 1;
 8013812:	2101      	movs	r1, #1
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8013814:	56eb      	ldrsb	r3, [r5, r3]
    switch( BandwidthsUS915[drIndex] )
 8013816:	4a39      	ldr	r2, [pc, #228]	; (80138fc <RegionUS915TxConfig+0x110>)
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	589b      	ldr	r3, [r3, r2]
 801381c:	4a38      	ldr	r2, [pc, #224]	; (8013900 <RegionUS915TxConfig+0x114>)
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801381e:	b264      	sxtb	r4, r4
            return 1;
 8013820:	000f      	movs	r7, r1
    switch( BandwidthsUS915[drIndex] )
 8013822:	4293      	cmp	r3, r2
 8013824:	d005      	beq.n	8013832 <RegionUS915TxConfig+0x46>
            return 0;
 8013826:	4a37      	ldr	r2, [pc, #220]	; (8013904 <RegionUS915TxConfig+0x118>)
 8013828:	189b      	adds	r3, r3, r2
 801382a:	425a      	negs	r2, r3
 801382c:	4153      	adcs	r3, r2
 801382e:	408b      	lsls	r3, r1
 8013830:	001f      	movs	r7, r3
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013832:	4935      	ldr	r1, [pc, #212]	; (8013908 <RegionUS915TxConfig+0x11c>)
 8013834:	2200      	movs	r2, #0
 8013836:	0020      	movs	r0, r4
 8013838:	f7ff fd48 	bl	80132cc <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801383c:	220c      	movs	r2, #12
 801383e:	782b      	ldrb	r3, [r5, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013840:	900e      	str	r0, [sp, #56]	; 0x38
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8013842:	4353      	muls	r3, r2
 8013844:	4a31      	ldr	r2, [pc, #196]	; (801390c <RegionUS915TxConfig+0x120>)

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8013846:	2601      	movs	r6, #1
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8013848:	6952      	ldr	r2, [r2, #20]
 801384a:	920f      	str	r2, [sp, #60]	; 0x3c
 801384c:	4a30      	ldr	r2, [pc, #192]	; (8013910 <RegionUS915TxConfig+0x124>)
 801384e:	5898      	ldr	r0, [r3, r2]
 8013850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013852:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8013854:	4b2f      	ldr	r3, [pc, #188]	; (8013914 <RegionUS915TxConfig+0x128>)
 8013856:	2200      	movs	r2, #0
 8013858:	9308      	str	r3, [sp, #32]
 801385a:	2308      	movs	r3, #8
 801385c:	9302      	str	r3, [sp, #8]
 801385e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013860:	9207      	str	r2, [sp, #28]
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	4b29      	ldr	r3, [pc, #164]	; (801390c <RegionUS915TxConfig+0x120>)
 8013866:	9206      	str	r2, [sp, #24]
 8013868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386a:	9205      	str	r2, [sp, #20]
 801386c:	930b      	str	r3, [sp, #44]	; 0x2c
 801386e:	9203      	str	r2, [sp, #12]
 8013870:	003b      	movs	r3, r7
 8013872:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013874:	0030      	movs	r0, r6
 8013876:	9604      	str	r6, [sp, #16]
 8013878:	9601      	str	r6, [sp, #4]
 801387a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801387c:	47b8      	blx	r7
    // TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );
 801387e:	210c      	movs	r1, #12
 8013880:	2201      	movs	r2, #1
 8013882:	782b      	ldrb	r3, [r5, #0]
 8013884:	56aa      	ldrsb	r2, [r5, r2]
 8013886:	434b      	muls	r3, r1
 8013888:	4921      	ldr	r1, [pc, #132]	; (8013910 <RegionUS915TxConfig+0x124>)
 801388a:	4823      	ldr	r0, [pc, #140]	; (8013918 <RegionUS915TxConfig+0x12c>)
 801388c:	5859      	ldr	r1, [r3, r1]
 801388e:	f000 fee5 	bl	801465c <TraceSend>

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8013892:	4b1e      	ldr	r3, [pc, #120]	; (801390c <RegionUS915TxConfig+0x120>)
 8013894:	7b29      	ldrb	r1, [r5, #12]
 8013896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013898:	0030      	movs	r0, r6
 801389a:	930b      	str	r3, [sp, #44]	; 0x2c
 801389c:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 801389e:	4b1b      	ldr	r3, [pc, #108]	; (801390c <RegionUS915TxConfig+0x120>)
 80138a0:	7b29      	ldrb	r1, [r5, #12]
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	0030      	movs	r0, r6
 80138a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80138a8:	4798      	blx	r3
 80138aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138ac:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;

    return true;
}
 80138ae:	0030      	movs	r0, r6
    *txPower = txPowerLimited;
 80138b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138b2:	701c      	strb	r4, [r3, #0]
}
 80138b4:	b011      	add	sp, #68	; 0x44
 80138b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80138b8:	230c      	movs	r3, #12
 80138ba:	2702      	movs	r7, #2
 80138bc:	782a      	ldrb	r2, [r5, #0]
 80138be:	4814      	ldr	r0, [pc, #80]	; (8013910 <RegionUS915TxConfig+0x124>)
 80138c0:	4353      	muls	r3, r2
 80138c2:	18c3      	adds	r3, r0, r3
 80138c4:	7a5b      	ldrb	r3, [r3, #9]
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80138c6:	2204      	movs	r2, #4
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80138c8:	3336      	adds	r3, #54	; 0x36
 80138ca:	011b      	lsls	r3, r3, #4
 80138cc:	18c3      	adds	r3, r0, r3
 80138ce:	57df      	ldrsb	r7, [r3, r7]
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80138d0:	23dc      	movs	r3, #220	; 0xdc
 80138d2:	009b      	lsls	r3, r3, #2
 80138d4:	18c0      	adds	r0, r0, r3
 80138d6:	2100      	movs	r1, #0
 80138d8:	f7ff fb98 	bl	801300c <RegionCommonCountChannels>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80138dc:	1c34      	adds	r4, r6, #0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80138de:	2831      	cmp	r0, #49	; 0x31
 80138e0:	d904      	bls.n	80138ec <RegionUS915TxConfig+0x100>
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80138e2:	42be      	cmp	r6, r7
 80138e4:	db00      	blt.n	80138e8 <RegionUS915TxConfig+0xfc>
 80138e6:	e793      	b.n	8013810 <RegionUS915TxConfig+0x24>
 80138e8:	1c3c      	adds	r4, r7, #0
 80138ea:	e791      	b.n	8013810 <RegionUS915TxConfig+0x24>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80138ec:	2e05      	cmp	r6, #5
 80138ee:	db00      	blt.n	80138f2 <RegionUS915TxConfig+0x106>
 80138f0:	e78e      	b.n	8013810 <RegionUS915TxConfig+0x24>
 80138f2:	2405      	movs	r4, #5
 80138f4:	e78c      	b.n	8013810 <RegionUS915TxConfig+0x24>
 80138f6:	46c0      	nop			; (mov r8, r8)
 80138f8:	08018660 	.word	0x08018660
 80138fc:	0801860c 	.word	0x0801860c
 8013900:	0003d090 	.word	0x0003d090
 8013904:	fff85ee0 	.word	0xfff85ee0
 8013908:	41f00000 	.word	0x41f00000
 801390c:	08018acc 	.word	0x08018acc
 8013910:	200018e8 	.word	0x200018e8
 8013914:	00000bb8 	.word	0x00000bb8
 8013918:	080186ac 	.word	0x080186ac

0801391c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391e:	b095      	sub	sp, #84	; 0x54
 8013920:	9103      	str	r1, [sp, #12]
 8013922:	9204      	str	r2, [sp, #16]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8013924:	2100      	movs	r1, #0
 8013926:	220c      	movs	r2, #12
{
 8013928:	0005      	movs	r5, r0
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801392a:	a809      	add	r0, sp, #36	; 0x24
{
 801392c:	9305      	str	r3, [sp, #20]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801392e:	f7ec fc67 	bl	8000200 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 8013932:	23dc      	movs	r3, #220	; 0xdc
 8013934:	496b      	ldr	r1, [pc, #428]	; (8013ae4 <RegionUS915LinkAdrReq+0x1c8>)
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	2206      	movs	r2, #6
 801393a:	18c9      	adds	r1, r1, r3
 801393c:	a809      	add	r0, sp, #36	; 0x24
 801393e:	f7ff fb85 	bl	801304c <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 8013942:	2600      	movs	r6, #0

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013944:	7a2b      	ldrb	r3, [r5, #8]
 8013946:	ac09      	add	r4, sp, #36	; 0x24
 8013948:	42b3      	cmp	r3, r6
 801394a:	d907      	bls.n	801395c <RegionUS915LinkAdrReq+0x40>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801394c:	686b      	ldr	r3, [r5, #4]
 801394e:	af07      	add	r7, sp, #28
 8013950:	1998      	adds	r0, r3, r6
 8013952:	0039      	movs	r1, r7
 8013954:	f7ff fbde 	bl	8013114 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 8013958:	2800      	cmp	r0, #0
 801395a:	d10d      	bne.n	8013978 <RegionUS915LinkAdrReq+0x5c>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801395c:	ab07      	add	r3, sp, #28
 801395e:	785b      	ldrb	r3, [r3, #1]
 8013960:	b25b      	sxtb	r3, r3
 8013962:	2b03      	cmp	r3, #3
 8013964:	dc59      	bgt.n	8013a1a <RegionUS915LinkAdrReq+0xfe>
 8013966:	2204      	movs	r2, #4
 8013968:	2100      	movs	r1, #0
 801396a:	0020      	movs	r0, r4
 801396c:	f7ff fb4e 	bl	801300c <RegionCommonCountChannels>
 8013970:	2801      	cmp	r0, #1
 8013972:	d852      	bhi.n	8013a1a <RegionUS915LinkAdrReq+0xfe>
    {
        status &= 0xFE; // Channel mask KO
 8013974:	2306      	movs	r3, #6
 8013976:	e051      	b.n	8013a1c <RegionUS915LinkAdrReq+0x100>
        if( linkAdrParams.ChMaskCtrl == 6 )
 8013978:	78fb      	ldrb	r3, [r7, #3]
        bytesProcessed += nextIndex;
 801397a:	1836      	adds	r6, r6, r0
 801397c:	b2f6      	uxtb	r6, r6
 801397e:	88ba      	ldrh	r2, [r7, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 8013980:	2b06      	cmp	r3, #6
 8013982:	d106      	bne.n	8013992 <RegionUS915LinkAdrReq+0x76>
            channelsMask[0] = 0xFFFF;
 8013984:	3b07      	subs	r3, #7
            channelsMask[0] = 0x0000;
 8013986:	8023      	strh	r3, [r4, #0]
            channelsMask[1] = 0x0000;
 8013988:	8063      	strh	r3, [r4, #2]
            channelsMask[2] = 0x0000;
 801398a:	80a3      	strh	r3, [r4, #4]
            channelsMask[3] = 0x0000;
 801398c:	80e3      	strh	r3, [r4, #6]
            channelsMask[4] = linkAdrParams.ChMask;
 801398e:	8122      	strh	r2, [r4, #8]
 8013990:	e7d8      	b.n	8013944 <RegionUS915LinkAdrReq+0x28>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8013992:	2b07      	cmp	r3, #7
 8013994:	d101      	bne.n	801399a <RegionUS915LinkAdrReq+0x7e>
            channelsMask[0] = 0x0000;
 8013996:	2300      	movs	r3, #0
 8013998:	e7f5      	b.n	8013986 <RegionUS915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801399a:	2b05      	cmp	r3, #5
 801399c:	d13a      	bne.n	8013a14 <RegionUS915LinkAdrReq+0xf8>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801399e:	33fa      	adds	r3, #250	; 0xfa
 80139a0:	4013      	ands	r3, r2
                        channelsMask[cntChannelMask] |= 0xFF00;
 80139a2:	4a51      	ldr	r2, [pc, #324]	; (8013ae8 <RegionUS915LinkAdrReq+0x1cc>)
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80139a4:	9302      	str	r3, [sp, #8]
 80139a6:	2300      	movs	r3, #0
                        channelsMask[cntChannelMask] |= 0xFF00;
 80139a8:	4694      	mov	ip, r2
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80139aa:	9301      	str	r3, [sp, #4]
 80139ac:	2201      	movs	r2, #1
 80139ae:	9901      	ldr	r1, [sp, #4]
 80139b0:	2701      	movs	r7, #1
 80139b2:	408a      	lsls	r2, r1
 80139b4:	9802      	ldr	r0, [sp, #8]
 80139b6:	400f      	ands	r7, r1
 80139b8:	4202      	tst	r2, r0
 80139ba:	d019      	beq.n	80139f0 <RegionUS915LinkAdrReq+0xd4>
 80139bc:	0058      	lsls	r0, r3, #1
                    if( ( i % 2 ) == 0 )
 80139be:	2f00      	cmp	r7, #0
 80139c0:	d10c      	bne.n	80139dc <RegionUS915LinkAdrReq+0xc0>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80139c2:	21ff      	movs	r1, #255	; 0xff
 80139c4:	5a27      	ldrh	r7, [r4, r0]
 80139c6:	430f      	orrs	r7, r1
 80139c8:	5227      	strh	r7, [r4, r0]
                        channelsMask[4] |= ( bitMask << i );
 80139ca:	8920      	ldrh	r0, [r4, #8]
 80139cc:	4302      	orrs	r2, r0
                        channelsMask[4] &= ~( bitMask << i );
 80139ce:	8122      	strh	r2, [r4, #8]
 80139d0:	9a01      	ldr	r2, [sp, #4]
 80139d2:	3201      	adds	r2, #1
 80139d4:	9201      	str	r2, [sp, #4]
            for( uint8_t i = 0; i <= 7; i++ )
 80139d6:	2a08      	cmp	r2, #8
 80139d8:	d1e8      	bne.n	80139ac <RegionUS915LinkAdrReq+0x90>
 80139da:	e7b3      	b.n	8013944 <RegionUS915LinkAdrReq+0x28>
                        channelsMask[cntChannelMask] |= 0xFF00;
 80139dc:	4661      	mov	r1, ip
 80139de:	5a27      	ldrh	r7, [r4, r0]
 80139e0:	430f      	orrs	r7, r1
 80139e2:	5227      	strh	r7, [r4, r0]
                        channelsMask[4] |= ( bitMask << i );
 80139e4:	8920      	ldrh	r0, [r4, #8]
 80139e6:	4302      	orrs	r2, r0
                        cntChannelMask++;
 80139e8:	3301      	adds	r3, #1
                        channelsMask[4] &= ~( bitMask << i );
 80139ea:	8122      	strh	r2, [r4, #8]
                        cntChannelMask++;
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	e7ef      	b.n	80139d0 <RegionUS915LinkAdrReq+0xb4>
 80139f0:	0058      	lsls	r0, r3, #1
 80139f2:	43d2      	mvns	r2, r2
                    if( ( i % 2 ) == 0 )
 80139f4:	2f00      	cmp	r7, #0
 80139f6:	d106      	bne.n	8013a06 <RegionUS915LinkAdrReq+0xea>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80139f8:	21ff      	movs	r1, #255	; 0xff
 80139fa:	5a27      	ldrh	r7, [r4, r0]
 80139fc:	438f      	bics	r7, r1
 80139fe:	5227      	strh	r7, [r4, r0]
                        channelsMask[4] &= ~( bitMask << i );
 8013a00:	8920      	ldrh	r0, [r4, #8]
 8013a02:	4002      	ands	r2, r0
 8013a04:	e7e3      	b.n	80139ce <RegionUS915LinkAdrReq+0xb2>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8013a06:	21ff      	movs	r1, #255	; 0xff
 8013a08:	5a27      	ldrh	r7, [r4, r0]
 8013a0a:	400f      	ands	r7, r1
 8013a0c:	5227      	strh	r7, [r4, r0]
                        channelsMask[4] &= ~( bitMask << i );
 8013a0e:	8920      	ldrh	r0, [r4, #8]
 8013a10:	4002      	ands	r2, r0
 8013a12:	e7e9      	b.n	80139e8 <RegionUS915LinkAdrReq+0xcc>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8013a14:	005b      	lsls	r3, r3, #1
 8013a16:	52e2      	strh	r2, [r4, r3]
 8013a18:	e794      	b.n	8013944 <RegionUS915LinkAdrReq+0x28>
    uint8_t bytesProcessed = 0;
 8013a1a:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 8013a1c:	a80c      	add	r0, sp, #48	; 0x30
 8013a1e:	7103      	strb	r3, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013a20:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8013a22:	2104      	movs	r1, #4
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013a24:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013a26:	ab07      	add	r3, sp, #28
 8013a28:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8013a2a:	4c2e      	ldr	r4, [pc, #184]	; (8013ae4 <RegionUS915LinkAdrReq+0x1c8>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013a2c:	7182      	strb	r2, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013a2e:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8013a30:	af09      	add	r7, sp, #36	; 0x24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013a32:	71c2      	strb	r2, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013a34:	781a      	ldrb	r2, [r3, #0]
 8013a36:	7202      	strb	r2, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013a38:	7aea      	ldrb	r2, [r5, #11]
 8013a3a:	7242      	strb	r2, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013a3c:	7b2a      	ldrb	r2, [r5, #12]
 8013a3e:	7282      	strb	r2, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013a40:	7b6a      	ldrb	r2, [r5, #13]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8013a42:	7541      	strb	r1, [r0, #21]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013a44:	72c2      	strb	r2, [r0, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8013a46:	2248      	movs	r2, #72	; 0x48
 8013a48:	7302      	strb	r2, [r0, #12]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	7502      	strb	r2, [r0, #20]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8013a4e:	7742      	strb	r2, [r0, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013a50:	682a      	ldr	r2, [r5, #0]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8013a52:	3106      	adds	r1, #6
 8013a54:	7701      	strb	r1, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013a56:	920c      	str	r2, [sp, #48]	; 0x30

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013a58:	a906      	add	r1, sp, #24
 8013a5a:	aa06      	add	r2, sp, #24
 8013a5c:	3206      	adds	r2, #6
 8013a5e:	3105      	adds	r1, #5
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8013a60:	6107      	str	r7, [r0, #16]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8013a62:	6184      	str	r4, [r0, #24]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013a64:	f7ff fb71 	bl	801314a <RegionCommonLinkAdrReqVerifyParams>
 8013a68:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8013a6a:	2807      	cmp	r0, #7
 8013a6c:	d12a      	bne.n	8013ac4 <RegionUS915LinkAdrReq+0x1a8>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 8013a6e:	23dc      	movs	r3, #220	; 0xdc
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	18e0      	adds	r0, r4, r3
 8013a74:	2206      	movs	r2, #6
 8013a76:	0039      	movs	r1, r7
 8013a78:	f7ff fae8 	bl	801304c <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 8013a7c:	22df      	movs	r2, #223	; 0xdf
 8013a7e:	23dc      	movs	r3, #220	; 0xdc
 8013a80:	0092      	lsls	r2, r2, #2
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	5aa1      	ldrh	r1, [r4, r2]
 8013a86:	5ae3      	ldrh	r3, [r4, r3]
 8013a88:	400b      	ands	r3, r1
 8013a8a:	52a3      	strh	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 8013a8c:	4a17      	ldr	r2, [pc, #92]	; (8013aec <RegionUS915LinkAdrReq+0x1d0>)
 8013a8e:	4b18      	ldr	r3, [pc, #96]	; (8013af0 <RegionUS915LinkAdrReq+0x1d4>)
 8013a90:	5aa1      	ldrh	r1, [r4, r2]
 8013a92:	5ae3      	ldrh	r3, [r4, r3]
 8013a94:	400b      	ands	r3, r1
 8013a96:	52a3      	strh	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 8013a98:	23dd      	movs	r3, #221	; 0xdd
 8013a9a:	3202      	adds	r2, #2
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	5aa1      	ldrh	r1, [r4, r2]
 8013aa0:	5ae3      	ldrh	r3, [r4, r3]
 8013aa2:	400b      	ands	r3, r1
 8013aa4:	52a3      	strh	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 8013aa6:	4a13      	ldr	r2, [pc, #76]	; (8013af4 <RegionUS915LinkAdrReq+0x1d8>)
 8013aa8:	4b13      	ldr	r3, [pc, #76]	; (8013af8 <RegionUS915LinkAdrReq+0x1dc>)
 8013aaa:	5aa1      	ldrh	r1, [r4, r2]
 8013aac:	5ae3      	ldrh	r3, [r4, r3]
 8013aae:	400b      	ands	r3, r1
 8013ab0:	52a3      	strh	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8013ab2:	23de      	movs	r3, #222	; 0xde
 8013ab4:	009b      	lsls	r3, r3, #2
 8013ab6:	5ae2      	ldrh	r2, [r4, r3]
 8013ab8:	330c      	adds	r3, #12
 8013aba:	52e2      	strh	r2, [r4, r3]
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 8013abc:	4b0f      	ldr	r3, [pc, #60]	; (8013afc <RegionUS915LinkAdrReq+0x1e0>)
 8013abe:	5ae2      	ldrh	r2, [r4, r3]
 8013ac0:	4b0f      	ldr	r3, [pc, #60]	; (8013b00 <RegionUS915LinkAdrReq+0x1e4>)
 8013ac2:	52e2      	strh	r2, [r4, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 8013ac4:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 8013ac6:	ab07      	add	r3, sp, #28
 8013ac8:	785a      	ldrb	r2, [r3, #1]
 8013aca:	9903      	ldr	r1, [sp, #12]
 8013acc:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 8013ace:	789a      	ldrb	r2, [r3, #2]
 8013ad0:	9904      	ldr	r1, [sp, #16]
    *nbRepOut = linkAdrParams.NbRep;
 8013ad2:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8013ad4:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013ad6:	9a05      	ldr	r2, [sp, #20]
 8013ad8:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 8013ada:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013adc:	701e      	strb	r6, [r3, #0]
}
 8013ade:	b015      	add	sp, #84	; 0x54
 8013ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ae2:	46c0      	nop			; (mov r8, r8)
 8013ae4:	200018e8 	.word	0x200018e8
 8013ae8:	ffffff00 	.word	0xffffff00
 8013aec:	0000037e 	.word	0x0000037e
 8013af0:	00000372 	.word	0x00000372
 8013af4:	00000382 	.word	0x00000382
 8013af8:	00000376 	.word	0x00000376
 8013afc:	0000037a 	.word	0x0000037a
 8013b00:	00000386 	.word	0x00000386

08013b04 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint32_t freq = rxParamSetupReq->Frequency;

    // Verify radio frequency
    if( ( Radio.CheckRfFrequency( freq ) == false ) ||
 8013b06:	4b1c      	ldr	r3, [pc, #112]	; (8013b78 <RegionUS915RxParamSetupReq+0x74>)
    uint32_t freq = rxParamSetupReq->Frequency;
 8013b08:	6846      	ldr	r6, [r0, #4]
    if( ( Radio.CheckRfFrequency( freq ) == false ) ||
 8013b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 8013b0c:	0005      	movs	r5, r0
    if( ( Radio.CheckRfFrequency( freq ) == false ) ||
 8013b0e:	0030      	movs	r0, r6
 8013b10:	9301      	str	r3, [sp, #4]
 8013b12:	4798      	blx	r3
        ( freq < US915_FIRST_RX1_CHANNEL ) ||
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
    {
        status &= 0xFE; // Channel frequency KO
 8013b14:	2406      	movs	r4, #6
    if( ( Radio.CheckRfFrequency( freq ) == false ) ||
 8013b16:	2800      	cmp	r0, #0
 8013b18:	d00a      	beq.n	8013b30 <RegionUS915RxParamSetupReq+0x2c>
 8013b1a:	4b18      	ldr	r3, [pc, #96]	; (8013b7c <RegionUS915RxParamSetupReq+0x78>)
 8013b1c:	18f0      	adds	r0, r6, r3
 8013b1e:	4b18      	ldr	r3, [pc, #96]	; (8013b80 <RegionUS915RxParamSetupReq+0x7c>)
 8013b20:	4298      	cmp	r0, r3
 8013b22:	d805      	bhi.n	8013b30 <RegionUS915RxParamSetupReq+0x2c>
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8013b24:	4917      	ldr	r1, [pc, #92]	; (8013b84 <RegionUS915RxParamSetupReq+0x80>)
 8013b26:	f7ed f8cd 	bl	8000cc4 <__aeabi_uidivmod>
    uint8_t status = 0x07;
 8013b2a:	424c      	negs	r4, r1
 8013b2c:	414c      	adcs	r4, r1
 8013b2e:	3406      	adds	r4, #6
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8013b30:	2000      	movs	r0, #0
 8013b32:	220d      	movs	r2, #13
 8013b34:	5628      	ldrsb	r0, [r5, r0]
 8013b36:	2108      	movs	r1, #8
 8013b38:	f7ff fa49 	bl	8012fce <RegionCommonValueInRange>
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d101      	bne.n	8013b44 <RegionUS915RxParamSetupReq+0x40>
    {
        status &= 0xFD; // Datarate KO
 8013b40:	23fd      	movs	r3, #253	; 0xfd
 8013b42:	401c      	ands	r4, r3
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8013b44:	2000      	movs	r0, #0
 8013b46:	2207      	movs	r2, #7
 8013b48:	5628      	ldrsb	r0, [r5, r0]
 8013b4a:	2105      	movs	r1, #5
 8013b4c:	f7ff fa3f 	bl	8012fce <RegionCommonValueInRange>
 8013b50:	2801      	cmp	r0, #1
 8013b52:	d003      	beq.n	8013b5c <RegionUS915RxParamSetupReq+0x58>
 8013b54:	2300      	movs	r3, #0
 8013b56:	56eb      	ldrsb	r3, [r5, r3]
 8013b58:	2b0d      	cmp	r3, #13
 8013b5a:	dd01      	ble.n	8013b60 <RegionUS915RxParamSetupReq+0x5c>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 8013b5c:	23fd      	movs	r3, #253	; 0xfd
 8013b5e:	401c      	ands	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8013b60:	2001      	movs	r0, #1
 8013b62:	2203      	movs	r2, #3
 8013b64:	5628      	ldrsb	r0, [r5, r0]
 8013b66:	2100      	movs	r1, #0
 8013b68:	f7ff fa31 	bl	8012fce <RegionCommonValueInRange>
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	d101      	bne.n	8013b74 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8013b70:	23fb      	movs	r3, #251	; 0xfb
 8013b72:	401c      	ands	r4, r3
    }

    return status;
}
 8013b74:	0020      	movs	r0, r4
 8013b76:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8013b78:	08018acc 	.word	0x08018acc
 8013b7c:	c8f78f60 	.word	0xc8f78f60
 8013b80:	00401640 	.word	0x00401640
 8013b84:	000927c0 	.word	0x000927c0

08013b88 <RegionUS915NewChannelReq>:
 8013b88:	2000      	movs	r0, #0
 8013b8a:	4770      	bx	lr

08013b8c <RegionUS915TxParamSetupReq>:
}

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
}
 8013b8c:	2001      	movs	r0, #1
 8013b8e:	4240      	negs	r0, r0
 8013b90:	4770      	bx	lr

08013b92 <RegionUS915DlChannelReq>:

uint8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    return 0;
}
 8013b92:	2000      	movs	r0, #0
 8013b94:	4770      	bx	lr
	...

08013b98 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr )
{
 8013b98:	b570      	push	{r4, r5, r6, lr}
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel

    if( NvmCtx.JoinTrialsCounter % 9 == 0 )
 8013b9a:	4e07      	ldr	r6, [pc, #28]	; (8013bb8 <RegionUS915AlternateDr+0x20>)
 8013b9c:	4d07      	ldr	r5, [pc, #28]	; (8013bbc <RegionUS915AlternateDr+0x24>)
 8013b9e:	2109      	movs	r1, #9
 8013ba0:	5d74      	ldrb	r4, [r6, r5]
 8013ba2:	0020      	movs	r0, r4
 8013ba4:	f7ed f88e 	bl	8000cc4 <__aeabi_uidivmod>
 8013ba8:	b2c9      	uxtb	r1, r1
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8013baa:	4248      	negs	r0, r1
 8013bac:	4148      	adcs	r0, r1
    }
    NvmCtx.JoinTrialsCounter++;
 8013bae:	3401      	adds	r4, #1
 8013bb0:	5574      	strb	r4, [r6, r5]
        currentDr = DR_0;
 8013bb2:	0080      	lsls	r0, r0, #2
    return currentDr;
}
 8013bb4:	bd70      	pop	{r4, r5, r6, pc}
 8013bb6:	46c0      	nop			; (mov r8, r8)
 8013bb8:	200018e8 	.word	0x200018e8
 8013bbc:	00000395 	.word	0x00000395

08013bc0 <RegionUS915CalcBackOff>:

void RegionUS915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8013bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013bc2:	21d8      	movs	r1, #216	; 0xd8
    calcBackOffParams.Channels = NvmCtx.Channels;
 8013bc4:	4a0b      	ldr	r2, [pc, #44]	; (8013bf4 <RegionUS915CalcBackOff+0x34>)
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013bc6:	0089      	lsls	r1, r1, #2
    calcBackOffParams.Channels = NvmCtx.Channels;
 8013bc8:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013bca:	1852      	adds	r2, r2, r1
 8013bcc:	9202      	str	r2, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013bce:	7842      	ldrb	r2, [r0, #1]
    calcBackOffParams.Channels = NvmCtx.Channels;
 8013bd0:	ab01      	add	r3, sp, #4
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013bd2:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8013bd4:	7802      	ldrb	r2, [r0, #0]
 8013bd6:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013bd8:	7882      	ldrb	r2, [r0, #2]
 8013bda:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8013bdc:	78c2      	ldrb	r2, [r0, #3]
 8013bde:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013be0:	6842      	ldr	r2, [r0, #4]
 8013be2:	9204      	str	r2, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8013be4:	6882      	ldr	r2, [r0, #8]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8013be6:	0018      	movs	r0, r3
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8013be8:	9205      	str	r2, [sp, #20]
    RegionCommonCalcBackOff( &calcBackOffParams );
 8013bea:	f7ff fb84 	bl	80132f6 <RegionCommonCalcBackOff>
}
 8013bee:	b007      	add	sp, #28
 8013bf0:	bd00      	pop	{pc}
 8013bf2:	46c0      	nop			; (mov r8, r8)
 8013bf4:	200018e8 	.word	0x200018e8

08013bf8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bfa:	b09d      	sub	sp, #116	; 0x74
 8013bfc:	9103      	str	r1, [sp, #12]
 8013bfe:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8013c00:	2100      	movs	r1, #0
 8013c02:	2248      	movs	r2, #72	; 0x48
{
 8013c04:	0006      	movs	r6, r0
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8013c06:	a80a      	add	r0, sp, #40	; 0x28
{
 8013c08:	001f      	movs	r7, r3
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8013c0a:	f7ec faf9 	bl	8000200 <memset>
    TimerTime_t nextTxDelay = 0;
    uint8_t newChannelIndex;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 8013c0e:	2204      	movs	r2, #4
 8013c10:	2100      	movs	r1, #0
 8013c12:	4876      	ldr	r0, [pc, #472]	; (8013dec <RegionUS915NextChannel+0x1f4>)
 8013c14:	4c76      	ldr	r4, [pc, #472]	; (8013df0 <RegionUS915NextChannel+0x1f8>)
 8013c16:	f7ff f9f9 	bl	801300c <RegionCommonCountChannels>
 8013c1a:	1e05      	subs	r5, r0, #0
 8013c1c:	d109      	bne.n	8013c32 <RegionUS915NextChannel+0x3a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 8013c1e:	23dc      	movs	r3, #220	; 0xdc
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	18e1      	adds	r1, r4, r3
 8013c24:	2204      	movs	r2, #4
 8013c26:	4871      	ldr	r0, [pc, #452]	; (8013dec <RegionUS915NextChannel+0x1f4>)
 8013c28:	f7ff fa10 	bl	801304c <RegionCommonChanMaskCopy>

        NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 8013c2c:	23e5      	movs	r3, #229	; 0xe5
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	54e5      	strb	r5, [r4, r3]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8013c32:	2308      	movs	r3, #8
 8013c34:	56f3      	ldrsb	r3, [r6, r3]
 8013c36:	2b03      	cmp	r3, #3
 8013c38:	dd08      	ble.n	8013c4c <RegionUS915NextChannel+0x54>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & 0x00FF ) == 0 )
 8013c3a:	23e1      	movs	r3, #225	; 0xe1
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	5ce2      	ldrb	r2, [r4, r3]
 8013c40:	2a00      	cmp	r2, #0
 8013c42:	d103      	bne.n	8013c4c <RegionUS915NextChannel+0x54>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8013c44:	22de      	movs	r2, #222	; 0xde
 8013c46:	0092      	lsls	r2, r2, #2
 8013c48:	5aa2      	ldrh	r2, [r4, r2]
 8013c4a:	52e2      	strh	r2, [r4, r3]
        }
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8013c4c:	6870      	ldr	r0, [r6, #4]
 8013c4e:	6835      	ldr	r5, [r6, #0]
 8013c50:	f000 fa2b 	bl	80140aa <TimerGetElapsedTime>
 8013c54:	4285      	cmp	r5, r0
 8013c56:	d900      	bls.n	8013c5a <RegionUS915NextChannel+0x62>
 8013c58:	e06e      	b.n	8013d38 <RegionUS915NextChannel+0x140>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013c5a:	2500      	movs	r5, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, US915_MAX_NB_BANDS );
 8013c5c:	23d8      	movs	r3, #216	; 0xd8
        *aggregatedTimeOff = 0;
 8013c5e:	603d      	str	r5, [r7, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, US915_MAX_NB_BANDS );
 8013c60:	009b      	lsls	r3, r3, #2
 8013c62:	18e2      	adds	r2, r4, r3
 8013c64:	7ab1      	ldrb	r1, [r6, #10]
 8013c66:	2301      	movs	r3, #1
 8013c68:	7a70      	ldrb	r0, [r6, #9]
 8013c6a:	f7ff fa03 	bl	8013074 <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8013c6e:	2308      	movs	r3, #8
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, US915_MAX_NB_BANDS );
 8013c70:	9005      	str	r0, [sp, #20]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8013c72:	56f3      	ldrsb	r3, [r6, r3]
    uint8_t nbEnabledChannels = 0;
 8013c74:	9500      	str	r5, [sp, #0]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8013c76:	9307      	str	r3, [sp, #28]
    uint8_t delayTransmission = 0;
 8013c78:	9502      	str	r5, [sp, #8]
 8013c7a:	00eb      	lsls	r3, r5, #3
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	9306      	str	r3, [sp, #24]
 8013c80:	2360      	movs	r3, #96	; 0x60
 8013c82:	436b      	muls	r3, r5
 8013c84:	4c5a      	ldr	r4, [pc, #360]	; (8013df0 <RegionUS915NextChannel+0x1f8>)
 8013c86:	18e4      	adds	r4, r4, r3
{
 8013c88:	2300      	movs	r3, #0
 8013c8a:	9301      	str	r3, [sp, #4]
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8013c8c:	23df      	movs	r3, #223	; 0xdf
 8013c8e:	4f58      	ldr	r7, [pc, #352]	; (8013df0 <RegionUS915NextChannel+0x1f8>)
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	18eb      	adds	r3, r5, r3
 8013c94:	9a01      	ldr	r2, [sp, #4]
 8013c96:	5afb      	ldrh	r3, [r7, r3]
 8013c98:	4113      	asrs	r3, r2
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	4213      	tst	r3, r2
 8013c9e:	d019      	beq.n	8013cd4 <RegionUS915NextChannel+0xdc>
                if( channels[i + j].Frequency == 0 )
 8013ca0:	6823      	ldr	r3, [r4, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d016      	beq.n	8013cd4 <RegionUS915NextChannel+0xdc>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8013ca6:	7a21      	ldrb	r1, [r4, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013ca8:	9807      	ldr	r0, [sp, #28]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8013caa:	b24a      	sxtb	r2, r1
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013cac:	0709      	lsls	r1, r1, #28
 8013cae:	1112      	asrs	r2, r2, #4
 8013cb0:	1709      	asrs	r1, r1, #28
 8013cb2:	f7ff f98c 	bl	8012fce <RegionCommonValueInRange>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d00c      	beq.n	8013cd4 <RegionUS915NextChannel+0xdc>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8013cba:	7a63      	ldrb	r3, [r4, #9]
 8013cbc:	011b      	lsls	r3, r3, #4
 8013cbe:	18ff      	adds	r7, r7, r3
 8013cc0:	23d8      	movs	r3, #216	; 0xd8
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	18ff      	adds	r7, r7, r3
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d02a      	beq.n	8013d22 <RegionUS915NextChannel+0x12a>
                    delayTransmission++;
 8013ccc:	9b02      	ldr	r3, [sp, #8]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	9302      	str	r3, [sp, #8]
 8013cd4:	9b01      	ldr	r3, [sp, #4]
 8013cd6:	340c      	adds	r4, #12
 8013cd8:	3301      	adds	r3, #1
 8013cda:	9301      	str	r3, [sp, #4]
        for( uint8_t j = 0; j < 16; j++ )
 8013cdc:	2b10      	cmp	r3, #16
 8013cde:	d1d5      	bne.n	8013c8c <RegionUS915NextChannel+0x94>
 8013ce0:	3502      	adds	r5, #2
    for( uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++ )
 8013ce2:	2d0a      	cmp	r5, #10
 8013ce4:	d1c9      	bne.n	8013c7a <RegionUS915NextChannel+0x82>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
    }

    if( nbEnabledChannels > 0 )
 8013ce6:	9b00      	ldr	r3, [sp, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d100      	bne.n	8013cee <RegionUS915NextChannel+0xf6>
 8013cec:	e075      	b.n	8013dda <RegionUS915NextChannel+0x1e2>
    {
        if( nextChanParams->Joined == true )
 8013cee:	7a73      	ldrb	r3, [r6, #9]
 8013cf0:	4c3f      	ldr	r4, [pc, #252]	; (8013df0 <RegionUS915NextChannel+0x1f8>)
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d02b      	beq.n	8013d4e <RegionUS915NextChannel+0x156>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013cf6:	9900      	ldr	r1, [sp, #0]
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	3901      	subs	r1, #1
 8013cfc:	f000 f9fe 	bl	80140fc <randr>
 8013d00:	ab0a      	add	r3, sp, #40	; 0x28
 8013d02:	5c1b      	ldrb	r3, [r3, r0]
                uint8_t i = 0;
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & 0x00FF ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 8013d04:	9a03      	ldr	r2, [sp, #12]
 8013d06:	7013      	strb	r3, [r2, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8013d08:	9b03      	ldr	r3, [sp, #12]
 8013d0a:	2248      	movs	r2, #72	; 0x48
 8013d0c:	7819      	ldrb	r1, [r3, #0]
 8013d0e:	23df      	movs	r3, #223	; 0xdf
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	18e0      	adds	r0, r4, r3
 8013d14:	f7ff f965 	bl	8012fe2 <RegionCommonChanDisable>

        *time = 0;
 8013d18:	2000      	movs	r0, #0
 8013d1a:	9b04      	ldr	r3, [sp, #16]
 8013d1c:	6018      	str	r0, [r3, #0]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8013d1e:	b01d      	add	sp, #116	; 0x74
 8013d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 8013d22:	9b00      	ldr	r3, [sp, #0]
 8013d24:	9901      	ldr	r1, [sp, #4]
 8013d26:	1c5a      	adds	r2, r3, #1
 8013d28:	9b06      	ldr	r3, [sp, #24]
 8013d2a:	9800      	ldr	r0, [sp, #0]
 8013d2c:	185b      	adds	r3, r3, r1
 8013d2e:	a90a      	add	r1, sp, #40	; 0x28
 8013d30:	540b      	strb	r3, [r1, r0]
 8013d32:	b2d3      	uxtb	r3, r2
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	e7cd      	b.n	8013cd4 <RegionUS915NextChannel+0xdc>
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8013d38:	6870      	ldr	r0, [r6, #4]
 8013d3a:	6834      	ldr	r4, [r6, #0]
 8013d3c:	f000 f9b5 	bl	80140aa <TimerGetElapsedTime>
 8013d40:	1a23      	subs	r3, r4, r0
 8013d42:	9305      	str	r3, [sp, #20]
            *time = nextTxDelay;
 8013d44:	9b04      	ldr	r3, [sp, #16]
 8013d46:	9a05      	ldr	r2, [sp, #20]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013d48:	200c      	movs	r0, #12
            *time = nextTxDelay;
 8013d4a:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013d4c:	e7e7      	b.n	8013d1e <RegionUS915NextChannel+0x126>
            if( nextChanParams->Datarate == DR_0 )
 8013d4e:	2108      	movs	r1, #8
 8013d50:	5671      	ldrsb	r1, [r6, r1]
 8013d52:	2900      	cmp	r1, #0
 8013d54:	d009      	beq.n	8013d6a <RegionUS915NextChannel+0x172>
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & 0x00FF ) & ( 1 << i ) ) == 0 )
 8013d56:	22e1      	movs	r2, #225	; 0xe1
 8013d58:	0092      	lsls	r2, r2, #2
 8013d5a:	5ca0      	ldrb	r0, [r4, r2]
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	0001      	movs	r1, r0
 8013d60:	4119      	asrs	r1, r3
 8013d62:	4211      	tst	r1, r2
 8013d64:	d036      	beq.n	8013dd4 <RegionUS915NextChannel+0x1dc>
                *channel = 64 + i;
 8013d66:	3340      	adds	r3, #64	; 0x40
 8013d68:	e7cc      	b.n	8013d04 <RegionUS915NextChannel+0x10c>
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8013d6a:	2208      	movs	r2, #8
 8013d6c:	a808      	add	r0, sp, #32
 8013d6e:	f7ec fa47 	bl	8000200 <memset>
    currentChannelsMaskRemainingIndex = (uint8_t) NvmCtx.JoinChannelGroupsCurrentIndex / 2;
 8013d72:	23e5      	movs	r3, #229	; 0xe5
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	5ce2      	ldrb	r2, [r4, r3]
 8013d78:	0853      	lsrs	r3, r2, #1
 8013d7a:	33bd      	adds	r3, #189	; 0xbd
 8013d7c:	33ff      	adds	r3, #255	; 0xff
        channelMaskRemaining = ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] & 0x00FF );
 8013d7e:	005b      	lsls	r3, r3, #1
 8013d80:	18e3      	adds	r3, r4, r3
    if( ( NvmCtx.JoinChannelGroupsCurrentIndex % 2 ) == 0 )
 8013d82:	07d2      	lsls	r2, r2, #31
 8013d84:	d421      	bmi.n	8013dca <RegionUS915NextChannel+0x1d2>
        channelMaskRemaining = ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] & 0x00FF );
 8013d86:	791a      	ldrb	r2, [r3, #4]
    uint8_t delayTransmission = 0;
 8013d88:	2300      	movs	r3, #0
        if( ( channelMaskRemaining & ( 1 << i ) ) != 0 )
 8013d8a:	2001      	movs	r0, #1
    *availableChannels = 0;
 8013d8c:	0019      	movs	r1, r3
        if( ( channelMaskRemaining & ( 1 << i ) ) != 0 )
 8013d8e:	0016      	movs	r6, r2
 8013d90:	411e      	asrs	r6, r3
 8013d92:	b2dd      	uxtb	r5, r3
 8013d94:	4206      	tst	r6, r0
 8013d96:	d003      	beq.n	8013da0 <RegionUS915NextChannel+0x1a8>
            findAvailableChannelsIndex[*availableChannels] = i;
 8013d98:	ae08      	add	r6, sp, #32
 8013d9a:	5475      	strb	r5, [r6, r1]
            ( *availableChannels )++;
 8013d9c:	3101      	adds	r1, #1
 8013d9e:	b2c9      	uxtb	r1, r1
 8013da0:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < 8; i++ )
 8013da2:	2b08      	cmp	r3, #8
 8013da4:	d1f3      	bne.n	8013d8e <RegionUS915NextChannel+0x196>
    *newChannelIndex = findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8013da6:	3901      	subs	r1, #1
 8013da8:	2000      	movs	r0, #0
 8013daa:	f000 f9a7 	bl	80140fc <randr>
 8013dae:	ab08      	add	r3, sp, #32
 8013db0:	5c19      	ldrb	r1, [r3, r0]
    NvmCtx.JoinChannelGroupsCurrentIndex++;
 8013db2:	23e5      	movs	r3, #229	; 0xe5
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	5ce2      	ldrb	r2, [r4, r3]
 8013db8:	3201      	adds	r2, #1
 8013dba:	b2d2      	uxtb	r2, r2
    if( NvmCtx.JoinChannelGroupsCurrentIndex > 8 )
 8013dbc:	2a08      	cmp	r2, #8
 8013dbe:	d807      	bhi.n	8013dd0 <RegionUS915NextChannel+0x1d8>
        NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 8013dc0:	54e2      	strb	r2, [r4, r3]
                *channel = ( NvmCtx.JoinChannelGroupsCurrentIndex * 8 ) + newChannelIndex;
 8013dc2:	5ce3      	ldrb	r3, [r4, r3]
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	18cb      	adds	r3, r1, r3
 8013dc8:	e79c      	b.n	8013d04 <RegionUS915NextChannel+0x10c>
        channelMaskRemaining = ( ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] >> 8 ) & 0x00FF );
 8013dca:	889a      	ldrh	r2, [r3, #4]
 8013dcc:	0a12      	lsrs	r2, r2, #8
 8013dce:	e7db      	b.n	8013d88 <RegionUS915NextChannel+0x190>
        NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	e7f5      	b.n	8013dc0 <RegionUS915NextChannel+0x1c8>
                    i++;
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	b2db      	uxtb	r3, r3
 8013dd8:	e7c1      	b.n	8013d5e <RegionUS915NextChannel+0x166>
        if( delayTx > 0 )
 8013dda:	9b02      	ldr	r3, [sp, #8]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1b1      	bne.n	8013d44 <RegionUS915NextChannel+0x14c>
        *time = 0;
 8013de0:	9b04      	ldr	r3, [sp, #16]
 8013de2:	9a02      	ldr	r2, [sp, #8]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013de4:	200d      	movs	r0, #13
        *time = 0;
 8013de6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013de8:	e799      	b.n	8013d1e <RegionUS915NextChannel+0x126>
 8013dea:	46c0      	nop			; (mov r8, r8)
 8013dec:	20001c64 	.word	0x20001c64
 8013df0:	200018e8 	.word	0x200018e8

08013df4 <RegionUS915SetContinuousWave>:
    if( datarate == DR_4 )
 8013df4:	2301      	movs	r3, #1
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8013df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8013df8:	2602      	movs	r6, #2
    if( datarate == DR_4 )
 8013dfa:	56c3      	ldrsb	r3, [r0, r3]
{
 8013dfc:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8013dfe:	5786      	ldrsb	r6, [r0, r6]
 8013e00:	4d1a      	ldr	r5, [pc, #104]	; (8013e6c <RegionUS915SetContinuousWave+0x78>)
    if( datarate == DR_4 )
 8013e02:	2b04      	cmp	r3, #4
 8013e04:	d114      	bne.n	8013e30 <RegionUS915SetContinuousWave+0x3c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8013e06:	1c30      	adds	r0, r6, #0
 8013e08:	2e02      	cmp	r6, #2
 8013e0a:	da00      	bge.n	8013e0e <RegionUS915SetContinuousWave+0x1a>
 8013e0c:	2002      	movs	r0, #2
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8013e0e:	230c      	movs	r3, #12
 8013e10:	7822      	ldrb	r2, [r4, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013e12:	4917      	ldr	r1, [pc, #92]	; (8013e70 <RegionUS915SetContinuousWave+0x7c>)
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8013e14:	4353      	muls	r3, r2
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8013e16:	b240      	sxtb	r0, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013e18:	2200      	movs	r2, #0
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8013e1a:	58ed      	ldr	r5, [r5, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013e1c:	f7ff fa56 	bl	80132cc <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8013e20:	4b14      	ldr	r3, [pc, #80]	; (8013e74 <RegionUS915SetContinuousWave+0x80>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013e22:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8013e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e26:	0028      	movs	r0, r5
 8013e28:	89a2      	ldrh	r2, [r4, #12]
 8013e2a:	9301      	str	r3, [sp, #4]
 8013e2c:	4798      	blx	r3
}
 8013e2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8013e30:	230c      	movs	r3, #12
 8013e32:	2702      	movs	r7, #2
 8013e34:	7802      	ldrb	r2, [r0, #0]
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8013e36:	2100      	movs	r1, #0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8013e38:	4353      	muls	r3, r2
 8013e3a:	18eb      	adds	r3, r5, r3
 8013e3c:	7a5b      	ldrb	r3, [r3, #9]
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8013e3e:	2204      	movs	r2, #4
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8013e40:	3336      	adds	r3, #54	; 0x36
 8013e42:	011b      	lsls	r3, r3, #4
 8013e44:	18eb      	adds	r3, r5, r3
 8013e46:	57df      	ldrsb	r7, [r3, r7]
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8013e48:	23dc      	movs	r3, #220	; 0xdc
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	18e8      	adds	r0, r5, r3
 8013e4e:	f7ff f8dd 	bl	801300c <RegionCommonCountChannels>
 8013e52:	2831      	cmp	r0, #49	; 0x31
 8013e54:	d904      	bls.n	8013e60 <RegionUS915SetContinuousWave+0x6c>
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8013e56:	1c30      	adds	r0, r6, #0
 8013e58:	42be      	cmp	r6, r7
 8013e5a:	dad8      	bge.n	8013e0e <RegionUS915SetContinuousWave+0x1a>
 8013e5c:	1c38      	adds	r0, r7, #0
 8013e5e:	e7d6      	b.n	8013e0e <RegionUS915SetContinuousWave+0x1a>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8013e60:	1c30      	adds	r0, r6, #0
 8013e62:	2e05      	cmp	r6, #5
 8013e64:	dad3      	bge.n	8013e0e <RegionUS915SetContinuousWave+0x1a>
 8013e66:	2005      	movs	r0, #5
 8013e68:	e7d1      	b.n	8013e0e <RegionUS915SetContinuousWave+0x1a>
 8013e6a:	46c0      	nop			; (mov r8, r8)
 8013e6c:	200018e8 	.word	0x200018e8
 8013e70:	41f00000 	.word	0x41f00000
 8013e74:	08018acc 	.word	0x08018acc

08013e78 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8013e78:	008b      	lsls	r3, r1, #2
 8013e7a:	4904      	ldr	r1, [pc, #16]	; (8013e8c <RegionUS915ApplyDrOffset+0x14>)
 8013e7c:	18c9      	adds	r1, r1, r3
 8013e7e:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 8013e80:	1c18      	adds	r0, r3, #0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	da00      	bge.n	8013e88 <RegionUS915ApplyDrOffset+0x10>
 8013e86:	2000      	movs	r0, #0
 8013e88:	b2c0      	uxtb	r0, r0
}
 8013e8a:	4770      	bx	lr
 8013e8c:	0801864c 	.word	0x0801864c

08013e90 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8013e90:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013e92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e96:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8013e98:	2900      	cmp	r1, #0
 8013e9a:	d008      	beq.n	8013eae <LPM_SetStopMode+0x1e>
 8013e9c:	2901      	cmp	r1, #1
 8013e9e:	d103      	bne.n	8013ea8 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 8013ea0:	4b05      	ldr	r3, [pc, #20]	; (8013eb8 <LPM_SetStopMode+0x28>)
 8013ea2:	681a      	ldr	r2, [r3, #0]
 8013ea4:	4310      	orrs	r0, r2
 8013ea6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ea8:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 8013eac:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 8013eae:	4a02      	ldr	r2, [pc, #8]	; (8013eb8 <LPM_SetStopMode+0x28>)
 8013eb0:	6813      	ldr	r3, [r2, #0]
 8013eb2:	4383      	bics	r3, r0
 8013eb4:	6013      	str	r3, [r2, #0]
      break;
 8013eb6:	e7f7      	b.n	8013ea8 <LPM_SetStopMode+0x18>
 8013eb8:	20001c84 	.word	0x20001c84

08013ebc <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013ebc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013ec0:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 8013ec2:	2000      	movs	r0, #0
  if(StopModeDisable )
 8013ec4:	4a05      	ldr	r2, [pc, #20]	; (8013edc <LPM_GetMode+0x20>)
 8013ec6:	6812      	ldr	r2, [r2, #0]
 8013ec8:	4282      	cmp	r2, r0
 8013eca:	d104      	bne.n	8013ed6 <LPM_GetMode+0x1a>
  }
  else
  {
    if(OffModeDisable)
 8013ecc:	4a04      	ldr	r2, [pc, #16]	; (8013ee0 <LPM_GetMode+0x24>)
 8013ece:	6810      	ldr	r0, [r2, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 8013ed0:	4242      	negs	r2, r0
 8013ed2:	4150      	adcs	r0, r2
 8013ed4:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ed6:	f383 8810 	msr	PRIMASK, r3
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 8013eda:	4770      	bx	lr
 8013edc:	20001c84 	.word	0x20001c84
 8013ee0:	20001c80 	.word	0x20001c80

08013ee4 <LPM_EnterOffMode>:
 8013ee4:	4770      	bx	lr

08013ee6 <LPM_ExitOffMode>:
__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
__weak void LPM_ExitOffMode(void) {}
 8013ee6:	4770      	bx	lr

08013ee8 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8013eec:	f7f6 fae4 	bl	800a4b8 <HW_RTC_GetMinimumTimeout>
  obj->IsRunning = true;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	7223      	strb	r3, [r4, #8]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8013ef4:	0005      	movs	r5, r0

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8013ef6:	6826      	ldr	r6, [r4, #0]
 8013ef8:	f7f6 faf2 	bl	800a4e0 <HW_RTC_GetTimerElapsedTime>
 8013efc:	1828      	adds	r0, r5, r0
 8013efe:	4286      	cmp	r6, r0
 8013f00:	d203      	bcs.n	8013f0a <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8013f02:	f7f6 faed 	bl	800a4e0 <HW_RTC_GetTimerElapsedTime>
 8013f06:	182d      	adds	r5, r5, r0
 8013f08:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8013f0a:	6820      	ldr	r0, [r4, #0]
 8013f0c:	f7f6 fb14 	bl	800a538 <HW_RTC_SetAlarm>
}
 8013f10:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f14 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8013f14:	4a05      	ldr	r2, [pc, #20]	; (8013f2c <TimerInsertNewHeadTimer+0x18>)
{
 8013f16:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 8013f18:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d001      	beq.n	8013f22 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsRunning = false;
 8013f1e:	2100      	movs	r1, #0
 8013f20:	7219      	strb	r1, [r3, #8]
  }

  obj->Next = cur;
 8013f22:	6103      	str	r3, [r0, #16]
  TimerListHead = obj;
 8013f24:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8013f26:	f7ff ffdf 	bl	8013ee8 <TimerSetTimeout>
}
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	20001c88 	.word	0x20001c88

08013f30 <TimerInit>:
  obj->Timestamp = 0;
 8013f30:	2300      	movs	r3, #0
  obj->Callback = callback;
 8013f32:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 8013f34:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8013f36:	6043      	str	r3, [r0, #4]
  obj->IsRunning = false;
 8013f38:	7203      	strb	r3, [r0, #8]
  obj->Next = NULL;
 8013f3a:	6103      	str	r3, [r0, #16]
}
 8013f3c:	4770      	bx	lr
	...

08013f40 <TimerStart>:
{
 8013f40:	b570      	push	{r4, r5, r6, lr}
 8013f42:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013f44:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f48:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d00e      	beq.n	8013f6c <TimerStart+0x2c>
  TimerEvent_t* cur = TimerListHead;
 8013f4e:	4e17      	ldr	r6, [pc, #92]	; (8013fac <TimerStart+0x6c>)
 8013f50:	6832      	ldr	r2, [r6, #0]
 8013f52:	0013      	movs	r3, r2
  while( cur != NULL )
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d10c      	bne.n	8013f72 <TimerStart+0x32>
  obj->Timestamp = obj->ReloadValue;
 8013f58:	6861      	ldr	r1, [r4, #4]
  obj->IsRunning = false;
 8013f5a:	7223      	strb	r3, [r4, #8]
  obj->Timestamp = obj->ReloadValue;
 8013f5c:	6021      	str	r1, [r4, #0]
  if( TimerListHead == NULL )
 8013f5e:	2a00      	cmp	r2, #0
 8013f60:	d10b      	bne.n	8013f7a <TimerStart+0x3a>
    HW_RTC_SetTimerContext( );
 8013f62:	f7f6 fbc5 	bl	800a6f0 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 8013f66:	0020      	movs	r0, r4
 8013f68:	f7ff ffd4 	bl	8013f14 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f6c:	f385 8810 	msr	PRIMASK, r5
}
 8013f70:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 8013f72:	429c      	cmp	r4, r3
 8013f74:	d0fa      	beq.n	8013f6c <TimerStart+0x2c>
    cur = cur->Next;
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	e7ec      	b.n	8013f54 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8013f7a:	f7f6 fab1 	bl	800a4e0 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 8013f7e:	6823      	ldr	r3, [r4, #0]
 8013f80:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 8013f82:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 8013f84:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	4290      	cmp	r0, r2
 8013f8a:	d3ec      	bcc.n	8013f66 <TimerStart+0x26>
  TimerEvent_t* next = TimerListHead->Next;
 8013f8c:	691a      	ldr	r2, [r3, #16]
  while (cur->Next != NULL )
 8013f8e:	6919      	ldr	r1, [r3, #16]
 8013f90:	2900      	cmp	r1, #0
 8013f92:	d102      	bne.n	8013f9a <TimerStart+0x5a>
  cur->Next = obj;
 8013f94:	611c      	str	r4, [r3, #16]
  obj->Next = NULL;
 8013f96:	6121      	str	r1, [r4, #16]
 8013f98:	e7e8      	b.n	8013f6c <TimerStart+0x2c>
    if( obj->Timestamp  > next->Timestamp )
 8013f9a:	6811      	ldr	r1, [r2, #0]
 8013f9c:	4288      	cmp	r0, r1
 8013f9e:	d902      	bls.n	8013fa6 <TimerStart+0x66>
        next = next->Next;
 8013fa0:	0013      	movs	r3, r2
 8013fa2:	6912      	ldr	r2, [r2, #16]
 8013fa4:	e7f3      	b.n	8013f8e <TimerStart+0x4e>
        cur->Next = obj;
 8013fa6:	611c      	str	r4, [r3, #16]
        obj->Next = next;
 8013fa8:	6122      	str	r2, [r4, #16]
 8013faa:	e7df      	b.n	8013f6c <TimerStart+0x2c>
 8013fac:	20001c88 	.word	0x20001c88

08013fb0 <TimerIrqHandler>:
{
 8013fb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 8013fb2:	f7f6 fbe9 	bl	800a788 <HW_RTC_GetTimerContext>
 8013fb6:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 8013fb8:	f7f6 fb9a 	bl	800a6f0 <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8013fbc:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 8013fbe:	4c18      	ldr	r4, [pc, #96]	; (8014020 <TimerIrqHandler+0x70>)
 8013fc0:	6822      	ldr	r2, [r4, #0]
 8013fc2:	2a00      	cmp	r2, #0
 8013fc4:	d013      	beq.n	8013fee <TimerIrqHandler+0x3e>
 8013fc6:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 8013fc8:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8013fca:	691b      	ldr	r3, [r3, #16]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d105      	bne.n	8013fdc <TimerIrqHandler+0x2c>
    TimerListHead = TimerListHead->Next;
 8013fd0:	6913      	ldr	r3, [r2, #16]
 8013fd2:	6023      	str	r3, [r4, #0]
    exec_cb( cur->Callback );
 8013fd4:	68d3      	ldr	r3, [r2, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d108      	bne.n	8013fec <TimerIrqHandler+0x3c>
 8013fda:	e7fe      	b.n	8013fda <TimerIrqHandler+0x2a>
      if (next->Timestamp > DeltaContext)
 8013fdc:	6819      	ldr	r1, [r3, #0]
 8013fde:	4288      	cmp	r0, r1
 8013fe0:	d202      	bcs.n	8013fe8 <TimerIrqHandler+0x38>
        next->Timestamp -= DeltaContext;
 8013fe2:	1a09      	subs	r1, r1, r0
 8013fe4:	6019      	str	r1, [r3, #0]
 8013fe6:	e7f0      	b.n	8013fca <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 8013fe8:	601d      	str	r5, [r3, #0]
 8013fea:	e7ee      	b.n	8013fca <TimerIrqHandler+0x1a>
   exec_cb( cur->Callback );
 8013fec:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d103      	bne.n	8013ffc <TimerIrqHandler+0x4c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8013ff4:	6820      	ldr	r0, [r4, #0]
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d10c      	bne.n	8014014 <TimerIrqHandler+0x64>
}
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8013ffc:	681d      	ldr	r5, [r3, #0]
 8013ffe:	f7f6 fa6f 	bl	800a4e0 <HW_RTC_GetTimerElapsedTime>
 8014002:	4285      	cmp	r5, r0
 8014004:	d2f6      	bcs.n	8013ff4 <TimerIrqHandler+0x44>
   cur = TimerListHead;
 8014006:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 8014008:	691a      	ldr	r2, [r3, #16]
   exec_cb( cur->Callback );
 801400a:	68db      	ldr	r3, [r3, #12]
   TimerListHead = TimerListHead->Next;
 801400c:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback );
 801400e:	2b00      	cmp	r3, #0
 8014010:	d1ec      	bne.n	8013fec <TimerIrqHandler+0x3c>
 8014012:	e7fe      	b.n	8014012 <TimerIrqHandler+0x62>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8014014:	7a03      	ldrb	r3, [r0, #8]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1ef      	bne.n	8013ffa <TimerIrqHandler+0x4a>
    TimerSetTimeout( TimerListHead );
 801401a:	f7ff ff65 	bl	8013ee8 <TimerSetTimeout>
}
 801401e:	e7ec      	b.n	8013ffa <TimerIrqHandler+0x4a>
 8014020:	20001c88 	.word	0x20001c88

08014024 <TimerStop>:
{
 8014024:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014026:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801402a:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 801402c:	4d12      	ldr	r5, [pc, #72]	; (8014078 <TimerStop+0x54>)
 801402e:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8014030:	2b00      	cmp	r3, #0
 8014032:	d001      	beq.n	8014038 <TimerStop+0x14>
 8014034:	2800      	cmp	r0, #0
 8014036:	d102      	bne.n	801403e <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014038:	f386 8810 	msr	PRIMASK, r6
}
 801403c:	bd70      	pop	{r4, r5, r6, pc}
  if( TimerListHead == obj ) // Stop the Head
 801403e:	4283      	cmp	r3, r0
 8014040:	d111      	bne.n	8014066 <TimerStop+0x42>
    if( TimerListHead->IsRunning == true ) // The head is already running
 8014042:	7a1a      	ldrb	r2, [r3, #8]
 8014044:	691c      	ldr	r4, [r3, #16]
 8014046:	2a00      	cmp	r2, #0
 8014048:	d00a      	beq.n	8014060 <TimerStop+0x3c>
      TimerListHead->IsRunning = false;
 801404a:	2200      	movs	r2, #0
 801404c:	721a      	strb	r2, [r3, #8]
      if( TimerListHead->Next != NULL )
 801404e:	4294      	cmp	r4, r2
 8014050:	d004      	beq.n	801405c <TimerStop+0x38>
        TimerSetTimeout( TimerListHead );
 8014052:	0020      	movs	r0, r4
        TimerListHead = TimerListHead->Next;
 8014054:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 8014056:	f7ff ff47 	bl	8013ee8 <TimerSetTimeout>
 801405a:	e7ed      	b.n	8014038 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 801405c:	f7f6 fa54 	bl	800a508 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8014060:	602c      	str	r4, [r5, #0]
 8014062:	e7e9      	b.n	8014038 <TimerStop+0x14>
 8014064:	0013      	movs	r3, r2
        cur = cur->Next;
 8014066:	691a      	ldr	r2, [r3, #16]
    while( cur != NULL )
 8014068:	2a00      	cmp	r2, #0
 801406a:	d0e5      	beq.n	8014038 <TimerStop+0x14>
      if( cur == obj )
 801406c:	4290      	cmp	r0, r2
 801406e:	d1f9      	bne.n	8014064 <TimerStop+0x40>
        if( cur->Next != NULL )
 8014070:	6902      	ldr	r2, [r0, #16]
 8014072:	611a      	str	r2, [r3, #16]
 8014074:	e7e0      	b.n	8014038 <TimerStop+0x14>
 8014076:	46c0      	nop			; (mov r8, r8)
 8014078:	20001c88 	.word	0x20001c88

0801407c <TimerSetValue>:
{
 801407c:	b570      	push	{r4, r5, r6, lr}
 801407e:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8014080:	0008      	movs	r0, r1
 8014082:	f7f6 fa1b 	bl	800a4bc <HW_RTC_ms2Tick>
 8014086:	0004      	movs	r4, r0
  TimerStop( obj );
 8014088:	0028      	movs	r0, r5
 801408a:	f7ff ffcb 	bl	8014024 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 801408e:	f7f6 fa13 	bl	800a4b8 <HW_RTC_GetMinimumTimeout>
 8014092:	4284      	cmp	r4, r0
 8014094:	d200      	bcs.n	8014098 <TimerSetValue+0x1c>
 8014096:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 8014098:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 801409a:	606c      	str	r4, [r5, #4]
}
 801409c:	bd70      	pop	{r4, r5, r6, pc}

0801409e <TimerGetCurrentTime>:
{
 801409e:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 80140a0:	f7f6 fa2a 	bl	800a4f8 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 80140a4:	f7f6 fa12 	bl	800a4cc <HW_RTC_Tick2ms>
}
 80140a8:	bd10      	pop	{r4, pc}

080140aa <TimerGetElapsedTime>:
{
 80140aa:	b570      	push	{r4, r5, r6, lr}
 80140ac:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 80140ae:	f7f6 fa23 	bl	800a4f8 <HW_RTC_GetTimerValue>
 80140b2:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 80140b4:	0028      	movs	r0, r5
 80140b6:	f7f6 fa01 	bl	800a4bc <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 80140ba:	1a20      	subs	r0, r4, r0
 80140bc:	f7f6 fa06 	bl	800a4cc <HW_RTC_Tick2ms>
}
 80140c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080140c4 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80140c4:	4b06      	ldr	r3, [pc, #24]	; (80140e0 <rand1+0x1c>)
 80140c6:	4807      	ldr	r0, [pc, #28]	; (80140e4 <rand1+0x20>)
 80140c8:	681a      	ldr	r2, [r3, #0]
{
 80140ca:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80140cc:	4350      	muls	r0, r2
 80140ce:	4a06      	ldr	r2, [pc, #24]	; (80140e8 <rand1+0x24>)
 80140d0:	4906      	ldr	r1, [pc, #24]	; (80140ec <rand1+0x28>)
 80140d2:	1880      	adds	r0, r0, r2
 80140d4:	6018      	str	r0, [r3, #0]
 80140d6:	f7ec fdf5 	bl	8000cc4 <__aeabi_uidivmod>
}
 80140da:	0008      	movs	r0, r1
 80140dc:	bd10      	pop	{r4, pc}
 80140de:	46c0      	nop			; (mov r8, r8)
 80140e0:	20000acc 	.word	0x20000acc
 80140e4:	41c64e6d 	.word	0x41c64e6d
 80140e8:	00003039 	.word	0x00003039
 80140ec:	7fffffff 	.word	0x7fffffff

080140f0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80140f0:	4b01      	ldr	r3, [pc, #4]	; (80140f8 <srand1+0x8>)
 80140f2:	6018      	str	r0, [r3, #0]
}
 80140f4:	4770      	bx	lr
 80140f6:	46c0      	nop			; (mov r8, r8)
 80140f8:	20000acc 	.word	0x20000acc

080140fc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80140fc:	b570      	push	{r4, r5, r6, lr}
 80140fe:	0005      	movs	r5, r0
 8014100:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8014102:	f7ff ffdf 	bl	80140c4 <rand1>
 8014106:	1b61      	subs	r1, r4, r5
 8014108:	3101      	adds	r1, #1
 801410a:	f7ec fec5 	bl	8000e98 <__aeabi_idivmod>
 801410e:	1948      	adds	r0, r1, r5
}
 8014110:	bd70      	pop	{r4, r5, r6, pc}

08014112 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8014112:	2300      	movs	r3, #0
{
 8014114:	b510      	push	{r4, lr}
    while( size-- )
 8014116:	4293      	cmp	r3, r2
 8014118:	d100      	bne.n	801411c <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 801411a:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 801411c:	5ccc      	ldrb	r4, [r1, r3]
 801411e:	54c4      	strb	r4, [r0, r3]
 8014120:	3301      	adds	r3, #1
 8014122:	e7f8      	b.n	8014116 <memcpy1+0x4>

08014124 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8014124:	1e53      	subs	r3, r2, #1
 8014126:	18c0      	adds	r0, r0, r3
    while( size-- )
 8014128:	2300      	movs	r3, #0
{
 801412a:	b530      	push	{r4, r5, lr}
    while( size-- )
 801412c:	429a      	cmp	r2, r3
 801412e:	d100      	bne.n	8014132 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 8014130:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 8014132:	5ccd      	ldrb	r5, [r1, r3]
 8014134:	425c      	negs	r4, r3
 8014136:	5505      	strb	r5, [r0, r4]
 8014138:	3301      	adds	r3, #1
 801413a:	e7f7      	b.n	801412c <memcpyr+0x8>

0801413c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 801413c:	4b04      	ldr	r3, [pc, #16]	; (8014150 <memset1+0x14>)
 801413e:	3a01      	subs	r2, #1
 8014140:	b292      	uxth	r2, r2
 8014142:	429a      	cmp	r2, r3
 8014144:	d100      	bne.n	8014148 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 8014146:	4770      	bx	lr
        *dst++ = value;
 8014148:	7001      	strb	r1, [r0, #0]
 801414a:	3001      	adds	r0, #1
 801414c:	e7f7      	b.n	801413e <memset1+0x2>
 801414e:	46c0      	nop			; (mov r8, r8)
 8014150:	0000ffff 	.word	0x0000ffff

08014154 <CircularQueue_Init>:
/* Private functions ---------------------------------------------------------*/
/* Public functions ----------------------------------------------------------*/


int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8014154:	b510      	push	{r4, lr}
  q->qBuff = queueBuffer;
 8014156:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8014158:	2100      	movs	r1, #0
{
 801415a:	ac02      	add	r4, sp, #8
 801415c:	7824      	ldrb	r4, [r4, #0]
  q->first = 0;
 801415e:	60c1      	str	r1, [r0, #12]
  q->last = 0; //queueSize-1;
 8014160:	6101      	str	r1, [r0, #16]
  q->byteCount = 0;
 8014162:	6141      	str	r1, [r0, #20]
  q->elementCount = 0;
 8014164:	6181      	str	r1, [r0, #24]
  q->queueMaxSize = queueSize;
 8014166:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 8014168:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 801416a:	7704      	strb	r4, [r0, #28]
   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
 801416c:	0008      	movs	r0, r1
   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801416e:	07a2      	lsls	r2, r4, #30
 8014170:	d502      	bpl.n	8014178 <CircularQueue_Init+0x24>
 8014172:	1e58      	subs	r0, r3, #1
 8014174:	4183      	sbcs	r3, r0
 8014176:	4258      	negs	r0, r3
}
 8014178:	bd10      	pop	{r4, pc}

0801417a <CircularQueue_Add>:

uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 801417a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801417c:	b087      	sub	sp, #28
 801417e:	9305      	str	r3, [sp, #20]
 8014180:	9103      	str	r1, [sp, #12]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8014182:	8907      	ldrh	r7, [r0, #8]
{
 8014184:	0004      	movs	r4, r0
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8014186:	4278      	negs	r0, r7
 8014188:	4178      	adcs	r0, r7
 801418a:	0043      	lsls	r3, r0, #1
 801418c:	9301      	str	r3, [sp, #4]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 801418e:	6963      	ldr	r3, [r4, #20]
 8014190:	9302      	str	r3, [sp, #8]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d035      	beq.n	8014202 <CircularQueue_Add+0x88>
 8014196:	9700      	str	r7, [sp, #0]
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8014198:	2f00      	cmp	r7, #0
 801419a:	d10e      	bne.n	80141ba <CircularQueue_Add+0x40>
 801419c:	6923      	ldr	r3, [r4, #16]
 801419e:	6820      	ldr	r0, [r4, #0]
 80141a0:	6865      	ldr	r5, [r4, #4]
 80141a2:	5cc1      	ldrb	r1, [r0, r3]
 80141a4:	3301      	adds	r3, #1
 80141a6:	42ab      	cmp	r3, r5
 80141a8:	d300      	bcc.n	80141ac <CircularQueue_Add+0x32>
 80141aa:	1b5b      	subs	r3, r3, r5
 80141ac:	5cc3      	ldrb	r3, [r0, r3]
 80141ae:	3102      	adds	r1, #2
 80141b0:	021b      	lsls	r3, r3, #8
 80141b2:	1859      	adds	r1, r3, r1
 80141b4:	b28b      	uxth	r3, r1
 80141b6:	9300      	str	r3, [sp, #0]
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80141b8:	0017      	movs	r7, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80141ba:	6923      	ldr	r3, [r4, #16]
 80141bc:	68e2      	ldr	r2, [r4, #12]
 80141be:	2000      	movs	r0, #0
 80141c0:	4293      	cmp	r3, r2
 80141c2:	d303      	bcc.n	80141cc <CircularQueue_Add+0x52>
 80141c4:	6862      	ldr	r2, [r4, #4]
 80141c6:	1ad0      	subs	r0, r2, r3
 80141c8:	9b00      	ldr	r3, [sp, #0]
 80141ca:	1ac0      	subs	r0, r0, r3
   //free_size = (q->last >= q->first) ?  eob_free_size + q->first :(q->last + curElementSize) - q->first;

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80141cc:	9b01      	ldr	r3, [sp, #4]
 80141ce:	9d05      	ldr	r5, [sp, #20]
 80141d0:	18f9      	adds	r1, r7, r3
 80141d2:	434d      	muls	r5, r1
 80141d4:	2600      	movs	r6, #0
 80141d6:	42a8      	cmp	r0, r5
 80141d8:	d80e      	bhi.n	80141f8 <CircularQueue_Add+0x7e>
 80141da:	f7ec fd73 	bl	8000cc4 <__aeabi_uidivmod>
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80141de:	9b01      	ldr	r3, [sp, #4]
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80141e0:	b2c9      	uxtb	r1, r1
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80141e2:	428b      	cmp	r3, r1
 80141e4:	d208      	bcs.n	80141f8 <CircularQueue_Add+0x7e>
 80141e6:	7f22      	ldrb	r2, [r4, #28]
 80141e8:	07d3      	lsls	r3, r2, #31
 80141ea:	17db      	asrs	r3, r3, #31
 80141ec:	4019      	ands	r1, r3
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80141ee:	466b      	mov	r3, sp
 80141f0:	889e      	ldrh	r6, [r3, #4]
 80141f2:	0793      	lsls	r3, r2, #30
 80141f4:	d400      	bmi.n	80141f8 <CircularQueue_Add+0x7e>
 80141f6:	e0c7      	b.n	8014388 <CircularQueue_Add+0x20e>
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80141f8:	2f00      	cmp	r7, #0
 80141fa:	d108      	bne.n	801420e <CircularQueue_Add+0x94>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 80141fc:	2000      	movs	r0, #0
  }
  return ptr;
}
 80141fe:	b007      	add	sp, #28
 8014200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8014202:	9b02      	ldr	r3, [sp, #8]
 8014204:	9300      	str	r3, [sp, #0]
  if (q->elementSize > 0)               
 8014206:	2f00      	cmp	r7, #0
 8014208:	d1d7      	bne.n	80141ba <CircularQueue_Add+0x40>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801420a:	9700      	str	r7, [sp, #0]
 801420c:	e7d4      	b.n	80141b8 <CircularQueue_Add+0x3e>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 801420e:	9b02      	ldr	r3, [sp, #8]
 8014210:	195d      	adds	r5, r3, r5
 8014212:	6863      	ldr	r3, [r4, #4]
 8014214:	19ae      	adds	r6, r5, r6
 8014216:	429e      	cmp	r6, r3
 8014218:	d8f0      	bhi.n	80141fc <CircularQueue_Add+0x82>
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801421a:	2600      	movs	r6, #0
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801421c:	0a3b      	lsrs	r3, r7, #8
 801421e:	9304      	str	r3, [sp, #16]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014220:	9b03      	ldr	r3, [sp, #12]
 8014222:	9603      	str	r6, [sp, #12]
 8014224:	9302      	str	r3, [sp, #8]
    for (i=0; i < nbElements; i++) 
 8014226:	9b03      	ldr	r3, [sp, #12]
 8014228:	9905      	ldr	r1, [sp, #20]
 801422a:	6920      	ldr	r0, [r4, #16]
 801422c:	6862      	ldr	r2, [r4, #4]
 801422e:	428b      	cmp	r3, r1
 8014230:	d107      	bne.n	8014242 <CircularQueue_Add+0xc8>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8014232:	9901      	ldr	r1, [sp, #4]
 8014234:	6823      	ldr	r3, [r4, #0]
 8014236:	1808      	adds	r0, r1, r0
 8014238:	4290      	cmp	r0, r2
 801423a:	d300      	bcc.n	801423e <CircularQueue_Add+0xc4>
 801423c:	1a80      	subs	r0, r0, r2
 801423e:	1818      	adds	r0, r3, r0
  return ptr;
 8014240:	e7dd      	b.n	80141fe <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8014242:	9b00      	ldr	r3, [sp, #0]
 8014244:	1818      	adds	r0, r3, r0
 8014246:	4290      	cmp	r0, r2
 8014248:	d300      	bcc.n	801424c <CircularQueue_Add+0xd2>
 801424a:	1a80      	subs	r0, r0, r2
      if (q->elementSize == 0) 
 801424c:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801424e:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 8014250:	2b00      	cmp	r3, #0
 8014252:	d112      	bne.n	801427a <CircularQueue_Add+0x100>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8014254:	6822      	ldr	r2, [r4, #0]
 8014256:	1c43      	adds	r3, r0, #1
 8014258:	5417      	strb	r7, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801425a:	6862      	ldr	r2, [r4, #4]
 801425c:	4293      	cmp	r3, r2
 801425e:	d300      	bcc.n	8014262 <CircularQueue_Add+0xe8>
 8014260:	1a9b      	subs	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8014262:	4669      	mov	r1, sp
 8014264:	6822      	ldr	r2, [r4, #0]
 8014266:	7c09      	ldrb	r1, [r1, #16]
 8014268:	1c58      	adds	r0, r3, #1
 801426a:	54d1      	strb	r1, [r2, r3]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801426c:	6863      	ldr	r3, [r4, #4]
 801426e:	4298      	cmp	r0, r3
 8014270:	d300      	bcc.n	8014274 <CircularQueue_Add+0xfa>
 8014272:	1ac0      	subs	r0, r0, r3
        q->byteCount += 2;
 8014274:	6963      	ldr	r3, [r4, #20]
 8014276:	3302      	adds	r3, #2
 8014278:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801427a:	6863      	ldr	r3, [r4, #4]
 801427c:	1a1d      	subs	r5, r3, r0
 801427e:	42bd      	cmp	r5, r7
 8014280:	d900      	bls.n	8014284 <CircularQueue_Add+0x10a>
 8014282:	003d      	movs	r5, r7
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8014284:	42af      	cmp	r7, r5
 8014286:	d003      	beq.n	8014290 <CircularQueue_Add+0x116>
 8014288:	d928      	bls.n	80142dc <CircularQueue_Add+0x162>
 801428a:	7f23      	ldrb	r3, [r4, #28]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d125      	bne.n	80142dc <CircularQueue_Add+0x162>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	002a      	movs	r2, r5
 8014294:	1818      	adds	r0, r3, r0
 8014296:	9902      	ldr	r1, [sp, #8]
 8014298:	f7ef fb68 	bl	800396c <memcpy>
        curBuffPosition = 0; 
 801429c:	2000      	movs	r0, #0
        q->byteCount += NbBytesToCopy;
 801429e:	6963      	ldr	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80142a0:	002e      	movs	r6, r5
        q->byteCount += NbBytesToCopy;
 80142a2:	195b      	adds	r3, r3, r5
 80142a4:	6163      	str	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80142a6:	9b01      	ldr	r3, [sp, #4]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80142a8:	1b7d      	subs	r5, r7, r5
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80142aa:	18fb      	adds	r3, r7, r3
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	9300      	str	r3, [sp, #0]
      if (NbBytesToCopy)      
 80142b0:	2d00      	cmp	r5, #0
 80142b2:	d009      	beq.n	80142c8 <CircularQueue_Add+0x14e>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80142b4:	9b02      	ldr	r3, [sp, #8]
 80142b6:	002a      	movs	r2, r5
 80142b8:	18f1      	adds	r1, r6, r3
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	1818      	adds	r0, r3, r0
 80142be:	f7ef fb55 	bl	800396c <memcpy>
        q->byteCount += NbBytesToCopy;
 80142c2:	6963      	ldr	r3, [r4, #20]
 80142c4:	195d      	adds	r5, r3, r5
 80142c6:	6165      	str	r5, [r4, #20]
      q->elementCount++;
 80142c8:	69a3      	ldr	r3, [r4, #24]
 80142ca:	3301      	adds	r3, #1
 80142cc:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 80142ce:	9b03      	ldr	r3, [sp, #12]
 80142d0:	3301      	adds	r3, #1
 80142d2:	9303      	str	r3, [sp, #12]
 80142d4:	9b02      	ldr	r3, [sp, #8]
 80142d6:	19db      	adds	r3, r3, r7
 80142d8:	9302      	str	r3, [sp, #8]
 80142da:	e7a4      	b.n	8014226 <CircularQueue_Add+0xac>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80142dc:	2d00      	cmp	r5, #0
 80142de:	d0f3      	beq.n	80142c8 <CircularQueue_Add+0x14e>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80142e0:	2201      	movs	r2, #1
 80142e2:	7f23      	ldrb	r3, [r4, #28]
 80142e4:	4213      	tst	r3, r2
 80142e6:	d023      	beq.n	8014330 <CircularQueue_Add+0x1b6>
          if (q->elementSize == 0)
 80142e8:	8923      	ldrh	r3, [r4, #8]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d108      	bne.n	8014300 <CircularQueue_Add+0x186>
             q->qBuff[curBuffPosition-2] = 0xFF;
 80142ee:	6823      	ldr	r3, [r4, #0]
 80142f0:	32fe      	adds	r2, #254	; 0xfe
 80142f2:	181b      	adds	r3, r3, r0
 80142f4:	3b02      	subs	r3, #2
 80142f6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80142f8:	6823      	ldr	r3, [r4, #0]
 80142fa:	1818      	adds	r0, r3, r0
 80142fc:	3801      	subs	r0, #1
 80142fe:	7002      	strb	r2, [r0, #0]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8014300:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8014302:	8926      	ldrh	r6, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8014304:	195d      	adds	r5, r3, r5
 8014306:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 8014308:	2e00      	cmp	r6, #0
 801430a:	d139      	bne.n	8014380 <CircularQueue_Add+0x206>
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801430c:	466a      	mov	r2, sp
            q->byteCount += 2;   
 801430e:	003d      	movs	r5, r7
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8014310:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014312:	7c12      	ldrb	r2, [r2, #16]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8014314:	701f      	strb	r7, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014316:	6823      	ldr	r3, [r4, #0]
 8014318:	705a      	strb	r2, [r3, #1]
            q->byteCount += 2;   
 801431a:	6963      	ldr	r3, [r4, #20]
 801431c:	3302      	adds	r3, #2
 801431e:	6163      	str	r3, [r4, #20]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014320:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8014322:	9b01      	ldr	r3, [sp, #4]
 8014324:	195b      	adds	r3, r3, r5
 8014326:	b29b      	uxth	r3, r3
 8014328:	9300      	str	r3, [sp, #0]
        q->last = 0;        
 801432a:	2300      	movs	r3, #0
 801432c:	6123      	str	r3, [r4, #16]
 801432e:	e7bf      	b.n	80142b0 <CircularQueue_Add+0x136>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8014330:	2202      	movs	r2, #2
 8014332:	4213      	tst	r3, r2
 8014334:	d0f5      	beq.n	8014322 <CircularQueue_Add+0x1a8>
          if (q->elementSize == 0)
 8014336:	8923      	ldrh	r3, [r4, #8]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d000      	beq.n	801433e <CircularQueue_Add+0x1c4>
 801433c:	e75e      	b.n	80141fc <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 801433e:	6823      	ldr	r3, [r4, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014340:	0a2a      	lsrs	r2, r5, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8014342:	181b      	adds	r3, r3, r0
 8014344:	3b02      	subs	r3, #2
 8014346:	701d      	strb	r5, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014348:	6823      	ldr	r3, [r4, #0]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801434a:	9902      	ldr	r1, [sp, #8]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801434c:	181b      	adds	r3, r3, r0
 801434e:	3b01      	subs	r3, #1
 8014350:	701a      	strb	r2, [r3, #0]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	002a      	movs	r2, r5
 8014356:	1818      	adds	r0, r3, r0
 8014358:	f7ef fb08 	bl	800396c <memcpy>
             q->elementCount++;
 801435c:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 801435e:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 8014360:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 8014362:	195b      	adds	r3, r3, r5
             q->elementCount++;
 8014364:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8014366:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 8014368:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 801436a:	1b7b      	subs	r3, r7, r5
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801436c:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801436e:	6821      	ldr	r1, [r4, #0]
 8014370:	0a1a      	lsrs	r2, r3, #8
 8014372:	704a      	strb	r2, [r1, #1]
             q->byteCount += 2;              
 8014374:	6962      	ldr	r2, [r4, #20]
 8014376:	002e      	movs	r6, r5
 8014378:	3202      	adds	r2, #2
 801437a:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 801437c:	001d      	movs	r5, r3
 801437e:	e7cf      	b.n	8014320 <CircularQueue_Add+0x1a6>
          NbCopiedBytes = 0;
 8014380:	2600      	movs	r6, #0
 8014382:	003d      	movs	r5, r7
          curBuffPosition = 0; 
 8014384:	0030      	movs	r0, r6
 8014386:	e7cc      	b.n	8014322 <CircularQueue_Add+0x1a8>
 8014388:	b28e      	uxth	r6, r1
 801438a:	e735      	b.n	80141f8 <CircularQueue_Add+0x7e>

0801438c <CircularQueue_Remove>:

uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 801438c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801438e:	0003      	movs	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8014390:	8900      	ldrh	r0, [r0, #8]
  *elementSize = 0;
  //uint32_t FirstElemetPos = 0;
  if (q->byteCount > 0) 
 8014392:	695e      	ldr	r6, [r3, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8014394:	4242      	negs	r2, r0
 8014396:	4142      	adcs	r2, r0
  *elementSize = 0;
 8014398:	2000      	movs	r0, #0
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801439a:	0052      	lsls	r2, r2, #1
  *elementSize = 0;
 801439c:	8008      	strh	r0, [r1, #0]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801439e:	9201      	str	r2, [sp, #4]
  uint8_t* ptr= NULL;
 80143a0:	1e30      	subs	r0, r6, #0
  if (q->byteCount > 0) 
 80143a2:	d04f      	beq.n	8014444 <CircularQueue_Remove+0xb8>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80143a4:	891d      	ldrh	r5, [r3, #8]
 80143a6:	6818      	ldr	r0, [r3, #0]
 80143a8:	68df      	ldr	r7, [r3, #12]
 80143aa:	2d00      	cmp	r5, #0
 80143ac:	d109      	bne.n	80143c2 <CircularQueue_Remove+0x36>
 80143ae:	685a      	ldr	r2, [r3, #4]
 80143b0:	1c7c      	adds	r4, r7, #1
 80143b2:	5dc5      	ldrb	r5, [r0, r7]
 80143b4:	4294      	cmp	r4, r2
 80143b6:	d300      	bcc.n	80143ba <CircularQueue_Remove+0x2e>
 80143b8:	1aa4      	subs	r4, r4, r2
 80143ba:	5d04      	ldrb	r4, [r0, r4]
 80143bc:	0224      	lsls	r4, r4, #8
 80143be:	192d      	adds	r5, r5, r4
 80143c0:	b2ad      	uxth	r5, r5

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80143c2:	2203      	movs	r2, #3
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80143c4:	800d      	strh	r5, [r1, #0]
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80143c6:	7f1c      	ldrb	r4, [r3, #28]
 80143c8:	4022      	ands	r2, r4
 80143ca:	685c      	ldr	r4, [r3, #4]
 80143cc:	2a01      	cmp	r2, #1
 80143ce:	d121      	bne.n	8014414 <CircularQueue_Remove+0x88>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80143d0:	4a1d      	ldr	r2, [pc, #116]	; (8014448 <CircularQueue_Remove+0xbc>)
 80143d2:	4295      	cmp	r5, r2
 80143d4:	d102      	bne.n	80143dc <CircularQueue_Remove+0x50>
 80143d6:	891d      	ldrh	r5, [r3, #8]
 80143d8:	2d00      	cmp	r5, #0
 80143da:	d009      	beq.n	80143f0 <CircularQueue_Remove+0x64>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80143dc:	68dd      	ldr	r5, [r3, #12]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80143de:	691a      	ldr	r2, [r3, #16]
 80143e0:	4295      	cmp	r5, r2
 80143e2:	d917      	bls.n	8014414 <CircularQueue_Remove+0x88>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80143e4:	891a      	ldrh	r2, [r3, #8]
 80143e6:	2a00      	cmp	r2, #0
 80143e8:	d014      	beq.n	8014414 <CircularQueue_Remove+0x88>
 80143ea:	1b65      	subs	r5, r4, r5
 80143ec:	4295      	cmp	r5, r2
 80143ee:	d211      	bcs.n	8014414 <CircularQueue_Remove+0x88>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
          /* Adjust first element pos */
          q->first = 0;
 80143f0:	2500      	movs	r5, #0
          q->byteCount -= (q->queueMaxSize - q->first);
 80143f2:	19f6      	adds	r6, r6, r7
          q->first = 0;
 80143f4:	60dd      	str	r5, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80143f6:	891d      	ldrh	r5, [r3, #8]
          q->byteCount -= (q->queueMaxSize - q->first);
 80143f8:	1b36      	subs	r6, r6, r4
 80143fa:	615e      	str	r6, [r3, #20]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80143fc:	2d00      	cmp	r5, #0
 80143fe:	d108      	bne.n	8014412 <CircularQueue_Remove+0x86>
 8014400:	2601      	movs	r6, #1
 8014402:	7805      	ldrb	r5, [r0, #0]
 8014404:	42b4      	cmp	r4, r6
 8014406:	d800      	bhi.n	801440a <CircularQueue_Remove+0x7e>
 8014408:	1b36      	subs	r6, r6, r4
 801440a:	5d86      	ldrb	r6, [r0, r6]
 801440c:	0236      	lsls	r6, r6, #8
 801440e:	19ad      	adds	r5, r5, r6
 8014410:	b2ad      	uxth	r5, r5
 8014412:	800d      	strh	r5, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8014414:	68de      	ldr	r6, [r3, #12]
 8014416:	9a01      	ldr	r2, [sp, #4]
 8014418:	18b5      	adds	r5, r6, r2
 801441a:	42a5      	cmp	r5, r4
 801441c:	d300      	bcc.n	8014420 <CircularQueue_Remove+0x94>
 801441e:	1b2d      	subs	r5, r5, r4

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8014420:	8809      	ldrh	r1, [r1, #0]
 8014422:	9a01      	ldr	r2, [sp, #4]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8014424:	1940      	adds	r0, r0, r5
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8014426:	188d      	adds	r5, r1, r2
 8014428:	695a      	ldr	r2, [r3, #20]
 801442a:	1b55      	subs	r5, r2, r5
 801442c:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 801442e:	d006      	beq.n	801443e <CircularQueue_Remove+0xb2>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8014430:	9a01      	ldr	r2, [sp, #4]
 8014432:	1989      	adds	r1, r1, r6
 8014434:	188a      	adds	r2, r1, r2
 8014436:	4294      	cmp	r4, r2
 8014438:	d800      	bhi.n	801443c <CircularQueue_Remove+0xb0>
 801443a:	1b12      	subs	r2, r2, r4
 801443c:	60da      	str	r2, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 801443e:	699a      	ldr	r2, [r3, #24]
 8014440:	3a01      	subs	r2, #1
 8014442:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8014444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014446:	46c0      	nop			; (mov r8, r8)
 8014448:	0000ffff 	.word	0x0000ffff

0801444c <CircularQueue_Sense>:

uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801444e:	0003      	movs	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8014450:	8900      	ldrh	r0, [r0, #8]
 8014452:	4242      	negs	r2, r0
 8014454:	4142      	adcs	r2, r0
  *elementSize = 0;
 8014456:	2000      	movs	r0, #0
 8014458:	8008      	strh	r0, [r1, #0]
  uint8_t* x= NULL;
 801445a:	6958      	ldr	r0, [r3, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801445c:	0052      	lsls	r2, r2, #1
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 801445e:	2800      	cmp	r0, #0
 8014460:	d037      	beq.n	80144d2 <CircularQueue_Sense+0x86>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014462:	891c      	ldrh	r4, [r3, #8]
    FirstElemetPos = q->first;
 8014464:	68de      	ldr	r6, [r3, #12]
 8014466:	6818      	ldr	r0, [r3, #0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014468:	2c00      	cmp	r4, #0
 801446a:	d109      	bne.n	8014480 <CircularQueue_Sense+0x34>
 801446c:	685f      	ldr	r7, [r3, #4]
 801446e:	1c75      	adds	r5, r6, #1
 8014470:	5d84      	ldrb	r4, [r0, r6]
 8014472:	42bd      	cmp	r5, r7
 8014474:	d300      	bcc.n	8014478 <CircularQueue_Sense+0x2c>
 8014476:	1bed      	subs	r5, r5, r7
 8014478:	5d45      	ldrb	r5, [r0, r5]
 801447a:	022d      	lsls	r5, r5, #8
 801447c:	1964      	adds	r4, r4, r5
 801447e:	b2a4      	uxth	r4, r4
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8014480:	2503      	movs	r5, #3
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014482:	800c      	strh	r4, [r1, #0]
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8014484:	7f1f      	ldrb	r7, [r3, #28]
 8014486:	402f      	ands	r7, r5
 8014488:	685d      	ldr	r5, [r3, #4]
 801448a:	2f01      	cmp	r7, #1
 801448c:	d11c      	bne.n	80144c8 <CircularQueue_Sense+0x7c>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 801448e:	4f11      	ldr	r7, [pc, #68]	; (80144d4 <CircularQueue_Sense+0x88>)
 8014490:	42bc      	cmp	r4, r7
 8014492:	d102      	bne.n	801449a <CircularQueue_Sense+0x4e>
 8014494:	891c      	ldrh	r4, [r3, #8]
 8014496:	2c00      	cmp	r4, #0
 8014498:	d008      	beq.n	80144ac <CircularQueue_Sense+0x60>
 801449a:	691c      	ldr	r4, [r3, #16]
 801449c:	42a6      	cmp	r6, r4
 801449e:	d913      	bls.n	80144c8 <CircularQueue_Sense+0x7c>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80144a0:	891c      	ldrh	r4, [r3, #8]
 80144a2:	2c00      	cmp	r4, #0
 80144a4:	d010      	beq.n	80144c8 <CircularQueue_Sense+0x7c>
 80144a6:	1baf      	subs	r7, r5, r6
 80144a8:	42a7      	cmp	r7, r4
 80144aa:	d20d      	bcs.n	80144c8 <CircularQueue_Sense+0x7c>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80144ac:	891b      	ldrh	r3, [r3, #8]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d108      	bne.n	80144c4 <CircularQueue_Sense+0x78>
 80144b2:	2401      	movs	r4, #1
 80144b4:	7803      	ldrb	r3, [r0, #0]
 80144b6:	42a5      	cmp	r5, r4
 80144b8:	d800      	bhi.n	80144bc <CircularQueue_Sense+0x70>
 80144ba:	1b64      	subs	r4, r4, r5
 80144bc:	5d04      	ldrb	r4, [r0, r4]
 80144be:	0224      	lsls	r4, r4, #8
 80144c0:	191b      	adds	r3, r3, r4
 80144c2:	b29b      	uxth	r3, r3
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80144c4:	2600      	movs	r6, #0
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80144c6:	800b      	strh	r3, [r1, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80144c8:	1992      	adds	r2, r2, r6
 80144ca:	42aa      	cmp	r2, r5
 80144cc:	d300      	bcc.n	80144d0 <CircularQueue_Sense+0x84>
 80144ce:	1b52      	subs	r2, r2, r5
 80144d0:	1880      	adds	r0, r0, r2
  }
  return x;
}
 80144d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144d4:	0000ffff 	.word	0x0000ffff

080144d8 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80144d8:	b082      	sub	sp, #8
 80144da:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 80144dc:	18c9      	adds	r1, r1, r3
{
 80144de:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80144e0:	ab05      	add	r3, sp, #20
 80144e2:	889c      	ldrh	r4, [r3, #4]
 80144e4:	18a2      	adds	r2, r4, r2
 80144e6:	b292      	uxth	r2, r2
    if( c.SubSeconds >= 1000 )
 80144e8:	4c06      	ldr	r4, [pc, #24]	; (8014504 <SysTimeAdd+0x2c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80144ea:	b213      	sxth	r3, r2
    if( c.SubSeconds >= 1000 )
 80144ec:	42a3      	cmp	r3, r4
 80144ee:	dd03      	ble.n	80144f8 <SysTimeAdd+0x20>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 80144f0:	4b05      	ldr	r3, [pc, #20]	; (8014508 <SysTimeAdd+0x30>)
        c.Seconds++;
 80144f2:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 80144f4:	18d2      	adds	r2, r2, r3
 80144f6:	b213      	sxth	r3, r2
    }
    return c;
 80144f8:	6001      	str	r1, [r0, #0]
 80144fa:	8083      	strh	r3, [r0, #4]
}
 80144fc:	bc16      	pop	{r1, r2, r4}
 80144fe:	bc08      	pop	{r3}
 8014500:	b002      	add	sp, #8
 8014502:	4718      	bx	r3
 8014504:	000003e7 	.word	0x000003e7
 8014508:	fffffc18 	.word	0xfffffc18

0801450c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801450c:	b082      	sub	sp, #8
 801450e:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 8014510:	1ac9      	subs	r1, r1, r3
{
 8014512:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014514:	ab05      	add	r3, sp, #20
 8014516:	889b      	ldrh	r3, [r3, #4]
 8014518:	1ad2      	subs	r2, r2, r3
 801451a:	b292      	uxth	r2, r2
 801451c:	b213      	sxth	r3, r2
    if( c.SubSeconds < 0 )
 801451e:	2b00      	cmp	r3, #0
 8014520:	da04      	bge.n	801452c <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 8014522:	23fa      	movs	r3, #250	; 0xfa
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 8014528:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 801452a:	b213      	sxth	r3, r2
    }
    return c;
 801452c:	6001      	str	r1, [r0, #0]
 801452e:	8083      	strh	r3, [r0, #4]
}
 8014530:	bc16      	pop	{r1, r2, r4}
 8014532:	bc08      	pop	{r3}
 8014534:	b002      	add	sp, #8
 8014536:	4718      	bx	r3

08014538 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801453a:	2300      	movs	r3, #0
{
 801453c:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801453e:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014540:	a803      	add	r0, sp, #12
{
 8014542:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014544:	9302      	str	r3, [sp, #8]
 8014546:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014548:	f7f6 f924 	bl	800a794 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 801454c:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801454e:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 8014550:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014552:	466b      	mov	r3, sp
 8014554:	88a1      	ldrh	r1, [r4, #4]
 8014556:	889b      	ldrh	r3, [r3, #4]
 8014558:	1a5b      	subs	r3, r3, r1
 801455a:	b29b      	uxth	r3, r3
 801455c:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 801455e:	2900      	cmp	r1, #0
 8014560:	da04      	bge.n	801456c <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 8014562:	22fa      	movs	r2, #250	; 0xfa
 8014564:	0092      	lsls	r2, r2, #2
 8014566:	189b      	adds	r3, r3, r2
        c.Seconds--;
 8014568:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 801456a:	b219      	sxth	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 801456c:	f7f6 f922 	bl	800a7b4 <HW_RTC_BKUPWrite>
}
 8014570:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

08014574 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014574:	b530      	push	{r4, r5, lr}
 8014576:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014578:	2300      	movs	r3, #0
 801457a:	466a      	mov	r2, sp
{
 801457c:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801457e:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014580:	8093      	strh	r3, [r2, #4]
 8014582:	9300      	str	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014584:	f7f6 f906 	bl	800a794 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 8014588:	ad02      	add	r5, sp, #8
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801458a:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 801458c:	a903      	add	r1, sp, #12
 801458e:	0028      	movs	r0, r5
 8014590:	f7f6 f920 	bl	800a7d4 <HW_RTC_BKUPRead>
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014594:	4669      	mov	r1, sp
    c.Seconds = a.Seconds + b.Seconds;
 8014596:	9b02      	ldr	r3, [sp, #8]
 8014598:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801459a:	8889      	ldrh	r1, [r1, #4]
    c.Seconds = a.Seconds + b.Seconds;
 801459c:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801459e:	88ab      	ldrh	r3, [r5, #4]
    if( c.SubSeconds >= 1000 )
 80145a0:	4807      	ldr	r0, [pc, #28]	; (80145c0 <SysTimeGet+0x4c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80145a2:	185b      	adds	r3, r3, r1
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 80145a8:	4281      	cmp	r1, r0
 80145aa:	dd03      	ble.n	80145b4 <SysTimeGet+0x40>
        c.SubSeconds -= 1000;
 80145ac:	4905      	ldr	r1, [pc, #20]	; (80145c4 <SysTimeGet+0x50>)
        c.Seconds++;
 80145ae:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 80145b0:	185b      	adds	r3, r3, r1
 80145b2:	b219      	sxth	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 80145b4:	0020      	movs	r0, r4
    return sysTime;
 80145b6:	6022      	str	r2, [r4, #0]
 80145b8:	80a1      	strh	r1, [r4, #4]
}
 80145ba:	b005      	add	sp, #20
 80145bc:	bd30      	pop	{r4, r5, pc}
 80145be:	46c0      	nop			; (mov r8, r8)
 80145c0:	000003e7 	.word	0x000003e7
 80145c4:	fffffc18 	.word	0xfffffc18

080145c8 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 80145c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80145ca:	2300      	movs	r3, #0
 80145cc:	466c      	mov	r4, sp
{
 80145ce:	0005      	movs	r5, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80145d0:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80145d6:	f7f6 f8dd 	bl	800a794 <HW_RTC_GetCalendarTime>

    return calendarTime;
 80145da:	002b      	movs	r3, r5
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80145dc:	9000      	str	r0, [sp, #0]
    return calendarTime;
 80145de:	cc06      	ldmia	r4!, {r1, r2}
 80145e0:	c306      	stmia	r3!, {r1, r2}
}
 80145e2:	0028      	movs	r0, r5
 80145e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

080145e8 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 80145e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80145ea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80145ee:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgTraceQueue,&bufSize);
 80145f0:	466b      	mov	r3, sp
 80145f2:	4e0e      	ldr	r6, [pc, #56]	; (801462c <Trace_TxCpltCallback+0x44>)
 80145f4:	1d9c      	adds	r4, r3, #6
 80145f6:	0021      	movs	r1, r4
 80145f8:	0030      	movs	r0, r6
 80145fa:	f7ff fec7 	bl	801438c <CircularQueue_Remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 80145fe:	0021      	movs	r1, r4
 8014600:	0030      	movs	r0, r6
 8014602:	f7ff ff23 	bl	801444c <CircularQueue_Sense>

  if ( buffer != NULL) 
 8014606:	2800      	cmp	r0, #0
 8014608:	d005      	beq.n	8014616 <Trace_TxCpltCallback+0x2e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801460a:	f385 8810 	msr	PRIMASK, r5
  {
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace((uint8_t*)buffer, bufSize);
 801460e:	8821      	ldrh	r1, [r4, #0]
 8014610:	f7f6 f994 	bl	800a93c <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 8014614:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 8014616:	0001      	movs	r1, r0
 8014618:	2020      	movs	r0, #32
 801461a:	f7ff fc39 	bl	8013e90 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 801461e:	2201      	movs	r2, #1
 8014620:	4b03      	ldr	r3, [pc, #12]	; (8014630 <Trace_TxCpltCallback+0x48>)
 8014622:	701a      	strb	r2, [r3, #0]
 8014624:	f385 8810 	msr	PRIMASK, r5
}
 8014628:	e7f4      	b.n	8014614 <Trace_TxCpltCallback+0x2c>
 801462a:	46c0      	nop			; (mov r8, r8)
 801462c:	20001c8c 	.word	0x20001c8c
 8014630:	20000ad0 	.word	0x20000ad0

08014634 <TraceInit>:
{
 8014634:	b507      	push	{r0, r1, r2, lr}
  OutputInit(Trace_TxCpltCallback);
 8014636:	4806      	ldr	r0, [pc, #24]	; (8014650 <TraceInit+0x1c>)
 8014638:	f7f6 f962 	bl	800a900 <vcom_Init>
  CircularQueue_Init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 801463c:	2302      	movs	r3, #2
 801463e:	2280      	movs	r2, #128	; 0x80
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	0052      	lsls	r2, r2, #1
 8014644:	2300      	movs	r3, #0
 8014646:	4903      	ldr	r1, [pc, #12]	; (8014654 <TraceInit+0x20>)
 8014648:	4803      	ldr	r0, [pc, #12]	; (8014658 <TraceInit+0x24>)
 801464a:	f7ff fd83 	bl	8014154 <CircularQueue_Init>
}
 801464e:	bd07      	pop	{r0, r1, r2, pc}
 8014650:	080145e9 	.word	0x080145e9
 8014654:	20001cac 	.word	0x20001cac
 8014658:	20001c8c 	.word	0x20001c8c

0801465c <TraceSend>:
{
 801465c:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 801465e:	2180      	movs	r1, #128	; 0x80
{
 8014660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014662:	b0c5      	sub	sp, #276	; 0x114
 8014664:	ab4a      	add	r3, sp, #296	; 0x128
 8014666:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8014668:	0049      	lsls	r1, r1, #1
 801466a:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 801466c:	9303      	str	r3, [sp, #12]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 801466e:	f7ef fad9 	bl	8003c24 <vsnprintf>
 8014672:	ab02      	add	r3, sp, #8
 8014674:	1c9d      	adds	r5, r3, #2
 8014676:	8028      	strh	r0, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014678:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801467c:	b672      	cpsid	i
  buffer=CircularQueue_Add(&MsgTraceQueue,(uint8_t*)buf, bufSize,1);
 801467e:	4f16      	ldr	r7, [pc, #88]	; (80146d8 <TraceSend+0x7c>)
 8014680:	882a      	ldrh	r2, [r5, #0]
 8014682:	2301      	movs	r3, #1
 8014684:	a904      	add	r1, sp, #16
 8014686:	0038      	movs	r0, r7
 8014688:	f7ff fd77 	bl	801417a <CircularQueue_Add>
 801468c:	1e04      	subs	r4, r0, #0
  if ((buffer!=NULL) && (TracePeripheralReady==SET))
 801468e:	d01f      	beq.n	80146d0 <TraceSend+0x74>
 8014690:	4b12      	ldr	r3, [pc, #72]	; (80146dc <TraceSend+0x80>)
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	b2db      	uxtb	r3, r3
 8014696:	9301      	str	r3, [sp, #4]
 8014698:	2b01      	cmp	r3, #1
 801469a:	d119      	bne.n	80146d0 <TraceSend+0x74>
    buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 801469c:	0029      	movs	r1, r5
 801469e:	0038      	movs	r0, r7
 80146a0:	f7ff fed4 	bl	801444c <CircularQueue_Sense>
    TracePeripheralReady = RESET;
 80146a4:	2300      	movs	r3, #0
 80146a6:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <TraceSend+0x80>)
    buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 80146a8:	0004      	movs	r4, r0
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80146aa:	9901      	ldr	r1, [sp, #4]
 80146ac:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 80146ae:	7013      	strb	r3, [r2, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80146b0:	f7ff fbee 	bl	8013e90 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146b4:	f386 8810 	msr	PRIMASK, r6
    OutputTrace((uint8_t*)buffer, bufSize);
 80146b8:	8829      	ldrh	r1, [r5, #0]
 80146ba:	0020      	movs	r0, r4
 80146bc:	f7f6 f93e 	bl	800a93c <vcom_Trace>
  if (buffer!=NULL)
 80146c0:	4260      	negs	r0, r4
 80146c2:	4160      	adcs	r0, r4
 80146c4:	4240      	negs	r0, r0
}
 80146c6:	b045      	add	sp, #276	; 0x114
 80146c8:	bcf0      	pop	{r4, r5, r6, r7}
 80146ca:	bc08      	pop	{r3}
 80146cc:	b004      	add	sp, #16
 80146ce:	4718      	bx	r3
 80146d0:	f386 8810 	msr	PRIMASK, r6
 80146d4:	e7f4      	b.n	80146c0 <TraceSend+0x64>
 80146d6:	46c0      	nop			; (mov r8, r8)
 80146d8:	20001c8c 	.word	0x20001c8c
 80146dc:	20000ad0 	.word	0x20000ad0

080146e0 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80146e0:	780a      	ldrb	r2, [r1, #0]
 80146e2:	7803      	ldrb	r3, [r0, #0]
 80146e4:	4053      	eors	r3, r2
 80146e6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80146e8:	784a      	ldrb	r2, [r1, #1]
 80146ea:	7843      	ldrb	r3, [r0, #1]
 80146ec:	4053      	eors	r3, r2
 80146ee:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80146f0:	788a      	ldrb	r2, [r1, #2]
 80146f2:	7883      	ldrb	r3, [r0, #2]
 80146f4:	4053      	eors	r3, r2
 80146f6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80146f8:	78ca      	ldrb	r2, [r1, #3]
 80146fa:	78c3      	ldrb	r3, [r0, #3]
 80146fc:	4053      	eors	r3, r2
 80146fe:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8014700:	790a      	ldrb	r2, [r1, #4]
 8014702:	7903      	ldrb	r3, [r0, #4]
 8014704:	4053      	eors	r3, r2
 8014706:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8014708:	794a      	ldrb	r2, [r1, #5]
 801470a:	7943      	ldrb	r3, [r0, #5]
 801470c:	4053      	eors	r3, r2
 801470e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8014710:	798a      	ldrb	r2, [r1, #6]
 8014712:	7983      	ldrb	r3, [r0, #6]
 8014714:	4053      	eors	r3, r2
 8014716:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8014718:	79ca      	ldrb	r2, [r1, #7]
 801471a:	79c3      	ldrb	r3, [r0, #7]
 801471c:	4053      	eors	r3, r2
 801471e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8014720:	7a0a      	ldrb	r2, [r1, #8]
 8014722:	7a03      	ldrb	r3, [r0, #8]
 8014724:	4053      	eors	r3, r2
 8014726:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8014728:	7a4a      	ldrb	r2, [r1, #9]
 801472a:	7a43      	ldrb	r3, [r0, #9]
 801472c:	4053      	eors	r3, r2
 801472e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8014730:	7a8a      	ldrb	r2, [r1, #10]
 8014732:	7a83      	ldrb	r3, [r0, #10]
 8014734:	4053      	eors	r3, r2
 8014736:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8014738:	7aca      	ldrb	r2, [r1, #11]
 801473a:	7ac3      	ldrb	r3, [r0, #11]
 801473c:	4053      	eors	r3, r2
 801473e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8014740:	7b0a      	ldrb	r2, [r1, #12]
 8014742:	7b03      	ldrb	r3, [r0, #12]
 8014744:	4053      	eors	r3, r2
 8014746:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8014748:	7b4a      	ldrb	r2, [r1, #13]
 801474a:	7b43      	ldrb	r3, [r0, #13]
 801474c:	4053      	eors	r3, r2
 801474e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8014750:	7b8a      	ldrb	r2, [r1, #14]
 8014752:	7b83      	ldrb	r3, [r0, #14]
 8014754:	4053      	eors	r3, r2
 8014756:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8014758:	7bca      	ldrb	r2, [r1, #15]
 801475a:	7bc3      	ldrb	r3, [r0, #15]
 801475c:	4053      	eors	r3, r2
 801475e:	73c3      	strb	r3, [r0, #15]
#endif
}
 8014760:	4770      	bx	lr

08014762 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8014762:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8014764:	780b      	ldrb	r3, [r1, #0]
 8014766:	7814      	ldrb	r4, [r2, #0]
 8014768:	4063      	eors	r3, r4
 801476a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801476c:	7854      	ldrb	r4, [r2, #1]
 801476e:	784b      	ldrb	r3, [r1, #1]
 8014770:	4063      	eors	r3, r4
 8014772:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8014774:	7894      	ldrb	r4, [r2, #2]
 8014776:	788b      	ldrb	r3, [r1, #2]
 8014778:	4063      	eors	r3, r4
 801477a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801477c:	78d4      	ldrb	r4, [r2, #3]
 801477e:	78cb      	ldrb	r3, [r1, #3]
 8014780:	4063      	eors	r3, r4
 8014782:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8014784:	7914      	ldrb	r4, [r2, #4]
 8014786:	790b      	ldrb	r3, [r1, #4]
 8014788:	4063      	eors	r3, r4
 801478a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801478c:	7954      	ldrb	r4, [r2, #5]
 801478e:	794b      	ldrb	r3, [r1, #5]
 8014790:	4063      	eors	r3, r4
 8014792:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8014794:	7994      	ldrb	r4, [r2, #6]
 8014796:	798b      	ldrb	r3, [r1, #6]
 8014798:	4063      	eors	r3, r4
 801479a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 801479c:	79d4      	ldrb	r4, [r2, #7]
 801479e:	79cb      	ldrb	r3, [r1, #7]
 80147a0:	4063      	eors	r3, r4
 80147a2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80147a4:	7a14      	ldrb	r4, [r2, #8]
 80147a6:	7a0b      	ldrb	r3, [r1, #8]
 80147a8:	4063      	eors	r3, r4
 80147aa:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80147ac:	7a4b      	ldrb	r3, [r1, #9]
 80147ae:	7a54      	ldrb	r4, [r2, #9]
 80147b0:	4063      	eors	r3, r4
 80147b2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80147b4:	7a8b      	ldrb	r3, [r1, #10]
 80147b6:	7a94      	ldrb	r4, [r2, #10]
 80147b8:	4063      	eors	r3, r4
 80147ba:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80147bc:	7ad4      	ldrb	r4, [r2, #11]
 80147be:	7acb      	ldrb	r3, [r1, #11]
 80147c0:	4063      	eors	r3, r4
 80147c2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80147c4:	7b14      	ldrb	r4, [r2, #12]
 80147c6:	7b0b      	ldrb	r3, [r1, #12]
 80147c8:	4063      	eors	r3, r4
 80147ca:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80147cc:	7b54      	ldrb	r4, [r2, #13]
 80147ce:	7b4b      	ldrb	r3, [r1, #13]
 80147d0:	4063      	eors	r3, r4
 80147d2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80147d4:	7b94      	ldrb	r4, [r2, #14]
 80147d6:	7b8b      	ldrb	r3, [r1, #14]
 80147d8:	4063      	eors	r3, r4
 80147da:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80147dc:	7bcb      	ldrb	r3, [r1, #15]
 80147de:	7bd2      	ldrb	r2, [r2, #15]
 80147e0:	4053      	eors	r3, r2
 80147e2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80147e4:	bd10      	pop	{r4, pc}
	...

080147e8 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 80147e8:	000b      	movs	r3, r1
 80147ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ec:	3b10      	subs	r3, #16
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	b087      	sub	sp, #28
 80147f2:	000f      	movs	r7, r1
 80147f4:	0015      	movs	r5, r2
 80147f6:	2b10      	cmp	r3, #16
 80147f8:	d805      	bhi.n	8014806 <aes_set_key+0x1e>
 80147fa:	2201      	movs	r2, #1
 80147fc:	409a      	lsls	r2, r3
 80147fe:	0013      	movs	r3, r2
 8014800:	4a3a      	ldr	r2, [pc, #232]	; (80148ec <aes_set_key+0x104>)
 8014802:	4213      	tst	r3, r2
 8014804:	d105      	bne.n	8014812 <aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8014806:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8014808:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 801480a:	35f0      	adds	r5, #240	; 0xf0
 801480c:	702b      	strb	r3, [r5, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801480e:	b007      	add	sp, #28
 8014810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8014812:	2300      	movs	r3, #0
        *d++ = *s++;
 8014814:	5cc2      	ldrb	r2, [r0, r3]
 8014816:	54ea      	strb	r2, [r5, r3]
 8014818:	3301      	adds	r3, #1
    while( nn-- )
 801481a:	429f      	cmp	r7, r3
 801481c:	d1fa      	bne.n	8014814 <aes_set_key+0x2c>
    hi = (keylen + 28) << 2;
 801481e:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8014820:	002a      	movs	r2, r5
    hi = (keylen + 28) << 2;
 8014822:	331c      	adds	r3, #28
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	b2db      	uxtb	r3, r3
 8014828:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 801482a:	091b      	lsrs	r3, r3, #4
 801482c:	3b01      	subs	r3, #1
 801482e:	32f0      	adds	r2, #240	; 0xf0
 8014830:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8014832:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8014834:	003c      	movs	r4, r7
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8014836:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8014838:	192b      	adds	r3, r5, r4
 801483a:	1f1a      	subs	r2, r3, #4
 801483c:	7816      	ldrb	r6, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 801483e:	1eda      	subs	r2, r3, #3
 8014840:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8014842:	0039      	movs	r1, r7
        t1 = ctx->ksch[cc - 3];
 8014844:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8014846:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8014848:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 801484a:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 801484c:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 801484e:	0020      	movs	r0, r4
        t2 = ctx->ksch[cc - 2];
 8014850:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8014852:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8014854:	f7ec fa36 	bl	8000cc4 <__aeabi_uidivmod>
 8014858:	b2c9      	uxtb	r1, r1
 801485a:	2900      	cmp	r1, #0
 801485c:	d133      	bne.n	80148c6 <aes_set_key+0xde>
            t0 = s_box(t1) ^ rc;
 801485e:	4b24      	ldr	r3, [pc, #144]	; (80148f0 <aes_set_key+0x108>)
 8014860:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8014862:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8014864:	5c9a      	ldrb	r2, [r3, r2]
 8014866:	9b04      	ldr	r3, [sp, #16]
 8014868:	405a      	eors	r2, r3
            t1 = s_box(t2);
 801486a:	4b21      	ldr	r3, [pc, #132]	; (80148f0 <aes_set_key+0x108>)
 801486c:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 801486e:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8014870:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8014872:	4b1f      	ldr	r3, [pc, #124]	; (80148f0 <aes_set_key+0x108>)
 8014874:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8014876:	211b      	movs	r1, #27
            t2 = s_box(t3);
 8014878:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 801487a:	4b1d      	ldr	r3, [pc, #116]	; (80148f0 <aes_set_key+0x108>)
 801487c:	5d9b      	ldrb	r3, [r3, r6]
            t0 = s_box(t1) ^ rc;
 801487e:	0016      	movs	r6, r2
            t3 = s_box(tt);
 8014880:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8014882:	9b04      	ldr	r3, [sp, #16]
 8014884:	09db      	lsrs	r3, r3, #7
 8014886:	434b      	muls	r3, r1
 8014888:	9904      	ldr	r1, [sp, #16]
 801488a:	0049      	lsls	r1, r1, #1
 801488c:	404b      	eors	r3, r1
 801488e:	b2db      	uxtb	r3, r3
 8014890:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8014892:	1be3      	subs	r3, r4, r7
 8014894:	b2db      	uxtb	r3, r3
 8014896:	5cea      	ldrb	r2, [r5, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8014898:	18eb      	adds	r3, r5, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801489a:	4056      	eors	r6, r2
 801489c:	552e      	strb	r6, [r5, r4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801489e:	785a      	ldrb	r2, [r3, #1]
 80148a0:	9801      	ldr	r0, [sp, #4]
 80148a2:	1929      	adds	r1, r5, r4
 80148a4:	4050      	eors	r0, r2
 80148a6:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80148a8:	789a      	ldrb	r2, [r3, #2]
 80148aa:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80148ac:	3404      	adds	r4, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80148ae:	4050      	eors	r0, r2
 80148b0:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80148b2:	78db      	ldrb	r3, [r3, #3]
 80148b4:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80148b6:	b2e4      	uxtb	r4, r4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80148b8:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80148ba:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80148bc:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80148be:	42a3      	cmp	r3, r4
 80148c0:	d8ba      	bhi.n	8014838 <aes_set_key+0x50>
    return 0;
 80148c2:	2000      	movs	r0, #0
 80148c4:	e7a3      	b.n	801480e <aes_set_key+0x26>
        else if( keylen > 24 && cc % keylen == 16 )
 80148c6:	2f18      	cmp	r7, #24
 80148c8:	d9e3      	bls.n	8014892 <aes_set_key+0xaa>
 80148ca:	2910      	cmp	r1, #16
 80148cc:	d1e1      	bne.n	8014892 <aes_set_key+0xaa>
            t1 = s_box(t1);
 80148ce:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 80148d0:	4b07      	ldr	r3, [pc, #28]	; (80148f0 <aes_set_key+0x108>)
 80148d2:	5d9e      	ldrb	r6, [r3, r6]
            t1 = s_box(t1);
 80148d4:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 80148d6:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 80148d8:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80148da:	4b05      	ldr	r3, [pc, #20]	; (80148f0 <aes_set_key+0x108>)
 80148dc:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 80148de:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 80148e0:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80148e2:	4b03      	ldr	r3, [pc, #12]	; (80148f0 <aes_set_key+0x108>)
 80148e4:	5c9b      	ldrb	r3, [r3, r2]
 80148e6:	9303      	str	r3, [sp, #12]
 80148e8:	e7d3      	b.n	8014892 <aes_set_key+0xaa>
 80148ea:	46c0      	nop			; (mov r8, r8)
 80148ec:	00010101 	.word	0x00010101
 80148f0:	080188c8 	.word	0x080188c8

080148f4 <aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
    if( ctx->rnd )
 80148f4:	0013      	movs	r3, r2
{
 80148f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148f8:	b097      	sub	sp, #92	; 0x5c
    if( ctx->rnd )
 80148fa:	33f0      	adds	r3, #240	; 0xf0
{
 80148fc:	9111      	str	r1, [sp, #68]	; 0x44
 80148fe:	0017      	movs	r7, r2
    if( ctx->rnd )
 8014900:	781a      	ldrb	r2, [r3, #0]
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8014902:	23ff      	movs	r3, #255	; 0xff
    if( ctx->rnd )
 8014904:	2a00      	cmp	r2, #0
 8014906:	d048      	beq.n	801499a <aes_encrypt+0xa6>
        copy_and_key( s1, in, ctx->ksch );
 8014908:	0001      	movs	r1, r0
 801490a:	003a      	movs	r2, r7
 801490c:	a812      	add	r0, sp, #72	; 0x48
 801490e:	f7ff ff28 	bl	8014762 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8014912:	2301      	movs	r3, #1
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	003b      	movs	r3, r7
 8014918:	33f0      	adds	r3, #240	; 0xf0
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	9a00      	ldr	r2, [sp, #0]
 801491e:	4293      	cmp	r3, r2
 8014920:	d83e      	bhi.n	80149a0 <aes_encrypt+0xac>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8014922:	aa12      	add	r2, sp, #72	; 0x48
 8014924:	4b91      	ldr	r3, [pc, #580]	; (8014b6c <aes_encrypt+0x278>)
 8014926:	7812      	ldrb	r2, [r2, #0]
 8014928:	a912      	add	r1, sp, #72	; 0x48
 801492a:	5c9a      	ldrb	r2, [r3, r2]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801492c:	a812      	add	r0, sp, #72	; 0x48
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801492e:	700a      	strb	r2, [r1, #0]
 8014930:	790a      	ldrb	r2, [r1, #4]
 8014932:	5c9a      	ldrb	r2, [r3, r2]
 8014934:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8014936:	7a0a      	ldrb	r2, [r1, #8]
 8014938:	5c9a      	ldrb	r2, [r3, r2]
 801493a:	720a      	strb	r2, [r1, #8]
 801493c:	7b0a      	ldrb	r2, [r1, #12]
 801493e:	5c9a      	ldrb	r2, [r3, r2]
 8014940:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8014942:	784a      	ldrb	r2, [r1, #1]
 8014944:	7949      	ldrb	r1, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8014946:	5c9a      	ldrb	r2, [r3, r2]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8014948:	5c59      	ldrb	r1, [r3, r1]
 801494a:	7041      	strb	r1, [r0, #1]
 801494c:	7a41      	ldrb	r1, [r0, #9]
 801494e:	5c59      	ldrb	r1, [r3, r1]
 8014950:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8014952:	7b41      	ldrb	r1, [r0, #13]
 8014954:	7342      	strb	r2, [r0, #13]
 8014956:	5c59      	ldrb	r1, [r3, r1]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8014958:	7882      	ldrb	r2, [r0, #2]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 801495a:	7241      	strb	r1, [r0, #9]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801495c:	7a81      	ldrb	r1, [r0, #10]
 801495e:	5c9a      	ldrb	r2, [r3, r2]
 8014960:	5c59      	ldrb	r1, [r3, r1]
 8014962:	7282      	strb	r2, [r0, #10]
 8014964:	7081      	strb	r1, [r0, #2]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8014966:	7982      	ldrb	r2, [r0, #6]
 8014968:	7b81      	ldrb	r1, [r0, #14]
 801496a:	5c9a      	ldrb	r2, [r3, r2]
 801496c:	5c59      	ldrb	r1, [r3, r1]
 801496e:	7382      	strb	r2, [r0, #14]
 8014970:	7181      	strb	r1, [r0, #6]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8014972:	7ac1      	ldrb	r1, [r0, #11]
 8014974:	7bc2      	ldrb	r2, [r0, #15]
 8014976:	5c59      	ldrb	r1, [r3, r1]
 8014978:	73c1      	strb	r1, [r0, #15]
 801497a:	79c1      	ldrb	r1, [r0, #7]
 801497c:	5c59      	ldrb	r1, [r3, r1]
 801497e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8014980:	78c1      	ldrb	r1, [r0, #3]
 8014982:	5c59      	ldrb	r1, [r3, r1]
 8014984:	5c9b      	ldrb	r3, [r3, r2]
 8014986:	71c1      	strb	r1, [r0, #7]
 8014988:	70c3      	strb	r3, [r0, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801498a:	9b00      	ldr	r3, [sp, #0]
 801498c:	0001      	movs	r1, r0
 801498e:	011a      	lsls	r2, r3, #4
 8014990:	18ba      	adds	r2, r7, r2
 8014992:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014994:	f7ff fee5 	bl	8014762 <copy_and_key>
 8014998:	2300      	movs	r3, #0
    return 0;
}
 801499a:	0018      	movs	r0, r3
 801499c:	b017      	add	sp, #92	; 0x5c
 801499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80149a0:	ab12      	add	r3, sp, #72	; 0x48
 80149a2:	785b      	ldrb	r3, [r3, #1]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80149a4:	4971      	ldr	r1, [pc, #452]	; (8014b6c <aes_encrypt+0x278>)
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80149a6:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80149a8:	ab12      	add	r3, sp, #72	; 0x48
 80149aa:	789b      	ldrb	r3, [r3, #2]
 80149ac:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80149ae:	ab12      	add	r3, sp, #72	; 0x48
 80149b0:	78db      	ldrb	r3, [r3, #3]
 80149b2:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80149b4:	ab12      	add	r3, sp, #72	; 0x48
 80149b6:	791b      	ldrb	r3, [r3, #4]
 80149b8:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80149ba:	ab12      	add	r3, sp, #72	; 0x48
 80149bc:	799b      	ldrb	r3, [r3, #6]
 80149be:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80149c0:	ab12      	add	r3, sp, #72	; 0x48
 80149c2:	79db      	ldrb	r3, [r3, #7]
 80149c4:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80149c6:	ab12      	add	r3, sp, #72	; 0x48
 80149c8:	7a1b      	ldrb	r3, [r3, #8]
 80149ca:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80149cc:	ab12      	add	r3, sp, #72	; 0x48
 80149ce:	7a5b      	ldrb	r3, [r3, #9]
 80149d0:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80149d2:	ab12      	add	r3, sp, #72	; 0x48
 80149d4:	7adb      	ldrb	r3, [r3, #11]
 80149d6:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80149d8:	ab12      	add	r3, sp, #72	; 0x48
 80149da:	7b1b      	ldrb	r3, [r3, #12]
 80149dc:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80149de:	ab12      	add	r3, sp, #72	; 0x48
 80149e0:	7b5b      	ldrb	r3, [r3, #13]
 80149e2:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80149e4:	ab12      	add	r3, sp, #72	; 0x48
 80149e6:	7b9b      	ldrb	r3, [r3, #14]
 80149e8:	930f      	str	r3, [sp, #60]	; 0x3c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80149ea:	ab12      	add	r3, sp, #72	; 0x48
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	9301      	str	r3, [sp, #4]
 80149f0:	ab12      	add	r3, sp, #72	; 0x48
 80149f2:	795b      	ldrb	r3, [r3, #5]
 80149f4:	9302      	str	r3, [sp, #8]
 80149f6:	ab12      	add	r3, sp, #72	; 0x48
 80149f8:	7a9e      	ldrb	r6, [r3, #10]
 80149fa:	5d8b      	ldrb	r3, [r1, r6]
 80149fc:	9310      	str	r3, [sp, #64]	; 0x40
 80149fe:	ab12      	add	r3, sp, #72	; 0x48
 8014a00:	7bdb      	ldrb	r3, [r3, #15]
 8014a02:	4a5b      	ldr	r2, [pc, #364]	; (8014b70 <aes_encrypt+0x27c>)
 8014a04:	5cc8      	ldrb	r0, [r1, r3]
 8014a06:	9303      	str	r3, [sp, #12]
 8014a08:	9c01      	ldr	r4, [sp, #4]
 8014a0a:	4b5a      	ldr	r3, [pc, #360]	; (8014b74 <aes_encrypt+0x280>)
 8014a0c:	9d02      	ldr	r5, [sp, #8]
 8014a0e:	5d1c      	ldrb	r4, [r3, r4]
 8014a10:	5d55      	ldrb	r5, [r2, r5]
 8014a12:	406c      	eors	r4, r5
 8014a14:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014a16:	406c      	eors	r4, r5
 8014a18:	4044      	eors	r4, r0
 8014a1a:	ad12      	add	r5, sp, #72	; 0x48
 8014a1c:	702c      	strb	r4, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8014a1e:	9c01      	ldr	r4, [sp, #4]
 8014a20:	9d02      	ldr	r5, [sp, #8]
 8014a22:	5d0c      	ldrb	r4, [r1, r4]
 8014a24:	5d5d      	ldrb	r5, [r3, r5]
 8014a26:	4060      	eors	r0, r4
 8014a28:	4068      	eors	r0, r5
 8014a2a:	5d95      	ldrb	r5, [r2, r6]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8014a2c:	5d9e      	ldrb	r6, [r3, r6]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8014a2e:	4068      	eors	r0, r5
 8014a30:	ad12      	add	r5, sp, #72	; 0x48
 8014a32:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8014a34:	9802      	ldr	r0, [sp, #8]
 8014a36:	9d03      	ldr	r5, [sp, #12]
 8014a38:	5c08      	ldrb	r0, [r1, r0]
 8014a3a:	4044      	eors	r4, r0
 8014a3c:	4074      	eors	r4, r6
 8014a3e:	5d56      	ldrb	r6, [r2, r5]
 8014a40:	ad12      	add	r5, sp, #72	; 0x48
 8014a42:	4074      	eors	r4, r6
 8014a44:	70ac      	strb	r4, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8014a46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014a48:	4060      	eors	r0, r4
 8014a4a:	9c01      	ldr	r4, [sp, #4]
 8014a4c:	5d14      	ldrb	r4, [r2, r4]
 8014a4e:	4060      	eors	r0, r4
 8014a50:	9c03      	ldr	r4, [sp, #12]
 8014a52:	5d1c      	ldrb	r4, [r3, r4]
 8014a54:	4060      	eors	r0, r4
 8014a56:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8014a58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014a5a:	5c0d      	ldrb	r5, [r1, r0]
 8014a5c:	9806      	ldr	r0, [sp, #24]
 8014a5e:	5c08      	ldrb	r0, [r1, r0]
 8014a60:	9c07      	ldr	r4, [sp, #28]
 8014a62:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014a64:	5d1c      	ldrb	r4, [r3, r4]
 8014a66:	5d96      	ldrb	r6, [r2, r6]
 8014a68:	4074      	eors	r4, r6
 8014a6a:	406c      	eors	r4, r5
 8014a6c:	4044      	eors	r4, r0
 8014a6e:	ae12      	add	r6, sp, #72	; 0x48
 8014a70:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8014a72:	9c07      	ldr	r4, [sp, #28]
 8014a74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014a76:	5d0c      	ldrb	r4, [r1, r4]
 8014a78:	5d9e      	ldrb	r6, [r3, r6]
 8014a7a:	4060      	eors	r0, r4
 8014a7c:	4070      	eors	r0, r6
 8014a7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014a80:	5d96      	ldrb	r6, [r2, r6]
 8014a82:	4070      	eors	r0, r6
 8014a84:	ae12      	add	r6, sp, #72	; 0x48
 8014a86:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014a88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a8a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014a8c:	5c08      	ldrb	r0, [r1, r0]
 8014a8e:	5d9e      	ldrb	r6, [r3, r6]
 8014a90:	4044      	eors	r4, r0
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014a92:	4045      	eors	r5, r0
 8014a94:	9807      	ldr	r0, [sp, #28]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014a96:	4074      	eors	r4, r6
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014a98:	5c10      	ldrb	r0, [r2, r0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014a9a:	9e06      	ldr	r6, [sp, #24]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014a9c:	4045      	eors	r5, r0
 8014a9e:	9806      	ldr	r0, [sp, #24]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014aa0:	5d96      	ldrb	r6, [r2, r6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014aa2:	5c18      	ldrb	r0, [r3, r0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014aa4:	4074      	eors	r4, r6
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014aa6:	4045      	eors	r5, r0
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8014aa8:	9805      	ldr	r0, [sp, #20]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014aaa:	ae12      	add	r6, sp, #72	; 0x48
 8014aac:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014aae:	71f5      	strb	r5, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8014ab0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014ab2:	5c0d      	ldrb	r5, [r1, r0]
 8014ab4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ab8:	5d1c      	ldrb	r4, [r3, r4]
 8014aba:	5c08      	ldrb	r0, [r1, r0]
 8014abc:	5d96      	ldrb	r6, [r2, r6]
 8014abe:	4074      	eors	r4, r6
 8014ac0:	406c      	eors	r4, r5
 8014ac2:	4044      	eors	r4, r0
 8014ac4:	ae12      	add	r6, sp, #72	; 0x48
 8014ac6:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8014ac8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014aca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014acc:	5d0c      	ldrb	r4, [r1, r4]
 8014ace:	5d9e      	ldrb	r6, [r3, r6]
 8014ad0:	4060      	eors	r0, r4
 8014ad2:	4070      	eors	r0, r6
 8014ad4:	9e05      	ldr	r6, [sp, #20]
 8014ad6:	5d96      	ldrb	r6, [r2, r6]
 8014ad8:	4070      	eors	r0, r6
 8014ada:	ae12      	add	r6, sp, #72	; 0x48
 8014adc:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014ade:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014ae0:	9e05      	ldr	r6, [sp, #20]
 8014ae2:	5c08      	ldrb	r0, [r1, r0]
 8014ae4:	5d9e      	ldrb	r6, [r3, r6]
 8014ae6:	4044      	eors	r4, r0
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014ae8:	4045      	eors	r5, r0
 8014aea:	980a      	ldr	r0, [sp, #40]	; 0x28
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014aec:	4074      	eors	r4, r6
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014aee:	5c10      	ldrb	r0, [r2, r0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014af2:	4045      	eors	r5, r0
 8014af4:	9809      	ldr	r0, [sp, #36]	; 0x24
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014af6:	5d96      	ldrb	r6, [r2, r6]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014af8:	5c18      	ldrb	r0, [r3, r0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014afa:	4074      	eors	r4, r6
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014afc:	4045      	eors	r5, r0
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014afe:	ae12      	add	r6, sp, #72	; 0x48
 8014b00:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014b02:	72f5      	strb	r5, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8014b04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014b06:	9e04      	ldr	r6, [sp, #16]
 8014b08:	9808      	ldr	r0, [sp, #32]
 8014b0a:	5d96      	ldrb	r6, [r2, r6]
 8014b0c:	5d5d      	ldrb	r5, [r3, r5]
 8014b0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014b10:	5c08      	ldrb	r0, [r1, r0]
 8014b12:	5d0c      	ldrb	r4, [r1, r4]
 8014b14:	4075      	eors	r5, r6
 8014b16:	4045      	eors	r5, r0
 8014b18:	4065      	eors	r5, r4
 8014b1a:	ae12      	add	r6, sp, #72	; 0x48
 8014b1c:	7335      	strb	r5, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8014b1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014b20:	5d4d      	ldrb	r5, [r1, r5]
 8014b22:	9e04      	ldr	r6, [sp, #16]
 8014b24:	406c      	eors	r4, r5
 8014b26:	5d9e      	ldrb	r6, [r3, r6]
 8014b28:	4074      	eors	r4, r6
 8014b2a:	9e08      	ldr	r6, [sp, #32]
 8014b2c:	5d96      	ldrb	r6, [r2, r6]
 8014b2e:	4074      	eors	r4, r6
 8014b30:	ae12      	add	r6, sp, #72	; 0x48
 8014b32:	7374      	strb	r4, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b34:	9c04      	ldr	r4, [sp, #16]
 8014b36:	5d09      	ldrb	r1, [r1, r4]
 8014b38:	9c08      	ldr	r4, [sp, #32]
 8014b3a:	404d      	eors	r5, r1
 8014b3c:	5d1c      	ldrb	r4, [r3, r4]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b3e:	4048      	eors	r0, r1
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b40:	4065      	eors	r5, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b42:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b46:	5c51      	ldrb	r1, [r2, r1]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b48:	5d14      	ldrb	r4, [r2, r4]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b4c:	4048      	eors	r0, r1
 8014b4e:	5c99      	ldrb	r1, [r3, r2]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8014b50:	9b00      	ldr	r3, [sp, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b52:	4048      	eors	r0, r1
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b54:	4065      	eors	r5, r4
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8014b56:	0119      	lsls	r1, r3, #4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014b58:	73f0      	strb	r0, [r6, #15]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014b5a:	73b5      	strb	r5, [r6, #14]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8014b5c:	1879      	adds	r1, r7, r1
    xor_block(d, k);
 8014b5e:	0030      	movs	r0, r6
 8014b60:	f7ff fdbe 	bl	80146e0 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8014b64:	9b00      	ldr	r3, [sp, #0]
 8014b66:	1c5a      	adds	r2, r3, #1
 8014b68:	b2d3      	uxtb	r3, r2
 8014b6a:	e6d3      	b.n	8014914 <aes_encrypt+0x20>
 8014b6c:	080188c8 	.word	0x080188c8
 8014b70:	080187c8 	.word	0x080187c8
 8014b74:	080186c8 	.word	0x080186c8

08014b78 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8014b78:	b510      	push	{r4, lr}
 8014b7a:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8014b7c:	2210      	movs	r2, #16
 8014b7e:	30f1      	adds	r0, #241	; 0xf1
 8014b80:	2100      	movs	r1, #0
 8014b82:	f7ff fadb 	bl	801413c <memset1>
            ctx->M_n = 0;
 8014b86:	0023      	movs	r3, r4
 8014b88:	2100      	movs	r1, #0
 8014b8a:	33fc      	adds	r3, #252	; 0xfc
 8014b8c:	6199      	str	r1, [r3, #24]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8014b8e:	22f0      	movs	r2, #240	; 0xf0
 8014b90:	0020      	movs	r0, r4
 8014b92:	f7ff fad3 	bl	801413c <memset1>
}
 8014b96:	bd10      	pop	{r4, pc}

08014b98 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8014b98:	b510      	push	{r4, lr}
 8014b9a:	0002      	movs	r2, r0
 8014b9c:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8014b9e:	2110      	movs	r1, #16
 8014ba0:	f7ff fe22 	bl	80147e8 <aes_set_key>
}
 8014ba4:	bd10      	pop	{r4, pc}

08014ba6 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8014ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8014ba8:	0006      	movs	r6, r0
 8014baa:	36fc      	adds	r6, #252	; 0xfc
{
 8014bac:	0005      	movs	r5, r0
            if (ctx->M_n > 0) {
 8014bae:	69b0      	ldr	r0, [r6, #24]
{
 8014bb0:	b087      	sub	sp, #28
 8014bb2:	9100      	str	r1, [sp, #0]
 8014bb4:	0014      	movs	r4, r2
            if (ctx->M_n > 0) {
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d026      	beq.n	8014c08 <AES_CMAC_Update+0x62>
                  mlen = MIN(16 - ctx->M_n, len);
 8014bba:	2710      	movs	r7, #16
 8014bbc:	1a3f      	subs	r7, r7, r0
 8014bbe:	4297      	cmp	r7, r2
 8014bc0:	d900      	bls.n	8014bc4 <AES_CMAC_Update+0x1e>
 8014bc2:	0017      	movs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8014bc4:	1cab      	adds	r3, r5, #2
 8014bc6:	33ff      	adds	r3, #255	; 0xff
 8014bc8:	1818      	adds	r0, r3, r0
 8014bca:	b2ba      	uxth	r2, r7
 8014bcc:	9900      	ldr	r1, [sp, #0]
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	f7ff fa9f 	bl	8014112 <memcpy1>
                    ctx->M_n += mlen;
 8014bd4:	69b3      	ldr	r3, [r6, #24]
 8014bd6:	18fb      	adds	r3, r7, r3
 8014bd8:	61b3      	str	r3, [r6, #24]
                    if (ctx->M_n < 16 || len == mlen)
 8014bda:	2b0f      	cmp	r3, #15
 8014bdc:	d93e      	bls.n	8014c5c <AES_CMAC_Update+0xb6>
 8014bde:	42bc      	cmp	r4, r7
 8014be0:	d03c      	beq.n	8014c5c <AES_CMAC_Update+0xb6>
 8014be2:	002b      	movs	r3, r5
 8014be4:	33f1      	adds	r3, #241	; 0xf1
 8014be6:	0018      	movs	r0, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 8014be8:	781a      	ldrb	r2, [r3, #0]
 8014bea:	7c19      	ldrb	r1, [r3, #16]
 8014bec:	404a      	eors	r2, r1
 8014bee:	701a      	strb	r2, [r3, #0]
 8014bf0:	9a01      	ldr	r2, [sp, #4]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d1f7      	bne.n	8014be8 <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8014bf8:	002a      	movs	r2, r5
 8014bfa:	0001      	movs	r1, r0
 8014bfc:	f7ff fe7a 	bl	80148f4 <aes_encrypt>
                    data += mlen;
 8014c00:	9b00      	ldr	r3, [sp, #0]
                    len -= mlen;
 8014c02:	1be4      	subs	r4, r4, r7
                    data += mlen;
 8014c04:	19db      	adds	r3, r3, r7
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	1ca8      	adds	r0, r5, #2
 8014c0a:	30ff      	adds	r0, #255	; 0xff
            }
            while (len > 16) {      /* not last block */
 8014c0c:	2c10      	cmp	r4, #16
 8014c0e:	d920      	bls.n	8014c52 <AES_CMAC_Update+0xac>
 8014c10:	002b      	movs	r3, r5
 8014c12:	9a00      	ldr	r2, [sp, #0]
 8014c14:	33f1      	adds	r3, #241	; 0xf1

                    XOR(data, ctx->X);
 8014c16:	7819      	ldrb	r1, [r3, #0]
 8014c18:	7817      	ldrb	r7, [r2, #0]
 8014c1a:	3201      	adds	r2, #1
 8014c1c:	4079      	eors	r1, r7
 8014c1e:	7019      	strb	r1, [r3, #0]
 8014c20:	3301      	adds	r3, #1
 8014c22:	4298      	cmp	r0, r3
 8014c24:	d1f7      	bne.n	8014c16 <AES_CMAC_Update+0x70>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8014c26:	002f      	movs	r7, r5
 8014c28:	37f1      	adds	r7, #241	; 0xf1
 8014c2a:	2210      	movs	r2, #16
 8014c2c:	0039      	movs	r1, r7
 8014c2e:	a802      	add	r0, sp, #8
 8014c30:	f7ff fa6f 	bl	8014112 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8014c34:	a902      	add	r1, sp, #8
 8014c36:	002a      	movs	r2, r5
 8014c38:	0008      	movs	r0, r1
 8014c3a:	f7ff fe5b 	bl	80148f4 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8014c3e:	2210      	movs	r2, #16
 8014c40:	a902      	add	r1, sp, #8
 8014c42:	0038      	movs	r0, r7
 8014c44:	f7ff fa65 	bl	8014112 <memcpy1>

                    data += 16;
 8014c48:	9b00      	ldr	r3, [sp, #0]
                    len -= 16;
 8014c4a:	3c10      	subs	r4, #16
                    data += 16;
 8014c4c:	3310      	adds	r3, #16
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	e7da      	b.n	8014c08 <AES_CMAC_Update+0x62>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8014c52:	b2a2      	uxth	r2, r4
 8014c54:	9900      	ldr	r1, [sp, #0]
 8014c56:	f7ff fa5c 	bl	8014112 <memcpy1>
            ctx->M_n = len;
 8014c5a:	61b4      	str	r4, [r6, #24]
}
 8014c5c:	b007      	add	sp, #28
 8014c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c60 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8014c60:	b570      	push	{r4, r5, r6, lr}
 8014c62:	000c      	movs	r4, r1
 8014c64:	b088      	sub	sp, #32
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8014c66:	2210      	movs	r2, #16
 8014c68:	2100      	movs	r1, #0
{
 8014c6a:	0005      	movs	r5, r0
            memset1(K, '\0', 16);
 8014c6c:	4668      	mov	r0, sp
 8014c6e:	f7ff fa65 	bl	801413c <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8014c72:	0022      	movs	r2, r4
 8014c74:	4669      	mov	r1, sp
 8014c76:	4668      	mov	r0, sp
 8014c78:	f7ff fe3c 	bl	80148f4 <aes_encrypt>

            if (K[0] & 0x80) {
 8014c7c:	466b      	mov	r3, sp
 8014c7e:	781a      	ldrb	r2, [r3, #0]
 8014c80:	2300      	movs	r3, #0
 8014c82:	2a7f      	cmp	r2, #127	; 0x7f
 8014c84:	d940      	bls.n	8014d08 <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8014c86:	001a      	movs	r2, r3
 8014c88:	4669      	mov	r1, sp
 8014c8a:	446a      	add	r2, sp
 8014c8c:	5cc9      	ldrb	r1, [r1, r3]
 8014c8e:	7852      	ldrb	r2, [r2, #1]
 8014c90:	0049      	lsls	r1, r1, #1
 8014c92:	09d2      	lsrs	r2, r2, #7
 8014c94:	430a      	orrs	r2, r1
 8014c96:	4669      	mov	r1, sp
 8014c98:	54ca      	strb	r2, [r1, r3]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	2b0f      	cmp	r3, #15
 8014c9e:	d1f2      	bne.n	8014c86 <AES_CMAC_Final+0x26>
                   K[15] ^= 0x87;
 8014ca0:	2379      	movs	r3, #121	; 0x79
                    LSHIFT(K, K);
 8014ca2:	7bca      	ldrb	r2, [r1, #15]
                   K[15] ^= 0x87;
 8014ca4:	425b      	negs	r3, r3
                    LSHIFT(K, K);
 8014ca6:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
 8014ca8:	4053      	eors	r3, r2
            } else
                    LSHIFT(K, K);
 8014caa:	466a      	mov	r2, sp
 8014cac:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
 8014cae:	0022      	movs	r2, r4
 8014cb0:	32fc      	adds	r2, #252	; 0xfc
 8014cb2:	6990      	ldr	r0, [r2, #24]
 8014cb4:	2810      	cmp	r0, #16
 8014cb6:	d137      	bne.n	8014d28 <AES_CMAC_Final+0xc8>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	1ca2      	adds	r2, r4, #2
 8014cbc:	32ff      	adds	r2, #255	; 0xff
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8014cbe:	4668      	mov	r0, sp
 8014cc0:	7811      	ldrb	r1, [r2, #0]
 8014cc2:	5cc0      	ldrb	r0, [r0, r3]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	4041      	eors	r1, r0
 8014cc8:	7011      	strb	r1, [r2, #0]
 8014cca:	3201      	adds	r2, #1
 8014ccc:	2b10      	cmp	r3, #16
 8014cce:	d1f6      	bne.n	8014cbe <AES_CMAC_Final+0x5e>
 8014cd0:	0023      	movs	r3, r4
 8014cd2:	33f1      	adds	r3, #241	; 0xf1
 8014cd4:	0019      	movs	r1, r3
 8014cd6:	1ca0      	adds	r0, r4, #2
 8014cd8:	30ff      	adds	r0, #255	; 0xff
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8014cda:	781a      	ldrb	r2, [r3, #0]
 8014cdc:	7c1e      	ldrb	r6, [r3, #16]
 8014cde:	4072      	eors	r2, r6
 8014ce0:	701a      	strb	r2, [r3, #0]
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	4298      	cmp	r0, r3
 8014ce6:	d1f8      	bne.n	8014cda <AES_CMAC_Final+0x7a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8014ce8:	a804      	add	r0, sp, #16
 8014cea:	2210      	movs	r2, #16
 8014cec:	f7ff fa11 	bl	8014112 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8014cf0:	0022      	movs	r2, r4
 8014cf2:	0029      	movs	r1, r5
 8014cf4:	a804      	add	r0, sp, #16
 8014cf6:	f7ff fdfd 	bl	80148f4 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8014cfa:	2210      	movs	r2, #16
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	4668      	mov	r0, sp
 8014d00:	f7ff fa1c 	bl	801413c <memset1>

}
 8014d04:	b008      	add	sp, #32
 8014d06:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 8014d08:	001a      	movs	r2, r3
 8014d0a:	4669      	mov	r1, sp
 8014d0c:	446a      	add	r2, sp
 8014d0e:	5cc9      	ldrb	r1, [r1, r3]
 8014d10:	7852      	ldrb	r2, [r2, #1]
 8014d12:	0049      	lsls	r1, r1, #1
 8014d14:	09d2      	lsrs	r2, r2, #7
 8014d16:	430a      	orrs	r2, r1
 8014d18:	4669      	mov	r1, sp
 8014d1a:	54ca      	strb	r2, [r1, r3]
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	2b0f      	cmp	r3, #15
 8014d20:	d1f2      	bne.n	8014d08 <AES_CMAC_Final+0xa8>
 8014d22:	7bcb      	ldrb	r3, [r1, #15]
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	e7c0      	b.n	8014caa <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 8014d28:	466b      	mov	r3, sp
 8014d2a:	7819      	ldrb	r1, [r3, #0]
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	297f      	cmp	r1, #127	; 0x7f
 8014d30:	d92b      	bls.n	8014d8a <AES_CMAC_Final+0x12a>
 8014d32:	0019      	movs	r1, r3
                          LSHIFT(K, K);
 8014d34:	000b      	movs	r3, r1
 8014d36:	466e      	mov	r6, sp
 8014d38:	446b      	add	r3, sp
 8014d3a:	5c76      	ldrb	r6, [r6, r1]
 8014d3c:	785b      	ldrb	r3, [r3, #1]
 8014d3e:	0076      	lsls	r6, r6, #1
 8014d40:	09db      	lsrs	r3, r3, #7
 8014d42:	4333      	orrs	r3, r6
 8014d44:	466e      	mov	r6, sp
 8014d46:	5473      	strb	r3, [r6, r1]
 8014d48:	3101      	adds	r1, #1
 8014d4a:	290f      	cmp	r1, #15
 8014d4c:	d1f2      	bne.n	8014d34 <AES_CMAC_Final+0xd4>
                          K[15] ^= 0x87;
 8014d4e:	2379      	movs	r3, #121	; 0x79
                          LSHIFT(K, K);
 8014d50:	7bf1      	ldrb	r1, [r6, #15]
                          K[15] ^= 0x87;
 8014d52:	425b      	negs	r3, r3
                          LSHIFT(K, K);
 8014d54:	0049      	lsls	r1, r1, #1
                          K[15] ^= 0x87;
 8014d56:	404b      	eors	r3, r1
                           LSHIFT(K, K);
 8014d58:	4669      	mov	r1, sp
 8014d5a:	73cb      	strb	r3, [r1, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8014d5c:	2180      	movs	r1, #128	; 0x80
 8014d5e:	1823      	adds	r3, r4, r0
 8014d60:	2000      	movs	r0, #0
 8014d62:	33ff      	adds	r3, #255	; 0xff
 8014d64:	7099      	strb	r1, [r3, #2]
 8014d66:	6993      	ldr	r3, [r2, #24]
                   while (++ctx->M_n < 16)
 8014d68:	1c59      	adds	r1, r3, #1
 8014d6a:	290f      	cmp	r1, #15
 8014d6c:	d91d      	bls.n	8014daa <AES_CMAC_Final+0x14a>
 8014d6e:	2300      	movs	r3, #0
 8014d70:	6191      	str	r1, [r2, #24]
 8014d72:	1ca2      	adds	r2, r4, #2
 8014d74:	32ff      	adds	r2, #255	; 0xff
                  XOR(K, ctx->M_last);
 8014d76:	4668      	mov	r0, sp
 8014d78:	7811      	ldrb	r1, [r2, #0]
 8014d7a:	5cc0      	ldrb	r0, [r0, r3]
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	4041      	eors	r1, r0
 8014d80:	7011      	strb	r1, [r2, #0]
 8014d82:	3201      	adds	r2, #1
 8014d84:	2b10      	cmp	r3, #16
 8014d86:	d1f6      	bne.n	8014d76 <AES_CMAC_Final+0x116>
 8014d88:	e7a2      	b.n	8014cd0 <AES_CMAC_Final+0x70>
                           LSHIFT(K, K);
 8014d8a:	0019      	movs	r1, r3
 8014d8c:	466e      	mov	r6, sp
 8014d8e:	4469      	add	r1, sp
 8014d90:	5cf6      	ldrb	r6, [r6, r3]
 8014d92:	7849      	ldrb	r1, [r1, #1]
 8014d94:	0076      	lsls	r6, r6, #1
 8014d96:	09c9      	lsrs	r1, r1, #7
 8014d98:	4331      	orrs	r1, r6
 8014d9a:	466e      	mov	r6, sp
 8014d9c:	54f1      	strb	r1, [r6, r3]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	2b0f      	cmp	r3, #15
 8014da2:	d1f2      	bne.n	8014d8a <AES_CMAC_Final+0x12a>
 8014da4:	7bf3      	ldrb	r3, [r6, #15]
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	e7d6      	b.n	8014d58 <AES_CMAC_Final+0xf8>
                         ctx->M_last[ctx->M_n] = 0;
 8014daa:	3303      	adds	r3, #3
 8014dac:	33ff      	adds	r3, #255	; 0xff
 8014dae:	18e3      	adds	r3, r4, r3
 8014db0:	7018      	strb	r0, [r3, #0]
 8014db2:	000b      	movs	r3, r1
 8014db4:	e7d8      	b.n	8014d68 <AES_CMAC_Final+0x108>

08014db6 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8014db6:	4770      	bx	lr

08014db8 <GetKeyByID>:
{
 8014db8:	b570      	push	{r4, r5, r6, lr}
 8014dba:	2200      	movs	r2, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8014dbc:	2511      	movs	r5, #17
 8014dbe:	4c09      	ldr	r4, [pc, #36]	; (8014de4 <GetKeyByID+0x2c>)
 8014dc0:	002b      	movs	r3, r5
 8014dc2:	2683      	movs	r6, #131	; 0x83
 8014dc4:	4353      	muls	r3, r2
 8014dc6:	00b6      	lsls	r6, r6, #2
 8014dc8:	199b      	adds	r3, r3, r6
 8014dca:	18e3      	adds	r3, r4, r3
 8014dcc:	781e      	ldrb	r6, [r3, #0]
 8014dce:	4286      	cmp	r6, r0
 8014dd0:	d102      	bne.n	8014dd8 <GetKeyByID+0x20>
            return SECURE_ELEMENT_SUCCESS;
 8014dd2:	2000      	movs	r0, #0
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8014dd4:	600b      	str	r3, [r1, #0]
}
 8014dd6:	bd70      	pop	{r4, r5, r6, pc}
 8014dd8:	3201      	adds	r2, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8014dda:	2a16      	cmp	r2, #22
 8014ddc:	d1f0      	bne.n	8014dc0 <GetKeyByID+0x8>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014dde:	2003      	movs	r0, #3
 8014de0:	e7f9      	b.n	8014dd6 <GetKeyByID+0x1e>
 8014de2:	46c0      	nop			; (mov r8, r8)
 8014de4:	20001dac 	.word	0x20001dac

08014de8 <ComputeCmac>:
{
 8014de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dea:	b089      	sub	sp, #36	; 0x24
 8014dec:	0007      	movs	r7, r0
 8014dee:	9100      	str	r1, [sp, #0]
 8014df0:	9201      	str	r2, [sp, #4]
 8014df2:	001e      	movs	r6, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8014df4:	2502      	movs	r5, #2
    if( buffer == NULL || cmac == NULL )
 8014df6:	2800      	cmp	r0, #0
 8014df8:	d01c      	beq.n	8014e34 <ComputeCmac+0x4c>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d01a      	beq.n	8014e34 <ComputeCmac+0x4c>
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8014dfe:	4c0f      	ldr	r4, [pc, #60]	; (8014e3c <ComputeCmac+0x54>)
 8014e00:	34f4      	adds	r4, #244	; 0xf4
 8014e02:	0020      	movs	r0, r4
 8014e04:	f7ff feb8 	bl	8014b78 <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8014e08:	a903      	add	r1, sp, #12
 8014e0a:	9801      	ldr	r0, [sp, #4]
 8014e0c:	f7ff ffd4 	bl	8014db8 <GetKeyByID>
 8014e10:	1e05      	subs	r5, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 8014e12:	d10f      	bne.n	8014e34 <ComputeCmac+0x4c>
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8014e14:	9b03      	ldr	r3, [sp, #12]
 8014e16:	0020      	movs	r0, r4
 8014e18:	1c59      	adds	r1, r3, #1
 8014e1a:	f7ff febd 	bl	8014b98 <AES_CMAC_SetKey>
        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8014e1e:	9a00      	ldr	r2, [sp, #0]
 8014e20:	0039      	movs	r1, r7
 8014e22:	0020      	movs	r0, r4
 8014e24:	f7ff febf 	bl	8014ba6 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8014e28:	0021      	movs	r1, r4
 8014e2a:	a804      	add	r0, sp, #16
 8014e2c:	f7ff ff18 	bl	8014c60 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8014e30:	9b04      	ldr	r3, [sp, #16]
 8014e32:	6033      	str	r3, [r6, #0]
}
 8014e34:	0028      	movs	r0, r5
 8014e36:	b009      	add	sp, #36	; 0x24
 8014e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e3a:	46c0      	nop			; (mov r8, r8)
 8014e3c:	20001dac 	.word	0x20001dac

08014e40 <SecureElementInit>:

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
    // Initialize with defaults
    uint8_t itr = 0;
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8014e40:	2283      	movs	r2, #131	; 0x83
 8014e42:	2100      	movs	r1, #0
 8014e44:	4b25      	ldr	r3, [pc, #148]	; (8014edc <SecureElementInit+0x9c>)
 8014e46:	0092      	lsls	r2, r2, #2
 8014e48:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8014e4a:	4a25      	ldr	r2, [pc, #148]	; (8014ee0 <SecureElementInit+0xa0>)
 8014e4c:	3101      	adds	r1, #1
 8014e4e:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8014e50:	4a24      	ldr	r2, [pc, #144]	; (8014ee4 <SecureElementInit+0xa4>)
 8014e52:	3101      	adds	r1, #1
 8014e54:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8014e56:	4a24      	ldr	r2, [pc, #144]	; (8014ee8 <SecureElementInit+0xa8>)
 8014e58:	3101      	adds	r1, #1
 8014e5a:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8014e5c:	3101      	adds	r1, #1
 8014e5e:	3211      	adds	r2, #17
 8014e60:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8014e62:	4a22      	ldr	r2, [pc, #136]	; (8014eec <SecureElementInit+0xac>)
 8014e64:	3101      	adds	r1, #1
 8014e66:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8014e68:	4a21      	ldr	r2, [pc, #132]	; (8014ef0 <SecureElementInit+0xb0>)
 8014e6a:	3101      	adds	r1, #1
 8014e6c:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8014e6e:	4a21      	ldr	r2, [pc, #132]	; (8014ef4 <SecureElementInit+0xb4>)
 8014e70:	3101      	adds	r1, #1
 8014e72:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8014e74:	3178      	adds	r1, #120	; 0x78
 8014e76:	3211      	adds	r2, #17
 8014e78:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8014e7a:	4a1f      	ldr	r2, [pc, #124]	; (8014ef8 <SecureElementInit+0xb8>)
 8014e7c:	3101      	adds	r1, #1
 8014e7e:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8014e80:	4a1e      	ldr	r2, [pc, #120]	; (8014efc <SecureElementInit+0xbc>)
 8014e82:	3101      	adds	r1, #1
 8014e84:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8014e86:	4a1e      	ldr	r2, [pc, #120]	; (8014f00 <SecureElementInit+0xc0>)
 8014e88:	3101      	adds	r1, #1
 8014e8a:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8014e8c:	3101      	adds	r1, #1
 8014e8e:	3211      	adds	r2, #17
 8014e90:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8014e92:	4a1c      	ldr	r2, [pc, #112]	; (8014f04 <SecureElementInit+0xc4>)
 8014e94:	3101      	adds	r1, #1
 8014e96:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8014e98:	4a1b      	ldr	r2, [pc, #108]	; (8014f08 <SecureElementInit+0xc8>)
 8014e9a:	3101      	adds	r1, #1
 8014e9c:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8014e9e:	4a1b      	ldr	r2, [pc, #108]	; (8014f0c <SecureElementInit+0xcc>)
 8014ea0:	3101      	adds	r1, #1
 8014ea2:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8014ea4:	3101      	adds	r1, #1
 8014ea6:	3211      	adds	r2, #17
 8014ea8:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8014eaa:	4a19      	ldr	r2, [pc, #100]	; (8014f10 <SecureElementInit+0xd0>)
 8014eac:	3101      	adds	r1, #1
 8014eae:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8014eb0:	4a18      	ldr	r2, [pc, #96]	; (8014f14 <SecureElementInit+0xd4>)
 8014eb2:	3101      	adds	r1, #1
 8014eb4:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8014eb6:	4a18      	ldr	r2, [pc, #96]	; (8014f18 <SecureElementInit+0xd8>)
 8014eb8:	3101      	adds	r1, #1
 8014eba:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8014ebc:	3101      	adds	r1, #1
 8014ebe:	3211      	adds	r2, #17
 8014ec0:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
 8014ec2:	4a16      	ldr	r2, [pc, #88]	; (8014f1c <SecureElementInit+0xdc>)
 8014ec4:	3101      	adds	r1, #1
 8014ec6:	5499      	strb	r1, [r3, r2]
 8014ec8:	4b15      	ldr	r3, [pc, #84]	; (8014f20 <SecureElementInit+0xe0>)

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	d002      	beq.n	8014ed4 <SecureElementInit+0x94>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8014ece:	6018      	str	r0, [r3, #0]
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	4770      	bx	lr
        SeNvmCtxChanged = DummyCB;
 8014ed4:	4a13      	ldr	r2, [pc, #76]	; (8014f24 <SecureElementInit+0xe4>)
 8014ed6:	601a      	str	r2, [r3, #0]
 8014ed8:	e7fa      	b.n	8014ed0 <SecureElementInit+0x90>
 8014eda:	46c0      	nop			; (mov r8, r8)
 8014edc:	20001dac 	.word	0x20001dac
 8014ee0:	0000021d 	.word	0x0000021d
 8014ee4:	0000022e 	.word	0x0000022e
 8014ee8:	0000023f 	.word	0x0000023f
 8014eec:	00000261 	.word	0x00000261
 8014ef0:	00000272 	.word	0x00000272
 8014ef4:	00000283 	.word	0x00000283
 8014ef8:	000002a5 	.word	0x000002a5
 8014efc:	000002b6 	.word	0x000002b6
 8014f00:	000002c7 	.word	0x000002c7
 8014f04:	000002e9 	.word	0x000002e9
 8014f08:	000002fa 	.word	0x000002fa
 8014f0c:	0000030b 	.word	0x0000030b
 8014f10:	0000032d 	.word	0x0000032d
 8014f14:	0000033e 	.word	0x0000033e
 8014f18:	0000034f 	.word	0x0000034f
 8014f1c:	00000371 	.word	0x00000371
 8014f20:	20002130 	.word	0x20002130
 8014f24:	08014db7 	.word	0x08014db7

08014f28 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8014f28:	0001      	movs	r1, r0
 8014f2a:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
        return SECURE_ELEMENT_SUCCESS;
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8014f2c:	2002      	movs	r0, #2
    if( seNvmCtx != 0 )
 8014f2e:	2900      	cmp	r1, #0
 8014f30:	d005      	beq.n	8014f3e <SecureElementRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8014f32:	22e1      	movs	r2, #225	; 0xe1
 8014f34:	4802      	ldr	r0, [pc, #8]	; (8014f40 <SecureElementRestoreNvmCtx+0x18>)
 8014f36:	0092      	lsls	r2, r2, #2
 8014f38:	f7ff f8eb 	bl	8014112 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8014f3c:	2000      	movs	r0, #0
    }
}
 8014f3e:	bd10      	pop	{r4, pc}
 8014f40:	20001dac 	.word	0x20001dac

08014f44 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8014f44:	23e1      	movs	r3, #225	; 0xe1
 8014f46:	009b      	lsls	r3, r3, #2
 8014f48:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8014f4a:	4801      	ldr	r0, [pc, #4]	; (8014f50 <SecureElementGetNvmCtx+0xc>)
 8014f4c:	4770      	bx	lr
 8014f4e:	46c0      	nop			; (mov r8, r8)
 8014f50:	20001dac 	.word	0x20001dac

08014f54 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8014f54:	b510      	push	{r4, lr}
 8014f56:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014f58:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8014f5a:	2a7e      	cmp	r2, #126	; 0x7e
 8014f5c:	d802      	bhi.n	8014f64 <SecureElementComputeAesCmac+0x10>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8014f5e:	0020      	movs	r0, r4
 8014f60:	f7ff ff42 	bl	8014de8 <ComputeCmac>
}
 8014f64:	bd10      	pop	{r4, pc}

08014f66 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8014f66:	b513      	push	{r0, r1, r4, lr}
 8014f68:	0014      	movs	r4, r2
 8014f6a:	001a      	movs	r2, r3
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8014f6c:	2302      	movs	r3, #2
    if( buffer == NULL )
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d00b      	beq.n	8014f8a <SecureElementVerifyAesCmac+0x24>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8014f72:	2300      	movs	r3, #0
 8014f74:	9301      	str	r3, [sp, #4]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8014f76:	ab01      	add	r3, sp, #4
 8014f78:	f7ff ff36 	bl	8014de8 <ComputeCmac>
 8014f7c:	1e03      	subs	r3, r0, #0
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014f7e:	d104      	bne.n	8014f8a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8014f80:	9b01      	ldr	r3, [sp, #4]
 8014f82:	1b1b      	subs	r3, r3, r4
 8014f84:	1e58      	subs	r0, r3, #1
 8014f86:	4183      	sbcs	r3, r0
        return SECURE_ELEMENT_ERROR_NPE;
 8014f88:	b2db      	uxtb	r3, r3
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8014f8a:	0018      	movs	r0, r3
 8014f8c:	bd16      	pop	{r1, r2, r4, pc}
	...

08014f90 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8014f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f92:	b085      	sub	sp, #20
 8014f94:	9000      	str	r0, [sp, #0]
 8014f96:	000e      	movs	r6, r1
 8014f98:	0014      	movs	r4, r2
 8014f9a:	9301      	str	r3, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8014f9c:	2502      	movs	r5, #2
    if( buffer == NULL || encBuffer == NULL )
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	d01c      	beq.n	8014fdc <SecureElementAesEncrypt+0x4c>
 8014fa2:	9b01      	ldr	r3, [sp, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d019      	beq.n	8014fdc <SecureElementAesEncrypt+0x4c>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8014fa8:	210f      	movs	r1, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8014faa:	3503      	adds	r5, #3
    if( ( size % 16 ) != 0 )
 8014fac:	4031      	ands	r1, r6
 8014fae:	d115      	bne.n	8014fdc <SecureElementAesEncrypt+0x4c>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8014fb0:	4f11      	ldr	r7, [pc, #68]	; (8014ff8 <SecureElementAesEncrypt+0x68>)
 8014fb2:	22f0      	movs	r2, #240	; 0xf0
 8014fb4:	0038      	movs	r0, r7
 8014fb6:	f7ff f8c1 	bl	801413c <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8014fba:	a903      	add	r1, sp, #12
 8014fbc:	0020      	movs	r0, r4
 8014fbe:	f7ff fefb 	bl	8014db8 <GetKeyByID>
 8014fc2:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014fc4:	d10a      	bne.n	8014fdc <SecureElementAesEncrypt+0x4c>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8014fc6:	9b03      	ldr	r3, [sp, #12]
 8014fc8:	003a      	movs	r2, r7
 8014fca:	1c58      	adds	r0, r3, #1
 8014fcc:	2110      	movs	r1, #16
 8014fce:	f7ff fc0b 	bl	80147e8 <aes_set_key>
 8014fd2:	0034      	movs	r4, r6
 8014fd4:	1b30      	subs	r0, r6, r4
 8014fd6:	b2c0      	uxtb	r0, r0

        uint8_t block = 0;

        while( size != 0 )
 8014fd8:	2c00      	cmp	r4, #0
 8014fda:	d102      	bne.n	8014fe2 <SecureElementAesEncrypt+0x52>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8014fdc:	0028      	movs	r0, r5
 8014fde:	b005      	add	sp, #20
 8014fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8014fe2:	9b01      	ldr	r3, [sp, #4]
 8014fe4:	003a      	movs	r2, r7
 8014fe6:	1819      	adds	r1, r3, r0
 8014fe8:	9b00      	ldr	r3, [sp, #0]
            size = size - 16;
 8014fea:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8014fec:	1818      	adds	r0, r3, r0
 8014fee:	f7ff fc81 	bl	80148f4 <aes_encrypt>
            size = size - 16;
 8014ff2:	b2a4      	uxth	r4, r4
 8014ff4:	e7ee      	b.n	8014fd4 <SecureElementAesEncrypt+0x44>
 8014ff6:	46c0      	nop			; (mov r8, r8)
 8014ff8:	20001dac 	.word	0x20001dac

08014ffc <SecureElementSetKey>:
{
 8014ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ffe:	0006      	movs	r6, r0
 8015000:	b085      	sub	sp, #20
 8015002:	000d      	movs	r5, r1
        return SECURE_ELEMENT_ERROR_NPE;
 8015004:	2002      	movs	r0, #2
    if( key == NULL )
 8015006:	2900      	cmp	r1, #0
 8015008:	d01a      	beq.n	8015040 <SecureElementSetKey+0x44>
 801500a:	2400      	movs	r4, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 801500c:	2711      	movs	r7, #17
 801500e:	003b      	movs	r3, r7
 8015010:	2283      	movs	r2, #131	; 0x83
 8015012:	4363      	muls	r3, r4
 8015014:	4814      	ldr	r0, [pc, #80]	; (8015068 <SecureElementSetKey+0x6c>)
 8015016:	0092      	lsls	r2, r2, #2
 8015018:	189a      	adds	r2, r3, r2
 801501a:	5c82      	ldrb	r2, [r0, r2]
 801501c:	42b2      	cmp	r2, r6
 801501e:	d11e      	bne.n	801505e <SecureElementSetKey+0x62>
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8015020:	b272      	sxtb	r2, r6
 8015022:	2a00      	cmp	r2, #0
 8015024:	da0e      	bge.n	8015044 <SecureElementSetKey+0x48>
                uint8_t decryptedKey[16] = { 0 };
 8015026:	2210      	movs	r2, #16
 8015028:	2100      	movs	r1, #0
 801502a:	4668      	mov	r0, sp
 801502c:	f7eb f8e8 	bl	8000200 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8015030:	466b      	mov	r3, sp
 8015032:	227f      	movs	r2, #127	; 0x7f
 8015034:	2110      	movs	r1, #16
 8015036:	0028      	movs	r0, r5
 8015038:	f7ff ffaa 	bl	8014f90 <SecureElementAesEncrypt>
                if( retval != SECURE_ELEMENT_SUCCESS )
 801503c:	2800      	cmp	r0, #0
 801503e:	d00e      	beq.n	801505e <SecureElementSetKey+0x62>
}
 8015040:	b005      	add	sp, #20
 8015042:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8015044:	4a09      	ldr	r2, [pc, #36]	; (801506c <SecureElementSetKey+0x70>)
 8015046:	0029      	movs	r1, r5
 8015048:	189b      	adds	r3, r3, r2
 801504a:	3afe      	subs	r2, #254	; 0xfe
 801504c:	18c0      	adds	r0, r0, r3
 801504e:	3aff      	subs	r2, #255	; 0xff
 8015050:	f7ff f85f 	bl	8014112 <memcpy1>
                SeNvmCtxChanged( );
 8015054:	4b06      	ldr	r3, [pc, #24]	; (8015070 <SecureElementSetKey+0x74>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 801505a:	2000      	movs	r0, #0
 801505c:	e7f0      	b.n	8015040 <SecureElementSetKey+0x44>
 801505e:	3401      	adds	r4, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015060:	2c16      	cmp	r4, #22
 8015062:	d1d4      	bne.n	801500e <SecureElementSetKey+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015064:	2003      	movs	r0, #3
 8015066:	e7eb      	b.n	8015040 <SecureElementSetKey+0x44>
 8015068:	20001dac 	.word	0x20001dac
 801506c:	0000020d 	.word	0x0000020d
 8015070:	20002130 	.word	0x20002130

08015074 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8015074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015076:	0004      	movs	r4, r0
 8015078:	b085      	sub	sp, #20
 801507a:	000d      	movs	r5, r1
 801507c:	0016      	movs	r6, r2
 801507e:	001f      	movs	r7, r3
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8015080:	2002      	movs	r0, #2
    if( input == NULL )
 8015082:	2900      	cmp	r1, #0
 8015084:	d024      	beq.n	80150d0 <SecureElementDeriveAndStoreKey+0x5c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8015086:	2210      	movs	r2, #16
 8015088:	2100      	movs	r1, #0
 801508a:	4668      	mov	r0, sp
 801508c:	f7eb f8b8 	bl	8000200 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8015090:	2f7f      	cmp	r7, #127	; 0x7f
 8015092:	d10d      	bne.n	80150b0 <SecureElementDeriveAndStoreKey+0x3c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8015094:	2e00      	cmp	r6, #0
 8015096:	d118      	bne.n	80150ca <SecureElementDeriveAndStoreKey+0x56>
 8015098:	0224      	lsls	r4, r4, #8
 801509a:	0e24      	lsrs	r4, r4, #24
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801509c:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 801509e:	2c00      	cmp	r4, #0
 80150a0:	d016      	beq.n	80150d0 <SecureElementDeriveAndStoreKey+0x5c>
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
    nonce |= ( ( uint16_t ) input[1] << 8 );
 80150a2:	786a      	ldrb	r2, [r5, #1]
 80150a4:	782b      	ldrb	r3, [r5, #0]
 80150a6:	0212      	lsls	r2, r2, #8
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 80150a8:	4313      	orrs	r3, r2
    {
        return retval;
 80150aa:	2006      	movs	r0, #6
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 80150ac:	2b0f      	cmp	r3, #15
 80150ae:	d90f      	bls.n	80150d0 <SecureElementDeriveAndStoreKey+0x5c>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80150b0:	466b      	mov	r3, sp
 80150b2:	0032      	movs	r2, r6
 80150b4:	2110      	movs	r1, #16
 80150b6:	0028      	movs	r0, r5
 80150b8:	f7ff ff6a 	bl	8014f90 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80150bc:	2800      	cmp	r0, #0
 80150be:	d107      	bne.n	80150d0 <SecureElementDeriveAndStoreKey+0x5c>
    {
        return retval;
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 80150c0:	4669      	mov	r1, sp
 80150c2:	0038      	movs	r0, r7
 80150c4:	f7ff ff9a 	bl	8014ffc <SecureElementSetKey>
 80150c8:	e002      	b.n	80150d0 <SecureElementDeriveAndStoreKey+0x5c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80150ca:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 80150cc:	2e01      	cmp	r6, #1
 80150ce:	d1e8      	bne.n	80150a2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80150d0:	b005      	add	sp, #20
 80150d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150d4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80150d4:	2200      	movs	r2, #0
 80150d6:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80150d8:	4907      	ldr	r1, [pc, #28]	; (80150f8 <GetFskBandwidthRegValue+0x24>)
 80150da:	00d3      	lsls	r3, r2, #3
 80150dc:	585c      	ldr	r4, [r3, r1]
 80150de:	4284      	cmp	r4, r0
 80150e0:	d803      	bhi.n	80150ea <GetFskBandwidthRegValue+0x16>
 80150e2:	18cb      	adds	r3, r1, r3
 80150e4:	689c      	ldr	r4, [r3, #8]
 80150e6:	42a0      	cmp	r0, r4
 80150e8:	d303      	bcc.n	80150f2 <GetFskBandwidthRegValue+0x1e>
 80150ea:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80150ec:	2a15      	cmp	r2, #21
 80150ee:	d1f4      	bne.n	80150da <GetFskBandwidthRegValue+0x6>
 80150f0:	e7fe      	b.n	80150f0 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 80150f2:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 80150f4:	bd10      	pop	{r4, pc}
 80150f6:	46c0      	nop			; (mov r8, r8)
 80150f8:	080189e0 	.word	0x080189e0

080150fc <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 80150fc:	4b05      	ldr	r3, [pc, #20]	; (8015114 <SX1276OnDio4Irq+0x18>)
 80150fe:	795a      	ldrb	r2, [r3, #5]
 8015100:	2a00      	cmp	r2, #0
 8015102:	d105      	bne.n	8015110 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8015104:	3330      	adds	r3, #48	; 0x30
 8015106:	781a      	ldrb	r2, [r3, #0]
 8015108:	2a00      	cmp	r2, #0
 801510a:	d101      	bne.n	8015110 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801510c:	3201      	adds	r2, #1
 801510e:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8015110:	4770      	bx	lr
 8015112:	46c0      	nop			; (mov r8, r8)
 8015114:	200022d4 	.word	0x200022d4

08015118 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8015118:	4b01      	ldr	r3, [pc, #4]	; (8015120 <SX1276BoardInit+0x8>)
 801511a:	6018      	str	r0, [r3, #0]
}
 801511c:	4770      	bx	lr
 801511e:	46c0      	nop			; (mov r8, r8)
 8015120:	20002134 	.word	0x20002134

08015124 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8015124:	4b01      	ldr	r3, [pc, #4]	; (801512c <SX1276GetStatus+0x8>)
 8015126:	7918      	ldrb	r0, [r3, #4]
}
 8015128:	4770      	bx	lr
 801512a:	46c0      	nop			; (mov r8, r8)
 801512c:	200022d4 	.word	0x200022d4

08015130 <SX1276Reset>:
{
 8015130:	b530      	push	{r4, r5, lr}
 8015132:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8015134:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8015136:	2214      	movs	r2, #20
 8015138:	2100      	movs	r1, #0
 801513a:	a801      	add	r0, sp, #4
 801513c:	f7eb f860 	bl	8000200 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8015140:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8015142:	4d0e      	ldr	r5, [pc, #56]	; (801517c <SX1276Reset+0x4c>)
 8015144:	aa01      	add	r2, sp, #4
 8015146:	0021      	movs	r1, r4
 8015148:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 801514a:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 801514c:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 801514e:	f7f5 f8e7 	bl	800a320 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8015152:	0021      	movs	r1, r4
 8015154:	2200      	movs	r2, #0
 8015156:	0028      	movs	r0, r5
 8015158:	f7f5 f954 	bl	800a404 <HW_GPIO_Write>
    DelayMs( 1 );
 801515c:	0020      	movs	r0, r4
 801515e:	f7f6 fe6f 	bl	800be40 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8015162:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8015164:	aa01      	add	r2, sp, #4
 8015166:	0021      	movs	r1, r4
 8015168:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 801516a:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 801516c:	f7f5 f8d8 	bl	800a320 <HW_GPIO_Init>
    DelayMs( 6 );
 8015170:	2006      	movs	r0, #6
 8015172:	f7f6 fe65 	bl	800be40 <HAL_Delay>
}
 8015176:	b007      	add	sp, #28
 8015178:	bd30      	pop	{r4, r5, pc}
 801517a:	46c0      	nop			; (mov r8, r8)
 801517c:	50000800 	.word	0x50000800

08015180 <SX1276WriteBuffer>:
{
 8015180:	b570      	push	{r4, r5, r6, lr}
 8015182:	0006      	movs	r6, r0
 8015184:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8015186:	20a0      	movs	r0, #160	; 0xa0
 8015188:	2180      	movs	r1, #128	; 0x80
{
 801518a:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 801518c:	0209      	lsls	r1, r1, #8
 801518e:	2200      	movs	r2, #0
 8015190:	05c0      	lsls	r0, r0, #23
 8015192:	f7f5 f937 	bl	800a404 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8015196:	2080      	movs	r0, #128	; 0x80
 8015198:	4330      	orrs	r0, r6
 801519a:	f7f5 fb9d 	bl	800a8d8 <HW_SPI_InOut>
 801519e:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80151a0:	42ac      	cmp	r4, r5
 80151a2:	d107      	bne.n	80151b4 <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80151a4:	2180      	movs	r1, #128	; 0x80
 80151a6:	20a0      	movs	r0, #160	; 0xa0
 80151a8:	2201      	movs	r2, #1
 80151aa:	0209      	lsls	r1, r1, #8
 80151ac:	05c0      	lsls	r0, r0, #23
 80151ae:	f7f5 f929 	bl	800a404 <HW_GPIO_Write>
}
 80151b2:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 80151b4:	7820      	ldrb	r0, [r4, #0]
 80151b6:	f7f5 fb8f 	bl	800a8d8 <HW_SPI_InOut>
 80151ba:	3401      	adds	r4, #1
 80151bc:	e7f0      	b.n	80151a0 <SX1276WriteBuffer+0x20>

080151be <SX1276Write>:
{
 80151be:	b507      	push	{r0, r1, r2, lr}
 80151c0:	466b      	mov	r3, sp
 80151c2:	71d9      	strb	r1, [r3, #7]
 80151c4:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80151c6:	2201      	movs	r2, #1
 80151c8:	0019      	movs	r1, r3
 80151ca:	f7ff ffd9 	bl	8015180 <SX1276WriteBuffer>
}
 80151ce:	bd07      	pop	{r0, r1, r2, pc}

080151d0 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 80151d0:	4b11      	ldr	r3, [pc, #68]	; (8015218 <SX1276SetChannel+0x48>)
{
 80151d2:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 80151d4:	4911      	ldr	r1, [pc, #68]	; (801521c <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 80151d6:	6098      	str	r0, [r3, #8]
{
 80151d8:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 80151da:	f7eb fd73 	bl	8000cc4 <__aeabi_uidivmod>
 80151de:	4b10      	ldr	r3, [pc, #64]	; (8015220 <SX1276SetChannel+0x50>)
 80151e0:	0208      	lsls	r0, r1, #8
 80151e2:	18c0      	adds	r0, r0, r3
 80151e4:	490d      	ldr	r1, [pc, #52]	; (801521c <SX1276SetChannel+0x4c>)
 80151e6:	f7eb fce7 	bl	8000bb8 <__udivsi3>
 80151ea:	490c      	ldr	r1, [pc, #48]	; (801521c <SX1276SetChannel+0x4c>)
 80151ec:	0004      	movs	r4, r0
 80151ee:	0028      	movs	r0, r5
 80151f0:	f7eb fce2 	bl	8000bb8 <__udivsi3>
 80151f4:	0200      	lsls	r0, r0, #8
 80151f6:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80151f8:	0c21      	lsrs	r1, r4, #16
 80151fa:	b2c9      	uxtb	r1, r1
 80151fc:	2006      	movs	r0, #6
 80151fe:	f7ff ffde 	bl	80151be <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8015202:	0a21      	lsrs	r1, r4, #8
 8015204:	b2c9      	uxtb	r1, r1
 8015206:	2007      	movs	r0, #7
 8015208:	f7ff ffd9 	bl	80151be <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801520c:	b2e1      	uxtb	r1, r4
 801520e:	2008      	movs	r0, #8
 8015210:	f7ff ffd5 	bl	80151be <SX1276Write>
}
 8015214:	bd70      	pop	{r4, r5, r6, pc}
 8015216:	46c0      	nop			; (mov r8, r8)
 8015218:	200022d4 	.word	0x200022d4
 801521c:	00003d09 	.word	0x00003d09
 8015220:	00001e84 	.word	0x00001e84

08015224 <SX1276ReadBuffer>:
{
 8015224:	b570      	push	{r4, r5, r6, lr}
 8015226:	0006      	movs	r6, r0
 8015228:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 801522a:	20a0      	movs	r0, #160	; 0xa0
 801522c:	2180      	movs	r1, #128	; 0x80
{
 801522e:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8015230:	0209      	lsls	r1, r1, #8
 8015232:	2200      	movs	r2, #0
 8015234:	05c0      	lsls	r0, r0, #23
 8015236:	f7f5 f8e5 	bl	800a404 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 801523a:	207f      	movs	r0, #127	; 0x7f
 801523c:	4030      	ands	r0, r6
 801523e:	f7f5 fb4b 	bl	800a8d8 <HW_SPI_InOut>
 8015242:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8015244:	42ac      	cmp	r4, r5
 8015246:	d107      	bne.n	8015258 <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8015248:	2180      	movs	r1, #128	; 0x80
 801524a:	20a0      	movs	r0, #160	; 0xa0
 801524c:	2201      	movs	r2, #1
 801524e:	0209      	lsls	r1, r1, #8
 8015250:	05c0      	lsls	r0, r0, #23
 8015252:	f7f5 f8d7 	bl	800a404 <HW_GPIO_Write>
}
 8015256:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8015258:	2000      	movs	r0, #0
 801525a:	f7f5 fb3d 	bl	800a8d8 <HW_SPI_InOut>
 801525e:	7020      	strb	r0, [r4, #0]
 8015260:	3401      	adds	r4, #1
 8015262:	e7ef      	b.n	8015244 <SX1276ReadBuffer+0x20>

08015264 <SX1276Read>:
{
 8015264:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8015266:	466b      	mov	r3, sp
 8015268:	1ddc      	adds	r4, r3, #7
 801526a:	2201      	movs	r2, #1
 801526c:	0021      	movs	r1, r4
 801526e:	f7ff ffd9 	bl	8015224 <SX1276ReadBuffer>
    return data;
 8015272:	7820      	ldrb	r0, [r4, #0]
}
 8015274:	bd16      	pop	{r1, r2, r4, pc}
	...

08015278 <RxChainCalibration>:
{
 8015278:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801527a:	2009      	movs	r0, #9
 801527c:	f7ff fff2 	bl	8015264 <SX1276Read>
 8015280:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015282:	2006      	movs	r0, #6
 8015284:	f7ff ffee 	bl	8015264 <SX1276Read>
 8015288:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801528a:	2007      	movs	r0, #7
 801528c:	f7ff ffea 	bl	8015264 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015290:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8015292:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015294:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8015296:	2008      	movs	r0, #8
 8015298:	f7ff ffe4 	bl	8015264 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 801529c:	4b1a      	ldr	r3, [pc, #104]	; (8015308 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801529e:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80152a0:	b2c4      	uxtb	r4, r0
 80152a2:	435c      	muls	r4, r3
 80152a4:	0a00      	lsrs	r0, r0, #8
 80152a6:	4358      	muls	r0, r3
 80152a8:	3480      	adds	r4, #128	; 0x80
 80152aa:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80152ac:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80152ae:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80152b0:	2009      	movs	r0, #9
 80152b2:	f7ff ff84 	bl	80151be <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80152b6:	203b      	movs	r0, #59	; 0x3b
 80152b8:	f7ff ffd4 	bl	8015264 <SX1276Read>
 80152bc:	2140      	movs	r1, #64	; 0x40
 80152be:	4301      	orrs	r1, r0
 80152c0:	b2c9      	uxtb	r1, r1
 80152c2:	203b      	movs	r0, #59	; 0x3b
 80152c4:	f7ff ff7b 	bl	80151be <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80152c8:	2620      	movs	r6, #32
 80152ca:	203b      	movs	r0, #59	; 0x3b
 80152cc:	f7ff ffca 	bl	8015264 <SX1276Read>
 80152d0:	4230      	tst	r0, r6
 80152d2:	d1fa      	bne.n	80152ca <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80152d4:	480d      	ldr	r0, [pc, #52]	; (801530c <RxChainCalibration+0x94>)
 80152d6:	f7ff ff7b 	bl	80151d0 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80152da:	203b      	movs	r0, #59	; 0x3b
 80152dc:	f7ff ffc2 	bl	8015264 <SX1276Read>
 80152e0:	2140      	movs	r1, #64	; 0x40
 80152e2:	4301      	orrs	r1, r0
 80152e4:	b2c9      	uxtb	r1, r1
 80152e6:	203b      	movs	r0, #59	; 0x3b
 80152e8:	f7ff ff69 	bl	80151be <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80152ec:	2620      	movs	r6, #32
 80152ee:	203b      	movs	r0, #59	; 0x3b
 80152f0:	f7ff ffb8 	bl	8015264 <SX1276Read>
 80152f4:	4230      	tst	r0, r6
 80152f6:	d1fa      	bne.n	80152ee <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80152f8:	0029      	movs	r1, r5
 80152fa:	2009      	movs	r0, #9
 80152fc:	f7ff ff5f 	bl	80151be <SX1276Write>
    SX1276SetChannel( initialFreq );
 8015300:	0020      	movs	r0, r4
 8015302:	f7ff ff65 	bl	80151d0 <SX1276SetChannel>
}
 8015306:	bd70      	pop	{r4, r5, r6, pc}
 8015308:	00003d09 	.word	0x00003d09
 801530c:	33bca100 	.word	0x33bca100

08015310 <SX1276GetTimeOnAir>:
{
 8015310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015312:	000d      	movs	r5, r1
 8015314:	b085      	sub	sp, #20
    switch( modem )
 8015316:	2800      	cmp	r0, #0
 8015318:	d003      	beq.n	8015322 <SX1276GetTimeOnAir+0x12>
 801531a:	2801      	cmp	r0, #1
 801531c:	d05a      	beq.n	80153d4 <SX1276GetTimeOnAir+0xc4>
    uint32_t airTime = 0;
 801531e:	2000      	movs	r0, #0
    return airTime;
 8015320:	e04e      	b.n	80153c0 <SX1276GetTimeOnAir+0xb0>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8015322:	4c71      	ldr	r4, [pc, #452]	; (80154e8 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8015324:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8015326:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8015328:	f7ff ff9c 	bl	8015264 <SX1276Read>
 801532c:	23f8      	movs	r3, #248	; 0xf8
 801532e:	4398      	bics	r0, r3
 8015330:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8015332:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8015334:	f7ed fe0c 	bl	8002f50 <__aeabi_i2d>
 8015338:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801533a:	1ce1      	adds	r1, r4, #3
 801533c:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801533e:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8015340:	2000      	movs	r0, #0
 8015342:	2900      	cmp	r1, #0
 8015344:	d13e      	bne.n	80153c4 <SX1276GetTimeOnAir+0xb4>
 8015346:	4969      	ldr	r1, [pc, #420]	; (80154ec <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8015348:	f7ec f8f4 	bl	8001534 <__aeabi_dadd>
 801534c:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801534e:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8015350:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8015352:	f7ff ff87 	bl	8015264 <SX1276Read>
 8015356:	23f9      	movs	r3, #249	; 0xf9
 8015358:	4398      	bics	r0, r3
 801535a:	d135      	bne.n	80153c8 <SX1276GetTimeOnAir+0xb8>
 801535c:	2000      	movs	r0, #0
 801535e:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8015360:	0032      	movs	r2, r6
 8015362:	003b      	movs	r3, r7
 8015364:	f7ec f8e6 	bl	8001534 <__aeabi_dadd>
 8015368:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801536a:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801536c:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801536e:	f7ed fdef 	bl	8002f50 <__aeabi_i2d>
 8015372:	0002      	movs	r2, r0
 8015374:	000b      	movs	r3, r1
 8015376:	0030      	movs	r0, r6
 8015378:	0039      	movs	r1, r7
 801537a:	f7ec f8db 	bl	8001534 <__aeabi_dadd>
 801537e:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8015380:	1d61      	adds	r1, r4, #5
 8015382:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8015384:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8015386:	2000      	movs	r0, #0
 8015388:	2900      	cmp	r1, #0
 801538a:	d120      	bne.n	80153ce <SX1276GetTimeOnAir+0xbe>
 801538c:	2100      	movs	r1, #0
                                     pktLen +
 801538e:	f7ec f8d1 	bl	8001534 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8015392:	2200      	movs	r2, #0
 8015394:	4b56      	ldr	r3, [pc, #344]	; (80154f0 <SX1276GetTimeOnAir+0x1e0>)
 8015396:	f7ed f811 	bl	80023bc <__aeabi_dmul>
 801539a:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801539c:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801539e:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80153a0:	f7ed fe18 	bl	8002fd4 <__aeabi_ui2d>
 80153a4:	0002      	movs	r2, r0
 80153a6:	000b      	movs	r3, r1
 80153a8:	0030      	movs	r0, r6
 80153aa:	0039      	movs	r1, r7
 80153ac:	f7ec fbd2 	bl	8001b54 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80153b0:	2200      	movs	r2, #0
 80153b2:	4b50      	ldr	r3, [pc, #320]	; (80154f4 <SX1276GetTimeOnAir+0x1e4>)
 80153b4:	f7ed f802 	bl	80023bc <__aeabi_dmul>
 80153b8:	f7f3 f8da 	bl	8008570 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80153bc:	f7eb fdfa 	bl	8000fb4 <__aeabi_d2uiz>
}
 80153c0:	b005      	add	sp, #20
 80153c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80153c4:	2100      	movs	r1, #0
 80153c6:	e7bf      	b.n	8015348 <SX1276GetTimeOnAir+0x38>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80153c8:	2000      	movs	r0, #0
 80153ca:	4948      	ldr	r1, [pc, #288]	; (80154ec <SX1276GetTimeOnAir+0x1dc>)
 80153cc:	e7c8      	b.n	8015360 <SX1276GetTimeOnAir+0x50>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80153ce:	2180      	movs	r1, #128	; 0x80
 80153d0:	05c9      	lsls	r1, r1, #23
 80153d2:	e7dc      	b.n	801538e <SX1276GetTimeOnAir+0x7e>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80153d4:	4c44      	ldr	r4, [pc, #272]	; (80154e8 <SX1276GetTimeOnAir+0x1d8>)
 80153d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80153d8:	3b07      	subs	r3, #7
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d900      	bls.n	80153e0 <SX1276GetTimeOnAir+0xd0>
 80153de:	e07d      	b.n	80154dc <SX1276GetTimeOnAir+0x1cc>
 80153e0:	4a45      	ldr	r2, [pc, #276]	; (80154f8 <SX1276GetTimeOnAir+0x1e8>)
 80153e2:	00db      	lsls	r3, r3, #3
 80153e4:	18d3      	adds	r3, r2, r3
 80153e6:	681e      	ldr	r6, [r3, #0]
 80153e8:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80153ea:	2001      	movs	r0, #1
 80153ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80153ee:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80153f0:	4098      	lsls	r0, r3
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	f7ed fdac 	bl	8002f50 <__aeabi_i2d>
 80153f8:	0002      	movs	r2, r0
 80153fa:	000b      	movs	r3, r1
 80153fc:	0030      	movs	r0, r6
 80153fe:	0039      	movs	r1, r7
 8015400:	f7ec fba8 	bl	8001b54 <__aeabi_ddiv>
 8015404:	0002      	movs	r2, r0
 8015406:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8015408:	2000      	movs	r0, #0
 801540a:	4938      	ldr	r1, [pc, #224]	; (80154ec <SX1276GetTimeOnAir+0x1dc>)
 801540c:	f7ec fba2 	bl	8001b54 <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8015410:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8015412:	0006      	movs	r6, r0
 8015414:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8015416:	334e      	adds	r3, #78	; 0x4e
 8015418:	8818      	ldrh	r0, [r3, #0]
 801541a:	f7ed fd99 	bl	8002f50 <__aeabi_i2d>
 801541e:	2200      	movs	r2, #0
 8015420:	4b36      	ldr	r3, [pc, #216]	; (80154fc <SX1276GetTimeOnAir+0x1ec>)
 8015422:	f7ec f887 	bl	8001534 <__aeabi_dadd>
 8015426:	0032      	movs	r2, r6
 8015428:	003b      	movs	r3, r7
 801542a:	f7ec ffc7 	bl	80023bc <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801542e:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8015430:	9002      	str	r0, [sp, #8]
 8015432:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8015434:	3352      	adds	r3, #82	; 0x52
 8015436:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8015438:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 801543a:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801543c:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801543e:	0100      	lsls	r0, r0, #4
 8015440:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8015442:	7823      	ldrb	r3, [r4, #0]
 8015444:	2214      	movs	r2, #20
 8015446:	1e59      	subs	r1, r3, #1
 8015448:	418b      	sbcs	r3, r1
 801544a:	301c      	adds	r0, #28
 801544c:	425b      	negs	r3, r3
 801544e:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8015450:	1828      	adds	r0, r5, r0
 8015452:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8015454:	f7ed fdbe 	bl	8002fd4 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8015458:	4b23      	ldr	r3, [pc, #140]	; (80154e8 <SX1276GetTimeOnAir+0x1d8>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801545a:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801545c:	334c      	adds	r3, #76	; 0x4c
 801545e:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8015460:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8015462:	1e43      	subs	r3, r0, #1
 8015464:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8015466:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8015468:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 801546a:	1a18      	subs	r0, r3, r0
 801546c:	0080      	lsls	r0, r0, #2
 801546e:	f7ed fdb1 	bl	8002fd4 <__aeabi_ui2d>
 8015472:	0002      	movs	r2, r0
 8015474:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8015476:	0020      	movs	r0, r4
 8015478:	0029      	movs	r1, r5
 801547a:	f7ec fb6b 	bl	8001b54 <__aeabi_ddiv>
 801547e:	f7f2 ff47 	bl	8008310 <ceil>
 8015482:	0004      	movs	r4, r0
 8015484:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8015486:	4b18      	ldr	r3, [pc, #96]	; (80154e8 <SX1276GetTimeOnAir+0x1d8>)
 8015488:	334d      	adds	r3, #77	; 0x4d
 801548a:	7818      	ldrb	r0, [r3, #0]
 801548c:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801548e:	f7ed fd5f 	bl	8002f50 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8015492:	0022      	movs	r2, r4
 8015494:	002b      	movs	r3, r5
 8015496:	f7ec ff91 	bl	80023bc <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 801549a:	2200      	movs	r2, #0
 801549c:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801549e:	0004      	movs	r4, r0
 80154a0:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80154a2:	f7eb fd29 	bl	8000ef8 <__aeabi_dcmpgt>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d01b      	beq.n	80154e2 <SX1276GetTimeOnAir+0x1d2>
 80154aa:	2200      	movs	r2, #0
 80154ac:	4b10      	ldr	r3, [pc, #64]	; (80154f0 <SX1276GetTimeOnAir+0x1e0>)
 80154ae:	0020      	movs	r0, r4
 80154b0:	0029      	movs	r1, r5
 80154b2:	f7ec f83f 	bl	8001534 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 80154b6:	0032      	movs	r2, r6
 80154b8:	003b      	movs	r3, r7
 80154ba:	f7ec ff7f 	bl	80023bc <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 80154be:	9a02      	ldr	r2, [sp, #8]
 80154c0:	9b03      	ldr	r3, [sp, #12]
 80154c2:	f7ec f837 	bl	8001534 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80154c6:	2200      	movs	r2, #0
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <SX1276GetTimeOnAir+0x1e4>)
 80154ca:	f7ec ff77 	bl	80023bc <__aeabi_dmul>
 80154ce:	4a0c      	ldr	r2, [pc, #48]	; (8015500 <SX1276GetTimeOnAir+0x1f0>)
 80154d0:	4b0c      	ldr	r3, [pc, #48]	; (8015504 <SX1276GetTimeOnAir+0x1f4>)
 80154d2:	f7ec f82f 	bl	8001534 <__aeabi_dadd>
 80154d6:	f7f2 ffaf 	bl	8008438 <floor>
 80154da:	e76f      	b.n	80153bc <SX1276GetTimeOnAir+0xac>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80154dc:	2600      	movs	r6, #0
 80154de:	2700      	movs	r7, #0
 80154e0:	e783      	b.n	80153ea <SX1276GetTimeOnAir+0xda>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80154e2:	2000      	movs	r0, #0
 80154e4:	4902      	ldr	r1, [pc, #8]	; (80154f0 <SX1276GetTimeOnAir+0x1e0>)
 80154e6:	e7e6      	b.n	80154b6 <SX1276GetTimeOnAir+0x1a6>
 80154e8:	200022d4 	.word	0x200022d4
 80154ec:	3ff00000 	.word	0x3ff00000
 80154f0:	40200000 	.word	0x40200000
 80154f4:	408f4000 	.word	0x408f4000
 80154f8:	080189c8 	.word	0x080189c8
 80154fc:	40110000 	.word	0x40110000
 8015500:	d916872b 	.word	0xd916872b
 8015504:	3feff7ce 	.word	0x3feff7ce

08015508 <SX1276ReadRssi>:
{
 8015508:	b510      	push	{r4, lr}
    switch( modem )
 801550a:	2800      	cmp	r0, #0
 801550c:	d004      	beq.n	8015518 <SX1276ReadRssi+0x10>
 801550e:	2801      	cmp	r0, #1
 8015510:	d00a      	beq.n	8015528 <SX1276ReadRssi+0x20>
        rssi = -1;
 8015512:	2001      	movs	r0, #1
 8015514:	4240      	negs	r0, r0
 8015516:	e006      	b.n	8015526 <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8015518:	2011      	movs	r0, #17
 801551a:	f7ff fea3 	bl	8015264 <SX1276Read>
 801551e:	0840      	lsrs	r0, r0, #1
 8015520:	b2c0      	uxtb	r0, r0
 8015522:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8015524:	b200      	sxth	r0, r0
}
 8015526:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8015528:	4a06      	ldr	r2, [pc, #24]	; (8015544 <SX1276ReadRssi+0x3c>)
 801552a:	4b07      	ldr	r3, [pc, #28]	; (8015548 <SX1276ReadRssi+0x40>)
 801552c:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801552e:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8015530:	429a      	cmp	r2, r3
 8015532:	d903      	bls.n	801553c <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8015534:	f7ff fe96 	bl	8015264 <SX1276Read>
 8015538:	389d      	subs	r0, #157	; 0x9d
 801553a:	e7f3      	b.n	8015524 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801553c:	f7ff fe92 	bl	8015264 <SX1276Read>
 8015540:	38a4      	subs	r0, #164	; 0xa4
 8015542:	e7ef      	b.n	8015524 <SX1276ReadRssi+0x1c>
 8015544:	200022d4 	.word	0x200022d4
 8015548:	1f4add40 	.word	0x1f4add40

0801554c <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 801554c:	b510      	push	{r4, lr}
 801554e:	0004      	movs	r4, r0
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8015550:	2001      	movs	r0, #1
 8015552:	f7ff fe87 	bl	8015264 <SX1276Read>
 8015556:	2307      	movs	r3, #7
 8015558:	0001      	movs	r1, r0
 801555a:	4399      	bics	r1, r3
 801555c:	4321      	orrs	r1, r4
 801555e:	b2c9      	uxtb	r1, r1
 8015560:	2001      	movs	r0, #1
 8015562:	f7ff fe2c 	bl	80151be <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8015566:	4c05      	ldr	r4, [pc, #20]	; (801557c <SX1276SetOpMode.part.2+0x30>)
 8015568:	2001      	movs	r0, #1
 801556a:	6823      	ldr	r3, [r4, #0]
 801556c:	691b      	ldr	r3, [r3, #16]
 801556e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	2000      	movs	r0, #0
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	4798      	blx	r3
}
 8015578:	bd10      	pop	{r4, pc}
 801557a:	46c0      	nop			; (mov r8, r8)
 801557c:	20002134 	.word	0x20002134

08015580 <SX1276SetSleep>:
{
 8015580:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8015582:	4806      	ldr	r0, [pc, #24]	; (801559c <SX1276SetSleep+0x1c>)
 8015584:	f7fe fd4e 	bl	8014024 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8015588:	4805      	ldr	r0, [pc, #20]	; (80155a0 <SX1276SetSleep+0x20>)
 801558a:	f7fe fd4b 	bl	8014024 <TimerStop>
 801558e:	2000      	movs	r0, #0
 8015590:	f7ff ffdc 	bl	801554c <SX1276SetOpMode.part.2>
    SX1276.Settings.State = RF_IDLE;
 8015594:	2200      	movs	r2, #0
 8015596:	4b03      	ldr	r3, [pc, #12]	; (80155a4 <SX1276SetSleep+0x24>)
 8015598:	711a      	strb	r2, [r3, #4]
}
 801559a:	bd10      	pop	{r4, pc}
 801559c:	2000233c 	.word	0x2000233c
 80155a0:	200022ac 	.word	0x200022ac
 80155a4:	200022d4 	.word	0x200022d4

080155a8 <SX1276SetOpMode>:
{
 80155a8:	b570      	push	{r4, r5, r6, lr}
 80155aa:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80155ac:	d102      	bne.n	80155b4 <SX1276SetOpMode+0xc>
 80155ae:	f7ff ffcd 	bl	801554c <SX1276SetOpMode.part.2>
}
 80155b2:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80155b4:	4d0c      	ldr	r5, [pc, #48]	; (80155e8 <SX1276SetOpMode+0x40>)
 80155b6:	2001      	movs	r0, #1
 80155b8:	682b      	ldr	r3, [r5, #0]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80155be:	682b      	ldr	r3, [r5, #0]
 80155c0:	2000      	movs	r0, #0
 80155c2:	691b      	ldr	r3, [r3, #16]
 80155c4:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80155c6:	682b      	ldr	r3, [r5, #0]
 80155c8:	0020      	movs	r0, r4
 80155ca:	695b      	ldr	r3, [r3, #20]
 80155cc:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80155ce:	2001      	movs	r0, #1
 80155d0:	f7ff fe48 	bl	8015264 <SX1276Read>
 80155d4:	2307      	movs	r3, #7
 80155d6:	0001      	movs	r1, r0
 80155d8:	4399      	bics	r1, r3
 80155da:	4321      	orrs	r1, r4
 80155dc:	b2c9      	uxtb	r1, r1
 80155de:	2001      	movs	r0, #1
 80155e0:	f7ff fded 	bl	80151be <SX1276Write>
}
 80155e4:	e7e5      	b.n	80155b2 <SX1276SetOpMode+0xa>
 80155e6:	46c0      	nop			; (mov r8, r8)
 80155e8:	20002134 	.word	0x20002134

080155ec <SX1276SetStby>:
{
 80155ec:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80155ee:	4806      	ldr	r0, [pc, #24]	; (8015608 <SX1276SetStby+0x1c>)
 80155f0:	f7fe fd18 	bl	8014024 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80155f4:	4805      	ldr	r0, [pc, #20]	; (801560c <SX1276SetStby+0x20>)
 80155f6:	f7fe fd15 	bl	8014024 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80155fa:	2001      	movs	r0, #1
 80155fc:	f7ff ffd4 	bl	80155a8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8015600:	2200      	movs	r2, #0
 8015602:	4b03      	ldr	r3, [pc, #12]	; (8015610 <SX1276SetStby+0x24>)
 8015604:	711a      	strb	r2, [r3, #4]
}
 8015606:	bd10      	pop	{r4, pc}
 8015608:	2000233c 	.word	0x2000233c
 801560c:	200022ac 	.word	0x200022ac
 8015610:	200022d4 	.word	0x200022d4

08015614 <SX1276SetRx>:
{
 8015614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 8015616:	4c79      	ldr	r4, [pc, #484]	; (80157fc <SX1276SetRx+0x1e8>)
{
 8015618:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 801561a:	7965      	ldrb	r5, [r4, #5]
 801561c:	2d00      	cmp	r5, #0
 801561e:	d003      	beq.n	8015628 <SX1276SetRx+0x14>
 8015620:	2d01      	cmp	r5, #1
 8015622:	d04f      	beq.n	80156c4 <SX1276SetRx+0xb0>
    bool rxContinuous = false;
 8015624:	2700      	movs	r7, #0
 8015626:	e029      	b.n	801567c <SX1276SetRx+0x68>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8015628:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801562a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801562c:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801562e:	f7ff fe19 	bl	8015264 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8015632:	2103      	movs	r1, #3
 8015634:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8015636:	3109      	adds	r1, #9
 8015638:	4301      	orrs	r1, r0
 801563a:	2040      	movs	r0, #64	; 0x40
 801563c:	f7ff fdbf 	bl	80151be <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8015640:	2041      	movs	r0, #65	; 0x41
 8015642:	f7ff fe0f 	bl	8015264 <SX1276Read>
 8015646:	213f      	movs	r1, #63	; 0x3f
 8015648:	4249      	negs	r1, r1
 801564a:	4301      	orrs	r1, r0
 801564c:	b2c9      	uxtb	r1, r1
 801564e:	2041      	movs	r0, #65	; 0x41
 8015650:	f7ff fdb5 	bl	80151be <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8015654:	2035      	movs	r0, #53	; 0x35
 8015656:	f7ff fe05 	bl	8015264 <SX1276Read>
 801565a:	233f      	movs	r3, #63	; 0x3f
 801565c:	4018      	ands	r0, r3
 801565e:	0023      	movs	r3, r4
 8015660:	333e      	adds	r3, #62	; 0x3e
 8015662:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8015664:	211e      	movs	r1, #30
 8015666:	200d      	movs	r0, #13
 8015668:	f7ff fda9 	bl	80151be <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801566c:	0023      	movs	r3, r4
 801566e:	3330      	adds	r3, #48	; 0x30
 8015670:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8015672:	0023      	movs	r3, r4
 8015674:	3331      	adds	r3, #49	; 0x31
 8015676:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8015678:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801567a:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801567c:	2280      	movs	r2, #128	; 0x80
 801567e:	2100      	movs	r1, #0
 8015680:	0052      	lsls	r2, r2, #1
 8015682:	485f      	ldr	r0, [pc, #380]	; (8015800 <SX1276SetRx+0x1ec>)
 8015684:	f7ea fdbc 	bl	8000200 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8015688:	2301      	movs	r3, #1
 801568a:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 801568c:	2e00      	cmp	r6, #0
 801568e:	d007      	beq.n	80156a0 <SX1276SetRx+0x8c>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8015690:	4d5c      	ldr	r5, [pc, #368]	; (8015804 <SX1276SetRx+0x1f0>)
 8015692:	0031      	movs	r1, r6
 8015694:	0028      	movs	r0, r5
 8015696:	f7fe fcf1 	bl	801407c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 801569a:	0028      	movs	r0, r5
 801569c:	f7fe fc50 	bl	8013f40 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80156a0:	7963      	ldrb	r3, [r4, #5]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d000      	beq.n	80156a8 <SX1276SetRx+0x94>
 80156a6:	e0a2      	b.n	80157ee <SX1276SetRx+0x1da>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80156a8:	2005      	movs	r0, #5
 80156aa:	f7ff ff7d 	bl	80155a8 <SX1276SetOpMode>
        if( rxContinuous == false )
 80156ae:	2f00      	cmp	r7, #0
 80156b0:	d107      	bne.n	80156c2 <SX1276SetRx+0xae>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80156b2:	4d55      	ldr	r5, [pc, #340]	; (8015808 <SX1276SetRx+0x1f4>)
 80156b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80156b6:	0028      	movs	r0, r5
 80156b8:	f7fe fce0 	bl	801407c <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80156bc:	0028      	movs	r0, r5
 80156be:	f7fe fc3f 	bl	8013f40 <TimerStart>
}
 80156c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 80156c4:	0023      	movs	r3, r4
 80156c6:	3355      	adds	r3, #85	; 0x55
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80156cc:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d023      	beq.n	801571a <SX1276SetRx+0x106>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80156d2:	f7ff fdc7 	bl	8015264 <SX1276Read>
 80156d6:	4338      	orrs	r0, r7
 80156d8:	b2c1      	uxtb	r1, r0
 80156da:	2033      	movs	r0, #51	; 0x33
 80156dc:	f7ff fd6f 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80156e0:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80156e2:	203b      	movs	r0, #59	; 0x3b
 80156e4:	f7ff fd6b 	bl	80151be <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80156e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80156ea:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80156ec:	2b08      	cmp	r3, #8
 80156ee:	d86d      	bhi.n	80157cc <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80156f0:	f7ff fdb8 	bl	8015264 <SX1276Read>
 80156f4:	217f      	movs	r1, #127	; 0x7f
 80156f6:	4001      	ands	r1, r0
 80156f8:	2031      	movs	r0, #49	; 0x31
 80156fa:	f7ff fd60 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 80156fe:	2030      	movs	r0, #48	; 0x30
 8015700:	2100      	movs	r1, #0
 8015702:	f7ff fd5c 	bl	80151be <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8015706:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015708:	2808      	cmp	r0, #8
 801570a:	d81a      	bhi.n	8015742 <SX1276SetRx+0x12e>
 801570c:	f7eb fa36 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8015710:	443d3610 	.word	0x443d3610
 8015714:	5959524b 	.word	0x5959524b
 8015718:	59          	.byte	0x59
 8015719:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801571a:	f7ff fda3 	bl	8015264 <SX1276Read>
 801571e:	0001      	movs	r1, r0
 8015720:	43b9      	bics	r1, r7
 8015722:	4329      	orrs	r1, r5
 8015724:	b2c9      	uxtb	r1, r1
 8015726:	2033      	movs	r0, #51	; 0x33
 8015728:	f7ff fd49 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801572c:	211d      	movs	r1, #29
 801572e:	e7d8      	b.n	80156e2 <SX1276SetRx+0xce>
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8015730:	2148      	movs	r1, #72	; 0x48
 8015732:	202f      	movs	r0, #47	; 0x2f
 8015734:	f7ff fd43 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8015738:	68a3      	ldr	r3, [r4, #8]
 801573a:	4a34      	ldr	r2, [pc, #208]	; (801580c <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801573c:	1898      	adds	r0, r3, r2
 801573e:	f7ff fd47 	bl	80151d0 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8015742:	0023      	movs	r3, r4
 8015744:	3356      	adds	r3, #86	; 0x56
 8015746:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8015748:	0023      	movs	r3, r4
 801574a:	3353      	adds	r3, #83	; 0x53
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d044      	beq.n	80157dc <SX1276SetRx+0x1c8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8015752:	211d      	movs	r1, #29
 8015754:	2011      	movs	r0, #17
 8015756:	f7ff fd32 	bl	80151be <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801575a:	2040      	movs	r0, #64	; 0x40
 801575c:	f7ff fd82 	bl	8015264 <SX1276Read>
 8015760:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8015762:	4001      	ands	r1, r0
 8015764:	2040      	movs	r0, #64	; 0x40
 8015766:	f7ff fd2a 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801576a:	2100      	movs	r1, #0
 801576c:	200f      	movs	r0, #15
 801576e:	f7ff fd26 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8015772:	2100      	movs	r1, #0
 8015774:	200d      	movs	r0, #13
 8015776:	f7ff fd22 	bl	80151be <SX1276Write>
        break;
 801577a:	e77f      	b.n	801567c <SX1276SetRx+0x68>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 801577c:	2144      	movs	r1, #68	; 0x44
 801577e:	202f      	movs	r0, #47	; 0x2f
 8015780:	f7ff fd1d 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8015784:	68a3      	ldr	r3, [r4, #8]
 8015786:	4a22      	ldr	r2, [pc, #136]	; (8015810 <SX1276SetRx+0x1fc>)
 8015788:	e7d8      	b.n	801573c <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 801578a:	2144      	movs	r1, #68	; 0x44
 801578c:	202f      	movs	r0, #47	; 0x2f
 801578e:	f7ff fd16 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8015792:	68a3      	ldr	r3, [r4, #8]
 8015794:	4a1f      	ldr	r2, [pc, #124]	; (8015814 <SX1276SetRx+0x200>)
 8015796:	e7d1      	b.n	801573c <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8015798:	2144      	movs	r1, #68	; 0x44
 801579a:	202f      	movs	r0, #47	; 0x2f
 801579c:	f7ff fd0f 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80157a0:	68a3      	ldr	r3, [r4, #8]
 80157a2:	4a1d      	ldr	r2, [pc, #116]	; (8015818 <SX1276SetRx+0x204>)
 80157a4:	e7ca      	b.n	801573c <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80157a6:	2144      	movs	r1, #68	; 0x44
 80157a8:	202f      	movs	r0, #47	; 0x2f
 80157aa:	f7ff fd08 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80157ae:	68a3      	ldr	r3, [r4, #8]
 80157b0:	4a1a      	ldr	r2, [pc, #104]	; (801581c <SX1276SetRx+0x208>)
 80157b2:	e7c3      	b.n	801573c <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80157b4:	2144      	movs	r1, #68	; 0x44
 80157b6:	202f      	movs	r0, #47	; 0x2f
 80157b8:	f7ff fd01 	bl	80151be <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80157bc:	68a3      	ldr	r3, [r4, #8]
 80157be:	4a18      	ldr	r2, [pc, #96]	; (8015820 <SX1276SetRx+0x20c>)
 80157c0:	e7bc      	b.n	801573c <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80157c2:	2140      	movs	r1, #64	; 0x40
 80157c4:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80157c6:	f7ff fcfa 	bl	80151be <SX1276Write>
 80157ca:	e7ba      	b.n	8015742 <SX1276SetRx+0x12e>
 80157cc:	f7ff fd4a 	bl	8015264 <SX1276Read>
 80157d0:	2180      	movs	r1, #128	; 0x80
 80157d2:	4249      	negs	r1, r1
 80157d4:	4301      	orrs	r1, r0
 80157d6:	b2c9      	uxtb	r1, r1
 80157d8:	2031      	movs	r0, #49	; 0x31
 80157da:	e7f4      	b.n	80157c6 <SX1276SetRx+0x1b2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80157dc:	211f      	movs	r1, #31
 80157de:	2011      	movs	r0, #17
 80157e0:	f7ff fced 	bl	80151be <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80157e4:	2040      	movs	r0, #64	; 0x40
 80157e6:	f7ff fd3d 	bl	8015264 <SX1276Read>
 80157ea:	213f      	movs	r1, #63	; 0x3f
 80157ec:	e7b9      	b.n	8015762 <SX1276SetRx+0x14e>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80157ee:	2005      	movs	r0, #5
        if( rxContinuous == true )
 80157f0:	2f00      	cmp	r7, #0
 80157f2:	d100      	bne.n	80157f6 <SX1276SetRx+0x1e2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80157f4:	2006      	movs	r0, #6
 80157f6:	f7ff fed7 	bl	80155a8 <SX1276SetOpMode>
}
 80157fa:	e762      	b.n	80156c2 <SX1276SetRx+0xae>
 80157fc:	200022d4 	.word	0x200022d4
 8015800:	2000213c 	.word	0x2000213c
 8015804:	2000233c 	.word	0x2000233c
 8015808:	200022c0 	.word	0x200022c0
 801580c:	00001e82 	.word	0x00001e82
 8015810:	000028b4 	.word	0x000028b4
 8015814:	00003d04 	.word	0x00003d04
 8015818:	0000515e 	.word	0x0000515e
 801581c:	00007a12 	.word	0x00007a12
 8015820:	0000a2c6 	.word	0x0000a2c6

08015824 <SX1276SetTx>:
{
 8015824:	b570      	push	{r4, r5, r6, lr}
    TimerSetValue( &TxTimeoutTimer, timeout );
 8015826:	4d25      	ldr	r5, [pc, #148]	; (80158bc <SX1276SetTx+0x98>)
{
 8015828:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 801582a:	0028      	movs	r0, r5
 801582c:	f7fe fc26 	bl	801407c <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8015830:	4c23      	ldr	r4, [pc, #140]	; (80158c0 <SX1276SetTx+0x9c>)
 8015832:	7963      	ldrb	r3, [r4, #5]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d00a      	beq.n	801584e <SX1276SetTx+0x2a>
 8015838:	2b01      	cmp	r3, #1
 801583a:	d023      	beq.n	8015884 <SX1276SetTx+0x60>
    SX1276.Settings.State = RF_TX_RUNNING;
 801583c:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 801583e:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8015840:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8015842:	f7fe fb7d 	bl	8013f40 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8015846:	2003      	movs	r0, #3
 8015848:	f7ff feae 	bl	80155a8 <SX1276SetOpMode>
}
 801584c:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801584e:	2040      	movs	r0, #64	; 0x40
 8015850:	f7ff fd08 	bl	8015264 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8015854:	2103      	movs	r1, #3
 8015856:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8015858:	310d      	adds	r1, #13
 801585a:	4301      	orrs	r1, r0
 801585c:	2040      	movs	r0, #64	; 0x40
 801585e:	f7ff fcae 	bl	80151be <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8015862:	2041      	movs	r0, #65	; 0x41
 8015864:	f7ff fcfe 	bl	8015264 <SX1276Read>
 8015868:	213e      	movs	r1, #62	; 0x3e
 801586a:	4001      	ands	r1, r0
 801586c:	2041      	movs	r0, #65	; 0x41
 801586e:	f7ff fca6 	bl	80151be <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8015872:	2035      	movs	r0, #53	; 0x35
 8015874:	f7ff fcf6 	bl	8015264 <SX1276Read>
 8015878:	233f      	movs	r3, #63	; 0x3f
 801587a:	4018      	ands	r0, r3
 801587c:	0023      	movs	r3, r4
 801587e:	333e      	adds	r3, #62	; 0x3e
 8015880:	7018      	strb	r0, [r3, #0]
        break;
 8015882:	e7db      	b.n	801583c <SX1276SetTx+0x18>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8015884:	0023      	movs	r3, r4
 8015886:	3353      	adds	r3, #83	; 0x53
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d00d      	beq.n	80158aa <SX1276SetTx+0x86>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801588e:	21f5      	movs	r1, #245	; 0xf5
 8015890:	2011      	movs	r0, #17
 8015892:	f7ff fc94 	bl	80151be <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8015896:	2040      	movs	r0, #64	; 0x40
 8015898:	f7ff fce4 	bl	8015264 <SX1276Read>
 801589c:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801589e:	4001      	ands	r1, r0
 80158a0:	2040      	movs	r0, #64	; 0x40
 80158a2:	4301      	orrs	r1, r0
 80158a4:	f7ff fc8b 	bl	80151be <SX1276Write>
 80158a8:	e7c8      	b.n	801583c <SX1276SetTx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80158aa:	21f7      	movs	r1, #247	; 0xf7
 80158ac:	2011      	movs	r0, #17
 80158ae:	f7ff fc86 	bl	80151be <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80158b2:	2040      	movs	r0, #64	; 0x40
 80158b4:	f7ff fcd6 	bl	8015264 <SX1276Read>
 80158b8:	213f      	movs	r1, #63	; 0x3f
 80158ba:	e7f0      	b.n	801589e <SX1276SetTx+0x7a>
 80158bc:	200022ac 	.word	0x200022ac
 80158c0:	200022d4 	.word	0x200022d4

080158c4 <SX1276StartCad>:
{
 80158c4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80158c6:	4c0b      	ldr	r4, [pc, #44]	; (80158f4 <SX1276StartCad+0x30>)
 80158c8:	7963      	ldrb	r3, [r4, #5]
 80158ca:	2b01      	cmp	r3, #1
 80158cc:	d110      	bne.n	80158f0 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80158ce:	21fa      	movs	r1, #250	; 0xfa
 80158d0:	2011      	movs	r0, #17
 80158d2:	f7ff fc74 	bl	80151be <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80158d6:	2040      	movs	r0, #64	; 0x40
 80158d8:	f7ff fcc4 	bl	8015264 <SX1276Read>
 80158dc:	2503      	movs	r5, #3
 80158de:	43a8      	bics	r0, r5
 80158e0:	b2c1      	uxtb	r1, r0
 80158e2:	2040      	movs	r0, #64	; 0x40
 80158e4:	f7ff fc6b 	bl	80151be <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80158e8:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 80158ea:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80158ec:	f7ff fe5c 	bl	80155a8 <SX1276SetOpMode>
}
 80158f0:	bd70      	pop	{r4, r5, r6, pc}
 80158f2:	46c0      	nop			; (mov r8, r8)
 80158f4:	200022d4 	.word	0x200022d4

080158f8 <SX1276SetModem>:
{
 80158f8:	b510      	push	{r4, lr}
 80158fa:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80158fc:	2001      	movs	r0, #1
 80158fe:	f7ff fcb1 	bl	8015264 <SX1276Read>
 8015902:	4b19      	ldr	r3, [pc, #100]	; (8015968 <SX1276SetModem+0x70>)
 8015904:	0602      	lsls	r2, r0, #24
 8015906:	d51a      	bpl.n	801593e <SX1276SetModem+0x46>
        SX1276.Settings.Modem = MODEM_LORA;
 8015908:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 801590a:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 801590c:	795a      	ldrb	r2, [r3, #5]
 801590e:	42a2      	cmp	r2, r4
 8015910:	d014      	beq.n	801593c <SX1276SetModem+0x44>
    SX1276.Settings.Modem = modem;
 8015912:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8015914:	2c01      	cmp	r4, #1
 8015916:	d014      	beq.n	8015942 <SX1276SetModem+0x4a>
        SX1276SetSleep( );
 8015918:	f7ff fe32 	bl	8015580 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801591c:	2001      	movs	r0, #1
 801591e:	f7ff fca1 	bl	8015264 <SX1276Read>
 8015922:	217f      	movs	r1, #127	; 0x7f
 8015924:	4001      	ands	r1, r0
 8015926:	2001      	movs	r0, #1
 8015928:	f7ff fc49 	bl	80151be <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801592c:	2100      	movs	r1, #0
 801592e:	2040      	movs	r0, #64	; 0x40
 8015930:	f7ff fc45 	bl	80151be <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8015934:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8015936:	2041      	movs	r0, #65	; 0x41
 8015938:	f7ff fc41 	bl	80151be <SX1276Write>
}
 801593c:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 801593e:	2200      	movs	r2, #0
 8015940:	e7e3      	b.n	801590a <SX1276SetModem+0x12>
        SX1276SetSleep( );
 8015942:	f7ff fe1d 	bl	8015580 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8015946:	0020      	movs	r0, r4
 8015948:	f7ff fc8c 	bl	8015264 <SX1276Read>
 801594c:	2180      	movs	r1, #128	; 0x80
 801594e:	4249      	negs	r1, r1
 8015950:	4301      	orrs	r1, r0
 8015952:	b2c9      	uxtb	r1, r1
 8015954:	0020      	movs	r0, r4
 8015956:	f7ff fc32 	bl	80151be <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801595a:	2100      	movs	r1, #0
 801595c:	2040      	movs	r0, #64	; 0x40
 801595e:	f7ff fc2e 	bl	80151be <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8015962:	2100      	movs	r1, #0
 8015964:	e7e7      	b.n	8015936 <SX1276SetModem+0x3e>
 8015966:	46c0      	nop			; (mov r8, r8)
 8015968:	200022d4 	.word	0x200022d4

0801596c <SX1276Init>:
{
 801596c:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 801596e:	4b1b      	ldr	r3, [pc, #108]	; (80159dc <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8015970:	4c1b      	ldr	r4, [pc, #108]	; (80159e0 <SX1276Init+0x74>)
    RadioEvents = events;
 8015972:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8015974:	0021      	movs	r1, r4
 8015976:	481b      	ldr	r0, [pc, #108]	; (80159e4 <SX1276Init+0x78>)
 8015978:	f7fe fada 	bl	8013f30 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801597c:	0021      	movs	r1, r4
 801597e:	481a      	ldr	r0, [pc, #104]	; (80159e8 <SX1276Init+0x7c>)
 8015980:	f7fe fad6 	bl	8013f30 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8015984:	0021      	movs	r1, r4
 8015986:	4819      	ldr	r0, [pc, #100]	; (80159ec <SX1276Init+0x80>)
 8015988:	f7fe fad2 	bl	8013f30 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 801598c:	4e18      	ldr	r6, [pc, #96]	; (80159f0 <SX1276Init+0x84>)
 801598e:	2001      	movs	r0, #1
 8015990:	6833      	ldr	r3, [r6, #0]
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8015992:	2400      	movs	r4, #0
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4798      	blx	r3
    SX1276Reset( );
 8015998:	f7ff fbca 	bl	8015130 <SX1276Reset>
    RxChainCalibration( );
 801599c:	f7ff fc6c 	bl	8015278 <RxChainCalibration>
 80159a0:	2000      	movs	r0, #0
 80159a2:	f7ff fdd3 	bl	801554c <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80159a6:	6833      	ldr	r3, [r6, #0]
 80159a8:	4812      	ldr	r0, [pc, #72]	; (80159f4 <SX1276Init+0x88>)
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	4798      	blx	r3
        SX1276SetModem( RadioRegsInit[i].Modem );
 80159ae:	4d12      	ldr	r5, [pc, #72]	; (80159f8 <SX1276Init+0x8c>)
 80159b0:	5d60      	ldrb	r0, [r4, r5]
 80159b2:	192d      	adds	r5, r5, r4
 80159b4:	f7ff ffa0 	bl	80158f8 <SX1276SetModem>
 80159b8:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80159ba:	78a9      	ldrb	r1, [r5, #2]
 80159bc:	7868      	ldrb	r0, [r5, #1]
 80159be:	f7ff fbfe 	bl	80151be <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80159c2:	2c30      	cmp	r4, #48	; 0x30
 80159c4:	d1f3      	bne.n	80159ae <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 80159c6:	2000      	movs	r0, #0
 80159c8:	f7ff ff96 	bl	80158f8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 80159cc:	2200      	movs	r2, #0
 80159ce:	4b0b      	ldr	r3, [pc, #44]	; (80159fc <SX1276Init+0x90>)
 80159d0:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80159d2:	6833      	ldr	r3, [r6, #0]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	4798      	blx	r3
 80159d8:	3002      	adds	r0, #2
}
 80159da:	bd70      	pop	{r4, r5, r6, pc}
 80159dc:	20002138 	.word	0x20002138
 80159e0:	08016665 	.word	0x08016665
 80159e4:	200022ac 	.word	0x200022ac
 80159e8:	2000233c 	.word	0x2000233c
 80159ec:	200022c0 	.word	0x200022c0
 80159f0:	20002134 	.word	0x20002134
 80159f4:	20000ad4 	.word	0x20000ad4
 80159f8:	08018a90 	.word	0x08018a90
 80159fc:	200022d4 	.word	0x200022d4

08015a00 <SX1276IsChannelFree>:
{
 8015a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a02:	000e      	movs	r6, r1
 8015a04:	0017      	movs	r7, r2
 8015a06:	001d      	movs	r5, r3
 8015a08:	0004      	movs	r4, r0
    SX1276SetModem( modem );
 8015a0a:	f7ff ff75 	bl	80158f8 <SX1276SetModem>
    SX1276SetChannel( freq );
 8015a0e:	0030      	movs	r0, r6
 8015a10:	f7ff fbde 	bl	80151d0 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015a14:	2005      	movs	r0, #5
 8015a16:	f7ff fdc7 	bl	80155a8 <SX1276SetOpMode>
    DelayMs( 1 );
 8015a1a:	2001      	movs	r0, #1
 8015a1c:	f7f6 fa10 	bl	800be40 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8015a20:	f7fe fb3d 	bl	801409e <TimerGetCurrentTime>
 8015a24:	0006      	movs	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015a26:	0030      	movs	r0, r6
 8015a28:	f7fe fb3f 	bl	80140aa <TimerGetElapsedTime>
 8015a2c:	42a8      	cmp	r0, r5
 8015a2e:	d304      	bcc.n	8015a3a <SX1276IsChannelFree+0x3a>
    bool status = true;
 8015a30:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8015a32:	f7ff fda5 	bl	8015580 <SX1276SetSleep>
}
 8015a36:	0020      	movs	r0, r4
 8015a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8015a3a:	0020      	movs	r0, r4
 8015a3c:	f7ff fd64 	bl	8015508 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8015a40:	42b8      	cmp	r0, r7
 8015a42:	ddf0      	ble.n	8015a26 <SX1276IsChannelFree+0x26>
            status = false;
 8015a44:	2400      	movs	r4, #0
 8015a46:	e7f4      	b.n	8015a32 <SX1276IsChannelFree+0x32>

08015a48 <SX1276Random>:
{
 8015a48:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015a4a:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	f7ff ff53 	bl	80158f8 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8015a52:	21ff      	movs	r1, #255	; 0xff
 8015a54:	2011      	movs	r0, #17
 8015a56:	f7ff fbb2 	bl	80151be <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015a5a:	2005      	movs	r0, #5
 8015a5c:	f7ff fda4 	bl	80155a8 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8015a60:	0025      	movs	r5, r4
        DelayMs( 1 );
 8015a62:	2601      	movs	r6, #1
 8015a64:	0030      	movs	r0, r6
 8015a66:	f7f6 f9eb 	bl	800be40 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8015a6a:	202c      	movs	r0, #44	; 0x2c
 8015a6c:	f7ff fbfa 	bl	8015264 <SX1276Read>
 8015a70:	4030      	ands	r0, r6
 8015a72:	40a0      	lsls	r0, r4
 8015a74:	3401      	adds	r4, #1
 8015a76:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8015a78:	2c20      	cmp	r4, #32
 8015a7a:	d1f3      	bne.n	8015a64 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8015a7c:	f7ff fd80 	bl	8015580 <SX1276SetSleep>
}
 8015a80:	0028      	movs	r0, r5
 8015a82:	bd70      	pop	{r4, r5, r6, pc}

08015a84 <SX1276SetRxConfig>:
{
 8015a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a86:	b08d      	sub	sp, #52	; 0x34
 8015a88:	9306      	str	r3, [sp, #24]
 8015a8a:	ab12      	add	r3, sp, #72	; 0x48
 8015a8c:	0016      	movs	r6, r2
 8015a8e:	cb04      	ldmia	r3!, {r2}
 8015a90:	0004      	movs	r4, r0
 8015a92:	881b      	ldrh	r3, [r3, #0]
 8015a94:	9208      	str	r2, [sp, #32]
 8015a96:	9301      	str	r3, [sp, #4]
 8015a98:	ab14      	add	r3, sp, #80	; 0x50
 8015a9a:	881b      	ldrh	r3, [r3, #0]
 8015a9c:	aa0c      	add	r2, sp, #48	; 0x30
 8015a9e:	9305      	str	r3, [sp, #20]
 8015aa0:	ab15      	add	r3, sp, #84	; 0x54
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	000d      	movs	r5, r1
 8015aa6:	9302      	str	r3, [sp, #8]
 8015aa8:	ab16      	add	r3, sp, #88	; 0x58
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	9303      	str	r3, [sp, #12]
 8015aae:	ab17      	add	r3, sp, #92	; 0x5c
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	ab18      	add	r3, sp, #96	; 0x60
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8015aba:	ab19      	add	r3, sp, #100	; 0x64
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ac0:	2319      	movs	r3, #25
 8015ac2:	189b      	adds	r3, r3, r2
 8015ac4:	7fdf      	ldrb	r7, [r3, #31]
 8015ac6:	231d      	movs	r3, #29
 8015ac8:	189b      	adds	r3, r3, r2
 8015aca:	7fdb      	ldrb	r3, [r3, #31]
 8015acc:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8015ace:	f7ff ff13 	bl	80158f8 <SX1276SetModem>
    switch( modem )
 8015ad2:	2c00      	cmp	r4, #0
 8015ad4:	d004      	beq.n	8015ae0 <SX1276SetRxConfig+0x5c>
 8015ad6:	2c01      	cmp	r4, #1
 8015ad8:	d100      	bne.n	8015adc <SX1276SetRxConfig+0x58>
 8015ada:	e08b      	b.n	8015bf4 <SX1276SetRxConfig+0x170>
}
 8015adc:	b00d      	add	sp, #52	; 0x34
 8015ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015ae0:	466a      	mov	r2, sp
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8015ae2:	4cb2      	ldr	r4, [pc, #712]	; (8015dac <SX1276SetRxConfig+0x328>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8015ae4:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015ae6:	7a12      	ldrb	r2, [r2, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8015ae8:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015aea:	1ce3      	adds	r3, r4, #3
 8015aec:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8015aee:	466a      	mov	r2, sp
 8015af0:	7b12      	ldrb	r2, [r2, #12]
 8015af2:	1d23      	adds	r3, r4, #4
 8015af4:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8015af6:	466a      	mov	r2, sp
 8015af8:	7c12      	ldrb	r2, [r2, #16]
 8015afa:	1d63      	adds	r3, r4, #5
 8015afc:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8015afe:	2124      	movs	r1, #36	; 0x24
 8015b00:	466a      	mov	r2, sp
 8015b02:	1852      	adds	r2, r2, r1
 8015b04:	7812      	ldrb	r2, [r2, #0]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8015b06:	1da3      	adds	r3, r4, #6
 8015b08:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8015b0a:	1de3      	adds	r3, r4, #7
 8015b0c:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8015b0e:	466b      	mov	r3, sp
 8015b10:	889b      	ldrh	r3, [r3, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8015b12:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8015b14:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8015b16:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8015b18:	0030      	movs	r0, r6
 8015b1a:	f7ed fa5b 	bl	8002fd4 <__aeabi_ui2d>
 8015b1e:	0002      	movs	r2, r0
 8015b20:	000b      	movs	r3, r1
 8015b22:	0006      	movs	r6, r0
 8015b24:	000f      	movs	r7, r1
 8015b26:	2000      	movs	r0, #0
 8015b28:	49a1      	ldr	r1, [pc, #644]	; (8015db0 <SX1276SetRxConfig+0x32c>)
 8015b2a:	f7ec f813 	bl	8001b54 <__aeabi_ddiv>
 8015b2e:	2200      	movs	r2, #0
 8015b30:	4ba0      	ldr	r3, [pc, #640]	; (8015db4 <SX1276SetRxConfig+0x330>)
 8015b32:	f7ec fc43 	bl	80023bc <__aeabi_dmul>
 8015b36:	9006      	str	r0, [sp, #24]
 8015b38:	9107      	str	r1, [sp, #28]
 8015b3a:	9805      	ldr	r0, [sp, #20]
 8015b3c:	f7ed fa08 	bl	8002f50 <__aeabi_i2d>
 8015b40:	0002      	movs	r2, r0
 8015b42:	000b      	movs	r3, r1
 8015b44:	9806      	ldr	r0, [sp, #24]
 8015b46:	9907      	ldr	r1, [sp, #28]
 8015b48:	f7ec fc38 	bl	80023bc <__aeabi_dmul>
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	4b9a      	ldr	r3, [pc, #616]	; (8015db8 <SX1276SetRxConfig+0x334>)
 8015b50:	f7ec fc34 	bl	80023bc <__aeabi_dmul>
 8015b54:	f7eb fa2e 	bl	8000fb4 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8015b58:	0032      	movs	r2, r6
 8015b5a:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8015b5c:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8015b5e:	4997      	ldr	r1, [pc, #604]	; (8015dbc <SX1276SetRxConfig+0x338>)
 8015b60:	2000      	movs	r0, #0
 8015b62:	f7eb fff7 	bl	8001b54 <__aeabi_ddiv>
 8015b66:	f7eb fa25 	bl	8000fb4 <__aeabi_d2uiz>
 8015b6a:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8015b6c:	0a21      	lsrs	r1, r4, #8
 8015b6e:	2002      	movs	r0, #2
 8015b70:	f7ff fb25 	bl	80151be <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8015b74:	b2e1      	uxtb	r1, r4
 8015b76:	2003      	movs	r0, #3
 8015b78:	f7ff fb21 	bl	80151be <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8015b7c:	0028      	movs	r0, r5
 8015b7e:	f7ff faa9 	bl	80150d4 <GetFskBandwidthRegValue>
 8015b82:	0001      	movs	r1, r0
 8015b84:	2012      	movs	r0, #18
 8015b86:	f7ff fb1a 	bl	80151be <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8015b8a:	9808      	ldr	r0, [sp, #32]
 8015b8c:	f7ff faa2 	bl	80150d4 <GetFskBandwidthRegValue>
 8015b90:	0001      	movs	r1, r0
 8015b92:	2013      	movs	r0, #19
 8015b94:	f7ff fb13 	bl	80151be <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8015b98:	9b01      	ldr	r3, [sp, #4]
 8015b9a:	2025      	movs	r0, #37	; 0x25
 8015b9c:	0a19      	lsrs	r1, r3, #8
 8015b9e:	f7ff fb0e 	bl	80151be <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8015ba2:	466b      	mov	r3, sp
 8015ba4:	2026      	movs	r0, #38	; 0x26
 8015ba6:	7919      	ldrb	r1, [r3, #4]
 8015ba8:	f7ff fb09 	bl	80151be <SX1276Write>
            if( fixLen == 1 )
 8015bac:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8015bae:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d100      	bne.n	8015bb6 <SX1276SetRxConfig+0x132>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8015bb4:	21ff      	movs	r1, #255	; 0xff
 8015bb6:	2032      	movs	r0, #50	; 0x32
 8015bb8:	f7ff fb01 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8015bbc:	2030      	movs	r0, #48	; 0x30
 8015bbe:	f7ff fb51 	bl	8015264 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8015bc2:	216f      	movs	r1, #111	; 0x6f
 8015bc4:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	9b02      	ldr	r3, [sp, #8]
 8015bca:	428b      	cmp	r3, r1
 8015bcc:	d100      	bne.n	8015bd0 <SX1276SetRxConfig+0x14c>
 8015bce:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8015bd0:	9b04      	ldr	r3, [sp, #16]
 8015bd2:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8015bd4:	4318      	orrs	r0, r3
 8015bd6:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8015bd8:	b2c9      	uxtb	r1, r1
 8015bda:	2030      	movs	r0, #48	; 0x30
 8015bdc:	f7ff faef 	bl	80151be <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8015be0:	2031      	movs	r0, #49	; 0x31
 8015be2:	f7ff fb3f 	bl	8015264 <SX1276Read>
 8015be6:	2140      	movs	r1, #64	; 0x40
 8015be8:	4301      	orrs	r1, r0
 8015bea:	2031      	movs	r0, #49	; 0x31
 8015bec:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015bee:	f7ff fae6 	bl	80151be <SX1276Write>
}
 8015bf2:	e773      	b.n	8015adc <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 8015bf4:	2d02      	cmp	r5, #2
 8015bf6:	d900      	bls.n	8015bfa <SX1276SetRxConfig+0x176>
 8015bf8:	e7fe      	b.n	8015bf8 <SX1276SetRxConfig+0x174>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8015bfa:	4b6c      	ldr	r3, [pc, #432]	; (8015dac <SX1276SetRxConfig+0x328>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8015bfc:	4669      	mov	r1, sp
 8015bfe:	001a      	movs	r2, r3
 8015c00:	7e09      	ldrb	r1, [r1, #24]
 8015c02:	324d      	adds	r2, #77	; 0x4d
 8015c04:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8015c06:	4669      	mov	r1, sp
 8015c08:	001a      	movs	r2, r3
 8015c0a:	8889      	ldrh	r1, [r1, #4]
 8015c0c:	324e      	adds	r2, #78	; 0x4e
 8015c0e:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8015c10:	4669      	mov	r1, sp
 8015c12:	001a      	movs	r2, r3
 8015c14:	7a09      	ldrb	r1, [r1, #8]
 8015c16:	3250      	adds	r2, #80	; 0x50
 8015c18:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8015c1a:	4669      	mov	r1, sp
 8015c1c:	001a      	movs	r2, r3
 8015c1e:	7b09      	ldrb	r1, [r1, #12]
 8015c20:	3251      	adds	r2, #81	; 0x51
 8015c22:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8015c24:	4669      	mov	r1, sp
 8015c26:	001a      	movs	r2, r3
 8015c28:	7c09      	ldrb	r1, [r1, #16]
 8015c2a:	3252      	adds	r2, #82	; 0x52
 8015c2c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8015c2e:	2028      	movs	r0, #40	; 0x28
 8015c30:	4669      	mov	r1, sp
 8015c32:	001a      	movs	r2, r3
 8015c34:	1809      	adds	r1, r1, r0
 8015c36:	7809      	ldrb	r1, [r1, #0]
 8015c38:	3253      	adds	r2, #83	; 0x53
 8015c3a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8015c3c:	4669      	mov	r1, sp
 8015c3e:	001a      	movs	r2, r3
 8015c40:	3004      	adds	r0, #4
 8015c42:	1809      	adds	r1, r1, r0
 8015c44:	7809      	ldrb	r1, [r1, #0]
 8015c46:	3254      	adds	r2, #84	; 0x54
 8015c48:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8015c4a:	001a      	movs	r2, r3
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8015c4c:	4669      	mov	r1, sp
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8015c4e:	3255      	adds	r2, #85	; 0x55
 8015c50:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8015c52:	001a      	movs	r2, r3
 8015c54:	3808      	subs	r0, #8
 8015c56:	1809      	adds	r1, r1, r0
 8015c58:	7809      	ldrb	r1, [r1, #0]
            bandwidth += 7;
 8015c5a:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8015c5c:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8015c5e:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8015c60:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8015c62:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8015c64:	2e0c      	cmp	r6, #12
 8015c66:	d900      	bls.n	8015c6a <SX1276SetRxConfig+0x1e6>
 8015c68:	e09c      	b.n	8015da4 <SX1276SetRxConfig+0x320>
            else if( datarate < 6 )
 8015c6a:	2e05      	cmp	r6, #5
 8015c6c:	d800      	bhi.n	8015c70 <SX1276SetRxConfig+0x1ec>
 8015c6e:	e085      	b.n	8015d7c <SX1276SetRxConfig+0x2f8>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015c70:	2c07      	cmp	r4, #7
 8015c72:	d17c      	bne.n	8015d6e <SX1276SetRxConfig+0x2ea>
 8015c74:	0032      	movs	r2, r6
 8015c76:	3a0b      	subs	r2, #11
 8015c78:	2a01      	cmp	r2, #1
 8015c7a:	d87c      	bhi.n	8015d76 <SX1276SetRxConfig+0x2f2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8015c80:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8015c82:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8015c84:	f7ff faee 	bl	8015264 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8015c88:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8015c8a:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8015c8c:	0059      	lsls	r1, r3, #1
 8015c8e:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8015c90:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8015c92:	4319      	orrs	r1, r3
 8015c94:	0123      	lsls	r3, r4, #4
 8015c96:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8015c98:	b2c9      	uxtb	r1, r1
 8015c9a:	f7ff fa90 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8015c9e:	201e      	movs	r0, #30
 8015ca0:	f7ff fae0 	bl	8015264 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8015ca4:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8015ca6:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8015ca8:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8015caa:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8015cac:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8015cae:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8015cb0:	4319      	orrs	r1, r3
 8015cb2:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8015cb4:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8015cb6:	4301      	orrs	r1, r0
 8015cb8:	b2c9      	uxtb	r1, r1
 8015cba:	201e      	movs	r0, #30
 8015cbc:	f7ff fa7f 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8015cc0:	2026      	movs	r0, #38	; 0x26
 8015cc2:	f7ff facf 	bl	8015264 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8015cc6:	4d39      	ldr	r5, [pc, #228]	; (8015dac <SX1276SetRxConfig+0x328>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8015cc8:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8015cca:	002b      	movs	r3, r5
 8015ccc:	334c      	adds	r3, #76	; 0x4c
 8015cce:	7819      	ldrb	r1, [r3, #0]
 8015cd0:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8015cd2:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8015cd4:	b2c9      	uxtb	r1, r1
 8015cd6:	2026      	movs	r0, #38	; 0x26
 8015cd8:	f7ff fa71 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8015cdc:	466b      	mov	r3, sp
 8015cde:	201f      	movs	r0, #31
 8015ce0:	7d19      	ldrb	r1, [r3, #20]
 8015ce2:	f7ff fa6c 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	2020      	movs	r0, #32
 8015cea:	0a19      	lsrs	r1, r3, #8
 8015cec:	f7ff fa67 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8015cf0:	466b      	mov	r3, sp
 8015cf2:	2021      	movs	r0, #33	; 0x21
 8015cf4:	7919      	ldrb	r1, [r3, #4]
 8015cf6:	f7ff fa62 	bl	80151be <SX1276Write>
            if( fixLen == 1 )
 8015cfa:	9b02      	ldr	r3, [sp, #8]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d003      	beq.n	8015d08 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8015d00:	9903      	ldr	r1, [sp, #12]
 8015d02:	2022      	movs	r0, #34	; 0x22
 8015d04:	f7ff fa5b 	bl	80151be <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8015d08:	002b      	movs	r3, r5
 8015d0a:	3353      	adds	r3, #83	; 0x53
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00f      	beq.n	8015d32 <SX1276SetRxConfig+0x2ae>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8015d12:	2044      	movs	r0, #68	; 0x44
 8015d14:	f7ff faa6 	bl	8015264 <SX1276Read>
 8015d18:	2180      	movs	r1, #128	; 0x80
 8015d1a:	4249      	negs	r1, r1
 8015d1c:	4301      	orrs	r1, r0
 8015d1e:	b2c9      	uxtb	r1, r1
 8015d20:	2044      	movs	r0, #68	; 0x44
 8015d22:	f7ff fa4c 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8015d26:	002b      	movs	r3, r5
 8015d28:	3354      	adds	r3, #84	; 0x54
 8015d2a:	7819      	ldrb	r1, [r3, #0]
 8015d2c:	2024      	movs	r0, #36	; 0x24
 8015d2e:	f7ff fa46 	bl	80151be <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8015d32:	2c09      	cmp	r4, #9
 8015d34:	d128      	bne.n	8015d88 <SX1276SetRxConfig+0x304>
 8015d36:	4b22      	ldr	r3, [pc, #136]	; (8015dc0 <SX1276SetRxConfig+0x33c>)
 8015d38:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_TEST36, 0x02 );
 8015d3a:	2102      	movs	r1, #2
 8015d3c:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d91e      	bls.n	8015d80 <SX1276SetRxConfig+0x2fc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8015d42:	f7ff fa3c 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8015d46:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8015d48:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_TEST36, 0x03 );
 8015d4a:	f7ff fa38 	bl	80151be <SX1276Write>
 8015d4e:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015d50:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8015d52:	2e06      	cmp	r6, #6
 8015d54:	d11b      	bne.n	8015d8e <SX1276SetRxConfig+0x30a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015d56:	f7ff fa85 	bl	8015264 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015d5a:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015d5c:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015d5e:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8015d60:	b2c9      	uxtb	r1, r1
 8015d62:	2031      	movs	r0, #49	; 0x31
 8015d64:	f7ff fa2b 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015d68:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015d6a:	2037      	movs	r0, #55	; 0x37
 8015d6c:	e73f      	b.n	8015bee <SX1276SetRxConfig+0x16a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015d6e:	2c08      	cmp	r4, #8
 8015d70:	d101      	bne.n	8015d76 <SX1276SetRxConfig+0x2f2>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8015d72:	2e0c      	cmp	r6, #12
 8015d74:	d082      	beq.n	8015c7c <SX1276SetRxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8015d76:	334c      	adds	r3, #76	; 0x4c
 8015d78:	2200      	movs	r2, #0
 8015d7a:	e781      	b.n	8015c80 <SX1276SetRxConfig+0x1fc>
                datarate = 6;
 8015d7c:	2606      	movs	r6, #6
 8015d7e:	e7fa      	b.n	8015d76 <SX1276SetRxConfig+0x2f2>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8015d80:	f7ff fa1d 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8015d84:	217f      	movs	r1, #127	; 0x7f
 8015d86:	e7df      	b.n	8015d48 <SX1276SetRxConfig+0x2c4>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8015d88:	2103      	movs	r1, #3
 8015d8a:	2036      	movs	r0, #54	; 0x36
 8015d8c:	e7dd      	b.n	8015d4a <SX1276SetRxConfig+0x2c6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015d8e:	f7ff fa69 	bl	8015264 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015d92:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015d94:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015d96:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8015d98:	b2c9      	uxtb	r1, r1
 8015d9a:	2031      	movs	r0, #49	; 0x31
 8015d9c:	f7ff fa0f 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015da0:	210a      	movs	r1, #10
 8015da2:	e7e2      	b.n	8015d6a <SX1276SetRxConfig+0x2e6>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015da4:	260c      	movs	r6, #12
 8015da6:	2d02      	cmp	r5, #2
 8015da8:	d0e5      	beq.n	8015d76 <SX1276SetRxConfig+0x2f2>
 8015daa:	e767      	b.n	8015c7c <SX1276SetRxConfig+0x1f8>
 8015dac:	200022d4 	.word	0x200022d4
 8015db0:	3ff00000 	.word	0x3ff00000
 8015db4:	40200000 	.word	0x40200000
 8015db8:	408f4000 	.word	0x408f4000
 8015dbc:	417e8480 	.word	0x417e8480
 8015dc0:	1f4add40 	.word	0x1f4add40

08015dc4 <SX1276SetTxConfig>:
{
 8015dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dc6:	000e      	movs	r6, r1
 8015dc8:	b089      	sub	sp, #36	; 0x24
 8015dca:	9300      	str	r3, [sp, #0]
 8015dcc:	ab0e      	add	r3, sp, #56	; 0x38
 8015dce:	cb10      	ldmia	r3!, {r4}
 8015dd0:	0005      	movs	r5, r0
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	9203      	str	r2, [sp, #12]
 8015dd6:	9304      	str	r3, [sp, #16]
 8015dd8:	ab10      	add	r3, sp, #64	; 0x40
 8015dda:	881f      	ldrh	r7, [r3, #0]
 8015ddc:	ab11      	add	r3, sp, #68	; 0x44
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	9301      	str	r3, [sp, #4]
 8015de2:	ab12      	add	r3, sp, #72	; 0x48
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	9302      	str	r3, [sp, #8]
 8015de8:	ab13      	add	r3, sp, #76	; 0x4c
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	9305      	str	r3, [sp, #20]
 8015dee:	ab14      	add	r3, sp, #80	; 0x50
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	9307      	str	r3, [sp, #28]
 8015df4:	ab15      	add	r3, sp, #84	; 0x54
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8015dfa:	f7ff fd7d 	bl	80158f8 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8015dfe:	4b8a      	ldr	r3, [pc, #552]	; (8016028 <SX1276SetTxConfig+0x264>)
 8015e00:	0030      	movs	r0, r6
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	68db      	ldr	r3, [r3, #12]
 8015e06:	4798      	blx	r3
    switch( modem )
 8015e08:	2d00      	cmp	r5, #0
 8015e0a:	d003      	beq.n	8015e14 <SX1276SetTxConfig+0x50>
 8015e0c:	2d01      	cmp	r5, #1
 8015e0e:	d061      	beq.n	8015ed4 <SX1276SetTxConfig+0x110>
}
 8015e10:	b009      	add	sp, #36	; 0x24
 8015e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015e14:	4669      	mov	r1, sp
            SX1276.Settings.Fsk.Power = power;
 8015e16:	4b85      	ldr	r3, [pc, #532]	; (801602c <SX1276SetTxConfig+0x268>)
            SX1276.Settings.Fsk.Fdev = fdev;
 8015e18:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015e1a:	7909      	ldrb	r1, [r1, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 8015e1c:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8015e1e:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 8015e20:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8015e22:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015e24:	1cda      	adds	r2, r3, #3
 8015e26:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8015e28:	4669      	mov	r1, sp
 8015e2a:	7a09      	ldrb	r1, [r1, #8]
 8015e2c:	1d5a      	adds	r2, r3, #5
 8015e2e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8015e30:	4669      	mov	r1, sp
 8015e32:	7e09      	ldrb	r1, [r1, #24]
 8015e34:	1d9a      	adds	r2, r3, #6
 8015e36:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8015e38:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 8015e3a:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8015e3c:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8015e3e:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8015e40:	9803      	ldr	r0, [sp, #12]
 8015e42:	f7ed f8c7 	bl	8002fd4 <__aeabi_ui2d>
 8015e46:	2200      	movs	r2, #0
 8015e48:	4b79      	ldr	r3, [pc, #484]	; (8016030 <SX1276SetTxConfig+0x26c>)
 8015e4a:	f7eb fe83 	bl	8001b54 <__aeabi_ddiv>
 8015e4e:	f7eb f8b1 	bl	8000fb4 <__aeabi_d2uiz>
 8015e52:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8015e54:	0a31      	lsrs	r1, r6, #8
 8015e56:	2004      	movs	r0, #4
 8015e58:	f7ff f9b1 	bl	80151be <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8015e5c:	b2f1      	uxtb	r1, r6
 8015e5e:	2005      	movs	r0, #5
 8015e60:	f7ff f9ad 	bl	80151be <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8015e64:	0020      	movs	r0, r4
 8015e66:	f7ed f8b5 	bl	8002fd4 <__aeabi_ui2d>
 8015e6a:	000b      	movs	r3, r1
 8015e6c:	0002      	movs	r2, r0
 8015e6e:	4971      	ldr	r1, [pc, #452]	; (8016034 <SX1276SetTxConfig+0x270>)
 8015e70:	2000      	movs	r0, #0
 8015e72:	f7eb fe6f 	bl	8001b54 <__aeabi_ddiv>
 8015e76:	f7eb f89d 	bl	8000fb4 <__aeabi_d2uiz>
 8015e7a:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8015e7c:	0a21      	lsrs	r1, r4, #8
 8015e7e:	2002      	movs	r0, #2
 8015e80:	f7ff f99d 	bl	80151be <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8015e84:	b2e1      	uxtb	r1, r4
 8015e86:	2003      	movs	r0, #3
 8015e88:	f7ff f999 	bl	80151be <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8015e8c:	0a39      	lsrs	r1, r7, #8
 8015e8e:	2025      	movs	r0, #37	; 0x25
 8015e90:	f7ff f995 	bl	80151be <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8015e94:	b2f9      	uxtb	r1, r7
 8015e96:	2026      	movs	r0, #38	; 0x26
 8015e98:	f7ff f991 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8015e9c:	2030      	movs	r0, #48	; 0x30
 8015e9e:	f7ff f9e1 	bl	8015264 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8015ea2:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8015ea4:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 8015ea6:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d101      	bne.n	8015eb0 <SX1276SetTxConfig+0xec>
 8015eac:	2580      	movs	r5, #128	; 0x80
 8015eae:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8015eb0:	9b02      	ldr	r3, [sp, #8]
 8015eb2:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8015eb4:	4301      	orrs	r1, r0
 8015eb6:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8015eb8:	b2c9      	uxtb	r1, r1
 8015eba:	2030      	movs	r0, #48	; 0x30
 8015ebc:	f7ff f97f 	bl	80151be <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8015ec0:	2031      	movs	r0, #49	; 0x31
 8015ec2:	f7ff f9cf 	bl	8015264 <SX1276Read>
 8015ec6:	2140      	movs	r1, #64	; 0x40
 8015ec8:	4301      	orrs	r1, r0
 8015eca:	2031      	movs	r0, #49	; 0x31
 8015ecc:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015ece:	f7ff f976 	bl	80151be <SX1276Write>
}
 8015ed2:	e79d      	b.n	8015e10 <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 8015ed4:	4d55      	ldr	r5, [pc, #340]	; (801602c <SX1276SetTxConfig+0x268>)
 8015ed6:	002b      	movs	r3, r5
 8015ed8:	3340      	adds	r3, #64	; 0x40
 8015eda:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 8015edc:	9b00      	ldr	r3, [sp, #0]
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d900      	bls.n	8015ee4 <SX1276SetTxConfig+0x120>
 8015ee2:	e7fe      	b.n	8015ee2 <SX1276SetTxConfig+0x11e>
            bandwidth += 7;
 8015ee4:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 8015ee6:	466a      	mov	r2, sp
            bandwidth += 7;
 8015ee8:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8015eea:	002b      	movs	r3, r5
 8015eec:	7c12      	ldrb	r2, [r2, #16]
 8015eee:	334d      	adds	r3, #77	; 0x4d
 8015ef0:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8015ef2:	002b      	movs	r3, r5
            SX1276.Settings.LoRa.FixLen = fixLen;
 8015ef4:	466a      	mov	r2, sp
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8015ef6:	334e      	adds	r3, #78	; 0x4e
 8015ef8:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8015efa:	002b      	movs	r3, r5
 8015efc:	7912      	ldrb	r2, [r2, #4]
 8015efe:	3350      	adds	r3, #80	; 0x50
 8015f00:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8015f02:	466a      	mov	r2, sp
 8015f04:	002b      	movs	r3, r5
 8015f06:	7d12      	ldrb	r2, [r2, #20]
 8015f08:	3353      	adds	r3, #83	; 0x53
 8015f0a:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8015f0c:	466a      	mov	r2, sp
 8015f0e:	002b      	movs	r3, r5
 8015f10:	7f12      	ldrb	r2, [r2, #28]
 8015f12:	3354      	adds	r3, #84	; 0x54
 8015f14:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8015f16:	466a      	mov	r2, sp
 8015f18:	002b      	movs	r3, r5
 8015f1a:	7a12      	ldrb	r2, [r2, #8]
 8015f1c:	3352      	adds	r3, #82	; 0x52
 8015f1e:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8015f20:	466a      	mov	r2, sp
 8015f22:	002b      	movs	r3, r5
 8015f24:	7e12      	ldrb	r2, [r2, #24]
 8015f26:	3355      	adds	r3, #85	; 0x55
 8015f28:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8015f2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8015f2c:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8015f2e:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 8015f30:	64ac      	str	r4, [r5, #72]	; 0x48
 8015f32:	002b      	movs	r3, r5
            if( datarate > 12 )
 8015f34:	2c0c      	cmp	r4, #12
 8015f36:	d872      	bhi.n	801601e <SX1276SetTxConfig+0x25a>
            else if( datarate < 6 )
 8015f38:	2c05      	cmp	r4, #5
 8015f3a:	d963      	bls.n	8016004 <SX1276SetTxConfig+0x240>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015f3c:	2e07      	cmp	r6, #7
 8015f3e:	d15a      	bne.n	8015ff6 <SX1276SetTxConfig+0x232>
 8015f40:	0022      	movs	r2, r4
 8015f42:	3a0b      	subs	r2, #11
 8015f44:	2a01      	cmp	r2, #1
 8015f46:	d85a      	bhi.n	8015ffe <SX1276SetTxConfig+0x23a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8015f48:	2201      	movs	r2, #1
 8015f4a:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8015f4c:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8015f4e:	9b05      	ldr	r3, [sp, #20]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d00f      	beq.n	8015f74 <SX1276SetTxConfig+0x1b0>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8015f54:	2044      	movs	r0, #68	; 0x44
 8015f56:	f7ff f985 	bl	8015264 <SX1276Read>
 8015f5a:	2180      	movs	r1, #128	; 0x80
 8015f5c:	4249      	negs	r1, r1
 8015f5e:	4301      	orrs	r1, r0
 8015f60:	b2c9      	uxtb	r1, r1
 8015f62:	2044      	movs	r0, #68	; 0x44
 8015f64:	f7ff f92b 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8015f68:	4b30      	ldr	r3, [pc, #192]	; (801602c <SX1276SetTxConfig+0x268>)
 8015f6a:	2024      	movs	r0, #36	; 0x24
 8015f6c:	3354      	adds	r3, #84	; 0x54
 8015f6e:	7819      	ldrb	r1, [r3, #0]
 8015f70:	f7ff f925 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8015f74:	201d      	movs	r0, #29
 8015f76:	f7ff f975 	bl	8015264 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8015f7a:	9b04      	ldr	r3, [sp, #16]
 8015f7c:	0136      	lsls	r6, r6, #4
 8015f7e:	0059      	lsls	r1, r3, #1
 8015f80:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8015f82:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8015f84:	430b      	orrs	r3, r1
 8015f86:	0019      	movs	r1, r3
 8015f88:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 8015f8a:	b2c9      	uxtb	r1, r1
 8015f8c:	f7ff f917 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8015f90:	201e      	movs	r0, #30
 8015f92:	f7ff f967 	bl	8015264 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8015f96:	9b02      	ldr	r3, [sp, #8]
 8015f98:	0121      	lsls	r1, r4, #4
 8015f9a:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8015f9c:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8015f9e:	230b      	movs	r3, #11
 8015fa0:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8015fa2:	4301      	orrs	r1, r0
 8015fa4:	b2c9      	uxtb	r1, r1
 8015fa6:	201e      	movs	r0, #30
 8015fa8:	f7ff f909 	bl	80151be <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8015fac:	2026      	movs	r0, #38	; 0x26
 8015fae:	f7ff f959 	bl	8015264 <SX1276Read>
 8015fb2:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8015fb4:	354c      	adds	r5, #76	; 0x4c
 8015fb6:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8015fb8:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8015fba:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8015fbc:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8015fbe:	b2c9      	uxtb	r1, r1
 8015fc0:	2026      	movs	r0, #38	; 0x26
 8015fc2:	f7ff f8fc 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8015fc6:	0a39      	lsrs	r1, r7, #8
 8015fc8:	2020      	movs	r0, #32
 8015fca:	f7ff f8f8 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8015fce:	2021      	movs	r0, #33	; 0x21
 8015fd0:	b2f9      	uxtb	r1, r7
 8015fd2:	f7ff f8f4 	bl	80151be <SX1276Write>
 8015fd6:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015fd8:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8015fda:	2c06      	cmp	r4, #6
 8015fdc:	d114      	bne.n	8016008 <SX1276SetTxConfig+0x244>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015fde:	f7ff f941 	bl	8015264 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015fe2:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8015fe4:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8015fe6:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8015fe8:	b2c9      	uxtb	r1, r1
 8015fea:	2031      	movs	r0, #49	; 0x31
 8015fec:	f7ff f8e7 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015ff0:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8015ff2:	2037      	movs	r0, #55	; 0x37
 8015ff4:	e76b      	b.n	8015ece <SX1276SetTxConfig+0x10a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015ff6:	2e08      	cmp	r6, #8
 8015ff8:	d101      	bne.n	8015ffe <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8015ffa:	2c0c      	cmp	r4, #12
 8015ffc:	d0a4      	beq.n	8015f48 <SX1276SetTxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8015ffe:	334c      	adds	r3, #76	; 0x4c
 8016000:	2200      	movs	r2, #0
 8016002:	e7a3      	b.n	8015f4c <SX1276SetTxConfig+0x188>
                datarate = 6;
 8016004:	2406      	movs	r4, #6
 8016006:	e7fa      	b.n	8015ffe <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016008:	f7ff f92c 	bl	8015264 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801600c:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801600e:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016010:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016012:	b2c9      	uxtb	r1, r1
 8016014:	2031      	movs	r0, #49	; 0x31
 8016016:	f7ff f8d2 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801601a:	210a      	movs	r1, #10
 801601c:	e7e9      	b.n	8015ff2 <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801601e:	9a00      	ldr	r2, [sp, #0]
 8016020:	240c      	movs	r4, #12
 8016022:	2a02      	cmp	r2, #2
 8016024:	d0eb      	beq.n	8015ffe <SX1276SetTxConfig+0x23a>
 8016026:	e78f      	b.n	8015f48 <SX1276SetTxConfig+0x184>
 8016028:	20002134 	.word	0x20002134
 801602c:	200022d4 	.word	0x200022d4
 8016030:	404e8480 	.word	0x404e8480
 8016034:	417e8480 	.word	0x417e8480

08016038 <SX1276SetTxContinuousWave>:
{
 8016038:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 801603a:	24fa      	movs	r4, #250	; 0xfa
{
 801603c:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 801603e:	00a4      	lsls	r4, r4, #2
 8016040:	4354      	muls	r4, r2
{
 8016042:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8016044:	f7ff f8c4 	bl	80151d0 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8016048:	2305      	movs	r3, #5
 801604a:	9302      	str	r3, [sp, #8]
 801604c:	2396      	movs	r3, #150	; 0x96
 801604e:	2000      	movs	r0, #0
 8016050:	015b      	lsls	r3, r3, #5
 8016052:	0002      	movs	r2, r0
 8016054:	0029      	movs	r1, r5
 8016056:	9007      	str	r0, [sp, #28]
 8016058:	9006      	str	r0, [sp, #24]
 801605a:	9005      	str	r0, [sp, #20]
 801605c:	9004      	str	r0, [sp, #16]
 801605e:	9003      	str	r0, [sp, #12]
 8016060:	9001      	str	r0, [sp, #4]
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	9408      	str	r4, [sp, #32]
 8016066:	0003      	movs	r3, r0
 8016068:	f7ff feac 	bl	8015dc4 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801606c:	2031      	movs	r0, #49	; 0x31
 801606e:	f7ff f8f9 	bl	8015264 <SX1276Read>
 8016072:	2540      	movs	r5, #64	; 0x40
 8016074:	43a8      	bics	r0, r5
 8016076:	b2c1      	uxtb	r1, r0
 8016078:	2031      	movs	r0, #49	; 0x31
 801607a:	f7ff f8a0 	bl	80151be <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801607e:	0028      	movs	r0, r5
 8016080:	21f0      	movs	r1, #240	; 0xf0
 8016082:	f7ff f89c 	bl	80151be <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8016086:	21a0      	movs	r1, #160	; 0xa0
 8016088:	2041      	movs	r0, #65	; 0x41
 801608a:	f7ff f898 	bl	80151be <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 801608e:	4d08      	ldr	r5, [pc, #32]	; (80160b0 <SX1276SetTxContinuousWave+0x78>)
 8016090:	0021      	movs	r1, r4
 8016092:	0028      	movs	r0, r5
 8016094:	f7fd fff2 	bl	801407c <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8016098:	2202      	movs	r2, #2
 801609a:	4b06      	ldr	r3, [pc, #24]	; (80160b4 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 801609c:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 801609e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80160a0:	f7fd ff4e 	bl	8013f40 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80160a4:	2003      	movs	r0, #3
 80160a6:	f7ff fa7f 	bl	80155a8 <SX1276SetOpMode>
}
 80160aa:	b00b      	add	sp, #44	; 0x2c
 80160ac:	bd30      	pop	{r4, r5, pc}
 80160ae:	46c0      	nop			; (mov r8, r8)
 80160b0:	200022ac 	.word	0x200022ac
 80160b4:	200022d4 	.word	0x200022d4

080160b8 <SX1276OnDio2Irq>:
{
 80160b8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80160ba:	4c2b      	ldr	r4, [pc, #172]	; (8016168 <SX1276OnDio2Irq+0xb0>)
 80160bc:	7921      	ldrb	r1, [r4, #4]
 80160be:	2901      	cmp	r1, #1
 80160c0:	d002      	beq.n	80160c8 <SX1276OnDio2Irq+0x10>
 80160c2:	2902      	cmp	r1, #2
 80160c4:	d048      	beq.n	8016158 <SX1276OnDio2Irq+0xa0>
}
 80160c6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80160c8:	7963      	ldrb	r3, [r4, #5]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d017      	beq.n	80160fe <SX1276OnDio2Irq+0x46>
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d1f9      	bne.n	80160c6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80160d2:	3453      	adds	r4, #83	; 0x53
 80160d4:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80160d6:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d0f4      	beq.n	80160c6 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80160dc:	2012      	movs	r0, #18
 80160de:	f7ff f86e 	bl	80151be <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80160e2:	4b22      	ldr	r3, [pc, #136]	; (801616c <SX1276OnDio2Irq+0xb4>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d0ed      	beq.n	80160c6 <SX1276OnDio2Irq+0xe>
 80160ea:	695c      	ldr	r4, [r3, #20]
 80160ec:	2c00      	cmp	r4, #0
 80160ee:	d0ea      	beq.n	80160c6 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80160f0:	201c      	movs	r0, #28
 80160f2:	f7ff f8b7 	bl	8015264 <SX1276Read>
 80160f6:	233f      	movs	r3, #63	; 0x3f
 80160f8:	4018      	ands	r0, r3
 80160fa:	47a0      	blx	r4
}
 80160fc:	e7e3      	b.n	80160c6 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80160fe:	0023      	movs	r3, r4
 8016100:	3330      	adds	r3, #48	; 0x30
 8016102:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8016104:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8016106:	2d01      	cmp	r5, #1
 8016108:	d1dd      	bne.n	80160c6 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 801610a:	4819      	ldr	r0, [pc, #100]	; (8016170 <SX1276OnDio2Irq+0xb8>)
 801610c:	f7fd ff8a 	bl	8014024 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8016110:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8016112:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8016114:	3331      	adds	r3, #49	; 0x31
 8016116:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8016118:	f7ff f8a4 	bl	8015264 <SX1276Read>
 801611c:	0023      	movs	r3, r4
 801611e:	0840      	lsrs	r0, r0, #1
 8016120:	3332      	adds	r3, #50	; 0x32
 8016122:	4240      	negs	r0, r0
 8016124:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8016126:	201b      	movs	r0, #27
 8016128:	f7ff f89c 	bl	8015264 <SX1276Read>
 801612c:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801612e:	201c      	movs	r0, #28
 8016130:	f7ff f898 	bl	8015264 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8016134:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8016136:	4a0f      	ldr	r2, [pc, #60]	; (8016174 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8016138:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801613a:	b2c3      	uxtb	r3, r0
 801613c:	4353      	muls	r3, r2
 801613e:	0a00      	lsrs	r0, r0, #8
 8016140:	4350      	muls	r0, r2
 8016142:	3380      	adds	r3, #128	; 0x80
 8016144:	0a1b      	lsrs	r3, r3, #8
 8016146:	1818      	adds	r0, r3, r0
 8016148:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801614a:	200c      	movs	r0, #12
 801614c:	f7ff f88a 	bl	8015264 <SX1276Read>
 8016150:	3438      	adds	r4, #56	; 0x38
 8016152:	0940      	lsrs	r0, r0, #5
 8016154:	7020      	strb	r0, [r4, #0]
 8016156:	e7b6      	b.n	80160c6 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8016158:	7963      	ldrb	r3, [r4, #5]
 801615a:	2b01      	cmp	r3, #1
 801615c:	d1b3      	bne.n	80160c6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801615e:	3453      	adds	r4, #83	; 0x53
 8016160:	7823      	ldrb	r3, [r4, #0]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d0af      	beq.n	80160c6 <SX1276OnDio2Irq+0xe>
 8016166:	e7b9      	b.n	80160dc <SX1276OnDio2Irq+0x24>
 8016168:	200022d4 	.word	0x200022d4
 801616c:	20002138 	.word	0x20002138
 8016170:	200022c0 	.word	0x200022c0
 8016174:	00003d09 	.word	0x00003d09

08016178 <SX1276OnDio3Irq>:
{
 8016178:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 801617a:	4b12      	ldr	r3, [pc, #72]	; (80161c4 <SX1276OnDio3Irq+0x4c>)
 801617c:	795d      	ldrb	r5, [r3, #5]
 801617e:	2d01      	cmp	r5, #1
 8016180:	d111      	bne.n	80161a6 <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8016182:	2012      	movs	r0, #18
 8016184:	f7ff f86e 	bl	8015264 <SX1276Read>
 8016188:	4028      	ands	r0, r5
 801618a:	1e04      	subs	r4, r0, #0
 801618c:	4e0e      	ldr	r6, [pc, #56]	; (80161c8 <SX1276OnDio3Irq+0x50>)
 801618e:	d00b      	beq.n	80161a8 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8016190:	2105      	movs	r1, #5
 8016192:	2012      	movs	r0, #18
 8016194:	f7ff f813 	bl	80151be <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016198:	6833      	ldr	r3, [r6, #0]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <SX1276OnDio3Irq+0x2e>
 801619e:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80161a0:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d10b      	bne.n	80161be <SX1276OnDio3Irq+0x46>
}
 80161a6:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80161a8:	2104      	movs	r1, #4
 80161aa:	2012      	movs	r0, #18
 80161ac:	f7ff f807 	bl	80151be <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80161b0:	6833      	ldr	r3, [r6, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d0f7      	beq.n	80161a6 <SX1276OnDio3Irq+0x2e>
 80161b6:	699b      	ldr	r3, [r3, #24]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d0f4      	beq.n	80161a6 <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 80161bc:	0020      	movs	r0, r4
 80161be:	4798      	blx	r3
}
 80161c0:	e7f1      	b.n	80161a6 <SX1276OnDio3Irq+0x2e>
 80161c2:	46c0      	nop			; (mov r8, r8)
 80161c4:	200022d4 	.word	0x200022d4
 80161c8:	20002138 	.word	0x20002138

080161cc <SX1276WriteFifo>:
{
 80161cc:	b510      	push	{r4, lr}
 80161ce:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 80161d0:	0001      	movs	r1, r0
 80161d2:	2000      	movs	r0, #0
 80161d4:	f7fe ffd4 	bl	8015180 <SX1276WriteBuffer>
}
 80161d8:	bd10      	pop	{r4, pc}
	...

080161dc <SX1276Send>:
{
 80161dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161de:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 80161e0:	4c3a      	ldr	r4, [pc, #232]	; (80162cc <SX1276Send+0xf0>)
{
 80161e2:	1dde      	adds	r6, r3, #7
 80161e4:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 80161e6:	7965      	ldrb	r5, [r4, #5]
{
 80161e8:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 80161ea:	2d00      	cmp	r5, #0
 80161ec:	d003      	beq.n	80161f6 <SX1276Send+0x1a>
 80161ee:	2d01      	cmp	r5, #1
 80161f0:	d02e      	beq.n	8016250 <SX1276Send+0x74>
    uint32_t txTimeout = 0;
 80161f2:	2000      	movs	r0, #0
 80161f4:	e01c      	b.n	8016230 <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 80161f6:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80161f8:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80161fa:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80161fc:	1ce3      	adds	r3, r4, #3
 80161fe:	7fdb      	ldrb	r3, [r3, #31]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d118      	bne.n	8016236 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8016204:	2101      	movs	r1, #1
 8016206:	0030      	movs	r0, r6
 8016208:	f7ff ffe0 	bl	80161cc <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 801620c:	7832      	ldrb	r2, [r6, #0]
 801620e:	1e53      	subs	r3, r2, #1
 8016210:	2b3f      	cmp	r3, #63	; 0x3f
 8016212:	d814      	bhi.n	801623e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8016214:	0023      	movs	r3, r4
 8016216:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8016218:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801621a:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801621c:	353f      	adds	r5, #63	; 0x3f
 801621e:	0038      	movs	r0, r7
 8016220:	7829      	ldrb	r1, [r5, #0]
 8016222:	f7ff ffd3 	bl	80161cc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8016226:	782b      	ldrb	r3, [r5, #0]
 8016228:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801622a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801622c:	189b      	adds	r3, r3, r2
 801622e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8016230:	f7ff faf8 	bl	8015824 <SX1276SetTx>
}
 8016234:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8016236:	2032      	movs	r0, #50	; 0x32
 8016238:	f7fe ffc1 	bl	80151be <SX1276Write>
 801623c:	e7e6      	b.n	801620c <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 801623e:	b292      	uxth	r2, r2
 8016240:	0039      	movs	r1, r7
 8016242:	4823      	ldr	r0, [pc, #140]	; (80162d0 <SX1276Send+0xf4>)
 8016244:	f7fd ff65 	bl	8014112 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8016248:	0023      	movs	r3, r4
 801624a:	2220      	movs	r2, #32
 801624c:	333f      	adds	r3, #63	; 0x3f
 801624e:	e7e3      	b.n	8016218 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8016250:	0023      	movs	r3, r4
 8016252:	3355      	adds	r3, #85	; 0x55
 8016254:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8016256:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8016258:	2b00      	cmp	r3, #0
 801625a:	d02b      	beq.n	80162b4 <SX1276Send+0xd8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801625c:	f7ff f802 	bl	8015264 <SX1276Read>
 8016260:	2341      	movs	r3, #65	; 0x41
 8016262:	4398      	bics	r0, r3
 8016264:	b2c1      	uxtb	r1, r0
 8016266:	2033      	movs	r0, #51	; 0x33
 8016268:	f7fe ffa9 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801626c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801626e:	203b      	movs	r0, #59	; 0x3b
 8016270:	f7fe ffa5 	bl	80151be <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8016274:	0023      	movs	r3, r4
 8016276:	7831      	ldrb	r1, [r6, #0]
 8016278:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801627a:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 801627c:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801627e:	f7fe ff9e 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8016282:	2100      	movs	r1, #0
 8016284:	200e      	movs	r0, #14
 8016286:	f7fe ff9a 	bl	80151be <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801628a:	2100      	movs	r1, #0
 801628c:	200d      	movs	r0, #13
 801628e:	f7fe ff96 	bl	80151be <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8016292:	2001      	movs	r0, #1
 8016294:	f7fe ffe6 	bl	8015264 <SX1276Read>
 8016298:	23f8      	movs	r3, #248	; 0xf8
 801629a:	4398      	bics	r0, r3
 801629c:	d104      	bne.n	80162a8 <SX1276Send+0xcc>
                SX1276SetStby( );
 801629e:	f7ff f9a5 	bl	80155ec <SX1276SetStby>
                DelayMs( 1 );
 80162a2:	2001      	movs	r0, #1
 80162a4:	f7f5 fdcc 	bl	800be40 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 80162a8:	0038      	movs	r0, r7
 80162aa:	7831      	ldrb	r1, [r6, #0]
 80162ac:	f7ff ff8e 	bl	80161cc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80162b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80162b2:	e7bd      	b.n	8016230 <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80162b4:	f7fe ffd6 	bl	8015264 <SX1276Read>
 80162b8:	2341      	movs	r3, #65	; 0x41
 80162ba:	0001      	movs	r1, r0
 80162bc:	4399      	bics	r1, r3
 80162be:	4329      	orrs	r1, r5
 80162c0:	b2c9      	uxtb	r1, r1
 80162c2:	2033      	movs	r0, #51	; 0x33
 80162c4:	f7fe ff7b 	bl	80151be <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80162c8:	211d      	movs	r1, #29
 80162ca:	e7d0      	b.n	801626e <SX1276Send+0x92>
 80162cc:	200022d4 	.word	0x200022d4
 80162d0:	2000213c 	.word	0x2000213c

080162d4 <SX1276ReadFifo>:
{
 80162d4:	b510      	push	{r4, lr}
 80162d6:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 80162d8:	0001      	movs	r1, r0
 80162da:	2000      	movs	r0, #0
 80162dc:	f7fe ffa2 	bl	8015224 <SX1276ReadBuffer>
}
 80162e0:	bd10      	pop	{r4, pc}
	...

080162e4 <SX1276OnDio0Irq>:
{
 80162e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 80162e6:	466b      	mov	r3, sp
 80162e8:	1ddd      	adds	r5, r3, #7
 80162ea:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 80162ec:	4c8b      	ldr	r4, [pc, #556]	; (801651c <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 80162ee:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 80162f0:	7923      	ldrb	r3, [r4, #4]
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	d003      	beq.n	80162fe <SX1276OnDio0Irq+0x1a>
 80162f6:	2b02      	cmp	r3, #2
 80162f8:	d100      	bne.n	80162fc <SX1276OnDio0Irq+0x18>
 80162fa:	e0fb      	b.n	80164f4 <SX1276OnDio0Irq+0x210>
}
 80162fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 80162fe:	7963      	ldrb	r3, [r4, #5]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d024      	beq.n	801634e <SX1276OnDio0Irq+0x6a>
 8016304:	2b01      	cmp	r3, #1
 8016306:	d1f9      	bne.n	80162fc <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8016308:	2140      	movs	r1, #64	; 0x40
 801630a:	2012      	movs	r0, #18
 801630c:	f7fe ff57 	bl	80151be <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8016310:	2012      	movs	r0, #18
 8016312:	f7fe ffa7 	bl	8015264 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8016316:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8016318:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801631a:	782b      	ldrb	r3, [r5, #0]
 801631c:	4f80      	ldr	r7, [pc, #512]	; (8016520 <SX1276OnDio0Irq+0x23c>)
 801631e:	4e81      	ldr	r6, [pc, #516]	; (8016524 <SX1276OnDio0Irq+0x240>)
 8016320:	420b      	tst	r3, r1
 8016322:	d100      	bne.n	8016326 <SX1276OnDio0Irq+0x42>
 8016324:	e095      	b.n	8016452 <SX1276OnDio0Irq+0x16e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8016326:	2012      	movs	r0, #18
 8016328:	f7fe ff49 	bl	80151be <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801632c:	0023      	movs	r3, r4
 801632e:	3356      	adds	r3, #86	; 0x56
 8016330:	781b      	ldrb	r3, [r3, #0]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d100      	bne.n	8016338 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8016336:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8016338:	0038      	movs	r0, r7
 801633a:	f7fd fe73 	bl	8014024 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801633e:	6833      	ldr	r3, [r6, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d0db      	beq.n	80162fc <SX1276OnDio0Irq+0x18>
 8016344:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8016346:	2b00      	cmp	r3, #0
 8016348:	d0d8      	beq.n	80162fc <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 801634a:	4798      	blx	r3
}
 801634c:	e7d6      	b.n	80162fc <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801634e:	1d63      	adds	r3, r4, #5
 8016350:	7fdb      	ldrb	r3, [r3, #31]
 8016352:	4e75      	ldr	r6, [pc, #468]	; (8016528 <SX1276OnDio0Irq+0x244>)
 8016354:	4f73      	ldr	r7, [pc, #460]	; (8016524 <SX1276OnDio0Irq+0x240>)
 8016356:	2b00      	cmp	r3, #0
 8016358:	d037      	beq.n	80163ca <SX1276OnDio0Irq+0xe6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801635a:	203f      	movs	r0, #63	; 0x3f
 801635c:	f7fe ff82 	bl	8015264 <SX1276Read>
 8016360:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8016362:	782b      	ldrb	r3, [r5, #0]
 8016364:	079b      	lsls	r3, r3, #30
 8016366:	d430      	bmi.n	80163ca <SX1276OnDio0Irq+0xe6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8016368:	210b      	movs	r1, #11
 801636a:	203e      	movs	r0, #62	; 0x3e
 801636c:	f7fe ff27 	bl	80151be <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8016370:	2110      	movs	r1, #16
 8016372:	203f      	movs	r0, #63	; 0x3f
 8016374:	f7fe ff23 	bl	80151be <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8016378:	4869      	ldr	r0, [pc, #420]	; (8016520 <SX1276OnDio0Irq+0x23c>)
 801637a:	f7fd fe53 	bl	8014024 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801637e:	1de3      	adds	r3, r4, #7
 8016380:	7fdd      	ldrb	r5, [r3, #31]
 8016382:	2d00      	cmp	r5, #0
 8016384:	d114      	bne.n	80163b0 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
 8016386:	0030      	movs	r0, r6
 8016388:	f7fd fe4c 	bl	8014024 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 801638c:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d003      	beq.n	801639c <SX1276OnDio0Irq+0xb8>
 8016394:	691b      	ldr	r3, [r3, #16]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d000      	beq.n	801639c <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 801639a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801639c:	0022      	movs	r2, r4
 801639e:	2300      	movs	r3, #0
 80163a0:	3230      	adds	r2, #48	; 0x30
 80163a2:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80163a4:	0022      	movs	r2, r4
 80163a6:	3231      	adds	r2, #49	; 0x31
 80163a8:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80163aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80163ac:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80163ae:	e7a5      	b.n	80162fc <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80163b0:	200d      	movs	r0, #13
 80163b2:	f7fe ff57 	bl	8015264 <SX1276Read>
 80163b6:	2140      	movs	r1, #64	; 0x40
 80163b8:	4301      	orrs	r1, r0
 80163ba:	b2c9      	uxtb	r1, r1
 80163bc:	200d      	movs	r0, #13
 80163be:	f7fe fefe 	bl	80151be <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80163c2:	0030      	movs	r0, r6
 80163c4:	f7fd fdbc 	bl	8013f40 <TimerStart>
 80163c8:	e7e1      	b.n	801638e <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80163ca:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80163cc:	4d57      	ldr	r5, [pc, #348]	; (801652c <SX1276OnDio0Irq+0x248>)
 80163ce:	2900      	cmp	r1, #0
 80163d0:	d130      	bne.n	8016434 <SX1276OnDio0Irq+0x150>
 80163d2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d12d      	bne.n	8016434 <SX1276OnDio0Irq+0x150>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80163d8:	1ce3      	adds	r3, r4, #3
 80163da:	7fdb      	ldrb	r3, [r3, #31]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d124      	bne.n	801642a <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80163e0:	3101      	adds	r1, #1
 80163e2:	4853      	ldr	r0, [pc, #332]	; (8016530 <SX1276OnDio0Irq+0x24c>)
 80163e4:	f7ff ff76 	bl	80162d4 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80163e8:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80163ea:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80163ec:	1a09      	subs	r1, r1, r0
 80163ee:	b2c9      	uxtb	r1, r1
 80163f0:	1828      	adds	r0, r5, r0
 80163f2:	f7ff ff6f 	bl	80162d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80163f6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 80163f8:	4849      	ldr	r0, [pc, #292]	; (8016520 <SX1276OnDio0Irq+0x23c>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80163fa:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80163fc:	f7fd fe12 	bl	8014024 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8016400:	1de3      	adds	r3, r4, #7
 8016402:	7fdb      	ldrb	r3, [r3, #31]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d117      	bne.n	8016438 <SX1276OnDio0Irq+0x154>
                    TimerStop( &RxTimeoutSyncWord );
 8016408:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 801640a:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801640c:	f7fd fe0a 	bl	8014024 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d0c2      	beq.n	801639c <SX1276OnDio0Irq+0xb8>
 8016416:	689e      	ldr	r6, [r3, #8]
 8016418:	2e00      	cmp	r6, #0
 801641a:	d0bf      	beq.n	801639c <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801641c:	2232      	movs	r2, #50	; 0x32
 801641e:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8016420:	56a2      	ldrsb	r2, [r4, r2]
 8016422:	2300      	movs	r3, #0
 8016424:	0028      	movs	r0, r5
 8016426:	47b0      	blx	r6
 8016428:	e7b8      	b.n	801639c <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801642a:	2032      	movs	r0, #50	; 0x32
 801642c:	f7fe ff1a 	bl	8015264 <SX1276Read>
 8016430:	8760      	strh	r0, [r4, #58]	; 0x3a
 8016432:	e7d9      	b.n	80163e8 <SX1276OnDio0Irq+0x104>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8016434:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8016436:	e7d9      	b.n	80163ec <SX1276OnDio0Irq+0x108>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8016438:	200d      	movs	r0, #13
 801643a:	f7fe ff13 	bl	8015264 <SX1276Read>
 801643e:	2140      	movs	r1, #64	; 0x40
 8016440:	4301      	orrs	r1, r0
 8016442:	b2c9      	uxtb	r1, r1
 8016444:	200d      	movs	r0, #13
 8016446:	f7fe feba 	bl	80151be <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 801644a:	0030      	movs	r0, r6
 801644c:	f7fd fd78 	bl	8013f40 <TimerStart>
 8016450:	e7de      	b.n	8016410 <SX1276OnDio0Irq+0x12c>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 8016452:	2019      	movs	r0, #25
 8016454:	f7fe ff06 	bl	8015264 <SX1276Read>
 8016458:	0023      	movs	r3, r4
 801645a:	b240      	sxtb	r0, r0
 801645c:	3360      	adds	r3, #96	; 0x60
 801645e:	7018      	strb	r0, [r3, #0]
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8016460:	1085      	asrs	r5, r0, #2
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8016462:	2800      	cmp	r0, #0
 8016464:	da03      	bge.n	801646e <SX1276OnDio0Irq+0x18a>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8016466:	4245      	negs	r5, r0
 8016468:	10ad      	asrs	r5, r5, #2
                        snr = -snr;
 801646a:	426d      	negs	r5, r5
 801646c:	b26d      	sxtb	r5, r5
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801646e:	201a      	movs	r0, #26
 8016470:	f7fe fef8 	bl	8015264 <SX1276Read>
 8016474:	b203      	sxth	r3, r0
 8016476:	492f      	ldr	r1, [pc, #188]	; (8016534 <SX1276OnDio0Irq+0x250>)
 8016478:	111b      	asrs	r3, r3, #4
                    if( snr < 0 )
 801647a:	2d00      	cmp	r5, #0
 801647c:	da00      	bge.n	8016480 <SX1276OnDio0Irq+0x19c>
 801647e:	1940      	adds	r0, r0, r5
 8016480:	0022      	movs	r2, r4
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8016482:	68a5      	ldr	r5, [r4, #8]
 8016484:	3262      	adds	r2, #98	; 0x62
 8016486:	428d      	cmp	r5, r1
 8016488:	d932      	bls.n	80164f0 <SX1276OnDio0Irq+0x20c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801648a:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801648c:	18c0      	adds	r0, r0, r3
 801648e:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8016490:	0025      	movs	r5, r4
 8016492:	2013      	movs	r0, #19
 8016494:	f7fe fee6 	bl	8015264 <SX1276Read>
 8016498:	3564      	adds	r5, #100	; 0x64
 801649a:	7028      	strb	r0, [r5, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801649c:	2010      	movs	r0, #16
 801649e:	f7fe fee1 	bl	8015264 <SX1276Read>
 80164a2:	0001      	movs	r1, r0
 80164a4:	200d      	movs	r0, #13
 80164a6:	f7fe fe8a 	bl	80151be <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80164aa:	7829      	ldrb	r1, [r5, #0]
 80164ac:	4d1f      	ldr	r5, [pc, #124]	; (801652c <SX1276OnDio0Irq+0x248>)
 80164ae:	0028      	movs	r0, r5
 80164b0:	f7ff ff10 	bl	80162d4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80164b4:	0023      	movs	r3, r4
 80164b6:	3356      	adds	r3, #86	; 0x56
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d100      	bne.n	80164c0 <SX1276OnDio0Irq+0x1dc>
                        SX1276.Settings.State = RF_IDLE;
 80164be:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80164c0:	0038      	movs	r0, r7
 80164c2:	f7fd fdaf 	bl	8014024 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80164c6:	6833      	ldr	r3, [r6, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d100      	bne.n	80164ce <SX1276OnDio0Irq+0x1ea>
 80164cc:	e716      	b.n	80162fc <SX1276OnDio0Irq+0x18>
 80164ce:	689e      	ldr	r6, [r3, #8]
 80164d0:	2e00      	cmp	r6, #0
 80164d2:	d100      	bne.n	80164d6 <SX1276OnDio0Irq+0x1f2>
 80164d4:	e712      	b.n	80162fc <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80164d6:	0023      	movs	r3, r4
 80164d8:	0022      	movs	r2, r4
 80164da:	3360      	adds	r3, #96	; 0x60
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	3464      	adds	r4, #100	; 0x64
 80164e0:	3262      	adds	r2, #98	; 0x62
 80164e2:	2100      	movs	r1, #0
 80164e4:	5e52      	ldrsh	r2, [r2, r1]
 80164e6:	b25b      	sxtb	r3, r3
 80164e8:	7821      	ldrb	r1, [r4, #0]
 80164ea:	0028      	movs	r0, r5
 80164ec:	47b0      	blx	r6
 80164ee:	e705      	b.n	80162fc <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80164f0:	38a4      	subs	r0, #164	; 0xa4
 80164f2:	e7cb      	b.n	801648c <SX1276OnDio0Irq+0x1a8>
            TimerStop( &TxTimeoutTimer );
 80164f4:	4810      	ldr	r0, [pc, #64]	; (8016538 <SX1276OnDio0Irq+0x254>)
 80164f6:	f7fd fd95 	bl	8014024 <TimerStop>
            switch( SX1276.Settings.Modem )
 80164fa:	7963      	ldrb	r3, [r4, #5]
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d103      	bne.n	8016508 <SX1276OnDio0Irq+0x224>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8016500:	2108      	movs	r1, #8
 8016502:	2012      	movs	r0, #18
 8016504:	f7fe fe5b 	bl	80151be <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8016508:	2300      	movs	r3, #0
 801650a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801650c:	4b05      	ldr	r3, [pc, #20]	; (8016524 <SX1276OnDio0Irq+0x240>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d100      	bne.n	8016516 <SX1276OnDio0Irq+0x232>
 8016514:	e6f2      	b.n	80162fc <SX1276OnDio0Irq+0x18>
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	e715      	b.n	8016346 <SX1276OnDio0Irq+0x62>
 801651a:	46c0      	nop			; (mov r8, r8)
 801651c:	200022d4 	.word	0x200022d4
 8016520:	2000233c 	.word	0x2000233c
 8016524:	20002138 	.word	0x20002138
 8016528:	200022c0 	.word	0x200022c0
 801652c:	2000213c 	.word	0x2000213c
 8016530:	2000230e 	.word	0x2000230e
 8016534:	1f4add40 	.word	0x1f4add40
 8016538:	200022ac 	.word	0x200022ac

0801653c <SX1276OnDio1Irq>:
{
 801653c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 801653e:	4c2e      	ldr	r4, [pc, #184]	; (80165f8 <SX1276OnDio1Irq+0xbc>)
 8016540:	7921      	ldrb	r1, [r4, #4]
 8016542:	2901      	cmp	r1, #1
 8016544:	d002      	beq.n	801654c <SX1276OnDio1Irq+0x10>
 8016546:	2902      	cmp	r1, #2
 8016548:	d040      	beq.n	80165cc <SX1276OnDio1Irq+0x90>
}
 801654a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 801654c:	7963      	ldrb	r3, [r4, #5]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d013      	beq.n	801657a <SX1276OnDio1Irq+0x3e>
 8016552:	2b01      	cmp	r3, #1
 8016554:	d1f9      	bne.n	801654a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8016556:	4829      	ldr	r0, [pc, #164]	; (80165fc <SX1276OnDio1Irq+0xc0>)
 8016558:	f7fd fd64 	bl	8014024 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801655c:	2180      	movs	r1, #128	; 0x80
 801655e:	2012      	movs	r0, #18
 8016560:	f7fe fe2d 	bl	80151be <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8016564:	2300      	movs	r3, #0
 8016566:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016568:	4b25      	ldr	r3, [pc, #148]	; (8016600 <SX1276OnDio1Irq+0xc4>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d0ec      	beq.n	801654a <SX1276OnDio1Irq+0xe>
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d0e9      	beq.n	801654a <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8016576:	4798      	blx	r3
 8016578:	e7e7      	b.n	801654a <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801657a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801657c:	2b00      	cmp	r3, #0
 801657e:	d109      	bne.n	8016594 <SX1276OnDio1Irq+0x58>
 8016580:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8016582:	2b00      	cmp	r3, #0
 8016584:	d106      	bne.n	8016594 <SX1276OnDio1Irq+0x58>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8016586:	1ce3      	adds	r3, r4, #3
 8016588:	7fdb      	ldrb	r3, [r3, #31]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d113      	bne.n	80165b6 <SX1276OnDio1Irq+0x7a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801658e:	481d      	ldr	r0, [pc, #116]	; (8016604 <SX1276OnDio1Irq+0xc8>)
 8016590:	f7ff fea0 	bl	80162d4 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8016594:	0025      	movs	r5, r4
 8016596:	353e      	adds	r5, #62	; 0x3e
 8016598:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801659a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 801659c:	7829      	ldrb	r1, [r5, #0]
 801659e:	1a9b      	subs	r3, r3, r2
 80165a0:	4819      	ldr	r0, [pc, #100]	; (8016608 <SX1276OnDio1Irq+0xcc>)
 80165a2:	428b      	cmp	r3, r1
 80165a4:	dd0c      	ble.n	80165c0 <SX1276OnDio1Irq+0x84>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 80165a6:	1880      	adds	r0, r0, r2
 80165a8:	f7ff fe94 	bl	80162d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80165ac:	782b      	ldrb	r3, [r5, #0]
 80165ae:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80165b0:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80165b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80165b4:	e7c9      	b.n	801654a <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80165b6:	2032      	movs	r0, #50	; 0x32
 80165b8:	f7fe fe54 	bl	8015264 <SX1276Read>
 80165bc:	8760      	strh	r0, [r4, #58]	; 0x3a
 80165be:	e7e9      	b.n	8016594 <SX1276OnDio1Irq+0x58>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80165c0:	b2d9      	uxtb	r1, r3
 80165c2:	1880      	adds	r0, r0, r2
 80165c4:	f7ff fe86 	bl	80162d4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80165c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80165ca:	e7f2      	b.n	80165b2 <SX1276OnDio1Irq+0x76>
            switch( SX1276.Settings.Modem )
 80165cc:	7963      	ldrb	r3, [r4, #5]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1bb      	bne.n	801654a <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80165d2:	0025      	movs	r5, r4
 80165d4:	353f      	adds	r5, #63	; 0x3f
 80165d6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80165d8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80165da:	7829      	ldrb	r1, [r5, #0]
 80165dc:	1a9b      	subs	r3, r3, r2
 80165de:	480a      	ldr	r0, [pc, #40]	; (8016608 <SX1276OnDio1Irq+0xcc>)
 80165e0:	428b      	cmp	r3, r1
 80165e2:	dd03      	ble.n	80165ec <SX1276OnDio1Irq+0xb0>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80165e4:	1880      	adds	r0, r0, r2
 80165e6:	f7ff fdf1 	bl	80161cc <SX1276WriteFifo>
 80165ea:	e7df      	b.n	80165ac <SX1276OnDio1Irq+0x70>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80165ec:	b2d9      	uxtb	r1, r3
 80165ee:	1880      	adds	r0, r0, r2
 80165f0:	f7ff fdec 	bl	80161cc <SX1276WriteFifo>
 80165f4:	e7e8      	b.n	80165c8 <SX1276OnDio1Irq+0x8c>
 80165f6:	46c0      	nop			; (mov r8, r8)
 80165f8:	200022d4 	.word	0x200022d4
 80165fc:	2000233c 	.word	0x2000233c
 8016600:	20002138 	.word	0x20002138
 8016604:	2000230e 	.word	0x2000230e
 8016608:	2000213c 	.word	0x2000213c

0801660c <SX1276SetMaxPayloadLength>:
{
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	0004      	movs	r4, r0
 8016610:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8016612:	f7ff f971 	bl	80158f8 <SX1276SetModem>
    switch( modem )
 8016616:	2c00      	cmp	r4, #0
 8016618:	d002      	beq.n	8016620 <SX1276SetMaxPayloadLength+0x14>
 801661a:	2c01      	cmp	r4, #1
 801661c:	d00a      	beq.n	8016634 <SX1276SetMaxPayloadLength+0x28>
}
 801661e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8016620:	4b06      	ldr	r3, [pc, #24]	; (801663c <SX1276SetMaxPayloadLength+0x30>)
 8016622:	3303      	adds	r3, #3
 8016624:	7fdb      	ldrb	r3, [r3, #31]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d1f9      	bne.n	801661e <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801662a:	0029      	movs	r1, r5
 801662c:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801662e:	f7fe fdc6 	bl	80151be <SX1276Write>
}
 8016632:	e7f4      	b.n	801661e <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8016634:	0029      	movs	r1, r5
 8016636:	2023      	movs	r0, #35	; 0x23
 8016638:	e7f9      	b.n	801662e <SX1276SetMaxPayloadLength+0x22>
 801663a:	46c0      	nop			; (mov r8, r8)
 801663c:	200022d4 	.word	0x200022d4

08016640 <SX1276SetPublicNetwork>:
{
 8016640:	b510      	push	{r4, lr}
 8016642:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8016644:	2001      	movs	r0, #1
 8016646:	f7ff f957 	bl	80158f8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801664a:	4b05      	ldr	r3, [pc, #20]	; (8016660 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801664c:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801664e:	335c      	adds	r3, #92	; 0x5c
 8016650:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8016652:	2c00      	cmp	r4, #0
 8016654:	d100      	bne.n	8016658 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8016656:	2112      	movs	r1, #18
 8016658:	2039      	movs	r0, #57	; 0x39
 801665a:	f7fe fdb0 	bl	80151be <SX1276Write>
}
 801665e:	bd10      	pop	{r4, pc}
 8016660:	200022d4 	.word	0x200022d4

08016664 <SX1276OnTimeoutIrq>:
{
 8016664:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8016666:	4c2e      	ldr	r4, [pc, #184]	; (8016720 <SX1276OnTimeoutIrq+0xbc>)
 8016668:	7923      	ldrb	r3, [r4, #4]
 801666a:	2b01      	cmp	r3, #1
 801666c:	d002      	beq.n	8016674 <SX1276OnTimeoutIrq+0x10>
 801666e:	2b02      	cmp	r3, #2
 8016670:	d032      	beq.n	80166d8 <SX1276OnTimeoutIrq+0x74>
}
 8016672:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8016674:	7963      	ldrb	r3, [r4, #5]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d120      	bne.n	80166bc <SX1276OnTimeoutIrq+0x58>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801667a:	0022      	movs	r2, r4
 801667c:	3230      	adds	r2, #48	; 0x30
 801667e:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8016680:	0022      	movs	r2, r4
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8016682:	210b      	movs	r1, #11
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8016684:	3231      	adds	r2, #49	; 0x31
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8016686:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8016688:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801668a:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801668c:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801668e:	f7fe fd96 	bl	80151be <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8016692:	2110      	movs	r1, #16
 8016694:	203f      	movs	r0, #63	; 0x3f
 8016696:	f7fe fd92 	bl	80151be <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801669a:	1de3      	adds	r3, r4, #7
 801669c:	7fdb      	ldrb	r3, [r3, #31]
 801669e:	4d21      	ldr	r5, [pc, #132]	; (8016724 <SX1276OnTimeoutIrq+0xc0>)
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d014      	beq.n	80166ce <SX1276OnTimeoutIrq+0x6a>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80166a4:	200d      	movs	r0, #13
 80166a6:	f7fe fddd 	bl	8015264 <SX1276Read>
 80166aa:	2140      	movs	r1, #64	; 0x40
 80166ac:	4301      	orrs	r1, r0
 80166ae:	b2c9      	uxtb	r1, r1
 80166b0:	200d      	movs	r0, #13
 80166b2:	f7fe fd84 	bl	80151be <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80166b6:	0028      	movs	r0, r5
 80166b8:	f7fd fc42 	bl	8013f40 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80166bc:	4b1a      	ldr	r3, [pc, #104]	; (8016728 <SX1276OnTimeoutIrq+0xc4>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d0d6      	beq.n	8016672 <SX1276OnTimeoutIrq+0xe>
 80166c4:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d0d3      	beq.n	8016672 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80166ca:	4798      	blx	r3
}
 80166cc:	e7d1      	b.n	8016672 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80166ce:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 80166d0:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80166d2:	f7fd fca7 	bl	8014024 <TimerStop>
 80166d6:	e7f1      	b.n	80166bc <SX1276OnTimeoutIrq+0x58>
        SX1276Reset( );
 80166d8:	f7fe fd2a 	bl	8015130 <SX1276Reset>
        RxChainCalibration( );
 80166dc:	f7fe fdcc 	bl	8015278 <RxChainCalibration>
 80166e0:	2000      	movs	r0, #0
 80166e2:	f7fe ff33 	bl	801554c <SX1276SetOpMode.part.2>
 80166e6:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
 80166e8:	4e10      	ldr	r6, [pc, #64]	; (801672c <SX1276OnTimeoutIrq+0xc8>)
 80166ea:	5da8      	ldrb	r0, [r5, r6]
 80166ec:	1976      	adds	r6, r6, r5
 80166ee:	f7ff f903 	bl	80158f8 <SX1276SetModem>
 80166f2:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80166f4:	78b1      	ldrb	r1, [r6, #2]
 80166f6:	7870      	ldrb	r0, [r6, #1]
 80166f8:	f7fe fd61 	bl	80151be <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80166fc:	2d30      	cmp	r5, #48	; 0x30
 80166fe:	d1f3      	bne.n	80166e8 <SX1276OnTimeoutIrq+0x84>
        SX1276SetModem( MODEM_FSK );
 8016700:	2000      	movs	r0, #0
 8016702:	f7ff f8f9 	bl	80158f8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8016706:	0023      	movs	r3, r4
 8016708:	335c      	adds	r3, #92	; 0x5c
 801670a:	7818      	ldrb	r0, [r3, #0]
 801670c:	f7ff ff98 	bl	8016640 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8016710:	2300      	movs	r3, #0
 8016712:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016714:	4b04      	ldr	r3, [pc, #16]	; (8016728 <SX1276OnTimeoutIrq+0xc4>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d0aa      	beq.n	8016672 <SX1276OnTimeoutIrq+0xe>
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	e7d2      	b.n	80166c6 <SX1276OnTimeoutIrq+0x62>
 8016720:	200022d4 	.word	0x200022d4
 8016724:	200022c0 	.word	0x200022c0
 8016728:	20002138 	.word	0x20002138
 801672c:	08018a90 	.word	0x08018a90

08016730 <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8016730:	4b03      	ldr	r3, [pc, #12]	; (8016740 <SX1276GetWakeupTime+0x10>)
{
 8016732:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	4798      	blx	r3
 801673a:	3002      	adds	r0, #2
}
 801673c:	bd10      	pop	{r4, pc}
 801673e:	46c0      	nop			; (mov r8, r8)
 8016740:	20002134 	.word	0x20002134

08016744 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8016744:	b500      	push	{lr}
 8016746:	0002      	movs	r2, r0
 8016748:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 801674a:	2803      	cmp	r0, #3
 801674c:	d80c      	bhi.n	8016768 <BSP_LED_Init+0x24>
 801674e:	4b1b      	ldr	r3, [pc, #108]	; (80167bc <BSP_LED_Init+0x78>)
 8016750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016752:	f7ea fa13 	bl	8000b7c <__gnu_thumb1_case_uqi>
 8016756:	1b02      	.short	0x1b02
 8016758:	2b23      	.short	0x2b23
 801675a:	2002      	movs	r0, #2
 801675c:	4301      	orrs	r1, r0
 801675e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8016760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016762:	4003      	ands	r3, r0
 8016764:	9301      	str	r3, [sp, #4]
 8016766:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8016768:	4b15      	ldr	r3, [pc, #84]	; (80167c0 <BSP_LED_Init+0x7c>)
 801676a:	0051      	lsls	r1, r2, #1
 801676c:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 801676e:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8016770:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016772:	2301      	movs	r3, #1
 8016774:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016776:	2300      	movs	r3, #0
 8016778:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801677a:	3303      	adds	r3, #3
 801677c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 801677e:	4b11      	ldr	r3, [pc, #68]	; (80167c4 <BSP_LED_Init+0x80>)
 8016780:	a905      	add	r1, sp, #20
 8016782:	58d0      	ldr	r0, [r2, r3]
 8016784:	f7f7 fa9a 	bl	800dcbc <HAL_GPIO_Init>
}
 8016788:	b00b      	add	sp, #44	; 0x2c
 801678a:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 801678c:	2001      	movs	r0, #1
 801678e:	4301      	orrs	r1, r0
 8016790:	62d9      	str	r1, [r3, #44]	; 0x2c
 8016792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016794:	4003      	ands	r3, r0
 8016796:	9302      	str	r3, [sp, #8]
 8016798:	9b02      	ldr	r3, [sp, #8]
 801679a:	e7e5      	b.n	8016768 <BSP_LED_Init+0x24>
 801679c:	2002      	movs	r0, #2
 801679e:	4301      	orrs	r1, r0
 80167a0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80167a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167a4:	4003      	ands	r3, r0
 80167a6:	9303      	str	r3, [sp, #12]
 80167a8:	9b03      	ldr	r3, [sp, #12]
 80167aa:	e7dd      	b.n	8016768 <BSP_LED_Init+0x24>
 80167ac:	2002      	movs	r0, #2
 80167ae:	4301      	orrs	r1, r0
 80167b0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80167b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167b4:	4003      	ands	r3, r0
 80167b6:	9304      	str	r3, [sp, #16]
 80167b8:	9b04      	ldr	r3, [sp, #16]
 80167ba:	e7d5      	b.n	8016768 <BSP_LED_Init+0x24>
 80167bc:	40021000 	.word	0x40021000
 80167c0:	08018ac0 	.word	0x08018ac0
 80167c4:	20000aec 	.word	0x20000aec

080167c8 <SX1276GetWakeTime>:
 80167c8:	2005      	movs	r0, #5
 80167ca:	4770      	bx	lr

080167cc <SX1276CheckRfFrequency>:
 80167cc:	2001      	movs	r0, #1
 80167ce:	4770      	bx	lr

080167d0 <SX1276SetRfTxPower>:
 80167d0:	b570      	push	{r4, r5, r6, lr}
 80167d2:	0005      	movs	r5, r0
 80167d4:	2009      	movs	r0, #9
 80167d6:	f7fe fd45 	bl	8015264 <SX1276Read>
 80167da:	0006      	movs	r6, r0
 80167dc:	204d      	movs	r0, #77	; 0x4d
 80167de:	f7fe fd41 	bl	8015264 <SX1276Read>
 80167e2:	227f      	movs	r2, #127	; 0x7f
 80167e4:	0004      	movs	r4, r0
 80167e6:	200e      	movs	r0, #14
 80167e8:	4032      	ands	r2, r6
 80167ea:	b2ee      	uxtb	r6, r5
 80167ec:	42b0      	cmp	r0, r6
 80167ee:	41b6      	sbcs	r6, r6
 80167f0:	4271      	negs	r1, r6
 80167f2:	01c9      	lsls	r1, r1, #7
 80167f4:	4311      	orrs	r1, r2
 80167f6:	2270      	movs	r2, #112	; 0x70
 80167f8:	4311      	orrs	r1, r2
 80167fa:	b249      	sxtb	r1, r1
 80167fc:	2900      	cmp	r1, #0
 80167fe:	da2d      	bge.n	801685c <SX1276SetRfTxPower+0x8c>
 8016800:	2307      	movs	r3, #7
 8016802:	2d11      	cmp	r5, #17
 8016804:	dd19      	ble.n	801683a <SX1276SetRfTxPower+0x6a>
 8016806:	431c      	orrs	r4, r3
 8016808:	b2e4      	uxtb	r4, r4
 801680a:	43e3      	mvns	r3, r4
 801680c:	075b      	lsls	r3, r3, #29
 801680e:	d118      	bne.n	8016842 <SX1276SetRfTxPower+0x72>
 8016810:	1c2a      	adds	r2, r5, #0
 8016812:	2d14      	cmp	r5, #20
 8016814:	dd00      	ble.n	8016818 <SX1276SetRfTxPower+0x48>
 8016816:	2214      	movs	r2, #20
 8016818:	b253      	sxtb	r3, r2
 801681a:	2b05      	cmp	r3, #5
 801681c:	da00      	bge.n	8016820 <SX1276SetRfTxPower+0x50>
 801681e:	2205      	movs	r2, #5
 8016820:	230f      	movs	r3, #15
 8016822:	3a05      	subs	r2, #5
 8016824:	4399      	bics	r1, r3
 8016826:	4311      	orrs	r1, r2
 8016828:	b2c9      	uxtb	r1, r1
 801682a:	2009      	movs	r0, #9
 801682c:	f7fe fcc7 	bl	80151be <SX1276Write>
 8016830:	0021      	movs	r1, r4
 8016832:	204d      	movs	r0, #77	; 0x4d
 8016834:	f7fe fcc3 	bl	80151be <SX1276Write>
 8016838:	bd70      	pop	{r4, r5, r6, pc}
 801683a:	439c      	bics	r4, r3
 801683c:	0023      	movs	r3, r4
 801683e:	2404      	movs	r4, #4
 8016840:	e7e1      	b.n	8016806 <SX1276SetRfTxPower+0x36>
 8016842:	1c2b      	adds	r3, r5, #0
 8016844:	2d11      	cmp	r5, #17
 8016846:	dd00      	ble.n	801684a <SX1276SetRfTxPower+0x7a>
 8016848:	2311      	movs	r3, #17
 801684a:	b25a      	sxtb	r2, r3
 801684c:	2a02      	cmp	r2, #2
 801684e:	da00      	bge.n	8016852 <SX1276SetRfTxPower+0x82>
 8016850:	2302      	movs	r3, #2
 8016852:	220f      	movs	r2, #15
 8016854:	3b02      	subs	r3, #2
 8016856:	4391      	bics	r1, r2
 8016858:	4319      	orrs	r1, r3
 801685a:	e7e5      	b.n	8016828 <SX1276SetRfTxPower+0x58>
 801685c:	1c29      	adds	r1, r5, #0
 801685e:	2d0e      	cmp	r5, #14
 8016860:	dd00      	ble.n	8016864 <SX1276SetRfTxPower+0x94>
 8016862:	1c01      	adds	r1, r0, #0
 8016864:	060b      	lsls	r3, r1, #24
 8016866:	d501      	bpl.n	801686c <SX1276SetRfTxPower+0x9c>
 8016868:	4b02      	ldr	r3, [pc, #8]	; (8016874 <SX1276SetRfTxPower+0xa4>)
 801686a:	7819      	ldrb	r1, [r3, #0]
 801686c:	1c4b      	adds	r3, r1, #1
 801686e:	2170      	movs	r1, #112	; 0x70
 8016870:	e7f2      	b.n	8016858 <SX1276SetRfTxPower+0x88>
 8016872:	46c0      	nop			; (mov r8, r8)
 8016874:	08018ac8 	.word	0x08018ac8

08016878 <SX1276IoInit>:
 8016878:	b530      	push	{r4, r5, lr}
 801687a:	b087      	sub	sp, #28
 801687c:	2214      	movs	r2, #20
 801687e:	2100      	movs	r1, #0
 8016880:	a801      	add	r0, sp, #4
 8016882:	f7e9 fcbd 	bl	8000200 <memset>
 8016886:	4815      	ldr	r0, [pc, #84]	; (80168dc <SX1276IoInit+0x64>)
 8016888:	f7fe fc46 	bl	8015118 <SX1276BoardInit>
 801688c:	4b14      	ldr	r3, [pc, #80]	; (80168e0 <SX1276IoInit+0x68>)
 801688e:	2401      	movs	r4, #1
 8016890:	9302      	str	r3, [sp, #8]
 8016892:	2303      	movs	r3, #3
 8016894:	4d13      	ldr	r5, [pc, #76]	; (80168e4 <SX1276IoInit+0x6c>)
 8016896:	aa01      	add	r2, sp, #4
 8016898:	0028      	movs	r0, r5
 801689a:	2110      	movs	r1, #16
 801689c:	9304      	str	r3, [sp, #16]
 801689e:	9403      	str	r4, [sp, #12]
 80168a0:	f7f3 fd3e 	bl	800a320 <HW_GPIO_Init>
 80168a4:	aa01      	add	r2, sp, #4
 80168a6:	0028      	movs	r0, r5
 80168a8:	2102      	movs	r1, #2
 80168aa:	f7f3 fd39 	bl	800a320 <HW_GPIO_Init>
 80168ae:	aa01      	add	r2, sp, #4
 80168b0:	0021      	movs	r1, r4
 80168b2:	0028      	movs	r0, r5
 80168b4:	f7f3 fd34 	bl	800a320 <HW_GPIO_Init>
 80168b8:	2180      	movs	r1, #128	; 0x80
 80168ba:	aa01      	add	r2, sp, #4
 80168bc:	0189      	lsls	r1, r1, #6
 80168be:	480a      	ldr	r0, [pc, #40]	; (80168e8 <SX1276IoInit+0x70>)
 80168c0:	f7f3 fd2e 	bl	800a320 <HW_GPIO_Init>
 80168c4:	2180      	movs	r1, #128	; 0x80
 80168c6:	20a0      	movs	r0, #160	; 0xa0
 80168c8:	2300      	movs	r3, #0
 80168ca:	aa01      	add	r2, sp, #4
 80168cc:	0149      	lsls	r1, r1, #5
 80168ce:	05c0      	lsls	r0, r0, #23
 80168d0:	9402      	str	r4, [sp, #8]
 80168d2:	9303      	str	r3, [sp, #12]
 80168d4:	f7f3 fd24 	bl	800a320 <HW_GPIO_Init>
 80168d8:	b007      	add	sp, #28
 80168da:	bd30      	pop	{r4, r5, pc}
 80168dc:	20000afc 	.word	0x20000afc
 80168e0:	10110000 	.word	0x10110000
 80168e4:	50000400 	.word	0x50000400
 80168e8:	50000800 	.word	0x50000800

080168ec <SX1276IoDeInit>:
 80168ec:	b510      	push	{r4, lr}
 80168ee:	b086      	sub	sp, #24
 80168f0:	4c0f      	ldr	r4, [pc, #60]	; (8016930 <SX1276IoDeInit+0x44>)
 80168f2:	2214      	movs	r2, #20
 80168f4:	2100      	movs	r1, #0
 80168f6:	a801      	add	r0, sp, #4
 80168f8:	f7e9 fc82 	bl	8000200 <memset>
 80168fc:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <SX1276IoDeInit+0x48>)
 80168fe:	aa01      	add	r2, sp, #4
 8016900:	0020      	movs	r0, r4
 8016902:	2110      	movs	r1, #16
 8016904:	9302      	str	r3, [sp, #8]
 8016906:	f7f3 fd0b 	bl	800a320 <HW_GPIO_Init>
 801690a:	aa01      	add	r2, sp, #4
 801690c:	0020      	movs	r0, r4
 801690e:	2102      	movs	r1, #2
 8016910:	f7f3 fd06 	bl	800a320 <HW_GPIO_Init>
 8016914:	aa01      	add	r2, sp, #4
 8016916:	0020      	movs	r0, r4
 8016918:	2101      	movs	r1, #1
 801691a:	f7f3 fd01 	bl	800a320 <HW_GPIO_Init>
 801691e:	2180      	movs	r1, #128	; 0x80
 8016920:	aa01      	add	r2, sp, #4
 8016922:	0189      	lsls	r1, r1, #6
 8016924:	4804      	ldr	r0, [pc, #16]	; (8016938 <SX1276IoDeInit+0x4c>)
 8016926:	f7f3 fcfb 	bl	800a320 <HW_GPIO_Init>
 801692a:	b006      	add	sp, #24
 801692c:	bd10      	pop	{r4, pc}
 801692e:	46c0      	nop			; (mov r8, r8)
 8016930:	50000400 	.word	0x50000400
 8016934:	10110000 	.word	0x10110000
 8016938:	50000800 	.word	0x50000800

0801693c <SX1276SetAntSwLowPower>:
 801693c:	b510      	push	{r4, lr}
 801693e:	2214      	movs	r2, #20
 8016940:	b086      	sub	sp, #24
 8016942:	2800      	cmp	r0, #0
 8016944:	d129      	bne.n	801699a <SX1276SetAntSwLowPower+0x5e>
 8016946:	0001      	movs	r1, r0
 8016948:	a801      	add	r0, sp, #4
 801694a:	f7e9 fc59 	bl	8000200 <memset>
 801694e:	2301      	movs	r3, #1
 8016950:	9302      	str	r3, [sp, #8]
 8016952:	3302      	adds	r3, #2
 8016954:	20a0      	movs	r0, #160	; 0xa0
 8016956:	aa01      	add	r2, sp, #4
 8016958:	2102      	movs	r1, #2
 801695a:	05c0      	lsls	r0, r0, #23
 801695c:	9304      	str	r3, [sp, #16]
 801695e:	f7f3 fcdf 	bl	800a320 <HW_GPIO_Init>
 8016962:	20a0      	movs	r0, #160	; 0xa0
 8016964:	2200      	movs	r2, #0
 8016966:	2102      	movs	r1, #2
 8016968:	05c0      	lsls	r0, r0, #23
 801696a:	f7f3 fd4b 	bl	800a404 <HW_GPIO_Write>
 801696e:	aa01      	add	r2, sp, #4
 8016970:	2102      	movs	r1, #2
 8016972:	480d      	ldr	r0, [pc, #52]	; (80169a8 <SX1276SetAntSwLowPower+0x6c>)
 8016974:	f7f3 fcd4 	bl	800a320 <HW_GPIO_Init>
 8016978:	2200      	movs	r2, #0
 801697a:	2102      	movs	r1, #2
 801697c:	480a      	ldr	r0, [pc, #40]	; (80169a8 <SX1276SetAntSwLowPower+0x6c>)
 801697e:	f7f3 fd41 	bl	800a404 <HW_GPIO_Write>
 8016982:	aa01      	add	r2, sp, #4
 8016984:	2104      	movs	r1, #4
 8016986:	4808      	ldr	r0, [pc, #32]	; (80169a8 <SX1276SetAntSwLowPower+0x6c>)
 8016988:	f7f3 fcca 	bl	800a320 <HW_GPIO_Init>
 801698c:	2200      	movs	r2, #0
 801698e:	2104      	movs	r1, #4
 8016990:	4805      	ldr	r0, [pc, #20]	; (80169a8 <SX1276SetAntSwLowPower+0x6c>)
 8016992:	f7f3 fd37 	bl	800a404 <HW_GPIO_Write>
 8016996:	b006      	add	sp, #24
 8016998:	bd10      	pop	{r4, pc}
 801699a:	2100      	movs	r1, #0
 801699c:	a801      	add	r0, sp, #4
 801699e:	f7e9 fc2f 	bl	8000200 <memset>
 80169a2:	2303      	movs	r3, #3
 80169a4:	9302      	str	r3, [sp, #8]
 80169a6:	e7d5      	b.n	8016954 <SX1276SetAntSwLowPower+0x18>
 80169a8:	50000800 	.word	0x50000800

080169ac <SX1276IoIrqInit>:
 80169ac:	b570      	push	{r4, r5, r6, lr}
 80169ae:	0004      	movs	r4, r0
 80169b0:	4d0d      	ldr	r5, [pc, #52]	; (80169e8 <SX1276IoIrqInit+0x3c>)
 80169b2:	6803      	ldr	r3, [r0, #0]
 80169b4:	2200      	movs	r2, #0
 80169b6:	0028      	movs	r0, r5
 80169b8:	2110      	movs	r1, #16
 80169ba:	f7f3 fcfd 	bl	800a3b8 <HW_GPIO_SetIrq>
 80169be:	0028      	movs	r0, r5
 80169c0:	6863      	ldr	r3, [r4, #4]
 80169c2:	2200      	movs	r2, #0
 80169c4:	2102      	movs	r1, #2
 80169c6:	f7f3 fcf7 	bl	800a3b8 <HW_GPIO_SetIrq>
 80169ca:	0028      	movs	r0, r5
 80169cc:	68a3      	ldr	r3, [r4, #8]
 80169ce:	2200      	movs	r2, #0
 80169d0:	2101      	movs	r1, #1
 80169d2:	f7f3 fcf1 	bl	800a3b8 <HW_GPIO_SetIrq>
 80169d6:	2180      	movs	r1, #128	; 0x80
 80169d8:	68e3      	ldr	r3, [r4, #12]
 80169da:	2200      	movs	r2, #0
 80169dc:	0189      	lsls	r1, r1, #6
 80169de:	4803      	ldr	r0, [pc, #12]	; (80169ec <SX1276IoIrqInit+0x40>)
 80169e0:	f7f3 fcea 	bl	800a3b8 <HW_GPIO_SetIrq>
 80169e4:	bd70      	pop	{r4, r5, r6, pc}
 80169e6:	46c0      	nop			; (mov r8, r8)
 80169e8:	50000400 	.word	0x50000400
 80169ec:	50000800 	.word	0x50000800

080169f0 <SX1276SetAntSw>:
 80169f0:	b570      	push	{r4, r5, r6, lr}
 80169f2:	0005      	movs	r5, r0
 80169f4:	2009      	movs	r0, #9
 80169f6:	f7fe fc35 	bl	8015264 <SX1276Read>
 80169fa:	4c0b      	ldr	r4, [pc, #44]	; (8016a28 <SX1276SetAntSw+0x38>)
 80169fc:	2d03      	cmp	r5, #3
 80169fe:	d10a      	bne.n	8016a16 <SX1276SetAntSw+0x26>
 8016a00:	2201      	movs	r2, #1
 8016a02:	2102      	movs	r1, #2
 8016a04:	0603      	lsls	r3, r0, #24
 8016a06:	d400      	bmi.n	8016a0a <SX1276SetAntSw+0x1a>
 8016a08:	2104      	movs	r1, #4
 8016a0a:	4808      	ldr	r0, [pc, #32]	; (8016a2c <SX1276SetAntSw+0x3c>)
 8016a0c:	f7f3 fcfa 	bl	800a404 <HW_GPIO_Write>
 8016a10:	2301      	movs	r3, #1
 8016a12:	7023      	strb	r3, [r4, #0]
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	20a0      	movs	r0, #160	; 0xa0
 8016a18:	2300      	movs	r3, #0
 8016a1a:	2201      	movs	r2, #1
 8016a1c:	2102      	movs	r1, #2
 8016a1e:	05c0      	lsls	r0, r0, #23
 8016a20:	7023      	strb	r3, [r4, #0]
 8016a22:	f7f3 fcef 	bl	800a404 <HW_GPIO_Write>
 8016a26:	e7f5      	b.n	8016a14 <SX1276SetAntSw+0x24>
 8016a28:	200022d4 	.word	0x200022d4
 8016a2c:	50000800 	.word	0x50000800

08016a30 <SX1276SetXO>:
 8016a30:	b510      	push	{r4, lr}
 8016a32:	0002      	movs	r2, r0
 8016a34:	2801      	cmp	r0, #1
 8016a36:	d109      	bne.n	8016a4c <SX1276SetXO+0x1c>
 8016a38:	2180      	movs	r1, #128	; 0x80
 8016a3a:	20a0      	movs	r0, #160	; 0xa0
 8016a3c:	0149      	lsls	r1, r1, #5
 8016a3e:	05c0      	lsls	r0, r0, #23
 8016a40:	f7f3 fce0 	bl	800a404 <HW_GPIO_Write>
 8016a44:	2005      	movs	r0, #5
 8016a46:	f7f5 f9fb 	bl	800be40 <HAL_Delay>
 8016a4a:	bd10      	pop	{r4, pc}
 8016a4c:	2180      	movs	r1, #128	; 0x80
 8016a4e:	20a0      	movs	r0, #160	; 0xa0
 8016a50:	2200      	movs	r2, #0
 8016a52:	0149      	lsls	r1, r1, #5
 8016a54:	05c0      	lsls	r0, r0, #23
 8016a56:	f7f3 fcd5 	bl	800a404 <HW_GPIO_Write>
 8016a5a:	e7f6      	b.n	8016a4a <SX1276SetXO+0x1a>

08016a5c <_init>:
 8016a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5e:	46c0      	nop			; (mov r8, r8)
 8016a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a62:	bc08      	pop	{r3}
 8016a64:	469e      	mov	lr, r3
 8016a66:	4770      	bx	lr

08016a68 <_fini>:
 8016a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a6a:	46c0      	nop			; (mov r8, r8)
 8016a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a6e:	bc08      	pop	{r3}
 8016a70:	469e      	mov	lr, r3
 8016a72:	4770      	bx	lr
